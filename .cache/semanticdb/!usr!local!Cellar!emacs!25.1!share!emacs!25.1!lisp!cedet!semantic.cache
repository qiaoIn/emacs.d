;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cedet" include nil nil [1479 1495])
            ("cl-lib" include nil nil [1496 1513])
            ("eieio" include nil nil [1514 1530])
            ("cl-generic" include nil nil [1531 1552])
            ("eieio-speedbar" include nil nil [1553 1578])
            ("ede/source" include nil nil [1579 1600])
            ("ede/base" include nil nil [1601 1620])
            ("ede/auto" include nil nil [1621 1640])
            ("ede/detect" include nil nil [1641 1662])
            ("load" code nil nil [1684 1720])
            ("declare-function" code nil nil [1723 1773])
            ("declare-function" code nil nil [1774 1821])
            ("declare-function" code nil nil [1822 1883])
            ("declare-function" code nil nil [1884 1954])
            ("declare-function" code nil nil [1955 2009])
            ("declare-function" code nil nil [2010 2074])
            ("declare-function" code nil nil [2075 2139])
            ("declare-function" code nil nil [2140 2182])
            ("declare-function" code nil nil [2183 2234])
            ("declare-function" code nil nil [2235 2282])
            ("declare-function" code nil nil [2283 2348])
            ("ede-version" variable
               (:constant-flag t
                :default-value "2.0")
                nil [2350 2416])
            ("ede-version" function (:user-visible-flag t) nil [2428 2545])
            ("ede" customgroup (:user-visible-flag t) nil [2547 2637])
            ("ede-auto-add-method" variable (:default-value (quote ask)) nil [2639 3392])
            ("ede-debug-program-function" variable (:default-value (quote gdb)) nil [3394 3519])
            ("ede-project-directories" variable nil nil [3563 4384])
            ("ede-directory-safe-p" function (:arguments ("dir")) nil [4386 5050])
            ("ede-projects" variable nil nil [5080 5166])
            ("ede-object-root-project" variable nil nil [5168 5347])
            ("make-variable-buffer-local" code nil nil [5348 5401])
            ("ede-object-project" variable nil nil [5403 5581])
            ("make-variable-buffer-local" code nil nil [5582 5630])
            ("ede-object" variable nil nil [5632 5766])
            ("make-variable-buffer-local" code nil nil [5767 5807])
            ("ede-selected-object" variable nil nil [5809 5959])
            ("ede-constructing" variable nil nil [5961 6145])
            ("ede-deep-rescan" variable nil nil [6147 6310])
            ("ede-singular-object" function (:arguments ("prompt")) nil [6331 6518])
            ("ede-choose-object" function (:arguments ("prompt" "list-o-o")) nil [6520 6833])
            ("ede-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (pmap (make-sparse-keymap))) (define-key pmap "e" (quote ede-edit-file-target)) (define-key pmap "a" (quote ede-add-file)) (define-key pmap "d" (quote ede-remove-file)) (define-key pmap "t" (quote ede-new-target)) (define-key pmap "g" (quote ede-rescan-toplevel)) (define-key pmap "s" (quote ede-speedbar)) (define-key pmap "f" (quote ede-find-file)) (define-key pmap "C" (quote ede-compile-project)) (define-key pmap "c" (quote ede-compile-target)) (define-key pmap "" (quote ede-compile-selected)) (define-key pmap "D" (quote ede-debug-target)) (define-key pmap "R" (quote ede-run-target)) (define-key map "." pmap) map)) nil [6857 7594])
            ("global-ede-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [menu-bar cedet-menu] (cons "Development" cedet-menu-map)) map)) nil [7596 7792])
            ("define-key" code nil nil [7839 7988])
            ("define-key" code nil nil [7989 8130])
            ("define-key" code nil nil [8131 8230])
            ("define-key" code nil nil [8231 8372])
            ("define-key" code nil nil [8373 8541])
            ("define-key" code nil nil [8542 8714])
            ("define-key" code nil nil [8715 8911])
            ("ede-buffer-belongs-to-target-p" function nil nil [8913 9137])
            ("ede-buffer-belongs-to-project-p" function nil nil [9139 9354])
            ("ede-menu-obj-of-class-p" function (:arguments ("class")) nil [9356 9595])
            ("ede-build-forms-menu" function (:arguments ("_menu-def")) nil [9597 11045])
            ("ede-target-forms-menu" function (:arguments ("_menu-def")) nil [11047 11701])
            ("ede-project-forms-menu" function (:arguments ("_menu-def")) nil [11703 12558])
            ("ede-configuration-forms-menu" function (:arguments ("_menu-def")) nil [12560 13281])
            ("ede-project-configurations-set" function
               (:user-visible-flag t
                :arguments ("newconfig"))
                nil [13283 13882])
            ("ede-customize-forms-menu" function (:arguments ("_menu-def")) nil [13884 14602])
            ("ede-apply-object-keymap" function (:arguments ("_default")) nil [14605 15328])
            ("cl-defmethod" code nil nil [15372 15758])
            ("cl-defmethod" code nil nil [15760 16133])
            ("ede-apply-target-options" function nil nil [16162 16413])
            ("ede-turn-on-hook" function nil nil [16415 16805])
            ("define-minor-mode" code nil nil [16807 17548])
            ("ede-initialize-state-current-buffer" function nil nil [17550 19663])
            ("ede-reset-all-buffers" function (:user-visible-flag t) nil [19665 20086])
            ("define-minor-mode" code nil nil [20103 21685])
            ("ede-ignored-file-alist" variable (:default-value (quote ("\\.cvsignore$" "\\.#" "~$"))) nil [21687 21829])
            ("ede-ignore-file" function (:arguments ("filename")) nil [21831 22064])
            ("ede-auto-add-to-target" function nil nil [22066 23607])
            ("ede" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [23649 25300])
            ("ede-check-project-query-fcn" variable (:default-value (quote y-or-n-p)) nil [25302 25487])
            ("ede-check-project-directory" function (:arguments ("dir")) nil [25489 26606])
            ("ede-new" function
               (:user-visible-flag t
                :arguments ("type" "name"))
                nil [26608 29500])
            ("cl-defmethod" code nil nil [29502 29669])
            ("ede-invoke-method" function (:arguments ("sym" "args")) nil [29671 30076])
            ("ede-rescan-toplevel" function (:user-visible-flag t) nil [30078 30419])
            ("ede-new-target" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [30421 30992])
            ("ede-new-target-custom" function (:user-visible-flag t) nil [30994 31157])
            ("ede-delete-target" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [31159 31807])
            ("ede-add-file" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [31809 32634])
            ("ede-remove-file" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [32636 33298])
            ("ede-edit-file-target" function (:user-visible-flag t) nil [33300 33464])
            ("ede-compile-project" function (:user-visible-flag t) nil [33499 33840])
            ("ede-compile-selected" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [33842 34071])
            ("ede-compile-target" function (:user-visible-flag t) nil [34073 34216])
            ("ede-debug-target" function (:user-visible-flag t) nil [34218 34355])
            ("ede-run-target" function (:user-visible-flag t) nil [34357 34488])
            ("ede-make-dist" function (:user-visible-flag t) nil [34490 34663])
            ("cl-defmethod" code nil nil [35055 35308])
            ("cl-defmethod" code nil nil [35310 35642])
            ("cl-defmethod" code nil nil [35644 35857])
            ("cl-defmethod" code nil nil [35859 36071])
            ("cl-defmethod" code nil nil [36073 36282])
            ("cl-defmethod" code nil nil [36284 36440])
            ("cl-defmethod" code nil nil [36442 36648])
            ("cl-defmethod" code nil nil [36650 36858])
            ("cl-defmethod" code nil nil [36860 37036])
            ("cl-defmethod" code nil nil [37038 37286])
            ("cl-defmethod" code nil nil [37288 37535])
            ("cl-defmethod" code nil nil [37537 37714])
            ("cl-defmethod" code nil nil [37716 37875])
            ("cl-defmethod" code nil nil [37877 38061])
            ("cl-defmethod" code nil nil [38063 38263])
            ("cl-defmethod" code nil nil [38265 38429])
            ("ede-ecb-project-paths" function nil nil [38431 38708])
            ("ede-add-project-to-global-list" function (:arguments ("proj")) nil [38742 39229])
            ("ede-delete-project-from-global-list" function (:arguments ("proj")) nil [39231 39388])
            ("ede-flush-deleted-projects" function (:user-visible-flag t) nil [39390 39750])
            ("ede--disable-inode" variable nil nil [39752 39779])
            ("ede-global-list-sanity-check" function (:user-visible-flag t) nil [39819 40497])
            ("ede-load-project-file" function (:arguments ("dir" "detectin" "rootreturn")) nil [40499 42320])
            ("ede-parent-project" function (:arguments ("obj")) nil [42433 43512])
            ("ede-current-project" function (:arguments ("dir")) nil [43514 43995])
            ("ede-buffer-object" function (:arguments ("buffer" "projsym")) nil [43997 45258])
            ("cl-defmethod" code nil nil [45260 45673])
            ("ede-target-parent" function (:arguments ("target")) nil [45675 46125])
            ("cl-defmethod" code nil nil [46127 46930])
            ("cl-defmethod" code nil nil [46932 47174])
            ("cl-defmethod" code nil nil [47176 47310])
            ("cl-defmethod" code nil nil [47312 47584])
            ("ede-project-buffers" function (:arguments ("project")) nil [47611 47992])
            ("ede-target-buffers" function (:arguments ("target")) nil [47994 48333])
            ("ede-buffers" function nil nil [48335 48593])
            ("ede-map-buffers" function (:arguments ("proc")) nil [48595 48706])
            ("cl-defmethod" code nil nil [48708 48876])
            ("cl-defmethod" code nil nil [48878 49043])
            ("cl-defmethod" code nil nil [49071 49319])
            ("cl-defmethod" code nil nil [49321 49682])
            ("cl-defmethod" code nil nil [49782 49924])
            ("cl-defmethod" code nil nil [49926 50146])
            ("cl-defmethod" code nil nil [50310 50430])
            ("cl-defmethod" code nil nil [50432 50551])
            ("cl-defmethod" code nil nil [50553 50777])
            ("ede-apply-preprocessor-map" function nil nil [50788 51612])
            ("cl-defmethod" code nil nil [51614 51734])
            ("cl-defmethod" code nil nil [51736 51847])
            ("cl-defmethod" code nil nil [51849 51959])
            ("cl-defmethod" code nil nil [51969 52115])
            ("ede-set" function
               (:user-visible-flag t
                :arguments ("variable" "value" "proj"))
                nil [52148 52814])
            ("ede-apply-project-local-variables" function (:arguments ("buffer")) nil [52816 53264])
            ("ede-make-project-local-variable" function (:arguments ("variable" "project")) nil [53266 53588])
            ("ede-set-project-local-variable" function (:arguments ("variable" "value" "project")) nil [53590 54112])
            ("cl-defmethod" code nil nil [54114 54435])
            ("cl-defmethod" code nil nil [54437 54552])
            ("project-try-ede" function (:arguments ("dir")) nil [54587 54848])
            ("cl-defmethod" code nil nil [54850 54948])
            ("add-hook" code nil nil [54950 55002])
            ("ede" package nil nil [55004 55018])
            ("ede/files" include nil nil [55068 55088])
            ("if" code nil nil [55174 55287]))          
      :file "ede.el.gz"
      :pointmax 55310
      :fsize 15409
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1720 . 1721) (symbol 1665 . 1681) (open-paren 1664 . 1665)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1786 1799])
            ("find-func" include nil nil [1802 1822])
            ("mode-local-map-file-buffers" function (:arguments ("function" "predicate" "buffers")) nil [2174 2848])
            ("get-mode-local-parent" function (:arguments ("mode")) nil [2850 3049])
            ("mode-local-equivalent-mode-p" function (:arguments ("mode")) nil [3185 3429])
            ("mode-local-map-mode-buffers" function (:arguments ("function" "modes")) nil [3431 3901])
            ("mode-local-init-hook" variable nil nil [3926 4061])
            ("mode-local-changed-mode-buffers" variable nil nil [4063 4168])
            ("mode-local--init-mode" variable nil nil [4170 4204])
            ("mode-local-initialized-p" function nil nil [4206 4466])
            ("mode-local-post-major-mode-change" function nil nil [4468 5074])
            ("mode-local-on-major-mode-change" function nil nil [5076 5306])
            ("set-mode-local-parent" function (:arguments ("mode" "parent")) nil [5329 5824])
            ("define-child-mode" function (:arguments ("mode" "parent" "docstring")) nil [5826 6110])
            ("mode-local-use-bindings-p" function (:arguments ("this-mode" "desired-mode")) nil [6112 6404])
            ("mode-local-symbol-table" variable nil nil [6433 6640])
            ("make-variable-buffer-local" code nil nil [6641 6694])
            ("mode-local-active-mode" variable nil nil [6696 6776])
            ("new-mode-local-bindings" function nil nil [6778 6887])
            ("mode-local-bind" function (:arguments ("bindings" "plist" "mode")) nil [6889 10002])
            ("mode-local-symbol" function (:arguments ("symbol" "mode")) nil [10004 10888])
            ("mode-local-symbol-value" function (:arguments ("symbol" "mode" "property")) nil [10890 11464])
            ("activate-mode-local-bindings" function (:arguments ("mode")) nil [11495 13239])
            ("deactivate-mode-local-bindings" function (:arguments ("mode")) nil [13241 13917])
            ("with-mode-local-symbol" function (:arguments ("mode" "body")) nil [13919 15315])
            ("put" code nil nil [15316 15369])
            ("with-mode-local" function (:arguments ("mode" "body")) nil [15371 15754])
            ("put" code nil nil [15755 15801])
            ("mode-local-value" function (:arguments ("mode" "sym")) nil [15804 16000])
            ("setq-mode-local" function (:arguments ("mode" "args")) nil [16002 17167])
            ("defvar-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [17169 17456])
            ("put" code nil nil [17457 17510])
            ("defconst-mode-local" function (:arguments ("mode" "sym" "val" "docstring")) nil [17512 17899])
            ("put" code nil nil [17900 17955])
            ("make-obsolete-overload" function (:arguments ("old" "new" "when")) nil [17986 18309])
            ("overload-obsoleted-by" function (:arguments ("overload")) nil [18311 18489])
            ("overload-that-obsolete" function (:arguments ("overload")) nil [18491 18691])
            ("fetch-overload" function (:arguments ("overload")) nil [18693 19182])
            ("mode-local--override" function (:arguments ("name" "args" "body")) nil [19184 19862])
            ("mode-local--expand-overrides" function (:arguments ("name" "args" "body")) nil [19864 20763])
            ("mode-local--overload-body" function (:arguments ("name" "args" "body")) nil [20765 21158])
            ("put" code nil nil [21175 21228])
            ("define-overloadable-function" function (:arguments ("name" "args" "docstring" "body")) nil [21230 22540])
            ("put" code nil nil [22541 22590])
            ("defalias" code nil nil [22592 22649])
            ("function-overload-p" function (:arguments ("symbol")) nil [22651 22824])
            ("define-mode-local-override" function (:arguments ("name" "mode" "args" "docstring" "body")) nil [22826 23782])
            ("mode-local-read-function" function (:arguments ("prompt" "initial" "hist" "default")) nil [23808 24094])
            ("overload-docstring-extension" function (:arguments ("overload")) nil [24117 24765])
            ("mode-local-augment-function-help" function (:arguments ("symbol")) nil [24767 25338])
            ("describe-function-orig-buffer" variable nil nil [25419 25457])
            ("describe-mode-local-overload" function (:arguments ("symbol")) nil [25459 26583])
            ("add-hook" code nil nil [26585 26663])
            ("declare-function" code nil nil [26665 26718])
            ("xref-mode-local--override-present" function (:arguments ("sym" "xrefs")) nil [26720 26990])
            ("xref-mode-local-overload" function (:arguments ("symbol")) nil [26992 29228])
            ("add-hook" code nil nil [29230 29297])
            ("xref-mode-local-find-overloadable-regexp" variable
               (:constant-flag t
                :default-value "(\\(\\(define-overloadable-function\\)\\|\\(define-overload\\)\\) +%s")
                nil [29299 29535])
            ("xref-mode-local-find-override" function (:arguments ("meta-name")) nil [29537 30009])
            ("add-to-list" code nil nil [30011 30127])
            ("add-to-list" code nil nil [30128 30236])
            ("mode-local-print-binding" function (:arguments ("symbol")) nil [30271 30682])
            ("mode-local-print-bindings" function (:arguments ("table")) nil [30684 31913])
            ("mode-local-describe-bindings-2" function (:arguments ("buffer-or-mode")) nil [31915 32851])
            ("mode-local-describe-bindings-1" function (:arguments ("buffer-or-mode" "interactive-p")) nil [32853 33770])
            ("describe-mode-local-bindings" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [33772 34004])
            ("describe-mode-local-bindings-in-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [34006 34393])
            ("mode-local-setup-edebug-specs" function nil nil [34418 35025])
            ("add-hook" code nil nil [35027 35087])
            ("add-hook" code nil nil [35089 35150])
            ("add-hook" code nil nil [35151 35218])
            ("mode-local" package nil nil [35220 35241]))          
      :file "mode-local.el.gz"
      :pointmax 35271
      :fsize 9579
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1799 . 1800) (symbol 1768 . 1785) (open-paren 1767 . 1768)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cedet" include nil nil [1379 1395])
            ("semantic/tag" include nil nil [1396 1419])
            ("semantic/lex" include nil nil [1420 1443])
            ("semantic-version" variable (:default-value "2.2") nil [1445 1509])
            ("declare-function" code nil nil [1511 1556])
            ("declare-function" code nil nil [1557 1628])
            ("semantic-require-version" function (:arguments ("major" "minor" "beta")) nil [1630 2208])
            ("semantic" customgroup (:user-visible-flag t) nil [2210 2292])
            ("semantic-faces" customgroup (:user-visible-flag t) nil [2294 2385])
            ("semantic/fw" include nil nil [2387 2409])
            ("semantic--parse-table" variable nil nil [2460 2655])
            ("make-variable-buffer-local" code nil nil [2656 2707])
            ("semantic-varalias-obsolete" code nil nil [2708 2805])
            ("semantic-symbol->name-assoc-list" variable (:default-value (quote ((type . "Types") (variable . "Variables") (function . "Functions") (include . "Dependencies") (package . "Provides")))) nil [2807 3346])
            ("make-variable-buffer-local" code nil nil [3347 3409])
            ("semantic-symbol->name-assoc-list-for-type-parts" variable nil nil [3411 3845])
            ("make-variable-buffer-local" code nil nil [3846 3923])
            ("semantic-case-fold" variable nil nil [3925 4003])
            ("make-variable-buffer-local" code nil nil [4004 4052])
            ("semantic-expand-nonterminal" variable nil nil [4054 4546])
            ("make-variable-buffer-local" code nil nil [4547 4604])
            ("semantic--buffer-cache" variable nil nil [4606 5019])
            ("make-variable-buffer-local" code nil nil [5020 5072])
            ("semantic-varalias-obsolete" code nil nil [5073 5171])
            ("semantic-unmatched-syntax-cache" variable nil nil [5173 5263])
            ("make-variable-buffer-local" code nil nil [5264 5325])
            ("semantic-unmatched-syntax-cache-check" variable nil nil [5327 5484])
            ("make-variable-buffer-local" code nil nil [5485 5552])
            ("semantic-edits-are-safe" variable nil nil [5554 5904])
            ("semantic-unmatched-syntax-hook" variable nil nil [5906 6531])
            ("semantic--before-fetch-tags-hook" variable nil nil [6533 6831])
            ("semantic-varalias-obsolete" code nil nil [6832 6950])
            ("semantic-after-toplevel-bovinate-hook" variable nil nil [6952 7311])
            ("make-obsolete-variable" code nil nil [7312 7386])
            ("semantic-after-toplevel-cache-change-hook" variable nil nil [7388 7828])
            ("semantic-before-toplevel-cache-flush-hook" variable nil nil [7830 8180])
            ("semantic-dump-parse" variable nil nil [8182 8297])
            ("semantic-parser-name" variable (:default-value "LL") nil [8299 8393])
            ("make-variable-buffer-local" code nil nil [8394 8444])
            ("semantic--completion-cache" variable nil nil [8446 8543])
            ("make-variable-buffer-local" code nil nil [8544 8600])
            ("semantic-parse-tree-state" variable (:default-value (quote needs-rebuild)) nil [8642 8728])
            ("make-variable-buffer-local" code nil nil [8729 8784])
            ("semantic-parse-tree-unparseable" function nil nil [8786 9069])
            ("semantic-parse-tree-unparseable-p" function nil nil [9071 9235])
            ("semantic-parse-tree-set-needs-update" function nil nil [9237 9458])
            ("semantic-parse-tree-needs-update-p" function nil nil [9460 9622])
            ("semantic-parse-tree-set-needs-rebuild" function nil nil [9624 9847])
            ("semantic-parse-tree-needs-rebuild-p" function nil nil [9849 10013])
            ("semantic-parse-tree-set-up-to-date" function nil nil [10015 10159])
            ("semantic-parse-tree-up-to-date-p" function nil nil [10161 10303])
            ("semantic-inhibit-functions" variable nil nil [10340 10581])
            ("semantic-new-buffer-setup-functions" variable (:default-value (quote ((c-mode . semantic-default-c-setup) (c++-mode . semantic-default-c-setup) (html-mode . semantic-default-html-setup) (java-mode . wisent-java-default-setup) (js-mode . wisent-javascript-setup-parser) (python-mode . wisent-python-default-setup) (scheme-mode . semantic-default-scheme-setup) (srecode-template-mode . srecode-template-setup-parser) (texinfo-mode . semantic-default-texi-setup) (makefile-automake-mode . semantic-default-make-setup) (makefile-gmake-mode . semantic-default-make-setup) (makefile-makepp-mode . semantic-default-make-setup) (makefile-bsdmake-mode . semantic-default-make-setup) (makefile-imake-mode . semantic-default-make-setup) (makefile-mode . semantic-default-make-setup)))) nil [10583 11814])
            ("semantic-init-hook" variable nil nil [11816 11911])
            ("semantic-init-mode-hook" variable nil nil [11913 12013])
            ("make-variable-buffer-local" code nil nil [12014 12067])
            ("semantic-init-db-hook" variable nil nil [12069 12339])
            ("semantic-varalias-obsolete" code nil nil [12341 12424])
            ("semantic-varalias-obsolete" code nil nil [12425 12518])
            ("semantic-varalias-obsolete" code nil nil [12519 12608])
            ("semantic-error-if-unparsed" function nil nil [12610 12807])
            ("semantic--umatched-syntax-needs-refresh-p" function nil nil [12809 13094])
            ("semantic-new-buffer-fcn" function nil nil [13096 14720])
            ("semantic-fetch-tags-fast" function nil nil [14722 14966])
            ("condition-case" code nil nil [15014 15060])
            ("semantic-edebug" variable nil nil [15063 15202])
            ("semantic-elapsed-time" function (:arguments ("start" "end")) nil [15204 15395])
            ("bovinate" function
               (:user-visible-flag t
                :arguments ("clear"))
                nil [15397 16153])
            ("semantic-parse-stream" function
               (:overloadable t
                :arguments ("stream" "nonterminal"))
                nil [16262 16848])
            ("semantic-parse-changes" function (:overloadable t) nil [16850 17097])
            ("semantic-parse-region" function
               (:overloadable t
                :arguments ("start" "end" "nonterminal" "depth" "returnonerror"))
                nil [17099 17929])
            ("semantic-parse-region-default" function (:arguments ("start" "end" "nonterminal" "depth" "returnonerror")) nil [17931 18983])
            ("semantic-set-unmatched-syntax-cache" function (:arguments ("unmatched-syntax")) nil [19011 19558])
            ("semantic-clear-unmatched-syntax-cache" function nil nil [19560 19749])
            ("semantic-unmatched-syntax-tokens" function nil nil [19751 20374])
            ("semantic-clear-toplevel-cache" function (:user-visible-flag t) nil [20376 21390])
            ("semantic-bovinate-nonterminal-check-obarray" variable nil nil [21392 21444])
            ("semantic--set-buffer-cache" function (:arguments ("tagtable")) nil [21446 22337])
            ("semantic-working-type" variable (:default-value (quote percent)) nil [22339 22541])
            ("semantic-varalias-obsolete" code nil nil [22542 22641])
            ("semantic-minimum-working-buffer-size" variable (:default-value (* 1024 5)) nil [22643 22882])
            ("semantic-parser-working-message" function (:arguments ("arg")) nil [22884 23199])
            ("semantic-parser-warnings" variable nil nil [23421 23454])
            ("semantic-fetch-tags" function nil nil [23456 26584])
            ("semantic-refresh-tags-safe" function nil nil [26586 27895])
            ("semantic-bovinate-toplevel" function (:arguments ("ignored")) nil [27897 28012])
            ("make-obsolete" code nil nil [28013 28084])
            ("semantic-fetch-available-tags" function nil nil [28345 28785])
            ("semantic-repeat-parse-whole-stream" function (:arguments ("stream" "nonterm" "returnonerror")) nil [29058 31281])
            ("semantic-parser-warnings" variable nil nil [31557 31653])
            ("make-variable-buffer-local" code nil nil [31654 31708])
            ("semantic-clear-parser-warnings" function nil nil [31710 31852])
            ("semantic-push-parser-warning" function (:arguments ("warning" "start" "end")) nil [31854 32077])
            ("semantic-dump-parser-warnings" function (:user-visible-flag t) nil [32079 32398])
            ("semantic-bovinate-region-until-error" function (:arguments ("start" "end" "nonterm" "depth")) nil [32590 33199])
            ("make-obsolete" code nil nil [33200 33298])
            ("semantic-bovinate-from-nonterminal" function (:arguments ("start" "end" "nonterm" "depth" "length")) nil [33300 33845])
            ("semantic-bovinate-from-nonterminal-full" function (:arguments ("start" "end" "nonterm" "depth")) nil [33847 34423])
            ("make-obsolete" code nil nil [34424 34525])
            ("semantic-force-refresh" function (:user-visible-flag t) nil [34547 34800])
            ("semantic-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map ",j" (quote semantic-complete-jump-local)) (define-key map ",J" (quote semantic-complete-jump)) (define-key map ",m" (quote semantic-complete-jump-local-members)) (define-key map ",g" (quote semantic-symref-symbol)) (define-key map ",G" (quote semantic-symref)) (define-key map ",p" (quote senator-previous-tag)) (define-key map ",n" (quote senator-next-tag)) (define-key map ",u" (quote senator-go-to-up-reference)) (define-key map ", " (quote semantic-complete-analyze-inline)) (define-key map "," (quote senator-kill-tag)) (define-key map ",\367" (quote senator-copy-tag)) (define-key map "," (quote senator-yank-tag)) (define-key map ",r" (quote senator-copy-tag-to-register)) (define-key map ",," (quote semantic-force-refresh)) (define-key map [3 44 up] (quote senator-transpose-tags-up)) (define-key map [3 44 down] (quote senator-transpose-tags-down)) (define-key map ",l" (quote semantic-analyze-possible-completions)) (define-key map [menu-bar cedet-menu] (list (quote menu-item) "Development" cedet-menu-map :enable (quote (not (and menu-bar-mode (bound-and-true-p global-ede-mode)))))) map)) nil [34802 36416])
            ("let" code nil nil [36467 42954])
            ("semantic-load-system-cache-loaded" variable nil nil [43107 43269])
            ("semantic-submode-list" variable
               (:constant-flag t
                :default-value (quote (global-semantic-highlight-func-mode global-semantic-decoration-mode global-semantic-stickyfunc-mode global-semantic-idle-completions-mode global-semantic-idle-scheduler-mode global-semanticdb-minor-mode global-semantic-idle-summary-mode global-semantic-mru-bookmark-mode global-cedet-m3-minor-mode global-semantic-idle-local-symbol-highlight-mode global-semantic-highlight-edits-mode global-semantic-show-unmatched-syntax-mode global-semantic-show-parser-state-mode)))
                nil [43271 43881])
            ("semantic-default-submodes" variable (:default-value (quote (global-semantic-idle-scheduler-mode global-semanticdb-minor-mode))) nil [43898 45551])
            ("define-minor-mode" code nil nil [45568 48724])
            ("semantic-analyze-completion-at-point-function" function nil nil [48760 49411])
            ("semantic-analyze-notc-completion-at-point-function" function nil nil [49413 50062])
            ("semantic-analyze-nolongprefix-completion-at-point-function" function nil nil [50064 50788])
            ("global-semantic-idle-completions-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [50853 51067])
            ("semantic-idle-completions-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [51069 51479])
            ("global-semantic-idle-summary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [51481 51687])
            ("semantic-idle-summary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [51689 52204])
            ("global-semantic-idle-local-symbol-highlight-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [52206 52494])
            ("srecode-template-setup-parser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [52496 52624])
            ("semantic" package nil nil [52626 52645])
            ("semantic/util" include nil nil [52747 52771]))          
      :file "semantic.el.gz"
      :pointmax 52828
      :fsize 13966
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 15060 . 15061) (symbol 14994 . 15011) (open-paren 14993 . 14994))))
  :file "!usr!local!Cellar!emacs!25.1!share!emacs!25.1!lisp!cedet!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
