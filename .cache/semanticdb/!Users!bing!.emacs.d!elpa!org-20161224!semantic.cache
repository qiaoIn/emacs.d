;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [3190 3207])
            ("org-macs" include nil nil [3208 3227])
            ("org-compat" include nil nil [3228 3249])
            ("org-M-RET-may-split-line" variable nil nil [3251 3284])
            ("org-auto-align-tags" variable nil nil [3285 3313])
            ("org-blank-before-new-entry" variable nil nil [3314 3349])
            ("org-clock-string" variable nil nil [3350 3375])
            ("org-closed-string" variable nil nil [3376 3402])
            ("org-deadline-string" variable nil nil [3403 3431])
            ("org-description-max-indent" variable nil nil [3432 3467])
            ("org-done-keywords" variable nil nil [3468 3494])
            ("org-drawer-regexp" variable nil nil [3495 3521])
            ("org-element-all-objects" variable nil nil [3522 3554])
            ("org-inhibit-startup" variable nil nil [3555 3583])
            ("org-odd-levels-only" variable nil nil [3584 3612])
            ("org-outline-regexp-bol" variable nil nil [3613 3644])
            ("org-scheduled-string" variable nil nil [3645 3674])
            ("org-todo-line-regexp" variable nil nil [3675 3704])
            ("org-ts-regexp" variable nil nil [3705 3727])
            ("org-ts-regexp-both" variable nil nil [3728 3755])
            ("declare-function" code nil nil [3757 3823])
            ("declare-function" code nil nil [3824 3893])
            ("declare-function" code nil nil [3894 3948])
            ("declare-function" code nil nil [3949 4007])
            ("declare-function" code nil nil [4008 4053])
            ("declare-function" code nil nil [4054 4110])
            ("declare-function" code nil nil [4111 4183])
            ("declare-function" code nil nil [4184 4250])
            ("declare-function" code nil nil [4251 4337])
            ("declare-function" code nil nil [4338 4411])
            ("declare-function" code nil nil [4412 4535])
            ("declare-function" code nil nil [4536 4601])
            ("declare-function" code nil nil [4602 4700])
            ("declare-function" code nil nil [4701 4773])
            ("declare-function" code nil nil [4774 4860])
            ("declare-function" code nil nil [4861 4927])
            ("declare-function" code nil nil [4928 4987])
            ("declare-function" code nil nil [4988 5049])
            ("declare-function" code nil nil [5050 5137])
            ("declare-function" code nil nil [5138 5202])
            ("declare-function" code nil nil [5203 5275])
            ("declare-function" code nil nil [5276 5329])
            ("declare-function" code nil nil [5330 5423])
            ("declare-function" code nil nil [5424 5503])
            ("declare-function" code nil nil [5504 5594])
            ("declare-function" code nil nil [5595 5646])
            ("declare-function" code nil nil [5647 5708])
            ("declare-function" code nil nil [5709 5755])
            ("declare-function" code nil nil [5756 5803])
            ("declare-function" code nil nil [5804 5873])
            ("declare-function" code nil nil [5874 5942])
            ("declare-function" code nil nil [5943 6005])
            ("declare-function" code nil nil [6006 6069])
            ("declare-function" code nil nil [6070 6138])
            ("declare-function" code nil nil [6139 6186])
            ("declare-function" code nil nil [6187 6236])
            ("declare-function" code nil nil [6237 6282])
            ("declare-function" code nil nil [6283 6336])
            ("declare-function" code nil nil [6337 6383])
            ("declare-function" code nil nil [6384 6450])
            ("declare-function" code nil nil [6451 6495])
            ("declare-function" code nil nil [6496 6550])
            ("declare-function" code nil nil [6551 6606])
            ("declare-function" code nil nil [6607 6665])
            ("declare-function" code nil nil [6666 6727])
            ("declare-function" code nil nil [6728 6785])
            ("declare-function" code nil nil [6786 6830])
            ("declare-function" code nil nil [6831 6894])
            ("declare-function" code nil nil [6895 6959])
            ("declare-function" code nil nil [6960 7012])
            ("declare-function" code nil nil [7013 7069])
            ("org-plain-lists" customgroup (:user-visible-flag t) nil [7103 7230])
            ("org-cycle-include-plain-lists" variable (:default-value t) nil [7232 8246])
            ("org-list-demote-modify-bullet" variable nil nil [8248 9188])
            ("org-plain-list-ordered-item-terminator" variable (:default-value t) nil [9190 9850])
            ("org-list-allow-alphabetical" variable nil nil [9852 10512])
            ("org-list-two-spaces-after-bullet-regexp" variable nil nil [10514 11043])
            ("org-list-automatic-rules" variable (:default-value (quote ((checkbox . t) (indent . t)))) nil [11045 12120])
            ("org-list-use-circular-motion" variable nil nil [12122 12568])
            ("org-checkbox-statistics-hook" variable nil nil [12570 12860])
            ("org-checkbox-hierarchical-statistics" variable (:default-value t) nil [12862 13199])
            ("org-list-description-max-indent" variable (:default-value 20) nil [13201 13442])
            ("org-list-indent-offset" variable nil nil [13444 13698])
            ("org-list-radio-list-templates" variable (:default-value (quote ((latex-mode "% BEGIN RECEIVE ORGLST %n
% END RECEIVE ORGLST %n
\\begin{comment}
#+ORGLST: SEND %n org-list-to-latex
-
\\end{comment}
") (texinfo-mode "@c BEGIN RECEIVE ORGLST %n
@c END RECEIVE ORGLST %n
@ignore
#+ORGLST: SEND %n org-list-to-texinfo
-
@end ignore
") (html-mode "<!-- BEGIN RECEIVE ORGLST %n -->
<!-- END RECEIVE ORGLST %n -->
<!--
#+ORGLST: SEND %n org-list-to-html
-
-->
")))) nil [13700 14422])
            ("org-list-forbidden-blocks" variable (:default-value (quote ("example" "verse" "src" "export"))) nil [14424 14572])
            ("org-list-export-context" variable (:default-value (quote (block inlinetask))) nil [14574 14836])
            ("org-list-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*
[ 	]*
")
                nil [14869 14959])
            ("org-list-full-item-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*\\(\\(?:[-+*]\\|\\(?:[0-9]+\\|[A-Za-z]\\)[.)]\\)\\(?:[ 	]+\\|$\\)\\)" "\\(?:\\[@\\(?:start:\\)?\\([0-9]+\\|[A-Za-z]\\)\\][ 	]*\\)?" "\\(?:\\(\\[[ X-]\\]\\)\\(?:[ 	]+\\|$\\)\\)?" "\\(?:\\(.*\\)[ 	]+::\\(?:[ 	]+\\|$\\)\\)?"))
                nil [14961 15381])
            ("org-item-re" function nil nil [15383 15861])
            ("org-item-beginning-re" function nil nil [15863 15983])
            ("org-list-at-regexp-after-bullet-p" function (:arguments ("regexp")) nil [15985 16453])
            ("org-list-in-valid-context-p" function nil nil [16455 16595])
            ("org-in-item-p" function nil nil [16597 19096])
            ("org-at-item-p" function nil nil [19098 19287])
            ("org-at-item-bullet-p" function nil nil [19289 19472])
            ("org-at-item-timer-p" function nil nil [19474 19652])
            ("org-at-item-description-p" function nil nil [19654 19808])
            ("org-at-item-checkbox-p" function nil nil [19810 19974])
            ("org-at-item-counter-p" function nil nil [19976 20164])
            ("org-list-context" function nil nil [20206 22740])
            ("org-list-struct" function nil nil [22742 29505])
            ("org-list-struct-assoc-end" function (:arguments ("struct" "end-list")) nil [29507 30182])
            ("org-list-prevs-alist" function (:arguments ("struct")) nil [30184 30484])
            ("org-list-parents-alist" function (:arguments ("struct")) nil [30486 32089])
            ("org-list-get-nth" function (:arguments ("n" "key" "struct")) nil [32109 32222])
            ("org-list-set-nth" function (:arguments ("n" "key" "struct" "new")) nil [32224 32391])
            ("org-list-get-ind" function (:arguments ("item" "struct")) nil [32393 32511])
            ("org-list-set-ind" function (:arguments ("item" "struct" "ind")) nil [32513 32673])
            ("org-list-get-bullet" function (:arguments ("item" "struct")) nil [32675 32791])
            ("org-list-set-bullet" function (:arguments ("item" "struct" "bullet")) nil [32793 32960])
            ("org-list-get-counter" function (:arguments ("item" "struct")) nil [32962 33080])
            ("org-list-get-checkbox" function (:arguments ("item" "struct")) nil [33082 33209])
            ("org-list-set-checkbox" function (:arguments ("item" "struct" "checkbox")) nil [33211 33388])
            ("org-list-get-tag" function (:arguments ("item" "struct")) nil [33390 33509])
            ("org-list-get-item-end" function (:arguments ("item" "struct")) nil [33511 33632])
            ("org-list-get-item-end-before-blank" function (:arguments ("item" "struct")) nil [33634 33916])
            ("org-list-get-parent" function (:arguments ("item" "struct" "parents")) nil [33918 34201])
            ("org-list-has-child-p" function (:arguments ("item" "struct")) nil [34203 34581])
            ("org-list-get-next-item" function (:arguments ("item" "_struct" "prevs")) nil [34583 34824])
            ("org-list-get-prev-item" function (:arguments ("item" "_struct" "prevs")) nil [34826 35070])
            ("org-list-get-subtree" function (:arguments ("item" "struct")) nil [35072 35502])
            ("org-list-get-all-items" function (:arguments ("item" "struct" "prevs")) nil [35504 36062])
            ("org-list-get-children" function (:arguments ("item" "_struct" "parents")) nil [36064 36439])
            ("org-list-get-top-point" function (:arguments ("struct")) nil [36441 36565])
            ("org-list-get-bottom-point" function (:arguments ("struct")) nil [36567 36761])
            ("org-list-get-list-begin" function (:arguments ("item" "struct" "prevs")) nil [36763 37143])
            ("defalias" code nil nil [37145 37205])
            ("org-list-get-last-item" function (:arguments ("item" "struct" "prevs")) nil [37207 37582])
            ("org-list-get-list-end" function (:arguments ("item" "struct" "prevs")) nil [37584 37867])
            ("org-list-get-list-type" function (:arguments ("item" "struct" "prevs")) nil [37869 38434])
            ("org-list-get-item-number" function (:arguments ("item" "struct" "prevs" "parents")) nil [38436 39814])
            ("org-list-search-generic" function (:arguments ("search" "re" "bound" "noerr")) nil [39834 40418])
            ("org-list-search-backward" function (:arguments ("regexp" "bound" "noerror")) nil [40420 40737])
            ("org-list-search-forward" function (:arguments ("regexp" "bound" "noerror")) nil [40739 41052])
            ("org-list-bullet-string" function (:arguments ("bullet")) nil [41084 41585])
            ("org-list-swap-items" function (:arguments ("beg-A" "beg-B" "struct")) nil [41587 44971])
            ("org-list-separating-blank-lines-number" function (:arguments ("pos" "struct" "prevs")) nil [44973 46980])
            ("org-list-insert-item" function (:arguments ("pos" "struct" "prevs" "checkbox" "after-bullet")) nil [46982 52116])
            ("org-list-delete-item" function (:arguments ("item" "struct")) nil [52118 53232])
            ("org-list-send-item" function (:arguments ("item" "dest" "struct")) nil [53234 57479])
            ("org-list-struct-outdent" function (:arguments ("start" "end" "struct" "parents")) nil [57481 58559])
            ("org-list-struct-indent" function (:arguments ("start" "end" "struct" "parents" "prevs")) nil [58561 60700])
            ("org-list-use-alpha-bul-p" function (:arguments ("first" "struct" "prevs")) nil [60731 61683])
            ("org-list-inc-bullet-maybe" function (:arguments ("bullet")) nil [61685 62239])
            ("org-list-struct-fix-bul" function (:arguments ("struct" "prevs")) nil [62241 64879])
            ("org-list-struct-fix-ind" function (:arguments ("struct" "parents" "bullet-size")) nil [64881 65925])
            ("org-list-struct-fix-box" function (:arguments ("struct" "parents" "prevs" "ordered")) nil [65927 68427])
            ("org-list-struct-fix-item-end" function (:arguments ("struct")) nil [68429 69411])
            ("org-list-struct-apply-struct" function (:arguments ("struct" "old-struct")) nil [69413 74911])
            ("org-list-write-struct" function (:arguments ("struct" "parents" "old-struct")) nil [74913 76270])
            ("org-apply-on-list" function (:arguments ("function" "init-value" "args")) nil [76291 77195])
            ("org-list-set-item-visibility" function (:arguments ("item" "struct" "view")) nil [77197 78117])
            ("org-list-item-body-column" function (:arguments ("item")) nil [78119 78946])
            ("defalias" code nil nil [78978 79028])
            ("org-beginning-of-item" function (:user-visible-flag t) nil [79030 79250])
            ("org-beginning-of-item-list" function (:user-visible-flag t) nil [79252 79650])
            ("org-end-of-item-list" function (:user-visible-flag t) nil [79652 80031])
            ("org-end-of-item" function (:user-visible-flag t) nil [80033 80345])
            ("org-previous-item" function (:user-visible-flag t) nil [80347 80967])
            ("org-next-item" function (:user-visible-flag t) nil [80969 81580])
            ("org-move-item-down" function (:user-visible-flag t) nil [81582 82490])
            ("org-move-item-up" function (:user-visible-flag t) nil [82492 83299])
            ("org-insert-item" function (:arguments ("checkbox")) nil [83301 84751])
            ("org-list-repair" function (:user-visible-flag t) nil [84753 85042])
            ("org-cycle-list-bullet" function
               (:user-visible-flag t
                :arguments ("which"))
                nil [85044 87711])
            ("org-toggle-checkbox" function
               (:user-visible-flag t
                :arguments ("toggle-presence"))
                nil [87713 91922])
            ("org-reset-checkbox-state-subtree" function (:user-visible-flag t) nil [91924 92416])
            ("org-update-checkbox-count" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [92418 97085])
            ("org-get-checkbox-statistics-face" function nil nil [97087 97569])
            ("org-update-checkbox-count-maybe" function (:arguments ("all")) nil [97571 97885])
            ("org-last-indent-begin-marker" variable (:default-value (make-marker)) nil [97887 97938])
            ("org-last-indent-end-marker" variable (:default-value (make-marker)) nil [97939 97988])
            ("org-list-indent-item-generic" function (:arguments ("arg" "no-subtree" "struct")) nil [97989 101421])
            ("org-outdent-item" function (:user-visible-flag t) nil [101423 102032])
            ("org-indent-item" function (:user-visible-flag t) nil [102034 102640])
            ("org-outdent-item-tree" function (:user-visible-flag t) nil [102642 103259])
            ("org-indent-item-tree" function (:user-visible-flag t) nil [103261 103875])
            ("org-tab-ind-state" variable nil nil [103877 103903])
            ("org-adapt-indentation" variable nil nil [103904 103934])
            ("org-cycle-item-indentation" function nil nil [103935 105859])
            ("org-sort-list" function
               (:user-visible-flag t
                :arguments ("with-case" "sorting-type" "getkey-func" "compare-func"))
                nil [105861 110005])
            ("org-toggle-item" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [110007 115441])
            ("org-list-to-lisp" function (:arguments ("delete")) nil [115473 118260])
            ("org-list-make-subtree" function (:user-visible-flag t) nil [118262 118548])
            ("org-list-insert-radio-list" function (:user-visible-flag t) nil [118550 119048])
            ("org-list-send-list" function
               (:user-visible-flag t
                :arguments ("maybe"))
                nil [119050 121098])
            ("org-list-to-generic" function (:arguments ("list" "params")) nil [121100 125380])
            ("org-list--depth" function (:arguments ("element")) nil [125382 125642])
            ("org-list--trailing-newlines" function (:arguments ("string")) nil [125644 125875])
            ("org-list--generic-eval" function (:arguments ("value" "args")) nil [125877 126198])
            ("org-list--to-generic-plain-list" function (:arguments ("params")) nil [126200 127517])
            ("org-list--to-generic-item" function (:arguments ("params")) nil [127519 130002])
            ("org-list-to-latex" function (:arguments ("list" "params")) nil [130004 130366])
            ("org-list-to-html" function (:arguments ("list" "params")) nil [130368 130726])
            ("org-list-to-texinfo" function (:arguments ("list" "params")) nil [130728 131098])
            ("org-list-to-subtree" function (:arguments ("list" "params")) nil [131100 132146])
            ("org-list" package nil nil [132148 132167]))          
      :file "org-list.el"
      :pointmax 132195
      :fsize 132194
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-with-gensyms" function (:arguments ("symbols" "body")) nil [1297 1514])
            ("org-string-nw-p" function (:arguments ("s")) nil [1516 1698])
            ("org-not-nil" function (:arguments ("v")) nil [1700 1845])
            ("org-preserve-lc" function (:arguments ("body")) nil [1847 2108])
            ("org-unmodified" function (:arguments ("body")) nil [2234 2605])
            ("org-without-partial-completion" function (:arguments ("body")) nil [2607 2931])
            ("org-with-point-at" function (:arguments ("pom" "body")) nil [2933 3304])
            ("org-with-remote-undo" function (:arguments ("buffer" "body")) nil [3306 4291])
            ("org-no-read-only" function (:arguments ("body")) nil [4293 4432])
            ("org-rm-props" variable
               (:constant-flag t
                :default-value (quote (invisible t face t keymap t intangible t mouse-face t rear-nonsticky t mouse-map t fontified t org-emphasis t)))
                nil [4434 4653])
            ("org-no-properties" function (:arguments ("s" "restricted")) nil [4655 4955])
            ("org-get-alist-option" function (:arguments ("option" "key")) nil [4957 5173])
            ("org-check-external-command" function (:arguments ("cmd" "use" "no-error")) nil [5175 5688])
            ("org-last" function (:arguments ("list")) nil [5690 5773])
            ("org-let" function (:arguments ("list" "body")) nil [5775 5846])
            ("put" code nil nil [5847 5885])
            ("org-let2" function (:arguments ("list1" "list2" "body")) nil [5887 5999])
            ("put" code nil nil [6000 6039])
            ("org-call-with-arg" function (:arguments ("command" "arg")) nil [6041 6211])
            ("org-current-line" function (:arguments ("pos")) nil [6213 6428])
            ("org-goto-line" function (:arguments ("N")) nil [6430 6545])
            ("org-current-line-string" function (:arguments ("to-here")) nil [6547 6673])
            ("org-pos-in-match-range" function (:arguments ("pos" "n")) nil [6675 6810])
            ("org-match-line" function (:arguments ("regexp")) nil [6812 6965])
            ("org-plist-delete" function (:arguments ("plist" "property")) nil [6967 7250])
            ("org-save-outline-visibility" function (:arguments ("use-markers" "body")) nil [7252 7999])
            ("org-with-wide-buffer" function (:arguments ("body")) nil [8001 8201])
            ("org-with-limited-levels" function (:arguments ("body")) nil [8203 8734])
            ("org-outline-regexp" variable nil nil [8736 8763])
            ("org-odd-levels-only" variable nil nil [8784 8812])
            ("org-inlinetask-min-level" variable nil nil [8833 8866])
            ("org-get-limited-outline-regexp" function nil nil [8898 9359])
            ("org-eval-in-environment" function (:arguments ("environment" "form")) nil [9361 9499])
            ("org-make-parameter-alist" function (:arguments ("flat")) nil [9501 9815])
            ("org-load-noerror-mustsuffix" function (:arguments ("file")) nil [9832 9984])
            ("org-unbracket-string" function (:arguments ("pre" "post" "string")) nil [9986 10303])
            ("org-macs" package nil nil [10305 10324]))          
      :file "org-macs.el"
      :pointmax 10352
      :fsize 10351
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1157 1174])
            ("org-macs" include nil nil [1175 1194])
            ("declare-function" code nil nil [1196 1261])
            ("declare-function" code nil nil [1262 1318])
            ("declare-function" code nil nil [1319 1378])
            ("declare-function" code nil nil [1379 1445])
            ("declare-function" code nil nil [1446 1501])
            ("declare-function" code nil nil [1502 1583])
            ("org-table-any-border-regexp" variable nil nil [1585 1621])
            ("org-table-dataline-regexp" variable nil nil [1622 1656])
            ("org-table-tab-recognizes-table.el" variable nil nil [1657 1699])
            ("org-table1-hline-regexp" variable nil nil [1700 1732])
            ("when" code nil nil [1918 2467])
            ("define-obsolete-function-alias" code nil nil [2588 2654])
            ("define-obsolete-function-alias" code nil nil [2655 2721])
            ("define-obsolete-function-alias" code nil nil [2722 2804])
            ("define-obsolete-function-alias" code nil nil [2805 2887])
            ("define-obsolete-function-alias" code nil nil [2888 2960])
            ("define-obsolete-function-alias" code nil nil [2961 3039])
            ("define-obsolete-function-alias" code nil nil [3040 3114])
            ("define-obsolete-function-alias" code nil nil [3115 3185])
            ("define-obsolete-function-alias" code nil nil [3186 3264])
            ("define-obsolete-function-alias" code nil nil [3265 3347])
            ("define-obsolete-function-alias" code nil nil [3348 3422])
            ("define-obsolete-function-alias" code nil nil [3423 3497])
            ("define-obsolete-function-alias" code nil nil [3498 3600])
            ("define-obsolete-function-alias" code nil nil [3601 3671])
            ("define-obsolete-function-alias" code nil nil [3672 3778])
            ("org-re" function (:arguments ("s")) nil [3780 3936])
            ("define-obsolete-function-alias" code nil nil [4014 4077])
            ("define-obsolete-function-alias" code nil nil [4078 4141])
            ("define-obsolete-function-alias" code nil nil [4142 4209])
            ("define-obsolete-function-alias" code nil nil [4210 4275])
            ("define-obsolete-function-alias" code nil nil [4276 4347])
            ("define-obsolete-function-alias" code nil nil [4348 4427])
            ("define-obsolete-function-alias" code nil nil [4428 4489])
            ("define-obsolete-function-alias" code nil nil [4490 4554])
            ("org-sublist" function (:arguments ("list" "start" "end")) nil [4556 4697])
            ("make-obsolete" code nil nil [4698 4797])
            ("define-obsolete-function-alias" code nil nil [4842 4926])
            ("define-obsolete-function-alias" code nil nil [4927 5021])
            ("define-obsolete-function-alias" code nil nil [5022 5100])
            ("define-obsolete-function-alias" code nil nil [5101 5183])
            ("define-obsolete-function-alias" code nil nil [5184 5262])
            ("define-obsolete-function-alias" code nil nil [5263 5346])
            ("define-obsolete-function-alias" code nil nil [5347 5424])
            ("define-obsolete-function-alias" code nil nil [5425 5505])
            ("define-obsolete-function-alias" code nil nil [5506 5606])
            ("define-obsolete-function-alias" code nil nil [5607 5685])
            ("define-obsolete-function-alias" code nil nil [5753 5853])
            ("define-obsolete-variable-alias" code nil nil [5854 5974])
            ("define-obsolete-variable-alias" code nil nil [5975 6080])
            ("define-obsolete-variable-alias" code nil nil [6081 6200])
            ("define-obsolete-variable-alias" code nil nil [6201 6315])
            ("define-obsolete-function-alias" code nil nil [6316 6387])
            ("define-obsolete-function-alias" code nil nil [6388 6466])
            ("define-obsolete-function-alias" code nil nil [6467 6541])
            ("define-obsolete-function-alias" code nil nil [6542 6646])
            ("define-obsolete-function-alias" code nil nil [6647 6755])
            ("define-obsolete-function-alias" code nil nil [6756 6852])
            ("define-obsolete-function-alias" code nil nil [6853 6939])
            ("define-obsolete-function-alias" code nil nil [6940 7027])
            ("define-obsolete-function-alias" code nil nil [7028 7111])
            ("define-obsolete-function-alias" code nil nil [7112 7191])
            ("define-obsolete-function-alias" code nil nil [7192 7277])
            ("define-obsolete-variable-alias" code nil nil [7278 7389])
            ("define-obsolete-function-alias" code nil nil [7390 7489])
            ("define-obsolete-function-alias" code nil nil [7490 7607])
            ("define-obsolete-function-alias" code nil nil [7608 7699])
            ("define-obsolete-variable-alias" code nil nil [7700 7798])
            ("define-obsolete-variable-alias" code nil nil [7799 7894])
            ("define-obsolete-variable-alias" code nil nil [7895 7975])
            ("define-obsolete-variable-alias" code nil nil [7976 8073])
            ("define-obsolete-function-alias" code nil nil [8074 8175])
            ("define-obsolete-function-alias" code nil nil [8176 8266])
            ("define-obsolete-function-alias" code nil nil [8267 8392])
            ("define-obsolete-variable-alias" code nil nil [8393 8496])
            ("define-obsolete-variable-alias" code nil nil [8497 8594])
            ("define-obsolete-function-alias" code nil nil [8595 8676])
            ("define-obsolete-variable-alias" code nil nil [8677 8778])
            ("define-obsolete-variable-alias" code nil nil [8779 8875])
            ("make-obsolete-variable" code nil nil [8876 8945])
            ("define-obsolete-function-alias" code nil nil [8946 9051])
            ("define-obsolete-function-alias" code nil nil [9052 9135])
            ("define-obsolete-function-alias" code nil nil [9136 9236])
            ("define-obsolete-function-alias" code nil nil [9237 9305])
            ("define-obsolete-variable-alias" code nil nil [9306 9413])
            ("define-obsolete-variable-alias" code nil nil [9414 9527])
            ("define-obsolete-variable-alias" code nil nil [9528 9598])
            ("define-obsolete-function-alias" code nil nil [9599 9697])
            ("org-in-fixed-width-region-p" function nil nil [9699 9867])
            ("make-obsolete" code nil nil [9868 9966])
            ("org-read-date-minibuffer-setup-hook" variable nil nil [9968 10195])
            ("make-obsolete-variable" code nil nil [10196 10321])
            ("org-compatible-face" function (:arguments ("inherits" "specs")) nil [10323 10669])
            ("make-obsolete" code nil nil [10670 10737])
            ("org-add-link-type" function (:arguments ("type" "follow" "export")) nil [10739 12062])
            ("make-obsolete" code nil nil [12064 12149])
            ("org-table-recognize-table.el" function nil nil [12151 12836])
            ("make-obsolete" code nil nil [12895 13029])
            ("define-obsolete-function-alias" code nil nil [13031 13136])
            ("org-remove-angle-brackets" function (:arguments ("s")) nil [13138 13210])
            ("make-obsolete" code nil nil [13211 13285])
            ("org-remove-double-quotes" function (:arguments ("s")) nil [13287 13360])
            ("make-obsolete" code nil nil [13361 13434])
            ("eval-after-load" code nil nil [13462 13596])
            ("org-version-check" function (:arguments ("version" "feature" "level")) nil [13645 14347])
            ("org-get-x-clipboard" function (:arguments ("value")) nil [14349 14829])
            ("org-add-props" function (:arguments ("string" "plist" "props")) nil [14831 15189])
            ("put" code nil nil [15190 15234])
            ("org-fit-window-to-buffer" function (:arguments ("window" "max-height" "min-height" "shrink-only")) nil [15236 16058])
            ("defalias" code nil nil [16108 16233])
            ("org-ignore-region" variable nil nil [16261 16348])
            ("org-region-active-p" function nil nil [16350 16536])
            ("org-cursor-to-region-beginning" function nil nil [16538 16683])
            ("org-remove-from-invisibility-spec" function (:arguments ("arg")) nil [16717 17027])
            ("org-in-invisibility-spec-p" function (:arguments ("arg")) nil [17029 17204])
            ("org-move-to-column" function (:arguments ("column" "force" "_buffer")) nil [17206 17531])
            ("org-find-library-dir" function (:arguments ("library")) nil [17533 17633])
            ("org-count-lines" function (:arguments ("s")) nil [17635 17890])
            ("org-kill-new" function (:arguments ("string" "args")) nil [17892 18052])
            ("defalias" code nil nil [18110 18289])
            ("org-no-popups" function (:arguments ("body")) nil [18291 18712])
            ("org-check-version" function nil nil [18729 19436])
            ("org-with-silent-modifications" function (:arguments ("body")) nil [19438 19606])
            ("def-edebug-spec" code nil nil [19607 19661])
            ("org-define-error" function (:arguments ("name" "message")) nil [19707 20113])
            ("unless" code nil nil [20115 20562])
            ("org-compat" package nil nil [20564 20585]))          
      :file "org-compat.el"
      :pointmax 20615
      :fsize 20614
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [952 969])
            ("ob-eval" include nil nil [970 988])
            ("org-macs" include nil nil [989 1008])
            ("org-compat" include nil nil [1009 1030])
            ("org-babel-exeext" variable
               (:constant-flag t
                :default-value (if (memq system-type (quote (windows-nt cygwin))) ".exe" nil))
                nil [1032 1127])
            ("org-babel-library-of-babel" variable nil nil [1129 1164])
            ("org-edit-src-content-indentation" variable nil nil [1165 1206])
            ("org-src-lang-modes" variable nil nil [1207 1234])
            ("org-src-preserve-indentation" variable nil nil [1235 1272])
            ("declare-function" code nil nil [1274 1320])
            ("declare-function" code nil nil [1321 1383])
            ("declare-function" code nil nil [1384 1442])
            ("declare-function" code nil nil [1443 1506])
            ("declare-function" code nil nil [1507 1565])
            ("declare-function" code nil nil [1566 1626])
            ("declare-function" code nil nil [1627 1682])
            ("declare-function" code nil nil [1683 1748])
            ("declare-function" code nil nil [1749 1827])
            ("declare-function" code nil nil [1828 1885])
            ("declare-function" code nil nil [1886 1931])
            ("declare-function" code nil nil [1932 1982])
            ("declare-function" code nil nil [1983 2047])
            ("declare-function" code nil nil [2048 2128])
            ("declare-function" code nil nil [2129 2179])
            ("declare-function" code nil nil [2180 2236])
            ("declare-function" code nil nil [2237 2309])
            ("declare-function" code nil nil [2310 2375])
            ("declare-function" code nil nil [2376 2448])
            ("declare-function" code nil nil [2449 2508])
            ("declare-function" code nil nil [2509 2592])
            ("declare-function" code nil nil [2593 2657])
            ("declare-function" code nil nil [2658 2719])
            ("declare-function" code nil nil [2720 2781])
            ("declare-function" code nil nil [2782 2855])
            ("declare-function" code nil nil [2856 2899])
            ("declare-function" code nil nil [2900 2971])
            ("declare-function" code nil nil [2972 3031])
            ("declare-function" code nil nil [3032 3080])
            ("declare-function" code nil nil [3081 3144])
            ("declare-function" code nil nil [3145 3210])
            ("declare-function" code nil nil [3211 3281])
            ("declare-function" code nil nil [3282 3353])
            ("declare-function" code nil nil [3354 3420])
            ("declare-function" code nil nil [3421 3470])
            ("declare-function" code nil nil [3471 3548])
            ("declare-function" code nil nil [3549 3624])
            ("declare-function" code nil nil [3625 3705])
            ("declare-function" code nil nil [3706 3779])
            ("declare-function" code nil nil [3780 3852])
            ("declare-function" code nil nil [3853 3919])
            ("declare-function" code nil nil [3920 3972])
            ("declare-function" code nil nil [3973 4033])
            ("declare-function" code nil nil [4034 4091])
            ("declare-function" code nil nil [4092 4163])
            ("declare-function" code nil nil [4164 4225])
            ("declare-function" code nil nil [4226 4299])
            ("declare-function" code nil nil [4300 4349])
            ("declare-function" code nil nil [4350 4417])
            ("declare-function" code nil nil [4418 4476])
            ("declare-function" code nil nil [4477 4541])
            ("declare-function" code nil nil [4542 4599])
            ("declare-function" code nil nil [4600 4660])
            ("declare-function" code nil nil [4661 4705])
            ("declare-function" code nil nil [4706 4769])
            ("declare-function" code nil nil [4770 4832])
            ("declare-function" code nil nil [4833 4881])
            ("declare-function" code nil nil [4882 4973])
            ("org-babel" customgroup (:user-visible-flag t) nil [4975 5094])
            ("org-confirm-babel-evaluate" variable (:default-value t) nil [5096 6167])
            ("put" code nil nil [6233 6309])
            ("org-babel-no-eval-on-ctrl-c-ctrl-c" variable nil nil [6311 6513])
            ("org-babel-results-keyword" variable (:default-value "RESULTS") nil [6515 6886])
            ("org-babel-noweb-wrap-start" variable (:default-value "<<") nil [6888 7064])
            ("org-babel-noweb-wrap-end" variable (:default-value ">>") nil [7066 7240])
            ("org-babel-inline-result-wrap" variable (:default-value "=%s=") nil [7242 7445])
            ("put" code nil nil [7446 7591])
            ("org-babel-hash-show-time" variable nil nil [7593 7822])
            ("org-babel-noweb-wrap" function (:arguments ("regexp")) nil [7824 7989])
            ("org-babel-src-name-regexp" variable (:default-value "^[ 	]*#\\+name:[ 	]*") nil [7991 8109])
            ("org-babel-multi-line-header-regexp" variable (:default-value "^[ 	]*#\\+headers?:[ 	]*\\([^
]*\\)$") nil [8111 8264])
            ("org-babel-src-block-regexp" variable (:default-value (concat "^\\([ 	]*\\)#\\+begin_src[ 	]+\\([^ 	
]+\\)[ 	]*" "\\([^\":
]*\"[^\"
*]*\"[^\":
]*\\|[^\":
]*\\)" "\\([^
]*\\)
" "\\([^ ]*?
\\)??[ 	]*#\\+end_src")) nil [8266 8643])
            ("org-babel--get-vars" function (:arguments ("params")) nil [8645 8975])
            ("org-babel-exp-reference-buffer" variable nil nil [8977 9192])
            ("org-babel-check-confirm-evaluate" function (:arguments ("info")) nil [9194 10156])
            ("org-babel-check-evaluate" function (:arguments ("info")) nil [10158 10642])
            ("org-babel-confirm-evaluate-answer-no" variable nil nil [10691 10736])
            ("org-babel-confirm-evaluate" function (:arguments ("info")) nil [10738 11890])
            ("org-babel-execute-safely-maybe" function nil nil [11907 12024])
            ("org-babel-execute-maybe" function nil nil [12041 12170])
            ("org-babel-when-in-src-block" function (:arguments ("body")) nil [12172 12451])
            ("org-babel-execute-src-block-maybe" function (:user-visible-flag t) nil [12453 12775])
            ("org-babel-view-src-block-info" function (:user-visible-flag t) nil [12792 14181])
            ("org-babel-expand-src-block-maybe" function (:user-visible-flag t) nil [14198 14482])
            ("org-babel-load-in-session-maybe" function (:user-visible-flag t) nil [14499 14791])
            ("add-hook" code nil nil [14793 14853])
            ("org-babel-pop-to-session-maybe" function (:user-visible-flag t) nil [14870 15149])
            ("add-hook" code nil nil [15151 15212])
            ("org-babel-common-header-args-w-values" variable
               (:constant-flag t
                :default-value (quote ((cache (no yes)) (cmdline . :any) (colnames (nil no yes)) (comments (no link yes org both noweb)) (dir . :any) (eval (yes no no-export strip-export never-export eval never query)) (exports (code results both none)) (epilogue . :any) (file . :any) (file-desc . :any) (file-ext . :any) (hlines (no yes)) (mkdirp (yes no)) (no-expand) (noeval) (noweb (yes no tangle no-export strip-export)) (noweb-ref . :any) (noweb-sep . :any) (output-dir . :any) (padline (yes no)) (post . :any) (prologue . :any) (results (file list vector table scalar verbatim) (raw html latex org code pp drawer) (replace silent none append prepend) (output value)) (rownames (no yes)) (sep . :any) (session . :any) (shebang . :any) (tangle (tangle yes no :any)) (tangle-mode (493 365 292 :any)) (var . :any) (wrap . :any))))
                nil [15214 16276])
            ("org-babel-header-arg-names" variable
               (:constant-flag t
                :default-value (mapcar (function car) org-babel-common-header-args-w-values))
                nil [16278 16513])
            ("org-babel-safe-header-args" variable
               (:constant-flag t
                :default-value (quote (:cache :colnames :comments :exports :epilogue :hlines :noeval :noweb :noweb-ref :noweb-sep :padline :prologue :rownames :sep :session :tangle :wrap (:eval "never" "query") (:results lambda (str) (not (string-match "file" str))))))
                nil [16515 17366])
            ("org-babel-header-args-safe-fn" function (:arguments ("safe-list")) nil [17368 17996])
            ("org-babel-default-header-args" variable (:default-value (quote ((:session . "none") (:results . "replace") (:exports . "code") (:cache . "no") (:noweb . "no") (:hlines . "no") (:tangle . "no")))) nil [17998 18235])
            ("put" code nil nil [18236 18357])
            ("org-babel-default-inline-header-args" variable (:default-value (quote ((:session . "none") (:results . "replace") (:exports . "results") (:hlines . "yes")))) nil [18359 18566])
            ("put" code nil nil [18567 18695])
            ("org-babel-name-regexp" variable
               (:constant-flag t
                :default-value (format "^[ 	]*#\\+%s:[ 	]*" (regexp-opt (quote ("NAME" "TBLNAME")))))
                nil [18697 18887])
            ("org-babel-result-regexp" variable
               (:constant-flag t
                :default-value (format "^[ 	]*#\\+%s\\(?:\\[\\(?:%s \\)?\\([[:alnum:]]+\\)\\]\\)?:[ 	]*" org-babel-results-keyword "<\\(?:[0-9]\\{4\\}-[0-1][0-9]-[0-3][0-9] [0-2][0-9]\\(?::[0-5][0-9]\\)\\{2\\}\\)>"))
                nil [18889 19289])
            ("org-babel-result-w-name-regexp" variable
               (:constant-flag t
                :default-value (concat org-babel-result-regexp "\\(?9:[^ 	
]+\\)"))
                nil [19291 19477])
            ("org-babel-min-lines-for-block-output" variable (:default-value 10) nil [19479 19874])
            ("org-babel-noweb-error-all-langs" variable nil nil [19876 20070])
            ("org-babel-noweb-error-langs" variable nil nil [20072 20407])
            ("org-babel-hash-show" variable (:default-value 4) nil [20409 20506])
            ("org-babel-after-execute-hook" variable nil nil [20508 20621])
            ("org-babel-named-src-block-regexp-for-name" function (:arguments ("name")) nil [20623 21088])
            ("org-babel-named-data-regexp-for-name" function (:arguments ("name")) nil [21090 21263])
            ("org-babel--normalize-body" function (:arguments ("datum")) nil [21265 22043])
            ("org-babel-current-src-block-location" variable nil nil [22059 22388])
            ("*this*" variable nil nil [22390 22405])
            ("org-babel-get-src-block-info" function (:arguments ("light" "datum")) nil [22407 24413])
            ("org-babel-execute-src-block" function
               (:user-visible-flag t
                :arguments ("arg" "info" "params"))
                nil [24430 28433])
            ("org-babel-expand-body:generic" function (:arguments ("body" "params" "var-lines")) nil [28435 28991])
            ("org-babel-expand-src-block" function
               (:user-visible-flag t
                :arguments ("_arg" "info" "params"))
                nil [29008 30194])
            ("org-babel-edit-distance" function (:arguments ("s1" "s2")) nil [30196 30957])
            ("org-babel-combine-header-arg-lists" function (:arguments ("original" "others")) nil [30959 31360])
            ("org-babel-check-src-block" function (:user-visible-flag t) nil [31377 32297])
            ("org-babel-insert-header-arg" function
               (:user-visible-flag t
                :arguments ("header-arg" "value"))
                nil [32314 33585])
            ("org-babel-header-arg-expand" function nil nil [33662 33916])
            ("org-babel-enter-header-arg-w-completion" function (:arguments ("lang")) nil [33918 34777])
            ("add-hook" code nil nil [34779 34838])
            ("org-babel-load-in-session" function
               (:user-visible-flag t
                :arguments ("_arg" "info"))
                nil [34855 35833])
            ("org-babel-initiate-session" function
               (:user-visible-flag t
                :arguments ("arg" "info"))
                nil [35850 37128])
            ("org-babel-switch-to-session" function
               (:user-visible-flag t
                :arguments ("arg" "info"))
                nil [37145 37494])
            ("defalias" code nil nil [37496 37561])
            ("org-src-window-setup" variable nil nil [37563 37592])
            ("org-babel-switch-to-session-with-code" function
               (:user-visible-flag t
                :arguments ("arg" "_info"))
                nil [37609 38186])
            ("org-babel-do-in-edit-buffer" function (:arguments ("body")) nil [38203 38580])
            ("def-edebug-spec" code nil nil [38581 38633])
            ("org-babel-do-key-sequence-in-edit-buffer" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [38635 39311])
            ("org-bracket-link-regexp" variable nil nil [39313 39345])
            ("org-babel-active-location-p" function nil nil [39347 39513])
            ("org-babel-open-src-block-result" function
               (:user-visible-flag t
                :arguments ("re-run"))
                nil [39530 40549])
            ("org-babel-map-src-blocks" function (:arguments ("file" "body")) nil [40566 43231])
            ("def-edebug-spec" code nil nil [43232 43286])
            ("org-babel-map-inline-src-blocks" function (:arguments ("file" "body")) nil [43303 44352])
            ("org-babel-map-call-lines" function (:arguments ("file" "body")) nil [44369 45441])
            ("org-babel-map-executables" function (:arguments ("file" "body")) nil [45458 46605])
            ("org-babel-execute-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [46622 47096])
            ("org-babel-execute-subtree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [47113 47431])
            ("org-babel-sha1-hash" function
               (:user-visible-flag t
                :arguments ("info"))
                nil [47448 49601])
            ("org-babel-current-result-hash" function (:arguments ("info")) nil [49603 49917])
            ("org-babel-set-current-result-hash" function (:arguments ("hash" "info")) nil [49919 50400])
            ("org-babel-hide-hash" function nil nil [50402 51127])
            ("org-babel-hide-all-hashes" function nil nil [51129 51572])
            ("add-hook" code nil nil [51573 51625])
            ("org-babel-hash-at-point" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [51627 52068])
            ("org-babel-result-hide-spec" function nil nil [52070 52291])
            ("add-hook" code nil nil [52292 52345])
            ("org-babel-hide-result-overlays" variable nil nil [52347 52419])
            ("org-babel-result-hide-all" function (:user-visible-flag t) nil [52421 52742])
            ("org-babel-show-result-all" function nil nil [52744 52926])
            ("org-babel-hide-result-toggle-maybe" function (:user-visible-flag t) nil [52943 53289])
            ("org-babel-hide-result-toggle" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [53320 55008])
            ("add-hook" code nil nil [55050 55116])
            ("add-hook" code nil nil [55161 55283])
            ("org-file-properties" variable nil nil [55285 55313])
            ("org-babel-params-from-properties" function (:arguments ("lang")) nil [55314 56008])
            ("org-babel-balanced-split" function (:arguments ("string" "alts")) nil [56010 57323])
            ("org-babel-join-splits-near-ch" function (:arguments ("ch" "list")) nil [57325 57781])
            ("org-babel-parse-header-arguments" function (:arguments ("arg-string")) nil [57783 58411])
            ("org-babel-parse-multiple-vars" function (:arguments ("header-arguments")) nil [58413 58939])
            ("org-babel-process-params" function (:arguments ("params")) nil [58941 60334])
            ("org-babel-del-hlines" function (:arguments ("table")) nil [60360 60454])
            ("org-babel-get-colnames" function (:arguments ("table")) nil [60456 60771])
            ("org-babel-get-rownames" function (:arguments ("table")) nil [60773 61275])
            ("org-babel-put-colnames" function (:arguments ("table" "colnames")) nil [61277 61423])
            ("org-babel-put-rownames" function (:arguments ("table" "rownames")) nil [61425 61684])
            ("org-babel-pick-name" function (:arguments ("names" "selector")) nil [61686 62201])
            ("org-babel-disassemble-tables" function (:arguments ("vars" "hlines" "colnames" "rownames")) nil [62203 63456])
            ("org-babel-reassemble-table" function (:arguments ("table" "colnames" "rownames")) nil [63458 64039])
            ("org-babel-where-is-src-block-head" function (:arguments ("src-block")) nil [64041 64951])
            ("org-babel-goto-src-block-head" function (:user-visible-flag t) nil [64968 65200])
            ("org-babel-goto-named-src-block" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [65217 66460])
            ("org-babel-find-named-block" function (:arguments ("name")) nil [66462 66848])
            ("org-babel-src-block-names" function (:arguments ("file")) nil [66850 67231])
            ("org-babel-goto-named-result" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [67248 67683])
            ("org-babel-find-named-result" function (:arguments ("name")) nil [67685 68327])
            ("org-babel-result-names" function (:arguments ("file")) nil [68329 68696])
            ("org-babel-next-src-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [68713 68942])
            ("org-babel-previous-src-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [68959 69197])
            ("org-babel-load-languages" variable nil nil [69199 69232])
            ("org-babel-mark-block" function (:user-visible-flag t) nil [69249 69565])
            ("org-babel-demarcate-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [69567 71923])
            ("org-babel--insert-results-keyword" function (:arguments ("name" "hash")) nil [71925 72856])
            ("org-babel--clear-results-maybe" function (:arguments ("hash")) nil [72858 73875])
            ("org-babel-where-is-src-block-result" function (:arguments ("insert" "_info" "hash")) nil [73877 77272])
            ("org-babel-read-element" function (:arguments ("element")) nil [77274 78726])
            ("org-babel-read-result" function nil nil [78728 78951])
            ("org-babel-read-table" function nil nil [78953 79225])
            ("org-babel-read-list" function nil nil [79227 79393])
            ("org-link-types-re" variable nil nil [79395 79421])
            ("org-babel-read-link" function nil nil [79422 80022])
            ("org-babel-format-result" function (:arguments ("result" "sep")) nil [80024 80352])
            ("org-babel-insert-result" function (:arguments ("result" "result-params" "info" "hash" "lang")) nil [80354 91122])
            ("org-babel-remove-result" function
               (:user-visible-flag t
                :arguments ("info" "keep-keyword"))
                nil [91124 91589])
            ("org-babel-remove-inline-result" function
               (:user-visible-flag t
                :arguments ("datum"))
                nil [91591 92541])
            ("org-babel-remove-result-one-or-many" function
               (:user-visible-flag t
                :arguments ("x"))
                nil [92543 92837])
            ("org-babel-result-end" function nil nil [92839 93679])
            ("org-babel-result-to-file" function (:arguments ("result" "description")) nil [93681 94279])
            ("org-babel-capitalize-example-region-markers" variable nil nil [94281 94416])
            ("org-babel-examplify-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "results-switches" "inline"))
                nil [94418 95433])
            ("org-babel-update-block-body" function (:arguments ("new-body")) nil [95435 96435])
            ("org-babel-merge-params" function (:arguments ("plists")) nil [96437 100502])
            ("org-babel-use-quick-and-dirty-noweb-expansion" variable nil nil [100504 100813])
            ("org-babel-noweb-p" function (:arguments ("params" "context")) nil [100815 101252])
            ("org-babel-expand-noweb-references" function (:arguments ("info" "parent-buffer")) nil [101254 107647])
            ("org-babel--script-escape-inner" function (:arguments ("str")) nil [107649 109789])
            ("org-babel-script-escape" function (:arguments ("str" "force")) nil [109791 110883])
            ("org-babel-read" function (:arguments ("cell" "inhibit-lisp-eval")) nil [110885 111704])
            ("org-babel--string-to-number" function (:arguments ("string")) nil [111706 111913])
            ("define-obsolete-function-alias" code nil nil [111914 112005])
            ("org-babel-import-elisp-from-file" function (:arguments ("file-name" "separator")) nil [112007 112753])
            ("org-babel-string-read" function (:arguments ("cell")) nil [112755 113022])
            ("org-babel-chomp" function (:arguments ("string" "regexp")) nil [113024 113441])
            ("org-babel-local-file-name" function (:arguments ("file")) nil [113443 113572])
            ("org-babel-process-file-name" function (:arguments ("name" "no-quote-p")) nil [113574 114109])
            ("org-babel-temporary-directory" variable nil nil [114111 114149])
            ("unless" code nil nil [114150 114585])
            ("org-babel-remote-temporary-directory" variable (:default-value "/tmp/") nil [114587 114734])
            ("org-babel-result-cond" function (:arguments ("result-params" "scalar-form" "table-forms")) nil [114736 115438])
            ("def-edebug-spec" code nil nil [115439 115495])
            ("org-babel-temp-file" function (:arguments ("prefix" "suffix")) nil [115497 116293])
            ("org-babel-remove-temporary-directory" function nil nil [116295 117235])
            ("add-hook" code nil nil [117237 117302])
            ("org-babel-one-header-arg-safe-p" function (:arguments ("pair" "safe-list")) nil [117304 117869])
            ("org-babel-generate-file-param" function (:arguments ("src-name" "params")) nil [117871 119305])
            ("org-babel-graphical-output-file" function (:arguments ("params")) nil [119307 119867])
            ("org-babel-make-language-alias" function (:arguments ("new" "old")) nil [119869 120793])
            ("org-babel-strip-quotes" function (:arguments ("string")) nil [120795 120929])
            ("ob-core" package nil nil [120931 120949]))          
      :file "ob-core.el"
      :pointmax 121051
      :fsize 121050
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-macs" include nil nil [1063 1082])
            ("org-babel-error-buffer-name" variable (:default-value "*Org-Babel Error Output*") nil [1084 1147])
            ("declare-function" code nil nil [1148 1222])
            ("org-babel-eval-error-notify" function (:arguments ("exit-code" "stderr")) nil [1224 1606])
            ("org-babel-eval" function (:arguments ("cmd" "body")) nil [1608 2550])
            ("org-babel-eval-read-file" function (:arguments ("file")) nil [2552 2707])
            ("org-babel--shell-command-on-region" function (:arguments ("start" "end" "command" "error-buffer")) nil [2709 5205])
            ("org-babel-eval-wipe-error-buffer" function nil nil [5207 5515])
            ("ob-eval" package nil nil [5517 5535]))          
      :file "ob-eval.el"
      :pointmax 5564
      :fsize 5563
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1448 1465])
            ("org" include nil nil [1466 1480])
            ("declare-function" code nil nil [1482 1538])
            ("declare-function" code nil nil [1539 1602])
            ("declare-function" code nil nil [1603 1673])
            ("declare-function" code nil nil [1674 1740])
            ("declare-function" code nil nil [1741 1830])
            ("declare-function" code nil nil [1831 1959])
            ("declare-function" code nil nil [1960 2058])
            ("declare-function" code nil nil [2059 2131])
            ("declare-function" code nil nil [2132 2191])
            ("declare-function" code nil nil [2193 2257])
            ("declare-function" code nil nil [2258 2330])
            ("declare-function" code nil nil [2331 2413])
            ("declare-function" code nil nil [2414 2476])
            ("declare-function" code nil nil [2477 2530])
            ("declare-function" code nil nil [2531 2624])
            ("declare-function" code nil nil [2625 2682])
            ("declare-function" code nil nil [2683 2752])
            ("declare-function" code nil nil [2753 2827])
            ("declare-function" code nil nil [2829 2901])
            ("orgtbl-mode" variable nil nil [2903 2923])
            ("orgtbl-mode-menu" variable nil nil [2940 2965])
            ("constants-unit-system" variable nil nil [3009 3039])
            ("org-export-filters-alist" variable nil nil [3040 3073])
            ("org-table-follow-field-mode" variable nil nil [3074 3110])
            ("sort-fold-case" variable nil nil [3111 3134])
            ("orgtbl-after-send-table-hook" variable nil nil [3136 3405])
            ("org-table-TBLFM-begin-regexp" variable (:default-value "^[ 	]*|.*
[ 	]*#\\+TBLFM: ") nil [3407 3476])
            ("orgtbl-optimized" variable (:default-value (eq org-enable-table-editor (quote optimized))) nil [3478 4180])
            ("orgtbl-radio-table-templates" variable (:default-value (quote ((latex-mode "% BEGIN RECEIVE ORGTBL %n
% END RECEIVE ORGTBL %n
\\begin{comment}
#+ORGTBL: SEND %n orgtbl-to-latex :splice nil :skip 0
| | |
\\end{comment}
") (texinfo-mode "@c BEGIN RECEIVE ORGTBL %n
@c END RECEIVE ORGTBL %n
@ignore
#+ORGTBL: SEND %n orgtbl-to-html :splice nil :skip 0
| | |
@end ignore
") (html-mode "<!-- BEGIN RECEIVE ORGTBL %n -->
<!-- END RECEIVE ORGTBL %n -->
<!--
#+ORGTBL: SEND %n orgtbl-to-html :splice nil :skip 0
| | |
-->
") (org-mode "#+ BEGIN RECEIVE ORGTBL %n
#+ END RECEIVE ORGTBL %n

#+ORGTBL: SEND %n orgtbl-to-orgtbl :splice nil :skip 0
| | |
")))) nil [4182 6003])
            ("org-table-settings" customgroup (:user-visible-flag t) nil [6005 6123])
            ("org-table-default-size" variable (:default-value "5x2") nil [6125 6273])
            ("org-table-number-regexp" variable (:default-value "^\\([<>]?[-+^.0-9]*[0-9][-+^.0-9eEdDx()%:]*\\|[<>]?[-+]?0[xX][0-9a-fA-F.]+\\|[<>]?[-+]?[0-9]+#[0-9a-zA-Z.]+\\|nan\\|[-+u]?inf\\)$") nil [6275 7885])
            ("org-table-number-fraction" variable (:default-value 0.5) nil [7887 8216])
            ("org-table-editing" customgroup (:user-visible-flag t) nil [8218 8348])
            ("org-table-automatic-realign" variable (:default-value t) nil [8350 8607])
            ("org-table-auto-blank-field" variable (:default-value t) nil [8609 8937])
            ("org-table-exit-follow-field-mode-when-leaving-table" variable (:default-value t) nil [8939 9402])
            ("org-table-fix-formulas-confirm" variable nil nil [9404 9697])
            ("put" code nil nil [9698 9816])
            ("org-table-tab-jumps-over-hlines" variable (:default-value t) nil [9818 10209])
            ("org-table-calculation" customgroup (:user-visible-flag t) nil [10211 10341])
            ("org-table-use-standard-references" variable (:default-value (quote from)) nil [10343 10855])
            ("org-table-copy-increment" variable (:default-value t) nil [10857 11270])
            ("org-calc-default-modes" variable (:default-value (quote (calc-internal-prec 12 calc-float-format (float 8) calc-angle-mode deg calc-prefer-frac nil calc-symbolic-mode nil calc-date-format (YYYY "-" MM "-" DD " " Www (" " hh ":" mm)) calc-display-working-message t))) nil [11272 11915])
            ("org-table-duration-custom-format" variable (:default-value (quote hours)) nil [11917 12435])
            ("org-table-formula-field-format" variable (:default-value "%s") nil [12437 12778])
            ("org-table-formula-evaluate-inline" variable (:default-value t) nil [12780 13315])
            ("org-table-formula-use-constants" variable (:default-value t) nil [13317 13658])
            ("org-table-formula-constants" variable nil nil [13660 14305])
            ("org-table-allow-automatic-line-recalculation" variable (:default-value t) nil [14307 14607])
            ("org-table-relative-ref-may-cross-hline" variable (:default-value t) nil [14609 15374])
            ("org-table-formula-create-columns" variable nil nil [15376 15994])
            ("org-table-import-export" customgroup (:user-visible-flag t) nil [15996 16147])
            ("org-table-export-default-format" variable (:default-value "orgtbl-to-tsv") nil [16149 16516])
            ("org-table-convert-region-max-lines" variable (:default-value 999) nil [16518 16839])
            ("org-table-auto-recalculate-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*| *# *\\(|\\|$\\)")
                nil [16841 16975])
            ("org-table-recalculate-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*| *[#*] *\\(|\\|$\\)")
                nil [16977 17099])
            ("org-table-calculate-mark-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*| *[!$^_#*] *\\(|\\|$\\)")
                nil [17101 17228])
            ("org-table-border-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*[^| 	]")
                nil [17230 17332])
            ("org-table-last-highlighted-reference" variable nil nil [17334 17383])
            ("org-table-formula-history" variable nil nil [17385 17423])
            ("org-table-column-names" variable nil nil [17425 17571])
            ("org-table-column-name-regexp" variable nil nil [17573 17727])
            ("org-table-local-parameters" variable nil nil [17729 17882])
            ("org-table-named-field-locations" variable nil nil [17884 18242])
            ("org-table-current-line-types" variable nil nil [18244 18378])
            ("org-table-current-begin-pos" variable nil nil [18380 18522])
            ("org-table-current-ncol" variable nil nil [18524 18654])
            ("org-table-dlines" variable nil nil [18656 18858])
            ("org-table-hlines" variable nil nil [18860 19058])
            ("org-table-range-regexp" variable
               (:constant-flag t
                :default-value "@\\([-+]?I*[-+]?[0-9]*\\)?\\(\\$[-+]?[0-9]+\\)?\\(\\.\\.@?\\([-+]?I*[-+]?[0-9]*\\)?\\(\\$[-+]?[0-9]+\\)?\\)?")
                nil [19060 19353])
            ("org-table-range-regexp2" variable
               (:constant-flag t
                :default-value (concat "\\(" "@[-0-9I$&]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\|" "\\$[a-zA-Z0-9]+" "\\)" "\\.\\." "\\(" "@?[-0-9I$&]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\|" "\\$[a-zA-Z0-9]+" "\\)"))
                nil [19355 19644])
            ("org-table-translate-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(" "@[-0-9I$]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\)"))
                nil [19646 19830])
            ("org-table-save-field" function (:arguments ("body")) nil [19832 20264])
            ("org-table-create-with-table.el" function (:user-visible-flag t) nil [20281 20773])
            ("org-table-create-or-convert-from-region" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20790 21340])
            ("org-table-create" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [21357 22369])
            ("org-table-convert-region" function
               (:user-visible-flag t
                :arguments ("beg0" "end0" "separator"))
                nil [22386 25136])
            ("org-table-import" function
               (:user-visible-flag t
                :arguments ("file" "arg"))
                nil [25153 25617])
            ("org-table-export" function
               (:user-visible-flag t
                :arguments ("file" "format"))
                nil [25635 28528])
            ("org-table-aligned-begin-marker" variable (:default-value (make-marker)) nil [28530 28711])
            ("org-table-aligned-end-marker" variable (:default-value (make-marker)) nil [28712 28885])
            ("org-table-last-alignment" variable nil nil [28886 29066])
            ("org-table-last-column-widths" variable nil nil [29067 29227])
            ("defvar-local" code nil nil [29228 29365])
            ("defvar-local" code nil nil [29366 29467])
            ("org-last-recalc-line" variable nil nil [29469 29502])
            ("org-table-do-narrow" variable (:default-value t) nil [29503 29533])
            ("org-narrow-column-arrow" variable
               (:constant-flag t
                :default-value "=>")
                nil [29558 29653])
            ("org-table-align" function (:user-visible-flag t) nil [29670 37887])
            ("org-table-begin" function (:arguments ("table-type")) nil [37904 38362])
            ("org-table-end" function (:arguments ("table-type")) nil [38379 39237])
            ("org-table-justify-field-maybe" function (:arguments ("new")) nil [39254 40838])
            ("org-table-next-field" function (:user-visible-flag t) nil [40855 41756])
            ("org-table-previous-field" function (:user-visible-flag t) nil [41773 42472])
            ("org-table-beginning-of-field" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [42474 43090])
            ("org-table-end-of-field" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [43092 43678])
            ("org-table-next-row" function (:user-visible-flag t) nil [43695 44450])
            ("org-table-copy-down" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [44467 47705])
            ("org-table-check-inside-data-field" function (:arguments ("noerror")) nil [47707 48169])
            ("org-table-clip" variable nil nil [48171 48231])
            ("org-table-get" function (:arguments ("line" "column")) nil [48233 48731])
            ("org-table-put" function (:arguments ("line" "column" "value" "align")) nil [48733 49138])
            ("org-table-current-line" function nil nil [49140 49462])
            ("org-table-goto-line" function (:arguments ("N")) nil [49464 49786])
            ("org-table-blank-field" function (:user-visible-flag t) nil [49803 50392])
            ("org-table-get-field" function (:arguments ("n" "replace")) nil [50394 51014])
            ("org-table-field-info" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [51031 52721])
            ("org-table-current-column" function (:user-visible-flag t) nil [52723 53129])
            ("org-table-current-dline" function (:user-visible-flag t) nil [53146 53636])
            ("org-table-goto-column" function
               (:user-visible-flag t
                :arguments ("n" "on-delim" "force"))
                nil [53653 54433])
            ("org-table-insert-column" function (:user-visible-flag t) nil [54450 55197])
            ("org-table-find-dataline" function nil nil [55199 55785])
            ("org-table-line-to-dline" function (:arguments ("line" "above")) nil [55787 56567])
            ("org-table-delete-column" function (:user-visible-flag t) nil [56584 57545])
            ("org-table-move-column-right" function (:user-visible-flag t) nil [57562 57676])
            ("org-table-move-column-left" function (:user-visible-flag t) nil [57692 57806])
            ("org-table-move-column" function
               (:user-visible-flag t
                :arguments ("left"))
                nil [57823 59256])
            ("org-table-move-row-down" function (:user-visible-flag t) nil [59273 59375])
            ("org-table-move-row-up" function (:user-visible-flag t) nil [59391 59489])
            ("org-table-move-row" function
               (:user-visible-flag t
                :arguments ("up"))
                nil [59506 60667])
            ("org-table-insert-row" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60684 61802])
            ("org-table-insert-hline" function
               (:user-visible-flag t
                :arguments ("above"))
                nil [61819 62769])
            ("org-table-hline-and-move" function
               (:user-visible-flag t
                :arguments ("same-column"))
                nil [62786 63239])
            ("org-table-clean-line" function (:arguments ("s")) nil [63241 63769])
            ("org-table-kill-row" function (:user-visible-flag t) nil [63786 64407])
            ("org-table-sort-lines" function
               (:user-visible-flag t
                :arguments ("with-case" "sorting-type" "getkey-func" "compare-func"))
                nil [64424 68913])
            ("org-table-cut-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [68930 69268])
            ("org-table-copy-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "cut"))
                nil [69285 70495])
            ("org-table-paste-rectangle" function (:user-visible-flag t) nil [70512 71529])
            ("org-table-convert" function (:user-visible-flag t) nil [71546 73309])
            ("org-table-transpose-table-at-point" function (:user-visible-flag t) nil [73311 74301])
            ("org-table-wrap-region" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [74318 76899])
            ("org-field-marker" variable nil nil [76901 76930])
            ("org-table-edit-field" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [76947 78908])
            ("org-table-finish-edit-field" function nil nil [78910 79717])
            ("define-minor-mode" code nil nil [79719 80520])
            ("org-table-follow-fields-with-editor" function nil nil [80522 80924])
            ("org-timecnt" variable nil nil [80926 80946])
            ("org-table-sum" function
               (:user-visible-flag t
                :arguments ("beg" "end" "nlast"))
                nil [80994 83125])
            ("org-table-get-number-for-summing" function (:arguments ("s")) nil [83127 83893])
            ("org-table-current-field-formula" function (:arguments ("key" "noerror")) nil [83895 84896])
            ("org-table-get-formula" function (:arguments (#("equation" 0 1 (idx 8)) "named")) nil [84898 86807])
            ("org-table-store-formulas" function (:arguments ("alist" "location")) nil [86809 87630])
            ("org-table-formula-make-cmp-string" function (:arguments ("a")) nil [87632 88357])
            ("org-table-formula-less-p" function (:arguments ("a" "b")) nil [88359 88576])
            ("org-table-get-stored-formulas" function (:arguments ("noerror" "location")) nil [88593 90083])
            ("org-table-fix-formulas" function (:arguments ("key" "replace" "limit" "delta" "remove")) nil [90085 91538])
            ("org-table-maybe-eval-formula" function nil nil [91555 92179])
            ("org-recalc-commands" variable nil nil [92181 92315])
            ("org-recalc-marks" variable (:default-value (quote ((" " . "Unmarked: no special line, no automatic recalculation") ("#" . "Automatically recalculate this line upon TAB, RET, and C-c C-c in the line") ("*" . "Recalculate only when entire table is recalculated with `C-u C-c *'") ("!" . "Column name definition line.  Reference in formula as $name.") ("$" . "Parameter definition line name=value.  Reference in formula as $name.") ("_" . "Names for values in row below this one.") ("^" . "Names for values in row above this one.")))) nil [92317 92849])
            ("org-table-rotate-recalc-marks" function
               (:user-visible-flag t
                :arguments ("newchar"))
                nil [92866 95522])
            ("org-table-analyze" function nil nil [95539 99671])
            ("org-table-goto-field" function (:arguments ("ref" "create-column-p")) nil [99673 100896])
            ("org-table-maybe-recalculate-line" function (:user-visible-flag t) nil [100913 101355])
            ("org-tbl-calc-modes" variable nil nil [101357 101384])
            ("org-set-calc-mode" function (:arguments ("var" "value")) nil [101434 101866])
            ("org-table-eval-formula" function
               (:user-visible-flag t
                :arguments ("arg" #("equation" 0 1 (idx 8)) "suppress-align" "suppress-const" "suppress-store" "suppress-analysis"))
                nil [101883 112574])
            ("org-table-put-field-property" function (:arguments ("prop" "value")) nil [112576 112782])
            ("org-table-get-range" function (:arguments ("desc" "tbeg" "col" "highlight" "corners-only")) nil [112784 115861])
            ("org-table--descriptor-line" function (:arguments ("desc" "cline")) nil [115863 117201])
            ("org-table--row-type" function (:arguments ("type" "n" "i" "backwards" "relative" "desc")) nil [117203 118401])
            ("org-table--error-on-old-row-references" function (:arguments ("s")) nil [118403 118577])
            ("org-table-make-reference" function (:arguments ("elements" "keep-empty" "numbers" "lispp")) nil [118579 120440])
            ("org-table-message-once-per-second" function (:arguments ("t1" "args")) nil [120442 120881])
            ("org-table-recalculate" function
               (:user-visible-flag t
                :arguments ("all" "noalign"))
                nil [120898 127389])
            ("org-table-iterate" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [127406 128174])
            ("org-table-recalculate-buffer-tables" function (:user-visible-flag t) nil [128191 128586])
            ("org-table-iterate-buffer-tables" function (:user-visible-flag t) nil [128603 129306])
            ("org-table-calc-current-TBLFM" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [129308 130125])
            ("org-table-TBLFM-begin" function nil nil [130127 130433])
            ("org-table-expand-lhs-ranges" function (:arguments ("equations")) nil [130435 131797])
            ("org-table-formula-handle-first/last-rc" function (:arguments ("s")) nil [131799 133064])
            ("org-table-formula-substitute-names" function (:arguments ("f")) nil [133066 134120])
            ("org-table-get-constant" function (:arguments ("const")) nil [134122 134623])
            ("org-table-fedit-map" variable (:default-value (let ((map (make-sparse-keymap))) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "'" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-abort)) (org-defkey map "?" (quote org-table-show-reference)) (org-defkey map [(meta shift up)] (quote org-table-fedit-line-up)) (org-defkey map [(meta shift down)] (quote org-table-fedit-line-down)) (org-defkey map [(shift up)] (quote org-table-fedit-ref-up)) (org-defkey map [(shift down)] (quote org-table-fedit-ref-down)) (org-defkey map [(shift left)] (quote org-table-fedit-ref-left)) (org-defkey map [(shift right)] (quote org-table-fedit-ref-right)) (org-defkey map [(meta up)] (quote org-table-fedit-scroll-down)) (org-defkey map [(meta down)] (quote org-table-fedit-scroll)) (org-defkey map [(meta tab)] (quote lisp-complete-symbol)) (org-defkey map "\211" (quote lisp-complete-symbol)) (org-defkey map [(tab)] (quote org-table-fedit-lisp-indent)) (org-defkey map "	" (quote org-table-fedit-lisp-indent)) (org-defkey map "" (quote org-table-fedit-toggle-ref-type)) (org-defkey map "}" (quote org-table-fedit-toggle-coordinates)) map)) nil [134625 135949])
            ("easy-menu-define" code nil nil [135951 137114])
            ("org-pos" variable nil nil [137116 137132])
            ("org-table--fedit-source" variable nil nil [137133 137214])
            ("org-table-edit-formulas" function (:user-visible-flag t) nil [137231 139753])
            ("org-table-fedit-post-command" function nil nil [139755 139977])
            ("org-table-formula-to-user" function (:arguments ("s")) nil [139979 140169])
            ("org-table-formula-from-user" function (:arguments ("s")) nil [140171 140356])
            ("org-table-convert-refs-to-rc" function (:arguments ("s")) nil [140358 141516])
            ("org-table-convert-refs-to-an" function (:arguments ("s")) nil [141518 142156])
            ("org-letters-to-number" function (:arguments ("s")) nil [142158 142438])
            ("org-number-to-letters" function (:arguments ("n")) nil [142440 142696])
            ("org-table-time-string-to-seconds" function (:arguments ("s")) nil [142698 143823])
            ("org-table-time-seconds-to-string" function (:arguments ("secs" "output-format")) nil [143825 144431])
            ("org-table-fedit-convert-buffer" function (:arguments ("function")) nil [144433 144856])
            ("org-table-fedit-toggle-ref-type" function (:user-visible-flag t) nil [144858 145282])
            ("org-table-fedit-ref-up" function (:user-visible-flag t) nil [145284 145424])
            ("org-table-fedit-ref-down" function (:user-visible-flag t) nil [145425 145571])
            ("org-table-fedit-ref-left" function (:user-visible-flag t) nil [145572 145721])
            ("org-table-fedit-ref-right" function (:user-visible-flag t) nil [145722 145874])
            ("org-table-fedit-shift-reference" function (:arguments ("dir")) nil [145876 146591])
            ("org-rematch-and-replace" function (:arguments ("n" "decr" "hline")) nil [146593 146971])
            ("org-table-shift-refpart" function (:arguments ("ref" "decr" "hline")) nil [146973 148083])
            ("org-table-fedit-toggle-coordinates" function (:user-visible-flag t) nil [148085 148381])
            ("org-table-fedit-finish" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [148383 149669])
            ("org-table-fedit-abort" function (:user-visible-flag t) nil [149671 150071])
            ("org-table-fedit-lisp-indent" function (:user-visible-flag t) nil [150073 151374])
            ("org-show-positions" variable nil nil [151376 151407])
            ("org-table-show-reference" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [151409 156520])
            ("org-table-force-dataline" function nil nil [156522 157077])
            ("org-table-fedit-line-up" function (:user-visible-flag t) nil [157079 157230])
            ("org-table-fedit-line-down" function (:user-visible-flag t) nil [157232 157383])
            ("org-table-fedit-move" function (:arguments ("command")) nil [157385 157961])
            ("org-table-fedit-scroll" function (:arguments ("N")) nil [157963 158108])
            ("org-table-fedit-scroll-down" function (:arguments ("N")) nil [158110 158202])
            ("org-table-rectangle-overlays" variable nil nil [158204 158245])
            ("org-table-add-rectangle-overlay" function (:arguments ("beg" "end" "face")) nil [158247 158473])
            ("org-table-highlight-rectangle" function (:arguments ("beg" "end" "face")) nil [158475 159866])
            ("org-table-remove-rectangle-highlight" function (:arguments ("_ignore")) nil [159868 160185])
            ("defvar-local" code nil nil [160187 160307])
            ("org-table-overlay-coordinates" function (:user-visible-flag t) nil [160309 161481])
            ("org-table-toggle-coordinate-overlays" function (:user-visible-flag t) nil [161498 162027])
            ("org-table-toggle-formula-debugger" function (:user-visible-flag t) nil [162044 162305])
            ("orgtbl-mode-map" variable (:default-value (make-keymap)) nil [163795 163863])
            ("org-old-auto-fill-inhibit-regexp" variable nil nil [163865 163952])
            ("orgtbl-line-start-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\(|\\|#\\+\\(tblfm\\|orgtbl\\|tblname\\):\\)")
                nil [163954 164088])
            ("orgtbl-extra-font-lock-keywords" variable
               (:constant-flag t
                :default-value (list (list (concat "^" orgtbl-line-start-regexp ".*") 0 (quote (quote org-table)) (quote prepend))))
                nil [164090 164301])
            ("put" code nil nil [164334 164364])
            ("put" code nil nil [164365 164410])
            ("define-minor-mode" code nil nil [164427 166261])
            ("org-table-cleanup-narrow-column-properties" function nil nil [166263 166866])
            ("orgtbl-make-binding" function (:arguments ("fun" "n" "keys")) nil [166868 167701])
            ("orgtbl-error" function (:user-visible-flag t) nil [167703 167859])
            ("orgtbl-setup" function nil nil [167861 174547])
            ("orgtbl-ctrl-c-ctrl-c" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174549 175610])
            ("orgtbl-create-or-convert-from-region" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [175612 176031])
            ("orgtbl-tab" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [176033 176230])
            ("orgtbl-ret" function (:user-visible-flag t) nil [176232 176414])
            ("orgtbl-self-insert-command" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [176416 178107])
            ("orgtbl-exp-regexp" variable (:default-value "^\\([-+]?[0-9][0-9.]*\\)[eE]\\([-+]?[0-9]+\\)$") nil [178124 178265])
            ("orgtbl-gather-send-defs" function nil nil [178267 178897])
            ("orgtbl-send-replace-tbl" function (:arguments ("name" "text")) nil [178899 179657])
            ("org-table-to-lisp" function (:arguments ("txt")) nil [179674 180330])
            ("orgtbl-send-table" function
               (:user-visible-flag t
                :arguments ("maybe"))
                nil [180332 181496])
            ("org-remove-by-index" function (:arguments ("list" "indices" "i0")) nil [181498 181875])
            ("orgtbl-toggle-comment" function (:user-visible-flag t) nil [181877 182613])
            ("orgtbl-insert-radio-table" function (:user-visible-flag t) nil [182615 183119])
            ("orgtbl-to-generic" function (:arguments ("table" "params")) nil [183136 189925])
            ("org-table--generic-apply" function (:arguments ("value" "name" "with-cons" "args")) nil [189927 190517])
            ("org-table--to-generic-table" function (:arguments ("params")) nil [190519 191164])
            ("org-table--to-generic-row" function (:arguments ("params")) nil [191166 194225])
            ("org-table--to-generic-cell" function (:arguments ("params")) nil [194227 196680])
            ("orgtbl-to-tsv" function (:arguments ("table" "params")) nil [196697 196863])
            ("orgtbl-to-csv" function (:arguments ("table" "params")) nil [196880 197147])
            ("orgtbl-to-latex" function (:arguments ("table" "params")) nil [197164 198192])
            ("orgtbl-to-html" function (:arguments ("table" "params")) nil [198209 199211])
            ("orgtbl-to-texinfo" function (:arguments ("table" "params")) nil [199228 200232])
            ("orgtbl-to-orgtbl" function (:arguments ("table" "params")) nil [200249 200893])
            ("orgtbl-to-table.el" function (:arguments ("table" "params")) nil [200895 201457])
            ("orgtbl-to-unicode" function (:arguments ("table" "params")) nil [201459 202456])
            ("orgtbl-ascii-draw" function (:arguments ("value" "min" "max" "width" "characters")) nil [202689 203809])
            ("orgtbl-ascii-plot" function
               (:user-visible-flag t
                :arguments ("ask"))
                nil [203826 205252])
            ("orgtbl-uc-draw-grid" function (:arguments ("value" "min" "max" "width")) nil [205726 206183])
            ("orgtbl-uc-draw-cont" function (:arguments ("value" "min" "max" "width")) nil [206185 206542])
            ("org-table-get-remote-range" function (:arguments ("name-or-id" "form")) nil [206544 208900])
            ("org-table-remote-reference-indirection" function (:arguments ("form")) nil [208902 209728])
            ("org-define-lookup-function" function (:arguments ("mode")) nil [209730 210867])
            ("org-define-lookup-function" code nil nil [210869 210903])
            ("org-define-lookup-function" code nil nil [210904 210937])
            ("org-define-lookup-function" code nil nil [210938 210970])
            ("org-table" package nil nil [210972 210992]))          
      :file "org-table.el"
      :pointmax 211096
      :fsize 211095
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-inhibit-highlight-removal" variable nil nil [2810 2852])
            ("defvar-local" code nil nil [2880 2984])
            ("cl-lib" include nil nil [3015 3032])
            ("gnus-sum" include nil nil [3053 3072])
            ("calendar" include nil nil [3075 3094])
            ("find-func" include nil nil [3095 3115])
            ("format-spec" include nil nil [3116 3138])
            ("or" code nil nil [3140 3535])
            ("org-macs" include nil nil [3537 3556])
            ("org-compat" include nil nil [3557 3578])
            ("org-outline-regexp" variable (:default-value "\\*+ ") nil [3953 4023])
            ("org-outline-regexp-bol" variable (:default-value "^\\*+ ") nil [4025 4210])
            ("org-heading-regexp" variable (:default-value "^\\(\\*+\\)\\(?: +\\(.*?\\)\\)?[ 	]*$") nil [4212 4398])
            ("declare-function" code nil nil [4400 4460])
            ("declare-function" code nil nil [4461 4532])
            ("declare-function" code nil nil [4533 4606])
            ("declare-function" code nil nil [4607 4669])
            ("declare-function" code nil nil [4670 4745])
            ("declare-function" code nil nil [4746 4838])
            ("declare-function" code nil nil [4839 4902])
            ("declare-function" code nil nil [4903 4974])
            ("declare-function" code nil nil [4975 5061])
            ("declare-function" code nil nil [5062 5129])
            ("declare-function" code nil nil [5130 5197])
            ("declare-function" code nil nil [5198 5291])
            ("declare-function" code nil nil [5292 5377])
            ("declare-function" code nil nil [5378 5471])
            ("declare-function" code nil nil [5472 5548])
            ("declare-function" code nil nil [5549 5619])
            ("declare-function" code nil nil [5620 5688])
            ("declare-function" code nil nil [5689 5750])
            ("declare-function" code nil nil [5751 5810])
            ("declare-function" code nil nil [5811 5867])
            ("declare-function" code nil nil [5868 5932])
            ("declare-function" code nil nil [5933 6005])
            ("declare-function" code nil nil [6006 6069])
            ("declare-function" code nil nil [6070 6142])
            ("declare-function" code nil nil [6143 6200])
            ("declare-function" code nil nil [6201 6267])
            ("declare-function" code nil nil [6268 6353])
            ("declare-function" code nil nil [6354 6423])
            ("declare-function" code nil nil [6424 6518])
            ("declare-function" code nil nil [6519 6591])
            ("declare-function" code nil nil [6592 6674])
            ("declare-function" code nil nil [6675 6744])
            ("declare-function" code nil nil [6745 6804])
            ("declare-function" code nil nil [6805 6866])
            ("declare-function" code nil nil [6867 6919])
            ("declare-function" code nil nil [6920 6983])
            ("declare-function" code nil nil [6984 7047])
            ("declare-function" code nil nil [7048 7116])
            ("declare-function" code nil nil [7117 7188])
            ("declare-function" code nil nil [7189 7254])
            ("declare-function" code nil nil [7255 7304])
            ("declare-function" code nil nil [7305 7374])
            ("declare-function" code nil nil [7375 7448])
            ("declare-function" code nil nil [7449 7504])
            ("declare-function" code nil nil [7505 7580])
            ("declare-function" code nil nil [7581 7657])
            ("declare-function" code nil nil [7658 7719])
            ("declare-function" code nil nil [7720 7777])
            ("declare-function" code nil nil [7778 7845])
            ("declare-function" code nil nil [7846 7913])
            ("declare-function" code nil nil [7914 7981])
            ("declare-function" code nil nil [7982 8058])
            ("declare-function" code nil nil [8059 8121])
            ("declare-function" code nil nil [8122 8188])
            ("declare-function" code nil nil [8189 8241])
            ("declare-function" code nil nil [8242 8301])
            ("declare-function" code nil nil [8302 8378])
            ("declare-function" code nil nil [8379 8437])
            ("declare-function" code nil nil [8438 8511])
            ("declare-function" code nil nil [8512 8576])
            ("declare-function" code nil nil [8577 8635])
            ("org-uniquify" function (:arguments ("list")) nil [8637 8781])
            ("org-get-at-bol" function (:arguments ("property")) nil [8783 8922])
            ("org-trim" function (:arguments ("s" "keep-lead")) nil [8924 9303])
            ("org-babel-load-languages" variable nil nil [9368 9401])
            ("org-babel-do-load-languages" function (:arguments ("sym" "value")) nil [9418 9866])
            ("declare-function" code nil nil [9868 9954])
            ("org-babel-load-file" function
               (:user-visible-flag t
                :arguments ("file" "compile"))
                nil [9970 11176])
            ("org-babel-load-languages" variable (:default-value (quote ((emacs-lisp . t)))) nil [11178 13325])
            ("org-clone-delete-id" variable nil nil [13356 13624])
            ("org-check-version" code nil nil [13638 13657])
            ("org-version" function
               (:user-visible-flag t
                :arguments ("here" "full" "message"))
                nil [13674 14974])
            ("org-version" variable
               (:constant-flag t
                :default-value (org-version))
                nil [14976 15012])
            ("org-block-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+begin_?\\([^ 
]+\\)\\(\\([^
]+\\)\\)?
\\([^ ]+?\\)#\\+end_?\\1[ 	]*$")
                nil [15050 15210])
            ("org-dblock-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+\\(?:BEGIN\\|begin\\):[ 	]+\\(\\S-+\\)\\([ 	]+\\(.*\\)\\)?")
                nil [15212 15382])
            ("org-dblock-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+\\(?:END\\|end\\)\\([: 	
]\\|$\\)")
                nil [15384 15503])
            ("org-clock-string" variable
               (:constant-flag t
                :default-value "CLOCK:")
                nil [15530 15639])
            ("org-closed-string" variable (:default-value "CLOSED:") nil [15641 15752])
            ("org-deadline-string" variable (:default-value "DEADLINE:") nil [15754 16020])
            ("org-scheduled-string" variable (:default-value "SCHEDULED:") nil [16022 16296])
            ("org-ds-keyword-length" variable
               (:constant-flag t
                :default-value (+ 2 (apply (function max) (mapcar (function length) (list org-deadline-string org-scheduled-string org-clock-string org-closed-string)))))
                nil [16298 16533])
            ("org-planning-line-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*" (regexp-opt (list org-closed-string org-deadline-string org-scheduled-string) t)))
                nil [16535 16749])
            ("org-clock-line-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*" org-clock-string))
                nil [16751 16853])
            ("org-deadline-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-deadline-string))
                nil [16855 16954])
            ("org-deadline-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-deadline-string " *<\\([^>]+\\)>"))
                nil [16956 17107])
            ("org-deadline-time-hour-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-deadline-string " *<\\([^>]+[0-9]\\{1,2\\}:[0-9]\\{2\\}[0-9-+:hdwmy 	.]*\\)>"))
                nil [17109 17322])
            ("org-deadline-line-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<\\(" org-deadline-string "\\).*"))
                nil [17324 17466])
            ("org-scheduled-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-scheduled-string))
                nil [17468 17570])
            ("org-scheduled-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-scheduled-string " *<\\([^>]+\\)>"))
                nil [17572 17726])
            ("org-scheduled-time-hour-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-scheduled-string " *<\\([^>]+[0-9]\\{1,2\\}:[0-9]\\{2\\}[0-9-+:hdwmy 	.]*\\)>"))
                nil [17728 17944])
            ("org-closed-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-closed-string " *\\[\\([^]]+\\)\\]"))
                nil [17946 18095])
            ("org-keyword-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string org-clock-string) t) " *[[<]\\([^]>]+\\)[]>]"))
                nil [18097 18353])
            ("org-keyword-time-not-clock-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string) t) " *[[<]\\([^]>]+\\)[]>]"))
                nil [18355 18600])
            ("org-maybe-keyword-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string org-clock-string) t) "\\)?" " *\\([[<][0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^]
>]*?[]>]" "\\|" "<%%([^
>]*>\\)"))
                nil [18602 18943])
            ("org-all-time-keywords" variable
               (:constant-flag t
                :default-value (mapcar (lambda (w) (substring w 0 -1)) (list org-scheduled-string org-deadline-string org-clock-string org-closed-string)))
                nil [18945 19135])
            ("org-drawer-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*:\\(\\(?:\\w\\|[-_]\\)+\\):[ 	]*$")
                nil [19150 19315])
            ("org-property-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:PROPERTIES:[ 	]*$")
                nil [19317 19447])
            ("org-property-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:END:[ 	]*$")
                nil [19449 19569])
            ("org-clock-drawer-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:CLOCK:[ 	]*$")
                nil [19571 19697])
            ("org-clock-drawer-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:END:[ 	]*$")
                nil [19699 19820])
            ("org-property-drawer-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*:PROPERTIES:[ 	]*
" "\\(?:[ 	]*:\\S-+:\\(?: .*\\)?[ 	]*
\\)*?" "[ 	]*:END:[ 	]*$"))
                nil [19822 20008])
            ("org-clock-drawer-re" variable
               (:constant-flag t
                :default-value (concat "\\(" org-clock-drawer-start-re "\\)[^ ]*?\\(" org-clock-drawer-end-re "\\)
?"))
                nil [20010 20173])
            ("org-heading-keyword-regexp-format" variable
               (:constant-flag t
                :default-value "^\\(\\*+\\)\\(?: +%s\\)\\(?: +\\(.*?\\)\\)?[ 	]*$")
                nil [20190 20540])
            ("org-heading-keyword-maybe-regexp-format" variable
               (:constant-flag t
                :default-value "^\\(\\*+\\)\\(?: +%s\\)?\\(?: +\\(.*?\\)\\)?[ 	]*$")
                nil [20542 20889])
            ("org-archive-tag" variable
               (:constant-flag t
                :default-value "ARCHIVE")
                nil [20891 21082])
            ("org-comment-string" variable
               (:constant-flag t
                :default-value "COMMENT")
                nil [21084 21285])
            ("org-latex-regexps" variable
               (:constant-flag t
                :default-value (quote (("begin" "^[ 	]*\\(\\\\begin{\\([a-zA-Z0-9\\*]+\\)[^ ]+?\\\\end{\\2}\\)" 1 t) ("$1" "\\([^$]\\|^\\)\\(\\$[^ 	
,;.$]\\$\\)\\(\\s.\\|\\s-\\|\\s(\\|\\s)\\|\\s\"\\| \\|$\\)" 2 nil) ("$" "\\([^$]\\|^\\)\\(\\(\\$\\([^ 	
,;.$][^$
]*?\\(
[^$
]*?\\)\\{0,2\\}[^ 	
,.$]\\)\\$\\)\\)\\(\\s.\\|\\s-\\|\\s(\\|\\s)\\|\\s\"\\| \\|$\\)" 2 nil) ("\\(" "\\\\([^ ]*?\\\\)" 0 nil) ("\\[" "\\\\\\[[^ ]*?\\\\\\]" 0 nil) ("$$" "\\$\\$[^ ]*?\\$\\$" 0 nil))))
                nil [21327 22113])
            ("org-effort-property" variable
               (:constant-flag t
                :default-value "Effort")
                nil [22135 22315])
            ("org-table-any-line-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\(|\\|\\+-[-+]\\)")
                nil [22329 22437])
            ("org-table-line-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|")
                nil [22439 22517])
            ("org-table-dataline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|[^-]")
                nil [22519 22605])
            ("org-table-hline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|-")
                nil [22607 22688])
            ("org-table1-hline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\+-[-+]")
                nil [22690 22779])
            ("org-table-any-border-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*[^|+ 	]")
                nil [22781 22943])
            ("org-TBLFM-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+TBLFM: ")
                nil [22945 23020])
            ("org-ts-regexp" variable
               (:constant-flag t
                :default-value "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^
>]*?\\)>")
                nil [23038 23176])
            ("org-ts-regexp-inactive" variable
               (:constant-flag t
                :default-value "\\[\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^
>]*?\\)\\]")
                nil [23178 23340])
            ("org-ts-regexp-both" variable
               (:constant-flag t
                :default-value "[[<]\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^]
>]*?\\)[]>]")
                nil [23342 23492])
            ("org-ts-regexp0" variable
               (:constant-flag t
                :default-value "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\)\\( +[^]+0-9>
 -]+\\)?\\( +\\([0-9]\\{1,2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)")
                nil [23494 23844])
            ("org-ts-regexp1" variable
               (:constant-flag t
                :default-value "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\) *\\([^]+0-9>
 -]*\\)\\( \\([0-9]\\{1,2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)")
                nil [23846 24066])
            ("org-ts-regexp2" variable
               (:constant-flag t
                :default-value (concat "<" org-ts-regexp1 "[^>
]\\{0,16\\}>"))
                nil [24068 24199])
            ("org-ts-regexp3" variable
               (:constant-flag t
                :default-value (concat "[[<]" org-ts-regexp1 "[^]>
]\\{0,16\\}[]>]"))
                nil [24201 24351])
            ("org-tr-regexp" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp "--?-?" org-ts-regexp))
                nil [24353 24474])
            ("org-tr-regexp-both" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp-both "--?-?" org-ts-regexp-both))
                nil [24476 24614])
            ("org-tsr-regexp" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp "\\(--?-?" org-ts-regexp "\\)?"))
                nil [24616 24767])
            ("org-tsr-regexp-both" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp-both "\\(--?-?" org-ts-regexp-both "\\)?"))
                nil [24769 24985])
            ("org-repeat-re" variable
               (:constant-flag t
                :default-value "<[0-9]\\{4\\}-[0-9][0-9]-[0-9][0-9] [^>
]*?\\([.+]?\\+[0-9]+[hdwmy]\\(/[0-9]+[hdwmy]\\)?\\)")
                nil [24987 25218])
            ("org-time-stamp-formats" variable
               (:constant-flag t
                :default-value (quote ("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>")))
                nil [25220 25365])
            ("org" customgroup (:user-visible-flag t) nil [25395 25514])
            ("org-mode-hook" variable nil nil [25516 25635])
            ("org-load-hook" variable nil nil [25637 25745])
            ("org-log-buffer-setup-hook" variable nil nil [25747 25891])
            ("org-modules" variable nil nil [25893 25913])
            ("org-modules-loaded" variable nil nil [25931 26004])
            ("org-load-modules-maybe" function (:arguments ("force")) nil [26006 26320])
            ("org-set-modules" function (:arguments ("var" "value")) nil [26322 26547])
            ("org-modules" variable (:default-value (quote (org-w3m org-bbdb org-bibtex org-docview org-gnus org-info org-irc org-mhe org-rmail))) nil [26549 32035])
            ("org-export-registered-backends" variable nil nil [32037 32076])
            ("declare-function" code nil nil [32091 32168])
            ("declare-function" code nil nil [32169 32228])
            ("org-export-backends" variable (:default-value (quote (ascii html icalendar latex odt))) nil [32229 36469])
            ("eval-after-load" code nil nil [36471 36699])
            ("org-support-shift-select" variable nil nil [36701 38827])
            ("org-loop-over-headlines-in-active-region" variable nil nil [38829 39918])
            ("org-startup" customgroup (:user-visible-flag t) nil [39920 40025])
            ("org-startup-folded" variable (:default-value t) nil [40027 40778])
            ("org-startup-truncated" variable (:default-value t) nil [40780 41550])
            ("org-startup-indented" variable nil nil [41552 41928])
            ("org-use-sub-superscripts" variable (:default-value t) nil [41930 43362])
            ("org-startup-with-beamer-mode" variable nil nil [43364 43652])
            ("org-startup-align-all-tables" variable nil nil [43654 44098])
            ("org-startup-with-inline-images" variable nil nil [44100 44434])
            ("org-startup-with-latex-preview" variable nil nil [44436 44810])
            ("org-insert-mode-line-in-empty-file" variable nil nil [44812 45280])
            ("org-replace-disputed-keys" variable nil nil [45282 46008])
            ("org-use-extra-keys" variable nil nil [46010 46295])
            ("defvaralias" code nil nil [46297 46357])
            ("org-disputed-keys" variable (:default-value (quote (([(shift up)] . [(meta p)]) ([(shift down)] . [(meta n)]) ([(shift left)] . [(meta -)]) ([(shift right)] . [(meta +)]) ([(control shift right)] . [(meta shift +)]) ([(control shift left)] . [(meta shift -)])))) nil [46359 47043])
            ("org-key" function (:arguments ("key")) nil [47045 47402])
            ("org-defkey" function (:arguments ("keymap" "key" "def")) nil [47404 47544])
            ("org-ellipsis" variable nil nil [47546 48002])
            ("org-display-table" variable nil nil [48004 48105])
            ("org-keywords" customgroup (:user-visible-flag t) nil [48107 48196])
            ("org-closed-keep-when-no-todo" variable nil nil [48198 48424])
            ("org-structure" customgroup (:user-visible-flag t) nil [48426 48550])
            ("org-reveal-location" customgroup (:user-visible-flag t) nil [48552 48700])
            ("org-show-context-detail" variable (:default-value (quote ((agenda . local) (bookmark-jump . lineage) (isearch . lineage) (default . ancestors)))) nil [48702 51557])
            ("org-indirect-buffer-display" variable (:default-value (quote other-window)) nil [51559 52453])
            ("org-use-speed-commands" variable nil nil [52455 53043])
            ("org-speed-commands-user" variable nil nil [53045 54006])
            ("org-bookmark-names-plist" variable (:default-value (quote (:last-capture "org-capture-last-stored" :last-refile "org-refile-last-stored" :last-capture-marker "org-capture-last-stored-marker"))) nil [54008 54566])
            ("org-cycle" customgroup (:user-visible-flag t) nil [54568 54690])
            ("org-cycle-skip-children-state-if-no-children" variable (:default-value t) nil [54692 54857])
            ("org-cycle-max-level" variable nil nil [54859 55515])
            ("org-hide-block-startup" variable nil nil [55517 55766])
            ("org-cycle-global-at-bob" variable nil nil [55768 56366])
            ("org-cycle-level-after-item/entry-creation" variable (:default-value t) nil [56368 57087])
            ("org-cycle-emulate-tab" variable (:default-value t) nil [57089 57795])
            ("org-cycle-separator-lines" variable (:default-value 2) nil [57797 58559])
            ("put" code nil nil [58560 58623])
            ("org-pre-cycle-hook" variable nil nil [58625 59094])
            ("org-cycle-hook" variable (:default-value (quote (org-cycle-hide-archived-subtrees org-cycle-hide-drawers org-cycle-show-empty-lines org-optimize-window-after-visibility-change))) nil [59096 59777])
            ("org-edit-structure" customgroup (:user-visible-flag t) nil [59779 59918])
            ("org-odd-levels-only" variable nil nil [59920 60514])
            ("org-adapt-indentation" variable (:default-value t) nil [60516 61598])
            ("org-special-ctrl-a/e" variable nil nil [61600 63220])
            ("defvaralias" code nil nil [63221 63276])
            ("org-special-ctrl-k" variable nil nil [63278 63797])
            ("org-ctrl-k-protect-subtree" variable nil nil [63799 64412])
            ("org-special-ctrl-o" variable (:default-value t) nil [64414 64546])
            ("org-catch-invisible-edits" variable nil nil [64548 65713])
            ("org-yank-folded-subtrees" variable (:default-value t) nil [65715 66137])
            ("org-yank-adjusted-subtrees" variable nil nil [66139 66387])
            ("org-M-RET-may-split-line" variable (:default-value (quote ((default . t)))) nil [66389 67164])
            ("org-insert-heading-respect-content" variable nil nil [67167 67571])
            ("org-blank-before-new-entry" variable (:default-value (quote ((heading . auto) (plain-list-item . auto)))) nil [67573 68300])
            ("org-insert-heading-hook" variable nil nil [68302 68434])
            ("org-enable-fixed-width-editor" variable (:default-value t) nil [68436 68710])
            ("org-goto-auto-isearch" variable (:default-value t) nil [68712 69164])
            ("org-sparse-trees" customgroup (:user-visible-flag t) nil [69166 69296])
            ("org-highlight-sparse-tree-matches" variable (:default-value t) nil [69298 69556])
            ("org-remove-highlights-with-change" variable (:default-value t) nil [69558 70027])
            ("org-occur-case-fold-search" variable (:default-value t) nil [70029 70442])
            ("org-occur-hook" variable (:default-value (quote (org-first-headline-recenter))) nil [70444 70698])
            ("org-imenu-and-speedbar" customgroup (:user-visible-flag t) nil [70700 70848])
            ("org-imenu-depth" variable (:default-value 2) nil [70850 71025])
            ("org-table" customgroup (:user-visible-flag t) nil [71027 71127])
            ("org-enable-table-editor" variable (:default-value (quote optimized)) nil [71129 72602])
            ("org-self-insert-cluster-for-undo" variable nil nil [72604 72939])
            ("org-table-tab-recognizes-table.el" variable (:default-value t) nil [72941 73201])
            ("org-link" customgroup (:user-visible-flag t) nil [73203 73300])
            ("defvar-local" code nil nil [73302 73462])
            ("org-link-parameters" variable (:default-value (quote (("doi" :follow org--open-doi-link) ("elisp" :follow org--open-elisp-link) ("file" :complete org-file-complete-link) ("ftp" :follow (lambda (path) (browse-url (concat "ftp:" path)))) ("help" :follow org--open-help-link) ("http" :follow (lambda (path) (browse-url (concat "http:" path)))) ("https" :follow (lambda (path) (browse-url (concat "https:" path)))) ("mailto" :follow (lambda (path) (browse-url (concat "mailto:" path)))) ("message" :follow (lambda (path) (browse-url (concat "message:" path)))) ("news" :follow (lambda (path) (browse-url (concat "news:" path)))) ("shell" :follow org--open-shell-link)))) nil [73464 75518])
            ("org-link-get-parameter" function (:arguments ("type" "key")) nil [75520 75705])
            ("org-link-set-parameters" function (:arguments ("type" "parameters")) nil [75707 76086])
            ("org-link-types" function nil nil [76088 76189])
            ("org-link-abbrev-alist" variable nil nil [76191 77410])
            ("org-descriptive-links" variable (:default-value t) nil [77412 77866])
            ("org-link-file-path-type" variable (:default-value (quote adaptive)) nil [77868 78493])
            ("defvaralias" code nil nil [78495 78549])
            ("org-highlight-links" variable (:default-value (quote (bracket angle plain radio tag date footnote))) nil [78550 79953])
            ("org-make-link-description-function" variable nil nil [79955 80358])
            ("org-link-store" customgroup (:user-visible-flag t) nil [80360 80482])
            ("org-url-hexify-p" variable (:default-value t) nil [80484 80625])
            ("org-email-link-description-format" variable (:default-value "Email %c: %.30s") nil [80627 81428])
            ("org-from-is-user-regexp" variable (:default-value (let (r1 r2) (when (and user-mail-address (not (string= user-mail-address ""))) (setq r1 (concat "\\<" (regexp-quote user-mail-address) "\\>"))) (when (and user-full-name (not (string= user-full-name ""))) (setq r2 (concat "\\<" (regexp-quote user-full-name) "\\>"))) (if (and r1 r2) (concat r1 "\\|" r2) (or r1 r2)))) nil [81430 81990])
            ("org-context-in-file-links" variable (:default-value t) nil [81992 82673])
            ("org-keep-stored-link-after-insertion" variable nil nil [82675 83278])
            ("org-link-follow" customgroup (:user-visible-flag t) nil [83280 83406])
            ("org-link-translation-function" variable nil nil [83408 84116])
            ("org-follow-link-hook" variable nil nil [84118 84247])
            ("org-tab-follows-link" variable nil nil [84249 84509])
            ("org-return-follows-link" variable nil nil [84511 84701])
            ("org-mouse-1-follows-link" variable (:default-value (if (boundp (quote mouse-1-click-follows-link)) mouse-1-click-follows-link t)) nil [84703 85256])
            ("org-mark-ring-length" variable (:default-value 4) nil [85258 85458])
            ("org-link-search-must-match-exact-headline" variable (:default-value (quote query-to-create)) nil [85460 86101])
            ("org-link-frame-setup" variable (:default-value (quote ((vm . vm-visit-folder-other-frame) (vm-imap . vm-visit-imap-folder-other-frame) (gnus . org-gnus-no-new-news) (file . find-file-other-window) (wl . wl-other-frame)))) nil [86103 87676])
            ("org-display-internal-link-with-indirect-buffer" variable nil nil [87678 88269])
            ("org-open-non-existing-files" variable nil nil [88271 88640])
            ("org-open-directory-means-index-dot-org" variable nil nil [88642 88910])
            ("org-confirm-shell-link-function" variable (:default-value (quote yes-or-no-p)) nil [88912 89621])
            ("put" code nil nil [89622 89739])
            ("org-confirm-shell-link-not-regexp" variable nil nil [89741 89900])
            ("org-confirm-elisp-link-function" variable (:default-value (quote yes-or-no-p)) nil [89902 90636])
            ("put" code nil nil [90637 90754])
            ("org-confirm-elisp-link-not-regexp" variable nil nil [90756 90915])
            ("org-file-apps-defaults-gnu" variable
               (:constant-flag t
                :default-value (quote ((remote . emacs) (system . mailcap) (t . mailcap))))
                nil [90917 91099])
            ("org-file-apps-defaults-macosx" variable
               (:constant-flag t
                :default-value (quote ((remote . emacs) (system . "open %s") ("ps.gz" . "gv %s") ("eps.gz" . "gv %s") ("dvi" . "xdvi %s") ("fig" . "xfig %s") (t . "open %s"))))
                nil [91101 91515])
            ("org-file-apps-defaults-windowsnt" variable
               (:constant-flag t
                :default-value (list (quote (remote . emacs)) (cons (quote system) (lambda (file _path) (with-no-warnings (w32-shell-execute "open" file)))) (cons t (lambda (file _path) (with-no-warnings (w32-shell-execute "open" file))))))
                nil [91517 91885])
            ("org-file-apps" variable (:default-value (quote ((auto-mode . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . default) ("\\.pdf\\'" . default)))) nil [91887 96811])
            ("org-doi-server-url" variable (:default-value "http://dx.doi.org/") nil [96813 96955])
            ("org-refile" customgroup (:user-visible-flag t) nil [96957 97069])
            ("org-directory" variable (:default-value "~/org") nil [97071 97658])
            ("org-default-notes-file" variable (:default-value (convert-standard-filename "~/.notes")) nil [97660 97922])
            ("org-goto-interface" variable (:default-value (quote outline)) nil [97924 98597])
            ("org-goto-max-level" variable (:default-value 5) nil [98599 98741])
            ("org-reverse-note-order" variable nil nil [98743 99226])
            ("org-log-refile" variable nil nil [99228 100039])
            ("org-refile-targets" variable nil nil [100041 102365])
            ("org-refile-target-verify-function" variable nil nil [102367 103053])
            ("org-refile-use-cache" variable nil nil [103055 103684])
            ("org-refile-use-outline-path" variable nil nil [103686 104297])
            ("org-outline-path-complete-in-steps" variable (:default-value t) nil [104299 104892])
            ("org-refile-allow-creating-parent-nodes" variable nil nil [104894 105615])
            ("org-refile-active-region-within-subtree" variable nil nil [105617 106021])
            ("org-todo" customgroup (:user-visible-flag t) nil [106023 106125])
            ("org-progress" customgroup (:user-visible-flag t) nil [106127 106248])
            ("org-todo-interpretation-widgets" variable (:default-value (quote ((:tag "Sequence (cycling hits every state)" sequence) (:tag "Type     (cycling directly to DONE)" type)))) nil [106250 106527])
            ("org-todo-keywords" variable (:default-value (quote ((sequence "TODO" "DONE")))) nil [106529 109343])
            ("defvar-local" code nil nil [109345 109434])
            ("org-todo-keywords-for-agenda" variable nil nil [109435 109476])
            ("org-done-keywords-for-agenda" variable nil nil [109477 109518])
            ("org-todo-keyword-alist-for-agenda" variable nil nil [109519 109565])
            ("org-tag-alist-for-agenda" variable nil nil [109566 109648])
            ("org-tag-groups-alist-for-agenda" variable nil nil [109649 109753])
            ("defvar-local" code nil nil [109754 109793])
            ("org-agenda-contributing-files" variable nil nil [109794 109836])
            ("defvar-local" code nil nil [109837 110040])
            ("defvar-local" code nil nil [110041 110081])
            ("defvar-local" code nil nil [110082 110118])
            ("defvar-local" code nil nil [110119 110152])
            ("defvar-local" code nil nil [110153 110185])
            ("defvar-local" code nil nil [110186 110224])
            ("defvar-local" code nil nil [110225 110262])
            ("defvar-local" code nil nil [110263 110300])
            ("defvar-local" code nil nil [110301 110340])
            ("org-todo-interpretation" variable (:default-value (quote sequence)) nil [110342 110737])
            ("org-use-fast-todo-selection" variable (:default-value t) nil [110739 111722])
            ("org-provide-todo-statistics" variable (:default-value t) nil [111724 112716])
            ("org-hierarchical-todo-statistics" variable (:default-value t) nil [112718 113105])
            ("org-after-todo-state-change-hook" variable nil nil [113107 113354])
            ("org-blocker-hook" variable nil nil [113356 113704])
            ("org-trigger-hook" variable nil nil [113706 114306])
            ("org-enforce-todo-dependencies" variable nil nil [114308 114940])
            ("org-enforce-todo-checkbox-dependencies" variable nil nil [114942 115701])
            ("org-treat-insert-todo-heading-as-state-change" variable nil nil [115703 116066])
            ("org-treat-S-cursor-todo-selection-as-state-change" variable (:default-value t) nil [116068 116397])
            ("org-todo-state-tags-triggers" variable nil nil [116399 117115])
            ("org-log-done" variable nil nil [117117 117842])
            ("cond" code nil nil [117883 118022])
            ("org-log-reschedule" variable nil nil [118024 118651])
            ("org-log-redeadline" variable nil nil [118653 119395])
            ("org-log-note-clock-out" variable nil nil [119397 119730])
            ("org-log-done-with-time" variable (:default-value t) nil [119732 119918])
            ("org-log-note-headings" variable (:default-value (quote ((done . "CLOSING NOTE %t") (state . "State %-12s from %-12S %t") (note . "Note taken on %t") (reschedule . "Rescheduled from %S on %t") (delschedule . "Not scheduled, was %S on %t") (redeadline . "New deadline from %S on %t") (deldeadline . "Removed deadline, was %S on %t") (refile . "Refiled on %t") (clock-out . "")))) nil [119920 121815])
            ("unless" code nil nil [121817 121906])
            ("org-log-into-drawer" variable nil nil [121908 122943])
            ("defvaralias" code nil nil [122945 123012])
            ("org-log-into-drawer" function nil nil [123014 123509])
            ("org-log-state-notes-insert-after-drawers" variable nil nil [123511 123972])
            ("org-log-states-order-reversed" variable (:default-value t) nil [123974 124342])
            ("org-todo-repeat-to-state" variable nil nil [124344 124781])
            ("org-log-repeat" variable (:default-value (quote time)) nil [124783 125829])
            ("org-priorities" customgroup (:user-visible-flag t) nil [125832 125932])
            ("org-enable-priority-commands" variable (:default-value t) nil [125934 126156])
            ("org-highest-priority" variable (:default-value 65) nil [126158 126368])
            ("org-lowest-priority" variable (:default-value 67) nil [126370 126578])
            ("org-default-priority" variable (:default-value 66) nil [126580 127259])
            ("org-priority-start-cycle-with-default" variable (:default-value t) nil [127261 127590])
            ("org-get-priority-function" variable nil nil [127592 128093])
            ("org-time" customgroup (:user-visible-flag t) nil [128095 128212])
            ("org-time-stamp-rounding-minutes" variable (:default-value (quote (0 5))) nil [128214 129273])
            ("when" code nil nil [129325 129494])
            ("org-display-custom-times" variable nil nil [129496 129821])
            ("make-variable-buffer-local" code nil nil [129822 129876])
            ("org-time-stamp-custom-formats" variable (:default-value (quote ("<%m/%d/%y %a>" . "<%m/%d/%y %a %H:%M>"))) nil [129878 130360])
            ("org-time-stamp-format" function (:arguments ("long" "inactive")) nil [130362 130612])
            ("org-time-clocksum-format" variable (:default-value (quote (:days "%dd " :hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))) nil [130614 133425])
            ("org-time-clocksum-use-fractional" variable nil nil [133427 133677])
            ("org-time-clocksum-use-effort-durations" variable nil nil [133679 134214])
            ("org-time-clocksum-fractional-format" variable (:default-value "%.2f") nil [134216 135492])
            ("org-deadline-warning-days" variable (:default-value 14) nil [135494 135952])
            ("org-scheduled-delay-days" variable nil nil [135954 136508])
            ("org-read-date-prefer-future" variable (:default-value t) nil [136510 137591])
            ("org-agenda-jump-prefer-future" variable (:default-value (quote org-read-date-prefer-future)) nil [137593 138137])
            ("org-read-date-force-compatible-dates" variable (:default-value t) nil [138139 139555])
            ("org-read-date-display-live" variable (:default-value t) nil [139557 139758])
            ("org-read-date-popup-calendar" variable (:default-value t) nil [139760 140095])
            ("defvaralias" code nil nil [140096 140177])
            ("org-extend-today-until" variable nil nil [140179 140918])
            ("org-use-effective-time" variable nil nil [140920 141255])
            ("org-use-last-clock-out-time-as-effective-time" variable nil nil [141257 141585])
            ("org-edit-timestamp-down-means-later" variable nil nil [141587 141769])
            ("org-calendar-follow-timestamp-change" variable (:default-value t) nil [141771 142025])
            ("org-tags" customgroup (:user-visible-flag t) nil [142027 142123])
            ("org-tag-alist" variable nil nil [142125 143316])
            ("org-tag-persistent-alist" variable nil nil [143318 144477])
            ("org-complete-tags-always-offer-all-agenda-tags" variable nil nil [144479 144998])
            ("org-file-tags" variable nil nil [145000 145233])
            ("org-use-fast-tag-selection" variable (:default-value (quote auto)) nil [145235 145894])
            ("org-fast-tag-selection-single-key" variable nil nil [145896 146379])
            ("org-fast-tag-selection-include-todo" variable nil nil [146381 146566])
            ("org-tags-column" variable (:default-value -77) nil [146568 146975])
            ("org-auto-align-tags" variable (:default-value t) nil [146977 147308])
            ("org-use-tag-inheritance" variable (:default-value t) nil [147310 148295])
            ("org-tags-exclude-from-inheritance" variable nil nil [148297 148628])
            ("org-tag-inherit-p" function (:arguments ("tag")) nil [148630 149079])
            ("org-tags-match-list-sublevels" variable (:default-value t) nil [149081 150064])
            ("org-tags-sort-function" variable nil nil [150066 150368])
            ("org-tags-history" variable nil nil [150370 150441])
            ("org-last-tags-completion-table" variable nil nil [150442 150530])
            ("org-after-tags-change-hook" variable nil nil [150531 150630])
            ("org-properties" customgroup (:user-visible-flag t) nil [150632 150746])
            ("org-property-format" variable (:default-value "%-10s %s") nil [150748 151076])
            ("org-properties-postprocess-alist" variable nil nil [151078 152054])
            ("org-use-property-inheritance" variable nil nil [152056 153362])
            ("org-property-inherit-p" function (:arguments ("property")) nil [153364 153817])
            ("org-columns-default-format" variable (:default-value "%25ITEM %TODO %3PRIORITY %TAGS") nil [153819 154092])
            ("org-columns-ellipses" variable (:default-value "..") nil [154094 154602])
            ("org-global-properties-fixed" variable
               (:constant-flag t
                :default-value (quote (("VISIBILITY_ALL" . "folded children content all") ("CLOCK_MODELINE_TOTAL_ALL" . "current today repeat all auto"))))
                nil [154604 155177])
            ("org-global-properties" variable nil nil [155179 155716])
            ("defvar-local" code nil nil [155718 155905])
            ("org-agenda" customgroup (:user-visible-flag t) nil [155907 156015])
            ("defvar-local" code nil nil [156017 156349])
            ("put" code nil nil [156350 156432])
            ("org-agenda-files" variable nil nil [156434 157217])
            ("org-agenda-file-regexp" variable (:default-value "\\`[^.].*\\.org\\'") nil [157219 157554])
            ("org-agenda-text-search-extra-files" variable nil nil [157556 158380])
            ("defvaralias" code nil nil [158382 158469])
            ("org-agenda-skip-unavailable-files" variable nil nil [158471 158696])
            ("org-calendar-to-agenda-key" variable (:default-value [99]) nil [158698 159039])
            ("org-calendar-insert-diary-entry-key" variable (:default-value [105]) nil [159041 159565])
            ("org-agenda-diary-file" variable (:default-value (quote diary-file)) nil [159567 160043])
            ("eval-after-load" code nil nil [160045 160393])
            ("org-latex" customgroup (:user-visible-flag t) nil [160395 160504])
            ("org-format-latex-options" variable (:default-value (quote (:foreground default :background default :scale 1.0 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))) nil [160506 161955])
            ("org-format-latex-signal-error" variable (:default-value t) nil [161957 162169])
            ("org-latex-to-mathml-jar-file" variable nil nil [162171 162552])
            ("org-latex-to-mathml-convert-command" variable nil nil [162554 163347])
            ("org-preview-latex-default-process" variable (:default-value (quote dvipng)) nil [163349 163664])
            ("org-preview-latex-process-alist" variable (:default-value (quote ((dvipng :programs ("latex" "dvipng") :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust (1.0 . 1.0) :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f") :image-converter ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f")) (dvisvgm :programs ("latex" "dvisvgm") :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "dvi" :image-output-type "svg" :image-size-adjust (1.7 . 1.5) :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f") :image-converter ("dvisvgm %f -n -b min -c %S -o %O")) (imagemagick :programs ("latex" "convert") :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust (1.0 . 1.0) :latex-compiler ("pdflatex -interaction nonstopmode -output-directory %o %f") :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O"))))) nil [163666 168150])
            ("org-preview-latex-image-directory" variable (:default-value "ltximg/") nil [168152 168485])
            ("org-format-latex-mathml-available-p" function nil nil [168487 168988])
            ("org-format-latex-header" variable (:default-value "\\documentclass{article}
\\usepackage[usenames]{color}
[PACKAGES]
[DEFAULT-PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}") nil [168990 170052])
            ("org-set-packages-alist" function (:arguments ("var" "val")) nil [170054 170294])
            ("org-get-packages-alist" function (:arguments ("var")) nil [170296 170530])
            ("org-latex-default-packages-alist" variable (:default-value (quote (("AUTO" "inputenc" t ("pdflatex")) ("T1" "fontenc" t ("pdflatex")) ("" "graphicx" t) ("" "grffile" t) ("" "longtable" nil) ("" "wrapfig" nil) ("" "rotating" nil) ("normalem" "ulem" t) ("" "amsmath" t) ("" "textcomp" t) ("" "amssymb" t) ("" "capt-of" nil) ("" "hyperref" nil)))) nil [170532 172960])
            ("org-latex-packages-alist" variable nil nil [172962 173984])
            ("org-appearance" customgroup (:user-visible-flag t) nil [173986 174091])
            ("org-level-color-stars-only" variable nil nil [174093 174384])
            ("org-hide-leading-stars" variable nil nil [174386 174971])
            ("org-hidden-keywords" variable nil nil [174973 175415])
            ("org-custom-properties" variable nil nil [175417 175750])
            ("org-fontify-done-headline" variable nil nil [175752 176093])
            ("org-fontify-emphasized-text" variable (:default-value t) nil [176095 176311])
            ("org-fontify-whole-heading-line" variable nil nil [176313 176530])
            ("org-highlight-latex-and-related" variable nil nil [176532 177191])
            ("org-hide-emphasis-markers" variable nil nil [177193 177347])
            ("org-hide-macro-markers" variable nil nil [177349 177502])
            ("org-pretty-entities" variable nil nil [177504 177700])
            ("org-pretty-entities-include-sub-superscripts" variable (:default-value t) nil [177702 177899])
            ("org-emph-re" variable nil nil [177901 178470])
            ("org-verbatim-re" variable nil nil [178471 178550])
            ("org-emphasis-regexp-components" variable nil nil [178551 178590])
            ("org-emphasis-alist" variable nil nil [178612 178639])
            ("org-set-emph-re" function (:arguments ("var" "val")) nil [178661 180434])
            ("org-emphasis-regexp-components" variable (:default-value (quote (" 	('\"{" "- 	.,:!?;'\")}\\[" " 	
" "." 1))) nil [180622 181607])
            ("org-emphasis-alist" variable (:default-value (quote (("*" bold) ("/" italic) ("_" underline) ("=" org-verbatim verbatim) ("~" org-code verbatim) ("+" (:strike-through t))))) nil [181609 182414])
            ("org-protecting-blocks" variable (:default-value (quote ("src" "example" "export"))) nil [182416 182589])
            ("mark-active" variable nil nil [182684 182704])
            ("declare-function" code nil nil [182726 182798])
            ("declare-function" code nil nil [182799 182855])
            ("declare-function" code nil nil [182856 182911])
            ("declare-function" code nil nil [182912 182964])
            ("declare-function" code nil nil [182965 183027])
            ("declare-function" code nil nil [183028 183088])
            ("declare-function" code nil nil [183089 183147])
            ("declare-function" code nil nil [183148 183195])
            ("declare-function" code nil nil [183196 183290])
            ("declare-function" code nil nil [183291 183424])
            ("declare-function" code nil nil [183425 183539])
            ("declare-function" code nil nil [183540 183656])
            ("declare-function" code nil nil [183657 183725])
            ("declare-function" code nil nil [183726 183858])
            ("declare-function" code nil nil [183859 183915])
            ("declare-function" code nil nil [183916 183985])
            ("declare-function" code nil nil [183986 184077])
            ("declare-function" code nil nil [184078 184158])
            ("declare-function" code nil nil [184159 184209])
            ("declare-function" code nil nil [184210 184281])
            ("declare-function" code nil nil [184282 184358])
            ("declare-function" code nil nil [184359 184422])
            ("declare-function" code nil nil [184423 184491])
            ("declare-function" code nil nil [184492 184554])
            ("declare-function" code nil nil [184555 184618])
            ("declare-function" code nil nil [184619 184689])
            ("declare-function" code nil nil [184690 184756])
            ("declare-function" code nil nil [184757 184815])
            ("declare-function" code nil nil [184816 184887])
            ("align-mode-rules-list" variable nil nil [184889 184919])
            ("calc-embedded-close-formula" variable nil nil [184920 184956])
            ("calc-embedded-open-formula" variable nil nil [184957 184992])
            ("calc-embedded-open-mode" variable nil nil [184993 185025])
            ("font-lock-unfontify-region-function" variable nil nil [185026 185070])
            ("iswitchb-temp-buflist" variable nil nil [185071 185101])
            ("org-agenda-tags-todo-honor-ignore-options" variable nil nil [185102 185152])
            ("remember-data-file" variable nil nil [185153 185180])
            ("texmathp-why" variable nil nil [185181 185202])
            ("turn-on-orgtbl" function nil nil [185219 185328])
            ("org-at-table-p" function (:arguments ("table-type")) nil [185330 185875])
            ("org-at-table.el-p" function nil nil [185877 186177])
            ("org-at-table-hline-p" function nil nil [186179 186481])
            ("org-table-map-tables" function (:arguments ("function" "quietly")) nil [186483 187252])
            ("declare-function" code nil nil [187254 187335])
            ("declare-function" code nil nil [187336 187396])
            ("declare-function" code nil nil [187397 187500])
            ("org-at-TBLFM-p" function (:arguments ("pos")) nil [187502 187793])
            ("org-clock-start-time" variable nil nil [187795 187824])
            ("org-clock-marker" variable (:default-value (make-marker)) nil [187825 187904])
            ("org-clock-hd-marker" variable (:default-value (make-marker)) nil [187905 188014])
            ("org-clock-heading" variable nil nil [188015 188088])
            ("org-clock-is-active" function nil nil [188089 188249])
            ("org-check-running-clock" function nil nil [188251 188664])
            ("org-clocktable-try-shift" function (:arguments ("dir" "n")) nil [188666 188879])
            ("org-clock-persistence-insinuate" function nil nil [188896 189091])
            ("org-archive" customgroup (:user-visible-flag t) nil [189093 189210])
            ("org-archive-location" variable (:default-value "%s_archive::") nil [189212 191621])
            ("org-agenda-skip-archived-trees" variable (:default-value t) nil [191623 192019])
            ("org-columns-skip-archived-trees" variable (:default-value t) nil [192021 192197])
            ("org-cycle-open-archived-trees" variable nil nil [192199 192564])
            ("org-sparse-tree-open-archived-trees" variable nil nil [192566 192852])
            ("org-sparse-tree-default-date-type" variable nil nil [192854 193684])
            ("org-cycle-hide-archived-subtrees" function (:arguments ("state")) nil [193686 194356])
            ("org-force-cycle-archived" function (:user-visible-flag t) nil [194358 194564])
            ("org-hide-archived-subtrees" function (:arguments ("beg" "end")) nil [194566 195061])
            ("declare-function" code nil nil [195063 195117])
            ("declare-function" code nil nil [195118 195181])
            ("org-flag-subtree" function (:arguments ("flag")) nil [195182 195375])
            ("defalias" code nil nil [195377 195440])
            ("declare-function" code nil nil [195471 195543])
            ("declare-function" code nil nil [195544 195607])
            ("declare-function" code nil nil [195629 195674])
            ("declare-function" code nil nil [195675 195724])
            ("declare-function" code nil nil [195725 195774])
            ("org-id-track-globally" variable nil nil [195775 195805])
            ("defvar-local" code nil nil [195877 196080])
            ("defvar-local" code nil nil [196082 196309])
            ("defvar-local" code nil nil [196311 196528])
            ("defvar-local" code nil nil [196530 196762])
            ("defvar-local" code nil nil [196764 197102])
            ("defvar-local" code nil nil [197104 197376])
            ("defvar-local" code nil nil [197378 197538])
            ("org-plain-time-of-day-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\(--?" "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\)?"))
                nil [197540 198072])
            ("org-plain-time-extension-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\+\\([0-9]+\\)\\(:\\([0-5][0-9]\\)\\)?"))
                nil [198074 198522])
            ("org-stamp-time-of-day-regexp" variable
               (:constant-flag t
                :default-value (concat "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} +\\sw+ +\\)" "\\([012][0-9]:[0-5][0-9]\\(-\\([012][0-9]:[0-5][0-9]\\)\\)?[^
>]*?\\)>" "\\(--?" "<\\1\\([012][0-9]:[0-5][0-9]\\)>\\)?"))
                nil [198524 199071])
            ("org-startup-options" variable
               (:constant-flag t
                :default-value (quote (("fold" org-startup-folded t) ("overview" org-startup-folded t) ("nofold" org-startup-folded nil) ("showall" org-startup-folded nil) ("showeverything" org-startup-folded showeverything) ("content" org-startup-folded content) ("indent" org-startup-indented t) ("noindent" org-startup-indented nil) ("hidestars" org-hide-leading-stars t) ("showstars" org-hide-leading-stars nil) ("odd" org-odd-levels-only t) ("oddeven" org-odd-levels-only nil) ("align" org-startup-align-all-tables t) ("noalign" org-startup-align-all-tables nil) ("inlineimages" org-startup-with-inline-images t) ("noinlineimages" org-startup-with-inline-images nil) ("latexpreview" org-startup-with-latex-preview t) ("nolatexpreview" org-startup-with-latex-preview nil) ("customtime" org-display-custom-times t) ("logdone" org-log-done time) ("lognotedone" org-log-done note) ("nologdone" org-log-done nil) ("lognoteclock-out" org-log-note-clock-out t) ("nolognoteclock-out" org-log-note-clock-out nil) ("logrepeat" org-log-repeat state) ("lognoterepeat" org-log-repeat note) ("logdrawer" org-log-into-drawer t) ("nologdrawer" org-log-into-drawer nil) ("logstatesreversed" org-log-states-order-reversed t) ("nologstatesreversed" org-log-states-order-reversed nil) ("nologrepeat" org-log-repeat nil) ("logreschedule" org-log-reschedule time) ("lognotereschedule" org-log-reschedule note) ("nologreschedule" org-log-reschedule nil) ("logredeadline" org-log-redeadline time) ("lognoteredeadline" org-log-redeadline note) ("nologredeadline" org-log-redeadline nil) ("logrefile" org-log-refile time) ("lognoterefile" org-log-refile note) ("nologrefile" org-log-refile nil) ("fninline" org-footnote-define-inline t) ("nofninline" org-footnote-define-inline nil) ("fnlocal" org-footnote-section nil) ("fnauto" org-footnote-auto-label t) ("fnprompt" org-footnote-auto-label nil) ("fnconfirm" org-footnote-auto-label confirm) ("fnplain" org-footnote-auto-label plain) ("fnadjust" org-footnote-auto-adjust t) ("nofnadjust" org-footnote-auto-adjust nil) ("constcgs" constants-unit-system cgs) ("constSI" constants-unit-system SI) ("noptag" org-tag-persistent-alist nil) ("hideblocks" org-hide-block-startup t) ("nohideblocks" org-hide-block-startup nil) ("beamer" org-startup-with-beamer-mode t) ("entitiespretty" org-pretty-entities t) ("entitiesplain" org-pretty-entities nil))))
                nil [199073 201999])
            ("org-group-tags" variable (:default-value t) nil [202001 202195])
            ("org-inhibit-startup" variable nil nil [202197 202229])
            ("org-toggle-tags-groups" function (:user-visible-flag t) nil [202266 202749])
            ("org-set-regexps-and-options" function (:arguments ("tags-only")) nil [202751 209153])
            ("org--setup-collect-keywords" function (:arguments ("regexp" "files" "alist")) nil [209155 213456])
            ("org-tag-string-to-alist" function (:arguments ("s")) nil [213458 214808])
            ("org-tag-alist-to-string" function (:arguments ("alist" "skip-key")) nil [214810 215629])
            ("org-tag-alist-to-groups" function (:arguments ("alist")) nil [215631 216479])
            ("org-file-contents" function (:arguments ("file" "noerror")) nil [216481 216905])
            ("org-extract-log-state-settings" function (:arguments ("x")) nil [216907 217435])
            ("org-remove-keyword-keys" function (:arguments ("list")) nil [217437 217657])
            ("org-assign-fast-keys" function (:arguments ("alist")) nil [217659 218304])
            ("org-window-configuration" variable nil nil [218349 218446])
            ("org-selected-window" variable nil nil [218447 218539])
            ("org-finish-function" variable nil nil [218540 218679])
            ("org-last-state" variable nil nil [218680 218703])
            ("org-entities" variable nil nil [218768 218789])
            ("org-struct-menu" variable nil nil [218824 218848])
            ("org-org-menu" variable nil nil [218849 218870])
            ("org-tbl-menu" variable nil nil [218871 218892])
            ("org-table-may-need-update" variable (:default-value t) nil [219000 219178])
            ("org-before-change-function" function (:arguments ("_beg" "_end")) nil [219179 219324])
            ("org-mode-map" variable nil nil [219325 219346])
            ("org-inhibit-startup-visibility-stuff" variable nil nil [219347 219396])
            ("org-agenda-keep-modes" variable nil nil [219425 219459])
            ("org-inhibit-logging" variable nil nil [219493 219525])
            ("org-inhibit-blocking" variable nil nil [219561 219594])
            ("org-table-buffer-is-an" variable nil nil [219629 219664])
            ("bidi-paragraph-direction" variable nil nil [219666 219699])
            ("buffer-face-mode-face" variable nil nil [219700 219730])
            ("outline" include nil nil [219732 219750])
            ("time-date" include nil nil [219776 219796])
            ("unless" code nil nil [219797 219871])
            ("easymenu" include nil nil [219872 219891])
            ("easy-menu-add" function (:prototype-flag t) nil [219892 219928])
            ("overlay" include nil nil [219929 219947])
            ("org-entities" include nil nil [220024 220047])
            ("org-faces" include nil nil [220125 220145])
            ("org-list" include nil nil [220146 220165])
            ("org-pcomplete" include nil nil [220166 220190])
            ("org-src" include nil nil [220191 220209])
            ("org-footnote" include nil nil [220210 220233])
            ("org-macro" include nil nil [220234 220254])
            ("ob" include nil nil [220265 220278])
            ("define-derived-mode" code nil nil [220295 226283])
            ("add-to-list" code nil nil [226335 226549])
            ("org-mode-transpose-word-syntax-table" variable (:default-value (let ((st (make-syntax-table text-mode-syntax-table))) (dolist (c org-emphasis-alist st) (modify-syntax-entry (string-to-char (car c)) "w p" st)))) nil [226551 226755])
            ("when" code nil nil [226757 226879])
            ("org-find-invisible-foreground" function nil nil [226881 227362])
            ("org-current-time" function (:arguments ("rounding-minutes" "past")) nil [227364 228085])
            ("org-today" function nil nil [228087 228266])
            ("org-mouse-map" variable (:default-value (make-sparse-keymap)) nil [228316 228359])
            ("org-defkey" code nil nil [228360 228415])
            ("org-defkey" code nil nil [228416 228476])
            ("when" code nil nil [228477 228563])
            ("when" code nil nil [228564 228702])
            ("font-lock" include nil nil [228704 228724])
            ("org-non-link-chars" variable
               (:constant-flag t
                :default-value "]	
<>")
                nil [228726 228767])
            ("org-link-types-re" variable nil nil [228768 228859])
            ("org-link-re-with-space" variable nil nil [228860 228964])
            ("org-link-re-with-space2" variable nil nil [228965 229070])
            ("org-link-re-with-space3" variable nil nil [229071 229180])
            ("org-angle-link-re" variable nil nil [229181 229271])
            ("org-plain-link-re" variable nil nil [229272 229342])
            ("org-bracket-link-regexp" variable nil nil [229343 229418])
            ("org-bracket-link-analytic-regexp" variable nil nil [229419 229606])
            ("org-bracket-link-analytic-regexp++" variable nil nil [229607 229734])
            ("org-any-link-re" variable nil nil [229735 229805])
            ("org-match-sexp-depth" variable
               (:constant-flag t
                :default-value 3)
                nil [229807 229899])
            ("org-create-multibrace-regexp" function (:arguments ("left" "right" "n")) nil [229901 230702])
            ("org-match-substring-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\S-\\)\\([_^]\\)\\(" "\\(?:" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)" "\\|" "\\(?:" (org-create-multibrace-regexp "(" ")" org-match-sexp-depth) "\\)" "\\|" "\\(?:\\*\\|[+-]?[[:alnum:].,\\]*[[:alnum:]]\\)\\)"))
                nil [230704 231067])
            ("org-match-substring-with-braces-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\S-\\)\\([_^]\\)" "\\(" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)"))
                nil [231069 231305])
            ("org-make-link-regexps" function nil nil [231307 232866])
            ("org-make-link-regexps" code nil nil [232868 232891])
            ("org-emph-face" variable nil nil [232893 232919])
            ("org-do-emphasis-faces" function (:arguments ("limit")) nil [232921 234045])
            ("org-emphasize" function
               (:user-visible-flag t
                :arguments ("char"))
                nil [234047 235729])
            ("org-nonsticky-props" variable
               (:constant-flag t
                :default-value (quote (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)))
                nil [235731 235854])
            ("org-rear-nonsticky-at" function (:arguments ("pos")) nil [235856 235974])
            ("org-activate-plain-links" function (:arguments ("limit")) nil [235976 237929])
            ("org-activate-code" function (:arguments ("limit")) nil [237931 238222])
            ("org-src-fontify-natively" variable (:default-value t) nil [238224 238454])
            ("org-allow-promoting-top-level-subtree" variable nil nil [238456 238692])
            ("org-fontify-meta-lines-and-blocks" function (:arguments ("limit")) nil [238694 238931])
            ("org-fontify-meta-lines-and-blocks-1" function (:arguments ("limit")) nil [238933 243161])
            ("org-fontify-drawers" function (:arguments ("limit")) nil [243163 243472])
            ("org-fontify-macros" function (:arguments ("limit")) nil [243474 243977])
            ("org-activate-angle-links" function (:arguments ("limit")) nil [243979 244433])
            ("org-activate-footnote-links" function (:arguments ("limit")) nil [244435 245179])
            ("org-activate-bracket-links" function (:arguments ("limit")) nil [245181 248250])
            ("org-activate-dates" function (:arguments ("limit")) nil [248252 248872])
            ("defvar-local" code nil nil [248874 248976])
            ("org-target-regexp" variable
               (:constant-flag t
                :default-value (let ((border "[^<>
 	]")) (format "<<\\(%s\\|%s[^<>
]*%s\\)>>" border border border)))
                nil [248978 249166])
            ("org-radio-target-regexp" variable
               (:constant-flag t
                :default-value (format "<%s>" org-target-regexp))
                nil [249168 249284])
            ("org-any-target-regexp" variable
               (:constant-flag t
                :default-value (format "%s\\|%s" org-radio-target-regexp org-target-regexp))
                nil [249286 249425])
            ("org-activate-target-links" function (:arguments ("limit")) nil [249427 249940])
            ("org-update-radio-target-regexp" function (:user-visible-flag t) nil [249942 251539])
            ("org-hide-wide-columns" function (:arguments ("limit")) nil [251541 251836])
            ("org-latex-and-related-regexp" variable nil nil [251838 251956])
            ("org-compute-latex-and-related-regexp" function nil nil [251958 252943])
            ("org-do-latex-and-related" function (:arguments ("limit")) nil [252945 253928])
            ("org-restart-font-lock" function nil nil [253930 254120])
            ("org-activate-tags" function (:arguments ("limit")) nil [254122 254487])
            ("org-outline-level" function nil nil [254489 254955])
            ("org-font-lock-keywords" variable nil nil [254957 254992])
            ("org-re-property" function (:arguments ("property" "literal" "allow-null" "value")) nil [254994 255938])
            ("org-property-re" variable
               (:constant-flag t
                :default-value (org-re-property "\\S-+" (quote literal) t))
                nil [255940 256303])
            ("org-font-lock-hook" variable nil nil [256305 256392])
            ("org-font-lock-extra-keywords" variable nil nil [256394 256435])
            ("org-font-lock-set-keywords-hook" variable nil nil [256458 256788])
            ("org-font-lock-hook" function (:arguments ("limit")) nil [256790 256916])
            ("org-set-font-lock-defaults" function nil nil [256918 261108])
            ("org-toggle-pretty-entities" function (:user-visible-flag t) nil [261110 261553])
            ("defvar-local" code nil nil [261555 261653])
            ("org-toggle-custom-properties-visibility" function (:user-visible-flag t) nil [261655 262897])
            ("org-fontify-entities" function (:arguments ("limit")) nil [262899 263783])
            ("org-fontify-like-in-org-mode" function (:arguments ("s" "odd-levels")) nil [263785 264034])
            ("org-m" variable nil nil [264036 264054])
            ("org-l" variable nil nil [264055 264073])
            ("org-f" variable nil nil [264074 264092])
            ("org-get-level-face" function (:arguments ("n")) nil [264093 264621])
            ("org-face-from-face-or-color" function (:arguments ("context" "inherit" "face-or-color")) nil [264623 264970])
            ("org-get-todo-face" function (:arguments ("kwd")) nil [264972 265328])
            ("org-get-priority-face" function (:arguments ("priority")) nil [265330 265561])
            ("org-get-tag-face" function (:arguments ("tag")) nil [265563 265837])
            ("org-font-lock-add-priority-faces" function (:arguments ("limit")) nil [265839 266161])
            ("org-font-lock-add-tag-faces" function (:arguments ("limit")) nil [266163 266512])
            ("org-unfontify-region" function (:arguments ("beg" "end" "_maybe_loudly")) nil [266514 267084])
            ("org-script-display" variable
               (:constant-flag t
                :default-value (quote (((raise -0.3) (height 0.7)) ((raise 0.3) (height 0.7)) ((raise -0.5)) ((raise 0.5)))))
                nil [267086 267280])
            ("org-remove-font-lock-display-properties" function (:arguments ("beg" "end")) nil [267282 267768])
            ("org-raise-scripts" function (:arguments ("limit")) nil [267770 269364])
            ("defvar-local" code nil nil [269444 269486])
            ("put" code nil nil [269487 269530])
            ("defvar-local" code nil nil [269531 269574])
            ("put" code nil nil [269575 269619])
            ("org-inlinetask-min-level" variable nil nil [269621 269654])
            ("org-unlogged-message" function (:arguments ("args")) nil [269656 269825])
            ("org-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [269842 276209])
            ("org-cycle-internal-global" function nil nil [276211 277590])
            ("org-called-with-limited-levels" variable nil nil [277592 277699])
            ("org-cycle-internal-local" function nil nil [277701 281920])
            ("org-global-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [281937 282612])
            ("org-set-startup-visibility" function nil nil [282614 283213])
            ("org-set-visibility-according-to-property" function
               (:user-visible-flag t
                :arguments ("no-cleanup"))
                nil [283215 284166])
            ("org-overview" function (:user-visible-flag t) nil [284349 284953])
            ("org-content" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [284955 285591])
            ("org-optimize-window-after-visibility-change" function (:arguments ("state")) nil [285593 286078])
            ("org-remove-empty-overlays-at" function (:arguments ("pos")) nil [286080 286386])
            ("org-clean-visibility-after-subtree-move" function nil nil [286388 287388])
            ("org-cycle-show-empty-lines" function (:arguments ("state")) nil [287390 289029])
            ("org-show-empty-lines-in-parent" function nil nil [289031 289276])
            ("org-files-list" function nil nil [289278 289719])
            ("org-entry-beginning-position" function nil nil [289721 289870])
            ("org-entry-end-position" function nil nil [289872 290008])
            ("org-cycle-hide-drawers" function (:arguments ("state" "exceptions")) nil [290010 291096])
            ("org-flag-drawer" function (:arguments ("flag" "element")) nil [291098 292030])
            ("org-subtree-end-visible-p" function nil nil [292032 292194])
            ("org-first-headline-recenter" function nil nil [292196 292519])
            ("org-outline-overlay-data" function (:arguments ("use-markers")) nil [292558 293279])
            ("org-set-outline-overlay-data" function (:arguments ("data")) nil [293281 293548])
            ("defvar-local" code nil nil [293573 293643])
            ("org-block-map" function (:arguments ("function" "start" "end")) nil [293645 294150])
            ("org-hide-block-toggle-all" function nil nil [294152 294292])
            ("org-hide-block-all" function (:user-visible-flag t) nil [294294 294452])
            ("org-show-block-all" function (:user-visible-flag t) nil [294454 294631])
            ("org-hide-block-toggle-maybe" function (:user-visible-flag t) nil [294633 294897])
            ("org-hide-block-toggle" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [294899 297066])
            ("add-hook" code nil nil [297112 297232])
            ("org-goto-window-configuration" variable nil nil [297248 297290])
            ("org-goto-marker" variable nil nil [297291 297319])
            ("org-goto-map" variable nil nil [297320 297341])
            ("org-goto-map" function nil nil [297342 298916])
            ("org-goto-help" variable
               (:constant-flag t
                :default-value "Browse buffer copy, to find location or copy text.%s
RET=jump to location             C-g=quit and return to previous location
[Up]/[Down]=next/prev headline   TAB=cycle visibility   [/] org-occur")
                nil [298918 299144])
            ("org-goto-start-pos" variable nil nil [299146 299173])
            ("org-goto" function
               (:user-visible-flag t
                :arguments ("alternative-interface"))
                nil [299206 300993])
            ("org-goto-selected-point" variable nil nil [300995 301031])
            ("org-goto-exit-command" variable nil nil [301063 301097])
            ("org-goto-local-auto-isearch-map" variable nil nil [301129 301169])
            ("org-get-location" function (:arguments ("_buf" "help")) nil [301187 302839])
            ("org-goto-local-auto-isearch-map" variable (:default-value (make-sparse-keymap)) nil [302841 302902])
            ("set-keymap-parent" code nil nil [302903 302971])
            ("if" code nil nil [303031 303433])
            ("org-goto-local-search-headings" function (:arguments ("string" "bound" "noerror")) nil [303435 303949])
            ("org-goto-local-auto-isearch" function (:user-visible-flag t) nil [303951 304242])
            ("org-goto-ret" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [304244 304453])
            ("org-goto-left" function (:user-visible-flag t) nil [304455 304740])
            ("org-goto-right" function (:user-visible-flag t) nil [304742 305006])
            ("org-goto-quit" function (:user-visible-flag t) nil [305008 305187])
            ("org-indirect-dedicated-frame" variable nil nil [305230 305331])
            ("org-last-indirect-buffer" variable nil nil [305332 305369])
            ("org-tree-to-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [305371 308046])
            ("org-get-indirect-buffer" function (:arguments ("buffer" "heading")) nil [308048 308527])
            ("org-set-frame-title" function (:arguments ("title")) nil [308529 308695])
            ("org--line-empty-p" function (:arguments ("n")) nil [308746 309018])
            ("org-previous-line-empty-p" function nil nil [309020 309170])
            ("org-next-line-empty-p" function nil nil [309172 309318])
            ("org-insert-heading" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok" "top"))
                nil [309320 315685])
            ("org-N-empty-lines-before-current" function (:arguments ("N")) nil [315687 316054])
            ("org-get-heading" function (:arguments ("no-tags" "no-todo")) nil [316056 316815])
            ("orgstruct-mode" variable nil nil [316817 316840])
            ("org-heading-components" function nil nil [316860 317849])
            ("org-get-entry" function nil nil [317851 318040])
            ("org-edit-headline" function
               (:user-visible-flag t
                :arguments ("heading"))
                nil [318042 318683])
            ("org-insert-heading-after-current" function (:user-visible-flag t) nil [318685 318911])
            ("org-insert-heading-respect-content" function
               (:user-visible-flag t
                :arguments ("invisible-ok"))
                nil [318913 319108])
            ("org-insert-todo-heading-respect-content" function
               (:user-visible-flag t
                :arguments ("force-state"))
                nil [319110 319318])
            ("org-insert-todo-heading" function
               (:user-visible-flag t
                :arguments ("arg" "force-heading"))
                nil [319320 320691])
            ("org-insert-subheading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [320693 320960])
            ("org-insert-todo-subheading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [320962 321269])
            ("org-after-demote-entry-hook" variable nil nil [321299 321507])
            ("org-after-promote-entry-hook" variable nil nil [321509 321720])
            ("org-promote-subtree" function (:user-visible-flag t) nil [321722 321936])
            ("org-demote-subtree" function (:user-visible-flag t) nil [321938 322161])
            ("org-do-promote" function (:user-visible-flag t) nil [322163 322510])
            ("org-do-demote" function (:user-visible-flag t) nil [322512 322855])
            ("org-fix-position-after-promote" function nil nil [322857 323278])
            ("org-current-level" function nil nil [323280 323681])
            ("org-get-previous-line-level" function nil nil [323683 324038])
            ("org-reduced-level" function (:arguments ("l")) nil [324040 324258])
            ("org-level-increment" function nil nil [324260 324474])
            ("org-get-valid-level" function (:arguments ("level" "change")) nil [324476 325060])
            ("org-promote" function nil nil [325062 325924])
            ("org-demote" function nil nil [325926 326543])
            ("org-cycle-level" function (:user-visible-flag t) nil [326545 328061])
            ("org-map-tree" function (:arguments ("fun")) nil [328063 328386])
            ("org-map-region" function (:arguments ("fun" "beg" "end")) nil [328388 328799])
            ("org-fixup-indentation" function (:arguments ("diff")) nil [328801 332798])
            ("org-convert-to-odd-levels" function (:user-visible-flag t) nil [332800 333377])
            ("org-convert-to-oddeven-levels" function (:user-visible-flag t) nil [333379 334368])
            ("org-tr-level" function (:arguments ("n")) nil [334370 334464])
            ("org-move-subtree-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [334525 334715])
            ("org-move-subtree-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [334717 337456])
            ("org-subtree-clip" variable nil nil [337458 337678])
            ("org-subtree-clip-folded" variable nil nil [337680 337806])
            ("org-cut-subtree" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [337808 338061])
            ("org-copy-subtree" function
               (:user-visible-flag t
                :arguments ("n" "cut" "force-store-markers" "nosubtrees"))
                nil [338063 339680])
            ("org-paste-subtree" function
               (:user-visible-flag t
                :arguments ("level" "tree" "for-yank" "remove"))
                nil [339682 343905])
            ("org-kill-is-subtree-p" function (:arguments ("txt")) nil [343907 344915])
            ("org-markers-to-move" variable nil nil [344917 345106])
            ("org-save-markers-in-region" function (:arguments ("beg" "end")) nil [345108 345751])
            ("org-check-and-save-marker" function (:arguments ("marker" "beg" "end")) nil [345753 346089])
            ("org-reinstall-markers-in-region" function (:arguments ("beg")) nil [346091 346313])
            ("org-narrow-to-subtree" function (:user-visible-flag t) nil [346315 346666])
            ("org-narrow-to-block" function (:user-visible-flag t) nil [346668 346966])
            ("org-clone-subtree-with-time-shift" function
               (:user-visible-flag t
                :arguments ("n" "shift"))
                nil [346968 351329])
            ("org-sort" function
               (:user-visible-flag t
                :arguments ("with-case"))
                nil [351352 351737])
            ("org-sort-remove-invisible" function (:arguments ("s")) nil [351739 352248])
            ("org-priority-regexp" variable nil nil [352250 352278])
            ("org-after-sorting-entries-or-items-hook" variable nil nil [352308 352627])
            ("org-sort-entries" function
               (:user-visible-flag t
                :arguments ("with-case" "sorting-type" "getkey-func" "compare-func" "property"))
                nil [352629 360774])
            ("orgstruct-heading-prefix-regexp" variable nil nil [361757 361967])
            ("orgstruct-setup-hook" variable nil nil [362052 362217])
            ("orgstruct-initialized" variable nil nil [362219 362253])
            ("org-local-vars" variable nil nil [362255 362340])
            ("define-minor-mode" code nil nil [362357 362955])
            ("turn-on-orgstruct" function nil nil [362972 363067])
            ("defvar-local" code nil nil [363069 363164])
            ("defvar-local" code nil nil [363165 363195])
            ("orgstruct++-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [363196 364333])
            ("turn-on-orgstruct++" function nil nil [364350 364451])
            ("orgstruct-error" function (:user-visible-flag t) nil [364453 364689])
            ("orgstruct-setup" function nil nil [364691 366706])
            ("orgstruct-make-binding" function (:arguments ("fun" "key" "disable-when-heading-prefix")) nil [366708 369576])
            ("org-contextualize-keys" function (:arguments ("alist" "contexts")) nil [369578 371045])
            ("org-contextualize-validate-key" function (:arguments ("key" "contexts")) nil [371047 371961])
            ("org-context-p" function (:arguments ("contexts")) nil [371963 372508])
            ("org-unique-local-variables" variable
               (:constant-flag t
                :default-value (quote (org-element--cache org-element--cache-objects org-element--cache-sync-keys org-element--cache-sync-requests org-element--cache-sync-timer)))
                nil [372510 372780])
            ("org-get-local-variables" function nil nil [372782 373352])
            ("org-clone-local-variables" function (:arguments ("from-buffer" "regexp")) nil [373354 373790])
            ("org-run-like-in-org-mode" function (:arguments ("cmd")) nil [373807 374444])
            ("org-get-category" function (:arguments ("pos" "force-refresh")) nil [374446 374796])
            ("org-refresh-properties" function (:arguments ("dprop" "tprop")) nil [374822 375414])
            ("org-refresh-property" function (:arguments ("tprop" "p")) nil [375416 376065])
            ("org-refresh-category-properties" function nil nil [376067 377551])
            ("org-refresh-stats-properties" function nil nil [377553 378248])
            ("org-refresh-effort-properties" function nil nil [378250 378451])
            ("org-link-expand-abbrev" function (:arguments ("link")) nil [378494 379297])
            ("org-insert-link-history" variable nil nil [379332 379434])
            ("org-stored-links" variable nil nil [379436 379518])
            ("org-store-link-plist" variable nil nil [379520 379633])
            ("org-store-link-functions" function nil nil [379635 380842])
            ("org-agenda-buffer-name" variable nil nil [380844 380875])
            ("org-id-link-to-org-use-id" variable nil nil [380903 380937])
            ("org-store-link" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [380977 389207])
            ("org-store-link-props" function (:arguments ("plist")) nil [389209 390379])
            ("org-add-link-props" function (:arguments ("plist")) nil [390381 390640])
            ("org-email-link-description" function (:arguments ("fmt")) nil [390642 391758])
            ("org-make-org-heading-search-string" function (:arguments ("string")) nil [391760 392563])
            ("org-make-link-string" function (:arguments ("link" "description")) nil [392565 393566])
            ("org-link-escape-chars" variable
               (:constant-flag t
                :default-value (quote (32 91 93 37)))
                nil [393568 393769])
            ("org-link-escape" function (:arguments ("text" "table" "merge")) nil [393771 394590])
            ("org-link-unescape" function (:arguments ("str")) nil [394592 394914])
            ("org-link-unescape-compound" function (:arguments ("hex")) nil [394916 395991])
            ("org-link-unescape-single-byte-sequence" function (:arguments ("hex")) nil [395993 396223])
            ("org-xor" function (:arguments ("a" "b")) nil [396225 396283])
            ("org-fixup-message-id-for-http" function (:arguments ("s")) nil [396285 396770])
            ("org-link-prettify" function (:arguments ("link")) nil [396772 397099])
            ("org-insert-link-global" function (:user-visible-flag t) nil [397116 397347])
            ("org-insert-all-links" function
               (:user-visible-flag t
                :arguments ("arg" "pre" "post"))
                nil [397349 398141])
            ("org-insert-last-stored-link" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [398143 398296])
            ("org-link-fontify-links-to-this-file" function nil nil [398298 399058])
            ("org--links-history" variable nil nil [399060 399091])
            ("org-insert-link" function
               (:user-visible-flag t
                :arguments ("complete-file" "link-location" "default-description"))
                nil [399092 406977])
            ("org-link-try-special-completion" function (:arguments ("type")) nil [406979 407257])
            ("org-file-complete-link" function (:arguments ("arg")) nil [407259 407948])
            ("org-completing-read" function (:arguments ("args")) nil [407950 408446])
            ("org-link-search-failed" variable nil nil [408478 408513])
            ("org-open-link-functions" variable nil nil [408515 409328])
            ("org-next-link" function
               (:user-visible-flag t
                :arguments ("search-backward"))
                nil [409330 410255])
            ("org-previous-link" function (:user-visible-flag t) nil [410257 410412])
            ("org-translate-link" function (:arguments ("s")) nil [410414 410629])
            ("org-translate-link-from-planner" function (:arguments ("type" "path")) nil [410631 411572])
            ("org-find-file-at-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [411574 411720])
            ("org-open-at-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [411722 412011])
            ("org-window-config-before-follow-link" variable nil nil [412013 412169])
            ("org-open-at-point-global" function (:user-visible-flag t) nil [412186 412790])
            ("org-open-link-from-string" function
               (:user-visible-flag t
                :arguments ("s" "arg" "reference-buffer"))
                nil [412807 413340])
            ("org-open-at-point-functions" variable nil nil [413342 413591])
            ("org-link-search-inhibit-query" variable nil nil [413593 413635])
            ("clean-buffer-list-kill-buffer-names" variable nil nil [413636 413680])
            ("org--open-doi-link" function (:arguments ("path")) nil [413705 413880])
            ("org--open-elisp-link" function (:arguments ("path")) nil [413882 414485])
            ("org--open-help-link" function (:arguments ("path")) nil [414487 414805])
            ("org--open-shell-link" function (:arguments ("path")) nil [414807 415563])
            ("org-open-at-point" function
               (:user-visible-flag t
                :arguments ("arg" "reference-buffer"))
                nil [415565 422763])
            ("org-offer-links-in-entry" function (:arguments ("buffer" "marker" "nth" "zero")) nil [422765 424922])
            ("org-open-file-with-system" function (:arguments ("path")) nil [425053 425182])
            ("org-open-file-with-emacs" function (:arguments ("path")) nil [425183 425284])
            ("org-create-file-search-functions" variable nil nil [425304 426391])
            ("org-execute-file-search-functions" variable nil nil [426393 427445])
            ("org-search-radio-target" function (:arguments ("target")) nil [427447 428163])
            ("org-link-search" function (:arguments ("s" "avoid-pos" "stealth")) nil [428165 434708])
            ("org-get-buffer-for-internal-link" function (:arguments ("buffer")) nil [434710 435360])
            ("org-do-occur" function (:arguments ("regexp" "cleanup")) nil [435362 436085])
            ("org-mark-ring" variable nil nil [436122 436202])
            ("org-mark-ring-last-goto" variable nil nil [436203 436291])
            ("setq" code nil nil [436319 436371])
            ("dotimes" code nil nil [436400 436471])
            ("setcdr" code nil nil [436472 436544])
            ("org-mark-ring-push" function
               (:user-visible-flag t
                :arguments ("pos" "buffer"))
                nil [436546 437005])
            ("org-mark-ring-goto" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [437007 437754])
            ("org-add-angle-brackets" function (:arguments ("s")) nil [437756 437923])
            ("org-agenda-buffer-tmp-name" variable nil nil [437955 437990])
            ("org-agenda-start-on-weekday" variable nil nil [437991 438027])
            ("org-follow-timestamp-link" function nil nil [438028 438860])
            ("declare-function" code nil nil [438888 438962])
            ("declare-function" code nil nil [438963 439024])
            ("declare-function" code nil nil [439025 439112])
            ("org-wait" variable nil nil [439113 439134])
            ("org-open-file" function (:arguments ("path" "in-emacs" "line" "search")) nil [439135 445041])
            ("org-file-apps-entry-match-against-dlink-p" function (:arguments ("entry")) nil [445043 445707])
            ("org-default-apps" function nil nil [445709 445977])
            ("org-apps-regexp-alist" function (:arguments ("list" "add-auto-mode")) nil [445979 446634])
            ("ange-ftp-name-format" variable nil nil [446636 446665])
            ("org-file-remote-p" function (:arguments ("file")) nil [446666 447185])
            ("org-get-org-file" function nil nil [447203 447474])
            ("org-notes-order-reversed-p" function nil nil [447476 447874])
            ("org-refile-target-table" variable nil nil [447876 447969])
            ("org-agenda-new-buffers" variable nil nil [447971 448049])
            ("org-refile-cache" variable nil nil [448051 448110])
            ("org-refile-markers" variable nil nil [448112 448198])
            ("org-refile-marker" function (:arguments ("pos")) nil [448200 448433])
            ("org-refile-cache-clear" function nil nil [448435 448684])
            ("org-refile-cache-check-set" function (:arguments ("set")) nil [448686 449113])
            ("org-refile-cache-put" function (:arguments ("set" "identifiers")) nil [449115 449407])
            ("org-refile-cache-get" function (:arguments ("identifiers")) nil [449409 449782])
            ("org-outline-path-cache" variable nil nil [449784 450071])
            ("org-refile-get-targets" function (:arguments ("default-buffer")) nil [450073 453336])
            ("org-protect-slash" function (:arguments ("s")) nil [453338 453414])
            ("org--get-outline-path-1" function (:arguments ("use-cache")) nil [453416 454606])
            ("org-get-outline-path" function (:arguments ("with-self" "use-cache")) nil [454608 455571])
            ("org-format-outline-path" function (:arguments ("path" "width" "prefix" "separator")) nil [455573 456702])
            ("org-display-outline-path" function
               (:user-visible-flag t
                :arguments ("file" "current" "separator" "just-return-string"))
                nil [456704 457782])
            ("org-refile-history" variable nil nil [457784 457852])
            ("org-after-refile-insert-hook" variable nil nil [457854 458055])
            ("org-capture-last-stored-marker" variable nil nil [458057 458096])
            ("org-refile-keep" variable nil nil [458097 458185])
            ("org-copy" function (:user-visible-flag t) nil [458187 458330])
            ("org-refile" function
               (:user-visible-flag t
                :arguments ("arg" "default-buffer" "rfloc" "msg"))
                nil [458332 464779])
            ("org-refile-goto-last-stored" function (:user-visible-flag t) nil [464781 465014])
            ("org-refile--get-location" function (:arguments ("refloc" "tbl")) nil [465016 465382])
            ("org-refile-get-location" function (:arguments ("prompt" "default-buffer" "new-nodes")) nil [465384 468076])
            ("declare-function" code nil nil [468078 468127])
            ("org-refile-check-position" function (:arguments ("refile-pointer")) nil [468128 468876])
            ("org-refile-new-child" function (:arguments ("parent-target" "child")) nil [468878 469703])
            ("org-olpath-completing-read" function (:arguments ("prompt" "collection" "args")) nil [469705 470428])
            ("org-find-dblock" function (:arguments ("name")) nil [470451 470870])
            ("org-create-dblock" function (:arguments ("plist")) nil [470872 471462])
            ("org-prepare-dblock" function nil nil [471464 472402])
            ("org-map-dblocks" function (:arguments ("command")) nil [472404 473001])
            ("org-dblock-update" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [473003 473339])
            ("org-update-dblock" function (:user-visible-flag t) nil [473341 474374])
            ("org-beginning-of-dblock" function nil nil [474376 474810])
            ("org-update-all-dblocks" function (:user-visible-flag t) nil [474812 475020])
            ("declare-function" code nil nil [475040 475099])
            ("org-get-export-keywords" function nil nil [475100 475695])
            ("org-options-keywords" variable
               (:constant-flag t
                :default-value (quote ("ARCHIVE:" "AUTHOR:" "BIND:" "CATEGORY:" "COLUMNS:" "CREATOR:" "DATE:" "DESCRIPTION:" "DRAWERS:" "EMAIL:" "EXCLUDE_TAGS:" "FILETAGS:" "INCLUDE:" "INDEX:" "KEYWORDS:" "LANGUAGE:" "MACRO:" "OPTIONS:" "PROPERTY:" "PRIORITIES:" "SELECT_TAGS:" "SEQ_TODO:" "SETUPFILE:" "STARTUP:" "TAGS:" "TITLE:" "TODO:" "TYP_TODO:" "SELECT_TAGS:" "EXCLUDE_TAGS:")))
                nil [475697 476092])
            ("org-structure-template-alist" variable (:default-value (quote (("s" "#+BEGIN_SRC ?

#+END_SRC") ("e" "#+BEGIN_EXAMPLE
?
#+END_EXAMPLE") ("q" "#+BEGIN_QUOTE
?
#+END_QUOTE") ("v" "#+BEGIN_VERSE
?
#+END_VERSE") ("V" "#+BEGIN_VERBATIM
?
#+END_VERBATIM") ("c" "#+BEGIN_CENTER
?
#+END_CENTER") ("l" "#+BEGIN_EXPORT latex
?
#+END_EXPORT") ("L" "#+LaTeX: ") ("h" "#+BEGIN_EXPORT html
?
#+END_EXPORT") ("H" "#+HTML: ") ("a" "#+BEGIN_EXPORT ascii
?
#+END_EXPORT") ("A" "#+ASCII: ") ("i" "#+INDEX: ?") ("I" "#+INCLUDE: %file ?")))) nil [476094 477443])
            ("org-try-structure-completion" function nil nil [477445 477949])
            ("org-complete-expand-structure-template" function (:arguments ("start" "cell")) nil [477951 478729])
            ("org-toggle-comment" function (:user-visible-flag t) nil [478762 479378])
            ("org-last-todo-state-is-todo" variable nil nil [479380 479572])
            ("org-setting-tags" variable nil nil [479574 479603])
            ("org-todo-setup-filter-hook" variable nil nil [479627 479818])
            ("org-todo-get-default-hook" variable nil nil [479820 480031])
            ("org-agenda-headline-snapshot-before-repeat" variable nil nil [480033 480084])
            ("org-current-effective-time" function nil nil [480086 480535])
            ("org-todo-yesterday" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [480537 480907])
            ("org-block-entry-blocking" variable nil nil [480909 480995])
            ("org-cancel-repeater" function (:user-visible-flag t) nil [480997 481534])
            ("org-state" variable nil nil [481536 481554])
            ("org-todo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [481596 491447])
            ("org-block-todo-from-children-or-siblings-or-parent" function (:arguments ("change-plist")) nil [491449 494399])
            ("org-track-ordered-property-with-tag" variable nil nil [494434 495275])
            ("org-toggle-ordered-property" function (:user-visible-flag t) nil [495277 495977])
            ("org-blocked-by-checkboxes" variable nil nil [495979 496013])
            ("org-block-todo-from-checkboxes" function (:arguments ("change-plist")) nil [496035 497289])
            ("org-entry-blocked-p" function nil nil [497306 497655])
            ("org-update-statistics-cookies" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [497657 499081])
            ("org-entry-property-inherited-from" variable nil nil [499083 499125])
            ("org-update-parent-todo-statistics" function nil nil [499143 502904])
            ("org-after-todo-statistics-hook" variable nil nil [502906 503637])
            ("org-todo-statistics-hook" variable nil nil [503639 503876])
            ("org-todo-trigger-tag-changes" function (:arguments ("state")) nil [503878 504543])
            ("org-local-logging" function (:arguments ("value")) nil [504545 505132])
            ("org-get-todo-sequence-head" function (:arguments ("kwd")) nil [505134 505702])
            ("org-fast-todo-selection" function nil nil [505704 507742])
            ("org-entry-is-todo-p" function nil nil [507744 507828])
            ("org-entry-is-done-p" function nil nil [507830 507910])
            ("org-get-todo-state" function nil nil [507912 508150])
            ("org-at-date-range-p" function
               (:user-visible-flag t
                :arguments ("inactive-ok"))
                nil [508152 508930])
            ("org-get-repeat" function (:arguments ("tagline")) nil [508932 509295])
            ("org-last-changed-timestamp" variable nil nil [509297 509332])
            ("org-last-inserted-timestamp" variable nil nil [509333 509369])
            ("org-log-post-message" variable nil nil [509370 509399])
            ("org-log-note-purpose" variable nil nil [509400 509429])
            ("org-log-note-how" variable nil nil [509430 509459])
            ("org-log-note-extra" variable nil nil [509460 509487])
            ("org-auto-repeat-maybe" function (:arguments ("done-word")) nil [509488 513975])
            ("org-show-todo-tree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [513977 514992])
            ("org-deadline" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [514994 517742])
            ("org-schedule" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [517744 520509])
            ("org-get-scheduled-time" function (:arguments ("pom" "inherit")) nil [520511 520833])
            ("org-get-deadline-time" function (:arguments ("pom" "inherit")) nil [520835 521149])
            ("org-remove-timestamp-with-keyword" function (:arguments ("keyword")) nil [521151 521818])
            ("org-time-was-given" variable nil nil [521820 521847])
            ("org-end-time-was-given" variable nil nil [521879 521910])
            ("org-at-planning-p" function nil nil [521943 522460])
            ("org-add-planning-info" function (:arguments ("what" "time" "remove")) nil [522462 526045])
            ("org-log-note-marker" variable (:default-value (make-marker)) nil [526047 526156])
            ("org-log-note-purpose" variable nil nil [526157 526190])
            ("org-log-note-state" variable nil nil [526191 526222])
            ("org-log-note-previous-state" variable nil nil [526223 526263])
            ("org-log-note-extra" variable nil nil [526264 526295])
            ("org-log-note-window-configuration" variable nil nil [526296 526342])
            ("org-log-note-return-to" variable (:default-value (make-marker)) nil [526343 526388])
            ("org-log-note-effective-time" variable nil nil [526389 526548])
            ("org-log-post-message" variable nil nil [526550 526674])
            ("org-add-note" function (:user-visible-flag t) nil [526676 526840])
            ("org-log-beginning" function (:arguments ("create")) nil [526842 528333])
            ("org-add-log-setup" function (:arguments ("purpose" "state" "prev-state" "how" "extra")) nil [528335 528970])
            ("org-skip-over-state-notes" function nil nil [528972 529743])
            ("org-add-log-note" function (:arguments ("_purpose")) nil [529745 531402])
            ("org-note-abort" variable nil nil [531404 531431])
            ("org-store-log-note" function nil nil [531453 535015])
            ("org-remove-empty-drawer-at" function (:arguments ("pos")) nil [535017 535633])
            ("org-ts-type" variable nil nil [535635 535659])
            ("org-sparse-tree" function
               (:user-visible-flag t
                :arguments ("arg" "type"))
                nil [535660 538034])
            ("defvar-local" code nil nil [538036 538120])
            ("defvar-local" code nil nil [538121 538680])
            ("org-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "keep-previous" "callback"))
                nil [538682 540641])
            ("org-occur-next-match" function (:arguments ("n" "_reset")) nil [540643 541481])
            ("org-show-context" function (:arguments ("key")) nil [541483 541892])
            ("org-show-set-visibility" function (:arguments ("detail")) nil [541894 543182])
            ("org-reveal-start-hook" variable nil nil [543184 543260])
            ("org-reveal" function
               (:user-visible-flag t
                :arguments ("siblings"))
                nil [543262 544107])
            ("org-highlight-new-match" function (:arguments ("beg" "end")) nil [544109 544388])
            ("org-remove-occur-highlights" function
               (:user-visible-flag t
                :arguments ("_beg" "_end" "noremove"))
                nil [544390 544916])
            ("org-priority-regexp" variable (:default-value ".*?\\(\\[#\\([A-Z0-9]\\)\\] ?\\)") nil [544935 545054])
            ("org-remove-priority-next-time" variable nil nil [545056 545098])
            ("org-priority-up" function (:user-visible-flag t) nil [545100 545210])
            ("org-priority-down" function (:user-visible-flag t) nil [545212 545326])
            ("org-priority" function
               (:user-visible-flag t
                :arguments ("action" "_show"))
                nil [545328 548283])
            ("org-show-priority" function (:user-visible-flag t) nil [548285 548806])
            ("org-get-priority" function (:arguments ("s")) nil [548808 549172])
            ("org-agenda-archives-mode" variable nil nil [549185 549218])
            ("org-map-continue-from" variable nil nil [549219 549378])
            ("org-scanner-tags" variable nil nil [549380 549469])
            ("org-trust-scanner-tags" variable nil nil [549471 550049])
            ("org--matcher-tags-todo-only" variable nil nil [550051 550091])
            ("org-scan-tags" function (:arguments ("action" "matcher" "todo-only" "start-level")) nil [550093 556250])
            ("org-remove-uninherited-tags" function (:arguments ("tags")) nil [556252 556917])
            ("org-match-sparse-tree" function
               (:user-visible-flag t
                :arguments ("todo-only" "match"))
                nil [556919 557574])
            ("defalias" code nil nil [557576 557631])
            ("org-cached-props" variable nil nil [557633 557662])
            ("org-cached-entry-get" function (:arguments ("pom" "property")) nil [557663 558307])
            ("org-global-tags-completion-table" function (:arguments ("files")) nil [558309 558884])
            ("org-make-tags-matcher" function (:arguments ("match")) nil [558886 564600])
            ("org-tags-expand" function (:arguments ("match" "single-as-list" "downcased" "tags-already-expanded")) nil [564602 569620])
            ("org-op-to-function" function (:arguments ("op" "stringp")) nil [569622 570166])
            ("org<>" function (:arguments ("a" "b")) nil [570168 570201])
            ("org-string<=" function (:arguments ("a" "b")) nil [570202 570261])
            ("org-string>=" function (:arguments ("a" "b")) nil [570262 570308])
            ("org-string>" function (:arguments ("a" "b")) nil [570309 570381])
            ("org-string<>" function (:arguments ("a" "b")) nil [570382 570428])
            ("org-time=" function (:arguments ("a" "b")) nil [570429 570522])
            ("org-time<" function (:arguments ("a" "b")) nil [570523 570616])
            ("org-time<=" function (:arguments ("a" "b")) nil [570617 570710])
            ("org-time>" function (:arguments ("a" "b")) nil [570711 570804])
            ("org-time>=" function (:arguments ("a" "b")) nil [570805 570898])
            ("org-time<>" function (:arguments ("a" "b")) nil [570899 570992])
            ("org-2ft" function (:arguments ("s")) nil [570993 571357])
            ("org-time-today" function nil nil [571359 571609])
            ("org-matcher-time" function (:arguments ("s")) nil [571611 572194])
            ("org-match-any-p" function (:arguments ("re" "list")) nil [572196 572347])
            ("org-add-colon-after-tag-completion" variable nil nil [572349 572396])
            ("org-tags-overlay" variable (:default-value (make-overlay 1 1)) nil [572426 572470])
            ("delete-overlay" code nil nil [572471 572504])
            ("org-get-local-tags-at" function (:arguments ("pos")) nil [572506 572638])
            ("org-get-local-tags" function nil nil [572640 572756])
            ("org-get-tags-at" function
               (:user-visible-flag t
                :arguments ("pos" "local"))
                nil [572758 574239])
            ("org-add-prop-inherited" function (:arguments ("s")) nil [574241 574333])
            ("org-toggle-tag" function (:arguments ("tag" "onoff")) nil [574335 575350])
            ("org--align-tags-here" function (:arguments ("to-col")) nil [575352 576056])
            ("org-set-tags-command" function
               (:user-visible-flag t
                :arguments ("arg" "just-align"))
                nil [576058 576463])
            ("org-set-tags-to" function
               (:user-visible-flag t
                :arguments ("data"))
                nil [576465 577484])
            ("org-align-all-tags" function (:user-visible-flag t) nil [577486 577735])
            ("org-indent-indentation-per-level" variable nil nil [577737 577778])
            ("org-set-tags" function
               (:user-visible-flag t
                :arguments ("arg" "just-align"))
                nil [577779 581825])
            ("org-change-tag-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "tag" "off"))
                nil [581827 583376])
            ("org-tags-completion-function" function (:arguments ("string" "_predicate" "flag")) nil [583378 584193])
            ("org-fast-tag-insert" function (:arguments ("kwd" "tags" "face" "end")) nil [584195 584451])
            ("org-fast-tag-show-exit" function (:arguments ("flag")) nil [584453 584794])
            ("org-set-current-tags-overlay" function (:arguments ("current" "prefix")) nil [584796 585098])
            ("org-last-tag-selection-key" variable nil nil [585100 585139])
            ("org-fast-tag-selection" function (:arguments ("current" "inherited" "table" "todo-table")) nil [585140 592209])
            ("org-get-tags-string" function nil nil [592211 592508])
            ("org-get-tags" function nil nil [592510 592640])
            ("org-get-buffer-tags" function nil nil [592642 593107])
            ("org-agenda-skip-comment-trees" variable nil nil [593131 593169])
            ("org-agenda-skip-function" variable nil nil [593170 593203])
            ("org-map-entries" function (:arguments ("func" "match" "scope" "skip")) nil [593204 598698])
            ("org-special-properties" variable
               (:constant-flag t
                :default-value (quote ("ALLTAGS" "BLOCKED" "CLOCKSUM" "CLOCKSUM_T" "CLOSED" "DEADLINE" "FILE" "ITEM" "PRIORITY" "SCHEDULED" "TAGS" "TIMESTAMP" "TIMESTAMP_IA" "TODO")))
                nil [598720 599039])
            ("org-default-properties" variable
               (:constant-flag t
                :default-value (quote ("ARCHIVE" "CATEGORY" "SUMMARY" "DESCRIPTION" "CUSTOM_ID" "LOCATION" "LOGGING" "COLUMNS" "VISIBILITY" "TABLE_EXPORT_FORMAT" "TABLE_EXPORT_FILE" "EXPORT_OPTIONS" "EXPORT_TEXT" "EXPORT_FILE_NAME" "EXPORT_TITLE" "EXPORT_AUTHOR" "EXPORT_DATE" "UNNUMBERED" "ORDERED" "NOBLOCKING" "COOKIE_DATA" "LOG_INTO_DRAWER" "REPEAT_TO_STATE" "CLOCK_MODELINE_TOTAL" "STYLE" "HTML_CONTAINER_CLASS")))
                nil [599041 599617])
            ("org--valid-property-p" function (:arguments ("property")) nil [599619 599794])
            ("org--update-property-plist" function (:arguments ("key" "val" "props")) nil [599796 600208])
            ("org-get-property-block" function (:arguments ("beg" "force")) nil [600210 601272])
            ("org-at-property-p" function nil nil [601274 601659])
            ("org-property-action" function (:user-visible-flag t) nil [601661 602227])
            ("org-inc-effort" function (:user-visible-flag t) nil [602229 602364])
            ("org-clock-effort" variable nil nil [602366 602391])
            ("org-clock-current-task" variable nil nil [602425 602456])
            ("org-set-effort" function
               (:user-visible-flag t
                :arguments ("value" "increment"))
                nil [602484 604351])
            ("org-entry-properties" function (:arguments ("pom" "which")) nil [604353 612361])
            ("org-property--local-values" function (:arguments ("property" "literal-nil")) nil [612363 613343])
            ("org-entry-get" function (:arguments ("pom" "property" "inherit" "literal-nil")) nil [613345 614827])
            ("org-property-or-variable-value" function (:arguments ("var" "inherit")) nil [614829 615190])
            ("org-entry-delete" function (:arguments ("pom" "property")) nil [615192 616096])
            ("org-entry-add-to-multivalued-property" function (:arguments ("pom" "property" "value")) nil [616242 616690])
            ("org-entry-remove-from-multivalued-property" function (:arguments ("pom" "property" "value")) nil [616692 617137])
            ("org-entry-member-in-multivalued-property" function (:arguments ("pom" "property" "value")) nil [617139 617460])
            ("org-entry-get-multivalued-property" function (:arguments ("pom" "property")) nil [617462 617723])
            ("org-entry-put-multivalued-property" function (:arguments ("pom" "property" "values")) nil [617725 618152])
            ("org-entry-protect-space" function (:arguments ("s")) nil [618154 618382])
            ("org-entry-restore-space" function (:arguments ("s")) nil [618384 618612])
            ("org-entry-property-inherited-from" variable (:default-value (make-marker)) nil [618614 619009])
            ("org-entry-get-with-inheritance" function (:arguments ("property" "literal-nil")) nil [619011 620333])
            ("org-property-changed-functions" variable nil nil [620335 620528])
            ("org-entry-put" function (:arguments ("pom" "property" "value")) nil [620530 623585])
            ("org-buffer-property-keys" function (:arguments ("specials" "defaults" "columns" "ignore-malformed")) nil [623587 626313])
            ("org-property-values" function (:arguments ("key")) nil [626315 626650])
            ("org-insert-property-drawer" function nil nil [626652 627439])
            ("org-insert-drawer" function
               (:user-visible-flag t
                :arguments ("arg" "drawer"))
                nil [627441 629495])
            ("org-property-set-functions-alist" variable nil nil [629497 629732])
            ("org-set-property-function" function (:arguments ("property")) nil [629734 629992])
            ("org-read-property-value" function (:arguments ("property")) nil [629994 630654])
            ("org-last-set-property" variable nil nil [630656 630690])
            ("org-last-set-property-value" variable nil nil [630691 630731])
            ("org-read-property-name" function nil nil [630732 631153])
            ("org-set-property-and-value" function
               (:user-visible-flag t
                :arguments ("use-last"))
                nil [631155 631784])
            ("org-set-property" function
               (:user-visible-flag t
                :arguments ("property" "value"))
                nil [631786 633075])
            ("org-find-property" function (:arguments ("property" "value")) nil [633077 633849])
            ("org-delete-property" function
               (:user-visible-flag t
                :arguments ("property"))
                nil [633851 634444])
            ("org-delete-property-globally" function
               (:user-visible-flag t
                :arguments ("property"))
                nil [634446 635082])
            ("org-columns-current-fmt-compiled" variable nil nil [635084 635125])
            ("org-compute-property-at-point" function (:user-visible-flag t) nil [635155 635705])
            ("org-property-allowed-value-functions" variable nil nil [635707 636167])
            ("org-property-get-allowed-values" function (:arguments ("pom" "property" "table")) nil [636169 637391])
            ("org-property-previous-allowed-value" function
               (:user-visible-flag t
                :arguments ("_previous"))
                nil [637393 637568])
            ("org-property-next-allowed-value" function
               (:user-visible-flag t
                :arguments ("previous"))
                nil [637570 638980])
            ("org-find-olp" function (:arguments ("path" "this-buffer")) nil [638982 640522])
            ("org-find-exact-headline-in-buffer" function (:arguments ("heading" "buffer" "pos-only")) nil [640524 641239])
            ("org-find-exact-heading-in-directory" function (:arguments ("heading" "dir")) nil [641241 641946])
            ("org-find-entry-with-id" function
               (:user-visible-flag t
                :arguments ("ident"))
                nil [641948 642542])
            ("org-last-changed-timestamp" variable nil nil [642561 642600])
            ("org-last-inserted-timestamp" variable nil nil [642601 642704])
            ("org-ts-what" variable nil nil [642705 642725])
            ("org-time-stamp" function
               (:user-visible-flag t
                :arguments ("arg" "inactive"))
                nil [642758 645409])
            ("org-get-compact-tod" function (:arguments ("s")) nil [645490 646124])
            ("org-time-stamp-inactive" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [646126 646541])
            ("org-date-ovl" variable (:default-value (make-overlay 1 1)) nil [646543 646583])
            ("overlay-put" code nil nil [646584 646635])
            ("delete-overlay" code nil nil [646636 646665])
            ("org-ans1" variable nil nil [646667 646684])
            ("org-ans2" variable nil nil [646716 646733])
            ("org-plain-time-of-day-regexp" variable nil nil [646766 646803])
            ("org-overriding-default-time" variable nil nil [646821 646861])
            ("org-read-date-overlay" variable nil nil [646883 646917])
            ("org-dcst" variable nil nil [646918 646939])
            ("org-read-date-history" variable nil nil [646961 646995])
            ("org-read-date-final-answer" variable nil nil [646996 647035])
            ("org-read-date-analyze-futurep" variable nil nil [647036 647078])
            ("org-read-date-analyze-forced-year" variable nil nil [647079 647125])
            ("org-read-date-inactive" variable nil nil [647126 647157])
            ("org-read-date-minibuffer-local-map" variable (:default-value (let* ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (org-defkey map (kbd ".") (lambda nil (interactive) (if (looking-back "^[^:]+: " (let ((inhibit-field-text-motion t)) (line-beginning-position))) (org-eval-in-calendar (quote (calendar-goto-today))) (insert ".")))) (org-defkey map (kbd "C-.") (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-goto-today))))) (org-defkey map [(meta shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-month 1))))) (org-defkey map [(meta shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-month 1))))) (org-defkey map [(meta shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-year 1))))) (org-defkey map [(meta shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-year 1))))) (org-defkey map [27 (shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-month 1))))) (org-defkey map [27 (shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-month 1))))) (org-defkey map [27 (shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-year 1))))) (org-defkey map [27 (shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-year 1))))) (org-defkey map [(shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-week 1))))) (org-defkey map [(shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-week 1))))) (org-defkey map [(shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-day 1))))) (org-defkey map [(shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-day 1))))) (org-defkey map "!" (lambda nil (interactive) (org-eval-in-calendar (quote (diary-view-entries))) (message ""))) (org-defkey map ">" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-left 1))))) (org-defkey map "<" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-right 1))))) (org-defkey map "" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-left-three-months 1))))) (org-defkey map "\366" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-right-three-months 1))))) map)) nil [647159 650356])
            ("org-def" variable nil nil [650358 650374])
            ("org-defdecode" variable nil nil [650375 650397])
            ("org-with-time" variable nil nil [650398 650420])
            ("calendar-setup" variable nil nil [650422 650445])
            ("org-read-date" function (:arguments ("with-time" "to-time" "from-string" "prompt" "default-time" "default-input" "inactive")) nil [650470 657103])
            ("org-read-date-display" function nil nil [657105 658571])
            ("org-read-date-analyze" function (:arguments ("ans" "def" "defdecode")) nil [658573 667674])
            ("parse-time-weekdays" variable nil nil [667676 667704])
            ("org-read-date-get-relative" function (:arguments ("s" "today" "default")) nil [667705 669245])
            ("org-order-calendar-date-args" function (:arguments ("arg1" "arg2" "arg3")) nil [669247 669712])
            ("org-eval-in-calendar" function (:arguments ("form" "keepdate")) nil [669714 670396])
            ("org-calendar-select" function (:user-visible-flag t) nil [670398 670853])
            ("org-insert-time-stamp" function (:arguments ("time" "with-hm" "inactive" "pre" "post" "extra")) nil [670855 672090])
            ("org-toggle-time-stamp-overlays" function (:user-visible-flag t) nil [672092 672846])
            ("org-display-custom-time" function (:arguments ("beg" "end")) nil [672848 673781])
            ("org-fix-decoded-time" function (:arguments ("time")) nil [673783 673984])
            ("org-time-stamp-to-now" function (:arguments ("timestamp-string" "seconds")) nil [673986 674330])
            ("org-deadline-close-p" function (:arguments ("timestamp-string" "ndays")) nil [674332 674612])
            ("org-get-wdays" function (:arguments ("ts" "delay" "zero-delay")) nil [674614 675562])
            ("org-calendar-select-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [675564 676054])
            ("org-check-deadlines" function
               (:user-visible-flag t
                :arguments ("ndays"))
                nil [676056 676919])
            ("org-re-timestamp" function (:arguments ("type")) nil [676921 677717])
            ("org-check-before-date" function
               (:user-visible-flag t
                :arguments ("d"))
                nil [677719 678412])
            ("org-check-after-date" function
               (:user-visible-flag t
                :arguments ("d"))
                nil [678414 679106])
            ("org-check-dates-range" function
               (:user-visible-flag t
                :arguments ("start-date" "end-date"))
                nil [679108 680013])
            ("org-evaluate-time-range" function
               (:user-visible-flag t
                :arguments ("to-buffer"))
                nil [680015 682313])
            ("org-make-tdiff-string" function (:arguments ("y" "d" "h" "m")) nil [682315 682821])
            ("org-time-string-to-time" function (:arguments ("s" "buffer" "pos")) nil [682823 683186])
            ("org-time-string-to-seconds" function (:arguments ("s")) nil [683188 683324])
            ("org-define-error" code nil nil [683326 683398])
            ("org-time-string-to-absolute" function (:arguments ("s" "daynr" "prefer" "buffer" "pos")) nil [683400 684653])
            ("org-days-to-iso-week" function (:arguments ("days")) nil [684655 684785])
            ("org-small-year-to-year" function (:arguments ("year")) nil [684787 685321])
            ("org-time-from-absolute" function (:arguments ("d")) nil [685323 685594])
            ("org-agenda-current-date" variable nil nil [685596 685628])
            ("org-calendar-holiday" function nil nil [685629 685844])
            ("org-diary-sexp-entry" function (:arguments ("sexp" "entry" "d")) nil [685846 686622])
            ("org-diary-to-ical-string" function (:arguments ("frombuf")) nil [686624 687414])
            ("org-closest-date" function (:arguments ("start" "current" "prefer")) nil [687416 690762])
            ("org-date-to-gregorian" function (:arguments ("d")) nil [690764 691119])
            ("org-parse-time-string" function (:arguments ("s" "nodefault")) nil [691121 691966])
            ("org-timestamp-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [691968 692290])
            ("org-timestamp-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [692292 692620])
            ("org-timestamp-up-day" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [692622 692931])
            ("org-timestamp-down-day" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [692933 693250])
            ("org-at-timestamp-p" function
               (:user-visible-flag t
                :arguments ("inactive-ok"))
                nil [693252 694604])
            ("org-toggle-timestamp-type" function (:user-visible-flag t) nil [694606 695123])
            ("org-at-clock-log-p" function nil nil [695125 695274])
            ("org-clock-history" variable nil nil [695276 695302])
            ("org-clock-adjust-closest" variable nil nil [695349 695386])
            ("org-timestamp-change" function (:arguments ("n" "what" "updown" "suppress-tmp-delay")) nil [695422 701500])
            ("org-modify-ts-extra" function (:arguments ("s" "pos" "n" "dm")) nil [701502 703024])
            ("org-recenter-calendar" function (:arguments ("d")) nil [703026 703332])
            ("org-goto-calendar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [703334 704070])
            ("org-get-date-from-calendar" function nil nil [704072 704265])
            ("org-date-from-calendar" function (:user-visible-flag t) nil [704267 704686])
            ("org-effort-durations" variable (:default-value (\` (("min" . 1) ("h" . 60) ("d" \, (* 60 8)) ("w" \, (* 60 8 5)) ("m" \, (* 60 8 5 4)) ("y" \, (* 60 8 5 40))))) nil [704688 705381])
            ("org-minutes-to-clocksum-string" function (:arguments ("m")) nil [705383 709675])
            ("org-hours-to-clocksum-string" function (:arguments ("n")) nil [709677 709761])
            ("org-hh:mm-string-to-minutes" function (:arguments ("s")) nil [709763 710324])
            ("org-image-actual-width" variable (:default-value t) nil [710326 711234])
            ("org-agenda-inhibit-startup" variable nil nil [711236 711543])
            ("org-agenda-ignore-properties" variable nil nil [711545 712156])
            ("org-duration-string-to-minutes" function (:arguments ("s" "output-to-string")) nil [712158 712936])
            ("org-save-all-org-buffers" function (:user-visible-flag t) nil [712950 713253])
            ("org-revert-all-org-buffers" function (:user-visible-flag t) nil [713255 714241])
            ("org-switchb" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [714277 714793])
            ("org-buffer-list" function (:arguments ("predicate" "exclude-tmp")) nil [714795 716029])
            ("org-agenda-files" function (:arguments ("unrestricted" "archives")) nil [716031 717159])
            ("org-agenda-file-p" function (:arguments ("file")) nil [717161 717485])
            ("org-edit-agenda-file-list" function (:user-visible-flag t) nil [717487 718409])
            ("org-store-new-agenda-file-list" function (:arguments ("list")) nil [718411 719072])
            ("org-read-agenda-file-list" function (:arguments ("pair-with-expansion")) nil [719074 719792])
            ("org-cycle-agenda-files" function (:user-visible-flag t) nil [719809 720440])
            ("org-agenda-file-to-front" function
               (:user-visible-flag t
                :arguments ("to-end"))
                nil [720442 721466])
            ("org-remove-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [721468 722368])
            ("org-file-menu-entry" function (:arguments ("file")) nil [722370 722445])
            ("org-check-agenda-file" function (:arguments ("file")) nil [722447 722844])
            ("org-get-agenda-file-buffer" function (:arguments ("file")) nil [722846 723258])
            ("org-release-buffers" function (:arguments ("blist")) nil [723260 723731])
            ("org-agenda-prepare-buffers" function
               (:user-visible-flag t
                :arguments ("files"))
                nil [723733 726493])
            ("org-cdlatex-mode-map" variable (:default-value (make-sparse-keymap)) nil [726522 726617])
            ("org-defkey" code nil nil [726619 726686])
            ("org-defkey" code nil nil [726687 726754])
            ("org-defkey" code nil nil [726755 726813])
            ("org-defkey" code nil nil [726814 726876])
            ("org-defkey" code nil nil [726877 726950])
            ("org-cdlatex-texmathp-advice-is-done" variable nil nil [726952 727072])
            ("define-minor-mode" code nil nil [727074 728280])
            ("turn-on-org-cdlatex" function nil nil [728282 728383])
            ("org-try-cdlatex-tab" function nil nil [728385 729177])
            ("org-cdlatex-underscore-caret" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [729179 729555])
            ("org-cdlatex-math-modify" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [729557 729920])
            ("org-cdlatex-environment-indent" function
               (:user-visible-flag t
                :arguments ("environment" "item"))
                nil [729922 731940])
            ("org-inside-LaTeX-fragment-p" function nil nil [731966 733927])
            ("org-inside-latex-macro-p" function nil nil [733929 734129])
            ("org--format-latex-make-overlay" function (:arguments ("beg" "end" "image" "imagetype")) nil [734131 734747])
            ("org--list-latex-overlays" function (:arguments ("beg" "end")) nil [734749 735069])
            ("org-remove-latex-fragment-image-overlays" function (:arguments ("beg" "end")) nil [735071 735478])
            ("org-toggle-latex-fragment" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [735480 738156])
            ("org-format-latex" function (:arguments ("prefix" "beg" "end" "dir" "overlays" "msg" "forbuffer" "processing-type")) nil [738158 742741])
            ("org-create-math-formula" function
               (:user-visible-flag t
                :arguments ("latex-frag" "mathml-file"))
                nil [742743 745211])
            ("org-format-latex-as-mathml" function (:arguments ("latex-frag" "latex-frag-type" "prefix" "dir")) nil [745213 746348])
            ("declare-function" code nil nil [746350 746403])
            ("declare-function" code nil nil [746404 746478])
            ("declare-function" code nil nil [746479 746555])
            ("declare-function" code nil nil [746556 746619])
            ("declare-function" code nil nil [746620 746694])
            ("org-create-formula--latex-header" function nil nil [746695 747250])
            ("org--get-display-dpi" function nil nil [747252 747588])
            ("org-create-formula-image" function (:arguments ("string" "tofile" "options" "buffer" "processing-type")) nil [747590 751709])
            ("org-splice-latex-header" function (:arguments ("tpl" "def-pkg" "pkg" "snippets-p" "extra")) nil [751711 753531])
            ("org-latex-packages-to-string" function (:arguments ("pkg" "snippets-p" "newline")) nil [753533 754057])
            ("org-dvipng-color" function (:arguments ("attr")) nil [754059 754202])
            ("org-dvipng-color-format" function (:arguments ("color-name")) nil [754204 754399])
            ("org-latex-color" function (:arguments ("attr")) nil [754401 754545])
            ("org-latex-color-format" function (:arguments ("color-name")) nil [754547 754726])
            ("org-normalize-color" function (:arguments ("value")) nil [754728 754863])
            ("defvar-local" code nil nil [754886 754930])
            ("org-toggle-inline-images" function
               (:user-visible-flag t
                :arguments ("include-linked"))
                nil [754932 755537])
            ("org-redisplay-inline-images" function (:user-visible-flag t) nil [755539 755769])
            ("org-display-inline-images" function
               (:user-visible-flag t
                :arguments ("include-linked" "refresh" "beg" "end"))
                nil [755771 759706])
            ("org-display-inline-remove-overlay" function (:arguments ("ov" "after" "_beg" "_end" "_len")) nil [759708 759995])
            ("org-remove-inline-images" function (:user-visible-flag t) nil [759997 760176])
            ("define-key" code nil nil [760281 760353])
            ("define-key" code nil nil [760354 760426])
            ("define-key" code nil nil [760427 760521])
            ("define-key" code nil nil [760522 760618])
            ("define-key" code nil nil [760619 760708])
            ("define-key" code nil nil [760709 760779])
            ("define-key" code nil nil [760780 760848])
            ("define-key" code nil nil [760849 760921])
            ("define-key" code nil nil [760922 761012])
            ("define-key" code nil nil [761013 761111])
            ("define-key" code nil nil [761112 761178])
            ("org-defkey" code nil nil [762854 762911])
            ("org-defkey" code nil nil [762939 762988])
            ("org-defkey" code nil nil [762989 763038])
            ("org-defkey" code nil nil [763039 763106])
            ("org-defkey" code nil nil [763107 763152])
            ("org-defkey" code nil nil [763209 763265])
            ("org-defkey" code nil nil [763266 763322])
            ("define-key" code nil nil [763323 763372])
            ("org-defkey" code nil nil [763374 763439])
            ("org-defkey" code nil nil [763440 763512])
            ("org-defkey" code nil nil [763513 763577])
            ("org-defkey" code nil nil [763609 763663])
            ("org-defkey" code nil nil [763664 763719])
            ("org-defkey" code nil nil [763720 763772])
            ("org-defkey" code nil nil [763773 763827])
            ("org-defkey" code nil nil [763829 763913])
            ("org-defkey" code nil nil [763914 763997])
            ("org-defkey" code nil nil [763998 764064])
            ("org-defkey" code nil nil [764065 764132])
            ("org-defkey" code nil nil [764133 764197])
            ("org-defkey" code nil nil [764198 764264])
            ("org-defkey" code nil nil [764266 764326])
            ("org-defkey" code nil nil [764327 764389])
            ("org-defkey" code nil nil [764390 764452])
            ("org-defkey" code nil nil [764453 764516])
            ("org-defkey" code nil nil [764518 764590])
            ("org-defkey" code nil nil [764591 764662])
            ("org-defkey" code nil nil [764663 764729])
            ("org-defkey" code nil nil [764730 764801])
            ("define-key" code nil nil [764817 764877])
            ("dolist" code nil nil [764878 764967])
            ("when" code nil nil [765100 766879])
            ("org-defkey" code nil nil [766904 766958])
            ("org-defkey" code nil nil [766988 767036])
            ("if" code nil nil [767037 767177])
            ("if" code nil nil [767178 767314])
            ("if" code nil nil [767315 767455])
            ("org-defkey" code nil nil [767456 767515])
            ("org-defkey" code nil nil [767516 767573])
            ("org-defkey" code nil nil [767574 767632])
            ("org-defkey" code nil nil [767633 767685])
            ("org-defkey" code nil nil [767686 767740])
            ("org-defkey" code nil nil [767741 767809])
            ("org-defkey" code nil nil [767810 767879])
            ("org-defkey" code nil nil [767880 767932])
            ("org-defkey" code nil nil [767933 767989])
            ("org-defkey" code nil nil [767990 768047])
            ("org-defkey" code nil nil [768048 768109])
            ("org-defkey" code nil nil [768110 768179])
            ("org-defkey" code nil nil [768180 768236])
            ("org-defkey" code nil nil [768237 768298])
            ("org-defkey" code nil nil [768299 768368])
            ("org-defkey" code nil nil [768369 768435])
            ("org-defkey" code nil nil [768436 768497])
            ("org-defkey" code nil nil [768498 768544])
            ("org-defkey" code nil nil [768545 768591])
            ("org-defkey" code nil nil [768592 768650])
            ("org-defkey" code nil nil [768651 768701])
            ("org-defkey" code nil nil [768702 768752])
            ("org-defkey" code nil nil [768753 768809])
            ("org-defkey" code nil nil [768810 768858])
            ("org-defkey" code nil nil [768859 768905])
            ("org-defkey" code nil nil [768906 768959])
            ("org-defkey" code nil nil [768984 769043])
            ("org-defkey" code nil nil [769062 769114])
            ("org-defkey" code nil nil [769115 769171])
            ("org-defkey" code nil nil [769172 769244])
            ("org-defkey" code nil nil [769245 769300])
            ("org-defkey" code nil nil [769301 769381])
            ("org-defkey" code nil nil [769382 769473])
            ("org-defkey" code nil nil [769474 769529])
            ("org-defkey" code nil nil [769530 769589])
            ("org-defkey" code nil nil [769590 769643])
            ("org-defkey" code nil nil [769644 769709])
            ("org-defkey" code nil nil [769710 769771])
            ("org-defkey" code nil nil [769772 769827])
            ("org-defkey" code nil nil [769828 769884])
            ("org-defkey" code nil nil [769885 769941])
            ("org-defkey" code nil nil [769942 769992])
            ("org-defkey" code nil nil [770016 770068])
            ("org-defkey" code nil nil [770092 770153])
            ("org-defkey" code nil nil [770170 770220])
            ("org-defkey" code nil nil [770246 770307])
            ("org-defkey" code nil nil [770308 770363])
            ("org-defkey" code nil nil [770364 770424])
            ("org-defkey" code nil nil [770425 770493])
            ("org-defkey" code nil nil [770494 770563])
            ("org-defkey" code nil nil [770564 770626])
            ("org-defkey" code nil nil [770627 770680])
            ("org-defkey" code nil nil [770681 770751])
            ("org-defkey" code nil nil [770752 770825])
            ("org-defkey" code nil nil [770826 770880])
            ("org-defkey" code nil nil [770881 770934])
            ("org-defkey" code nil nil [770935 770981])
            ("org-defkey" code nil nil [770982 771037])
            ("org-defkey" code nil nil [771038 771106])
            ("org-defkey" code nil nil [771107 771174])
            ("org-defkey" code nil nil [771175 771233])
            ("org-defkey" code nil nil [771234 771298])
            ("org-defkey" code nil nil [771299 771373])
            ("org-defkey" code nil nil [771374 771450])
            ("org-defkey" code nil nil [771451 771511])
            ("org-defkey" code nil nil [771512 771560])
            ("org-defkey" code nil nil [771561 771616])
            ("org-defkey" code nil nil [771617 771675])
            ("org-defkey" code nil nil [771676 771735])
            ("org-defkey" code nil nil [771736 771787])
            ("org-defkey" code nil nil [771788 771848])
            ("org-defkey" code nil nil [771849 771903])
            ("org-defkey" code nil nil [771904 771962])
            ("org-defkey" code nil nil [771963 772018])
            ("org-defkey" code nil nil [772019 772073])
            ("org-defkey" code nil nil [772074 772151])
            ("org-defkey" code nil nil [772152 772223])
            ("org-defkey" code nil nil [772224 772292])
            ("org-defkey" code nil nil [772293 772341])
            ("org-defkey" code nil nil [772342 772416])
            ("org-defkey" code nil nil [772417 772488])
            ("org-defkey" code nil nil [772489 772546])
            ("org-defkey" code nil nil [772547 772607])
            ("org-defkey" code nil nil [772608 772663])
            ("org-defkey" code nil nil [772664 772725])
            ("org-defkey" code nil nil [772726 772787])
            ("org-defkey" code nil nil [772788 772849])
            ("org-defkey" code nil nil [772850 772901])
            ("org-defkey" code nil nil [772902 772952])
            ("org-defkey" code nil nil [772953 773022])
            ("org-defkey" code nil nil [773106 773163])
            ("org-defkey" code nil nil [773164 773222])
            ("org-defkey" code nil nil [773223 773282])
            ("org-defkey" code nil nil [773284 773356])
            ("org-defkey" code nil nil [773357 773411])
            ("org-defkey" code nil nil [773412 773471])
            ("org-defkey" code nil nil [773472 773532])
            ("org-defkey" code nil nil [773533 773588])
            ("org-defkey" code nil nil [773589 773645])
            ("org-defkey" code nil nil [773646 773704])
            ("org-defkey" code nil nil [773705 773764])
            ("org-defkey" code nil nil [773765 773823])
            ("org-defkey" code nil nil [773824 773883])
            ("org-defkey" code nil nil [773884 773951])
            ("org-defkey" code nil nil [773952 774018])
            ("org-defkey" code nil nil [774019 774091])
            ("org-defkey" code nil nil [774092 774160])
            ("org-defkey" code nil nil [774161 774222])
            ("org-defkey" code nil nil [774223 774281])
            ("org-defkey" code nil nil [774282 774350])
            ("org-defkey" code nil nil [774351 774407])
            ("org-defkey" code nil nil [774408 774464])
            ("org-defkey" code nil nil [774465 774534])
            ("org-defkey" code nil nil [774535 774602])
            ("org-defkey" code nil nil [774603 774681])
            ("org-defkey" code nil nil [774683 774734])
            ("org-defkey" code nil nil [774735 774791])
            ("org-defkey" code nil nil [774792 774849])
            ("org-defkey" code nil nil [774850 774906])
            ("org-defkey" code nil nil [774907 774976])
            ("define-key" code nil nil [774978 775031])
            ("define-key" code nil nil [775033 775082])
            ("define-key" code nil nil [775084 775142])
            ("define-key" code nil nil [775143 775201])
            ("define-key" code nil nil [775203 775261])
            ("org-speed-commands-default" variable
               (:constant-flag t
                :default-value (quote (("Outline Navigation") ("n" org-speed-move-safe (quote org-next-visible-heading)) ("p" org-speed-move-safe (quote org-previous-visible-heading)) ("f" org-speed-move-safe (quote org-forward-heading-same-level)) ("b" org-speed-move-safe (quote org-backward-heading-same-level)) ("F" . org-next-block) ("B" . org-previous-block) ("u" org-speed-move-safe (quote outline-up-heading)) ("j" . org-goto) ("g" org-refile t) ("Outline Visibility") ("c" . org-cycle) ("C" . org-shifttab) (" " . org-display-outline-path) ("s" . org-narrow-to-subtree) ("=" . org-columns) ("Outline Structure Editing") ("U" . org-metaup) ("D" . org-metadown) ("r" . org-metaright) ("l" . org-metaleft) ("R" . org-shiftmetaright) ("L" . org-shiftmetaleft) ("i" progn (forward-char 1) (call-interactively (quote org-insert-heading-respect-content))) ("^" . org-sort) ("w" . org-refile) ("a" . org-archive-subtree-default-with-confirmation) ("@" . org-mark-subtree) ("#" . org-toggle-comment) ("Clock Commands") ("I" . org-clock-in) ("O" . org-clock-out) ("Meta Data Editing") ("t" . org-todo) ("," org-priority) ("0" org-priority 32) ("1" org-priority 65) ("2" org-priority 66) ("3" org-priority 67) (":" . org-set-tags-command) ("e" . org-set-effort) ("E" . org-inc-effort) ("W" lambda (m) (interactive "sMinutes before warning: ") (org-entry-put (point) "APPT_WARNTIME" m)) ("Agenda Views etc") ("v" . org-agenda) ("/" . org-sparse-tree) ("Misc") ("o" . org-open-at-point) ("?" . org-speed-command-help) ("<" org-agenda-set-restriction-lock (quote subtree)) (">" org-agenda-remove-restriction-lock))))
                nil [775264 777143])
            ("org-print-speed-command" function (:arguments ("e")) nil [777145 777461])
            ("org-speed-command-help" function (:user-visible-flag t) nil [777463 778074])
            ("org-speed-move-safe" function
               (:user-visible-flag t
                :arguments ("cmd"))
                nil [778076 778438])
            ("org-self-insert-command-undo-counter" variable nil nil [778440 778487])
            ("org-table-auto-blank-field" variable nil nil [778489 778524])
            ("org-speed-command" variable nil nil [778551 778581])
            ("org-speed-command-activate" function (:arguments ("keys")) nil [778583 779029])
            ("org-babel-speed-command-activate" function (:arguments ("keys")) nil [779031 779245])
            ("org-speed-command-hook" variable (:default-value (quote (org-speed-command-default-hook org-babel-speed-command-hook))) nil [779247 779967])
            ("org-self-insert-command" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [779969 782326])
            ("org-check-before-invisible-edit" function (:arguments ("kind")) nil [782328 784668])
            ("org-fix-tags-on-the-fly" function nil nil [784670 784993])
            ("org-delete-backward-char" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [784995 786092])
            ("org-delete-char" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [786094 787151])
            ("put" code nil nil [787220 787381])
            ("put" code nil nil [787382 787546])
            ("put" code nil nil [787547 787598])
            ("put" code nil nil [787599 787659])
            ("put" code nil nil [787660 787699])
            ("put" code nil nil [787751 787801])
            ("put" code nil nil [787802 787855])
            ("put" code nil nil [787856 787898])
            ("put" code nil nil [787899 787950])
            ("put" code nil nil [788004 788066])
            ("put" code nil nil [788067 788132])
            ("org-remap" function (:arguments ("map" "commands")) nil [788134 788423])
            ("org-transpose-words" function (:user-visible-flag t) nil [788425 788742])
            ("org-remap" code nil nil [788743 788805])
            ("when" code nil nil [788807 789178])
            ("org-ctrl-c-ctrl-c-hook" variable nil nil [789180 789733])
            ("org-ctrl-c-ctrl-c-final-hook" variable nil nil [789735 790289])
            ("org-tab-first-hook" variable nil nil [790291 790760])
            ("org-tab-after-check-for-table-hook" variable nil nil [790762 791176])
            ("org-tab-after-check-for-cycling-hook" variable nil nil [791178 791538])
            ("org-tab-before-tab-emulation-hook" variable nil nil [791540 791812])
            ("org-metaleft-hook" variable nil nil [791814 791952])
            ("org-metaright-hook" variable nil nil [791953 792093])
            ("org-metaup-hook" variable nil nil [792094 792228])
            ("org-metadown-hook" variable nil nil [792229 792367])
            ("org-shiftmetaleft-hook" variable nil nil [792368 792513])
            ("org-shiftmetaright-hook" variable nil nil [792514 792661])
            ("org-shiftmetaup-hook" variable nil nil [792662 792803])
            ("org-shiftmetadown-hook" variable nil nil [792804 792949])
            ("org-metareturn-hook" variable nil nil [792950 793089])
            ("org-shiftup-hook" variable nil nil [793090 793225])
            ("org-shiftup-final-hook" variable nil nil [793226 793445])
            ("org-shiftdown-hook" variable nil nil [793446 793585])
            ("org-shiftdown-final-hook" variable nil nil [793586 793809])
            ("org-shiftleft-hook" variable nil nil [793810 793949])
            ("org-shiftleft-final-hook" variable nil nil [793950 794173])
            ("org-shiftright-hook" variable nil nil [794174 794315])
            ("org-shiftright-final-hook" variable nil nil [794316 794541])
            ("org-modifier-cursor-error" function nil nil [794543 794746])
            ("org-shiftselect-error" function nil nil [794748 795104])
            ("org-call-for-shift-select" function (:arguments ("cmd")) nil [795106 795223])
            ("org-shifttab" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [795225 795897])
            ("org-shiftmetaleft" function (:user-visible-flag t) nil [795899 796566])
            ("org-shiftmetaright" function (:user-visible-flag t) nil [796568 797232])
            ("org-shiftmetaup" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [797234 797831])
            ("org-shiftmetadown" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [797833 798462])
            ("org-hidden-tree-error" function nil nil [798464 798591])
            ("org-metaleft" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [798593 799839])
            ("org-metaright" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [799841 801303])
            ("org-check-for-hidden" function (:arguments ("what")) nil [801305 802259])
            ("org-metaup" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [802261 803138])
            ("org-metadown" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [803140 804029])
            ("org-shiftup" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [804031 805077])
            ("org-shiftdown" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [805079 806122])
            ("org-shiftright" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [806124 807716])
            ("org-shiftleft" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [807718 809327])
            ("org-shiftcontrolright" function (:user-visible-flag t) nil [809329 809745])
            ("org-shiftcontrolleft" function (:user-visible-flag t) nil [809747 810172])
            ("org-shiftcontrolup" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [810174 810512])
            ("org-shiftcontroldown" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [810514 810858])
            ("org-increase-number-at-point" function
               (:user-visible-flag t
                :arguments ("inc"))
                nil [810860 811550])
            ("org-decrease-number-at-point" function
               (:user-visible-flag t
                :arguments ("inc"))
                nil [811552 811789])
            ("org-ctrl-c-ret" function (:user-visible-flag t) nil [811791 812035])
            ("org-find-visible" function nil nil [812037 812200])
            ("org-find-invisible" function nil nil [812201 812372])
            ("org-copy-visible" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [812374 812816])
            ("org-copy-special" function (:user-visible-flag t) nil [812818 813128])
            ("org-cut-special" function (:user-visible-flag t) nil [813130 813433])
            ("org-paste-special" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [813435 813778])
            ("org-edit-special" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [813780 816446])
            ("org-table-coordinate-overlays" variable nil nil [816448 816486])
            ("org-ctrl-c-ctrl-c" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [816513 825903])
            ("org-mode-restart" function nil nil [825905 826198])
            ("org-kill-note-or-show-branches" function (:user-visible-flag t) nil [826200 826505])
            ("org-delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [826507 827681])
            ("org-open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [827683 828077])
            ("org-return" function
               (:user-visible-flag t
                :arguments ("indent"))
                nil [828079 830841])
            ("org-return-indent" function (:user-visible-flag t) nil [830843 831085])
            ("org-ctrl-c-star" function (:user-visible-flag t) nil [831087 831440])
            ("org-ctrl-c-minus" function (:user-visible-flag t) nil [831442 831983])
            ("org-toggle-heading" function
               (:user-visible-flag t
                :arguments ("nstars"))
                nil [831985 835660])
            ("org-meta-return" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [835662 836108])
            ("org-in-subtree-not-table-p" function nil nil [836128 836285])
            ("easy-menu-define" code nil nil [836316 839322])
            ("easy-menu-define" code nil nil [839324 847839])
            ("org-info" function
               (:user-visible-flag t
                :arguments ("node"))
                nil [847841 848028])
            ("org-submit-bug-report" function (:user-visible-flag t) nil [848045 850468])
            ("org-install-agenda-files-menu" function nil nil [850471 851133])
            ("org-require-autoloaded-modules" function nil nil [851155 851325])
            ("org-reload" function
               (:user-visible-flag t
                :arguments ("uncompiled"))
                nil [851342 853198])
            ("org-customize" function (:user-visible-flag t) nil [853215 853397])
            ("org-create-customize-menu" function (:user-visible-flag t) nil [853399 854104])
            ("org-get-at-eol" function (:arguments ("property" "n")) nil [854164 854320])
            ("org-find-text-property-in-string" function (:arguments ("prop" "s")) nil [854322 854555])
            ("org-display-warning" function (:arguments ("message")) nil [854557 854680])
            ("org-eval" function (:arguments ("form")) nil [854682 854825])
            ("org-in-clocktable-p" function nil nil [854827 855173])
            ("org-in-verbatim-emphasis" function nil nil [855175 855373])
            ("org-overlay-display" function (:arguments ("ovl" "text" "face" "evap")) nil [855375 855601])
            ("org-overlay-before-string" function (:arguments ("ovl" "text" "face" "evap")) nil [855603 855848])
            ("org-find-overlays" function (:arguments ("prop" "pos" "delete")) nil [855850 856180])
            ("org-goto-marker-or-bmk" function (:arguments ("marker" "bookmark")) nil [856182 856671])
            ("org-quote-csv-field" function (:arguments ("s")) nil [856673 856865])
            ("org-force-self-insert" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [856867 856997])
            ("org-string-width" function (:arguments ("s")) nil [856999 858041])
            ("org-shorten-string" function (:arguments ("s" "maxlength")) nil [858043 858861])
            ("org-get-indentation" function (:arguments ("line")) nil [858863 859237])
            ("org-get-string-indentation" function (:arguments ("s")) nil [859239 859597])
            ("org-remove-tabs" function (:arguments ("s" "width")) nil [859599 859959])
            ("org-fix-indentation" function (:arguments ("line" "ind")) nil [859961 860422])
            ("org-remove-indentation" function (:arguments ("code" "n")) nil [860424 860731])
            ("org-do-remove-indentation" function (:arguments ("n")) nil [860733 861726])
            ("org-fill-template" function (:arguments ("template" "alist")) nil [861728 862139])
            ("org-base-buffer" function (:arguments ("buffer")) nil [862141 862329])
            ("org-wrap" function (:arguments ("string" "width" "lines")) nil [862331 863282])
            ("org-do-wrap" function (:arguments ("words" "width")) nil [863284 863640])
            ("org-split-string" function (:arguments ("string" "separators")) nil [863642 864543])
            ("org-quote-vert" function (:arguments ("s")) nil [864545 864685])
            ("org-uuidgen-p" function (:arguments ("s")) nil [864687 864866])
            ("org-in-src-block-p" function (:arguments ("inside")) nil [864868 865296])
            ("org-context" function nil nil [865298 869844])
            ("org-in-regexp" function (:arguments ("regexp" "nlines" "visually")) nil [869846 870729])
            ("org-between-regexps-p" function (:arguments ("start-re" "end-re" "lim-up" "lim-down")) nil [870731 871964])
            ("org-in-block-p" function (:arguments ("names")) nil [871966 872675])
            ("org-occur-in-agenda-files" function
               (:user-visible-flag t
                :arguments ("regexp" "_nlines"))
                nil [872677 873563])
            ("add-hook" code nil nil [873565 873670])
            ("org-occur-link-in-agenda-files" function (:user-visible-flag t) nil [873672 874029])
            ("org-reverse-string" function (:arguments ("string")) nil [874031 874152])
            ("org-uniquify-alist" function (:arguments ("alist")) nil [874213 874706])
            ("org-delete-all" function (:arguments ("elts" "list")) nil [874708 874969])
            ("org-back-over-empty-lines" function nil nil [874971 875373])
            ("org-skip-whitespace" function nil nil [875375 875438])
            ("org-point-in-group" function (:arguments ("point" "group" "context")) nil [875440 875894])
            ("org-switch-to-buffer-other-window" function (:arguments ("args")) nil [875896 876154])
            ("org-combine-plists" function (:arguments ("plists")) nil [876156 876641])
            ("org-replace-escapes" function (:arguments ("string" "table")) nil [876643 877921])
            ("org-find-base-buffer-visiting" function (:arguments ("file")) nil [877923 878194])
            ("org-file-image-p" function (:arguments ("file")) nil [878306 878446])
            ("org-get-cursor-date" function (:arguments ("with-time")) nil [878448 879596])
            ("org-mark-subtree" function
               (:user-visible-flag t
                :arguments ("up"))
                nil [879598 880238])
            ("org-file-newer-than-p" function (:arguments ("file" "time")) nil [880240 880774])
            ("org-compile-file" function (:arguments ("source" "process" "ext" "err-msg" "log-buf" "spec")) nil [880776 883147])
            ("org--get-expected-indentation" function (:arguments ("element" "contentsp")) nil [883166 887352])
            ("org--align-node-property" function nil nil [887354 887716])
            ("org-indent-line" function (:user-visible-flag t) nil [887718 890709])
            ("org-indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [890711 894844])
            ("org-indent-drawer" function (:user-visible-flag t) nil [894846 895369])
            ("org-indent-block" function (:user-visible-flag t) nil [895371 896047])
            ("org-element-paragraph-separate" variable nil nil [896633 896672])
            ("org-setup-filling" function nil nil [896690 897519])
            ("org-fill-line-break-nobreak-p" function nil nil [897521 897761])
            ("org-fill-paragraph-with-timestamp-nobreak-p" function nil nil [897763 897955])
            ("declare-function" code nil nil [897957 898006])
            ("orgtbl-line-start-regexp" variable nil nil [898007 898040])
            ("org-adaptive-fill-function" function nil nil [898061 900619])
            ("declare-function" code nil nil [900621 900670])
            ("message-cite-prefix-regexp" variable nil nil [900671 900706])
            ("org-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [900725 906068])
            ("org-auto-fill-function" function nil nil [906070 906496])
            ("org-comment-line-break-function" function (:arguments ("soft")) nil [906498 906959])
            ("org-toggle-fixed-width" function (:user-visible-flag t) nil [906985 912069])
            ("org-setup-comments-handling" function nil nil [912830 913226])
            ("org-insert-comment" function nil nil [913228 914046])
            ("comment-empty-lines" variable nil nil [914048 914076])
            ("org-comment-or-uncomment-region" function (:arguments ("beg" "end" "_")) nil [914100 916768])
            ("org-comment-dwim" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [916770 917023])
            ("org-timestamp--to-internal-time" function (:arguments ("timestamp" "end")) nil [917158 917590])
            ("org-timestamp-has-time-p" function (:arguments ("timestamp")) nil [917592 917732])
            ("org-timestamp-format" function (:arguments ("timestamp" "format" "end" "utc")) nil [917734 918180])
            ("org-timestamp-split-range" function (:arguments ("timestamp" "end")) nil [918182 919373])
            ("org-timestamp-translate" function (:arguments ("timestamp" "boundary")) nil [919375 920385])
            ("reftex-docstruct-symbol" variable nil nil [920407 920439])
            ("org--rds" variable nil nil [920440 920457])
            ("org-reftex-citation" function (:user-visible-flag t) nil [920459 921447])
            ("org-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [921497 923962])
            ("org-end-of-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [923964 925942])
            ("define-key" code nil nil [925944 925999])
            ("define-key" code nil nil [926000 926049])
            ("org-backward-sentence" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [926051 926850])
            ("org-forward-sentence" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [926852 927763])
            ("define-key" code nil nil [927765 927820])
            ("define-key" code nil nil [927821 927875])
            ("org-kill-line" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [927877 928636])
            ("define-key" code nil nil [928638 928685])
            ("org-yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [928687 929969])
            ("org-yank-generic" function (:arguments ("command" "arg")) nil [929971 931725])
            ("org-yank-folding-would-swallow-text" function (:arguments ("beg" "end")) nil [931727 932244])
            ("define-key" code nil nil [932246 932288])
            ("org-truely-invisible-p" function nil nil [932290 932600])
            ("org-invisible-p2" function nil nil [932602 932857])
            ("org-back-to-heading" function (:arguments ("invisible-ok")) nil [932859 933152])
            ("org-before-first-heading-p" function nil nil [933154 933315])
            ("org-at-heading-p" function (:arguments ("ignored")) nil [933317 933388])
            ("org-in-commented-heading-p" function (:arguments ("no-inheritance")) nil [933390 933972])
            ("org-at-comment-p" function nil nil [933974 934135])
            ("org-at-drawer-p" function nil nil [934137 934284])
            ("org-at-block-p" function nil nil [934286 934430])
            ("org-point-at-end-of-empty-headline" function nil nil [934432 934831])
            ("org-at-heading-or-item-p" function nil nil [934833 934910])
            ("org-at-target-p" function nil nil [934912 935025])
            ("defalias" code nil nil [935076 935120])
            ("org-up-heading-all" function (:arguments ("arg")) nil [935122 935356])
            ("org-up-heading-safe" function nil nil [935358 936014])
            ("org-first-sibling-p" function (:user-visible-flag t) nil [936016 936394])
            ("org-goto-sibling" function (:arguments ("previous")) nil [936396 937126])
            ("org-show-siblings" function nil nil [937128 937365])
            ("org-goto-first-child" function nil nil [937367 937831])
            ("org-show-hidden-entry" function nil nil [937833 937957])
            ("org-flag-heading" function (:arguments ("flag" "entry")) nil [937959 938463])
            ("org-get-next-sibling" function nil nil [938465 938901])
            ("org-get-last-sibling" function nil nil [938903 939358])
            ("org-end-of-subtree" function (:arguments ("invisible-ok" "to-heading")) nil [939360 940815])
            ("org-end-of-meta-data" function (:arguments ("full")) nil [940817 941660])
            ("org-forward-heading-same-level" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [941662 943077])
            ("org-backward-heading-same-level" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [943079 943367])
            ("org-next-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [943369 943701])
            ("org-previous-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [943703 944051])
            ("org-next-block" function
               (:user-visible-flag t
                :arguments ("arg" "backward" "block-regexp"))
                nil [944053 945497])
            ("org-previous-block" function
               (:user-visible-flag t
                :arguments ("arg" "block-regexp"))
                nil [945499 945772])
            ("org-forward-paragraph" function (:user-visible-flag t) nil [945774 949806])
            ("org-backward-paragraph" function (:user-visible-flag t) nil [949808 952682])
            ("org-forward-element" function (:user-visible-flag t) nil [952684 953476])
            ("org-backward-element" function (:user-visible-flag t) nil [953478 954758])
            ("org-up-element" function (:user-visible-flag t) nil [954760 955269])
            ("org-element-greater-elements" variable nil nil [955271 955308])
            ("org-down-element" function (:user-visible-flag t) nil [955309 955932])
            ("org-drag-element-backward" function (:user-visible-flag t) nil [955934 956980])
            ("org-drag-element-forward" function (:user-visible-flag t) nil [956982 958418])
            ("org-drag-line-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [958420 958765])
            ("org-drag-line-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [958767 958904])
            ("org-mark-element" function (:user-visible-flag t) nil [958906 959614])
            ("org-narrow-to-element" function (:user-visible-flag t) nil [959616 960188])
            ("org-transpose-element" function (:user-visible-flag t) nil [960190 960491])
            ("org-unindent-buffer" function (:user-visible-flag t) nil [960493 961302])
            ("org-show-children" function
               (:user-visible-flag t
                :arguments ("level"))
                nil [961304 962818])
            ("org-show-subtree" function (:user-visible-flag t) nil [962820 963012])
            ("org-show-entry" function (:user-visible-flag t) nil [963014 963497])
            ("org-make-options-regexp" function (:arguments ("kwds" "extra")) nil [963499 963839])
            ("defvar-local" code nil nil [963912 963989])
            ("org-imenu-new-marker" function (:arguments ("pos")) nil [963991 964204])
            ("org-imenu-get-tree" function nil nil [964206 965204])
            ("eval-after-load" code nil nil [965206 965372])
            ("org-link-display-format" function (:arguments ("s")) nil [965374 965726])
            ("org-toggle-link-display" function (:user-visible-flag t) nil [965728 966108])
            ("org-speedbar-restriction-lock-overlay" variable (:default-value (make-overlay 1 1)) nil [966131 966257])
            ("overlay-put" code nil nil [966258 966350])
            ("overlay-put" code nil nil [966351 966465])
            ("delete-overlay" code nil nil [966466 966520])
            ("org-speedbar-set-agenda-restriction" function (:user-visible-flag t) nil [966522 967888])
            ("speedbar-file-key-map" variable nil nil [967890 967920])
            ("declare-function" code nil nil [967921 967995])
            ("eval-after-load" code nil nil [967996 968546])
            ("org--flyspell-object-check-p" function (:arguments ("element")) nil [968602 969446])
            ("org-mode-flyspell-verify" function nil nil [969448 971830])
            ("put" code nil nil [971831 971897])
            ("org-remove-flyspell-overlays-in" function (:arguments ("beg" "end")) nil [971899 972128])
            ("flyspell-delayed-commands" variable nil nil [972130 972164])
            ("eval-after-load" code nil nil [972165 972262])
            ("eval-after-load" code nil nil [972330 972675])
            ("eval-after-load" code nil nil [972736 972906])
            ("eval-after-load" code nil nil [972961 973200])
            ("org-bookmark-jump-unhide" function nil nil [973202 973503])
            ("org-mark-jump-unhide" function nil nil [973505 973718])
            ("eval-after-load" code nil nil [973720 973898])
            ("eval-after-load" code nil nil [973900 974082])
            ("eval-after-load" code nil nil [974084 974258])
            ("session-globals-exclude" variable nil nil [974308 974340])
            ("eval-after-load" code nil nil [974341 974425])
            ("org" package nil nil [974443 974457])
            ("run-hooks" code nil nil [974459 974485]))          
      :file "org.el"
      :pointmax 974508
      :fsize 974507
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax '((close-paren 3072 . 3073) (symbol 3035 . 3052) (open-paren 3034 . 3035)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2106 2123])
            ("org" include nil nil [2124 2138])
            ("declare-function" code nil nil [2140 2198])
            ("declare-function" code nil nil [2199 2300])
            ("declare-function" code nil nil [2301 2352])
            ("declare-function" code nil nil [2353 2404])
            ("declare-function" code nil nil [2405 2456])
            ("declare-function" code nil nil [2457 2511])
            ("org-end-time-was-given" variable nil nil [2513 2544])
            ("org-remember-default-headline" variable nil nil [2545 2583])
            ("org-remember-templates" variable nil nil [2584 2615])
            ("org-table-hlines" variable nil nil [2616 2641])
            ("org-table-current-begin-pos" variable nil nil [2642 2678])
            ("dired-buffers" variable nil nil [2679 2701])
            ("org-capture-clock-was-started" variable nil nil [2703 2797])
            ("org-capture-last-stored-marker" variable (:default-value (make-marker)) nil [2799 2926])
            ("org-capture-link-is-already-stored" variable nil nil [3057 3104])
            ("org-capture-is-refiling" variable nil nil [3106 3197])
            ("org-capture" customgroup (:user-visible-flag t) nil [3199 3306])
            ("org-capture-templates" variable nil nil [3308 17004])
            ("org-capture-before-finalize-hook" variable nil nil [17006 17270])
            ("org-capture-after-finalize-hook" variable nil nil [17272 17467])
            ("org-capture-prepare-finalize-hook" variable nil nil [17469 17675])
            ("org-capture-bookmark" variable (:default-value t) nil [17677 17854])
            ("org-capture-plist" variable nil nil [17929 18038])
            ("org-capture-current-plist" variable nil nil [18040 18433])
            ("org-capture-clock-keep" variable nil nil [18435 18607])
            ("org-capture-put" function (:arguments ("stuff")) nil [18609 18825])
            ("org-capture-get" function (:arguments ("prop" "local")) nil [18826 19207])
            ("org-capture-member" function (:arguments ("prop" "local")) nil [19209 19569])
            ("org-capture-mode-map" variable (:default-value (make-sparse-keymap)) nil [19591 19781])
            ("org-capture-mode-hook" variable nil nil [19783 19860])
            ("define-minor-mode" code nil nil [19862 20276])
            ("define-key" code nil nil [20277 20343])
            ("define-key" code nil nil [20344 20406])
            ("define-key" code nil nil [20407 20471])
            ("org-capture-initial" variable nil nil [20496 20528])
            ("org-capture-entry" variable nil nil [20529 20559])
            ("org-capture-string" function
               (:user-visible-flag t
                :arguments ("string" "keys"))
                nil [20576 20830])
            ("org-capture-templates-contexts" variable nil nil [20832 22631])
            ("org-capture-use-agenda-date" variable nil nil [22633 22889])
            ("org-capture" function
               (:user-visible-flag t
                :arguments ("goto" "keys"))
                nil [22906 27054])
            ("org-capture-get-template" function nil nil [27056 27773])
            ("org-capture-finalize" function
               (:user-visible-flag t
                :arguments ("stay-with-capture"))
                nil [27775 33260])
            ("org-capture-refile" function (:user-visible-flag t) nil [33262 34083])
            ("org-capture-kill" function (:user-visible-flag t) nil [34085 34393])
            ("org-capture-goto-last-stored" function (:user-visible-flag t) nil [34395 34696])
            ("org-capture-put-target-region-and-position" function nil nil [34749 35101])
            ("org-time-was-given" variable nil nil [35103 35130])
            ("org-capture-set-target-location" function (:arguments ("target")) nil [35162 40215])
            ("org-capture-expand-file" function (:arguments ("file")) nil [40217 40891])
            ("org-capture-target-buffer" function (:arguments ("file")) nil [40893 41321])
            ("org-capture-place-template" function (:arguments ("inhibit-wconf-store")) nil [41323 42252])
            ("org-capture-place-entry" function nil nil [42254 43696])
            ("org-capture-place-item" function nil nil [43698 45761])
            ("org-capture-place-table-line" function nil nil [45763 48793])
            ("org-capture-place-plain-text" function nil nil [48795 50118])
            ("org-capture-mark-kill-region" function (:arguments ("beg" "end")) nil [50120 50398])
            ("org-capture-position-for-last-stored" function (:arguments ("where")) nil [50400 50903])
            ("org-capture-bookmark-last-stored-position" function nil nil [50905 51711])
            ("org-capture-narrow" function (:arguments ("beg" "end")) nil [51713 51894])
            ("org-capture-empty-lines-before" function (:arguments ("n")) nil [51896 52303])
            ("org-capture-empty-lines-after" function (:arguments ("n")) nil [52305 52737])
            ("org-clock-marker" variable nil nil [52739 52764])
            ("org-capture-insert-template-here" function nil nil [52786 53879])
            ("org-capture-set-plist" function (:arguments ("entry")) nil [53881 54666])
            ("org-capture-goto-target" function
               (:user-visible-flag t
                :arguments ("template-key"))
                nil [54668 55119])
            ("org-capture-get-indirect-buffer" function (:arguments ("buffer" "prefix")) nil [55121 55752])
            ("org-capture-verify-tree" function (:arguments ("tree")) nil [55754 55933])
            ("org-mks" function (:arguments ("table" "title" "prompt" "specials")) nil [55935 59745])
            ("org-capture-select-template" function (:arguments ("keys")) nil [59769 60441])
            ("org-capture-fill-template" function (:arguments ("template" "initial" "annotation")) nil [60443 69122])
            ("org-capture-escaped-%" function nil nil [69124 69424])
            ("org-capture-expand-embedded-elisp" function (:arguments ("mark")) nil [69426 70638])
            ("org-capture--expand-keyword-in-embedded-elisp" function (:arguments ("attr")) nil [70640 71165])
            ("org-capture-inside-embedded-elisp-p" function nil nil [71167 71404])
            ("org-capture-import-remember-templates" function (:user-visible-flag t) nil [71421 72903])
            ("make-obsolete" code nil nil [73026 73142])
            ("org-capture" package nil nil [73144 73166]))          
      :file "org-capture.el"
      :pointmax 73197
      :fsize 73196
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [1100 1160])
            ("declare-function" code nil nil [1161 1221])
            ("org-entities" customgroup (:user-visible-flag t) nil [1223 1331])
            ("org-entities--user-safe-p" function (:arguments ("v")) nil [1333 1673])
            ("org-entities-user" variable nil nil [1675 3029])
            ("org-entities" variable
               (:constant-flag t
                :default-value (append (quote ("* Letters" "** Latin" ("Agrave" "\\`{A}" nil "&Agrave;" "A" "À" "À") ("agrave" "\\`{a}" nil "&agrave;" "a" "à" "à") ("Aacute" "\\'{A}" nil "&Aacute;" "A" "Á" "Á") ("aacute" "\\'{a}" nil "&aacute;" "a" "á" "á") ("Acirc" "\\^{A}" nil "&Acirc;" "A" "Â" "Â") ("acirc" "\\^{a}" nil "&acirc;" "a" "â" "â") ("Amacr" "\\bar{A}" nil "&Amacr;" "A" "Ã" "Ã") ("amacr" "\\bar{a}" nil "&amacr;" "a" "ã" "ã") ("Atilde" "\\~{A}" nil "&Atilde;" "A" "Ã" "Ã") ("atilde" "\\~{a}" nil "&atilde;" "a" "ã" "ã") ("Auml" "\\\"{A}" nil "&Auml;" "Ae" "Ä" "Ä") ("auml" "\\\"{a}" nil "&auml;" "ae" "ä" "ä") ("Aring" "\\AA{}" nil "&Aring;" "A" "Å" "Å") ("AA" "\\AA{}" nil "&Aring;" "A" "Å" "Å") ("aring" "\\aa{}" nil "&aring;" "a" "å" "å") ("AElig" "\\AE{}" nil "&AElig;" "AE" "Æ" "Æ") ("aelig" "\\ae{}" nil "&aelig;" "ae" "æ" "æ") ("Ccedil" "\\c{C}" nil "&Ccedil;" "C" "Ç" "Ç") ("ccedil" "\\c{c}" nil "&ccedil;" "c" "ç" "ç") ("Egrave" "\\`{E}" nil "&Egrave;" "E" "È" "È") ("egrave" "\\`{e}" nil "&egrave;" "e" "è" "è") ("Eacute" "\\'{E}" nil "&Eacute;" "E" "É" "É") ("eacute" "\\'{e}" nil "&eacute;" "e" "é" "é") ("Ecirc" "\\^{E}" nil "&Ecirc;" "E" "Ê" "Ê") ("ecirc" "\\^{e}" nil "&ecirc;" "e" "ê" "ê") ("Euml" "\\\"{E}" nil "&Euml;" "E" "Ë" "Ë") ("euml" "\\\"{e}" nil "&euml;" "e" "ë" "ë") ("Igrave" "\\`{I}" nil "&Igrave;" "I" "Ì" "Ì") ("igrave" "\\`{i}" nil "&igrave;" "i" "ì" "ì") ("Iacute" "\\'{I}" nil "&Iacute;" "I" "Í" "Í") ("iacute" "\\'{i}" nil "&iacute;" "i" "í" "í") ("Icirc" "\\^{I}" nil "&Icirc;" "I" "Î" "Î") ("icirc" "\\^{i}" nil "&icirc;" "i" "î" "î") ("Iuml" "\\\"{I}" nil "&Iuml;" "I" "Ï" "Ï") ("iuml" "\\\"{i}" nil "&iuml;" "i" "ï" "ï") ("Ntilde" "\\~{N}" nil "&Ntilde;" "N" "Ñ" "Ñ") ("ntilde" "\\~{n}" nil "&ntilde;" "n" "ñ" "ñ") ("Ograve" "\\`{O}" nil "&Ograve;" "O" "Ò" "Ò") ("ograve" "\\`{o}" nil "&ograve;" "o" "ò" "ò") ("Oacute" "\\'{O}" nil "&Oacute;" "O" "Ó" "Ó") ("oacute" "\\'{o}" nil "&oacute;" "o" "ó" "ó") ("Ocirc" "\\^{O}" nil "&Ocirc;" "O" "Ô" "Ô") ("ocirc" "\\^{o}" nil "&ocirc;" "o" "ô" "ô") ("Otilde" "\\~{O}" nil "&Otilde;" "O" "Õ" "Õ") ("otilde" "\\~{o}" nil "&otilde;" "o" "õ" "õ") ("Ouml" "\\\"{O}" nil "&Ouml;" "Oe" "Ö" "Ö") ("ouml" "\\\"{o}" nil "&ouml;" "oe" "ö" "ö") ("Oslash" "\\O" nil "&Oslash;" "O" "Ø" "Ø") ("oslash" "\\o{}" nil "&oslash;" "o" "ø" "ø") ("OElig" "\\OE{}" nil "&OElig;" "OE" "OE" "Œ") ("oelig" "\\oe{}" nil "&oelig;" "oe" "oe" "œ") ("Scaron" "\\v{S}" nil "&Scaron;" "S" "S" "Š") ("scaron" "\\v{s}" nil "&scaron;" "s" "s" "š") ("szlig" "\\ss{}" nil "&szlig;" "ss" "ß" "ß") ("Ugrave" "\\`{U}" nil "&Ugrave;" "U" "Ù" "Ù") ("ugrave" "\\`{u}" nil "&ugrave;" "u" "ù" "ù") ("Uacute" "\\'{U}" nil "&Uacute;" "U" "Ú" "Ú") ("uacute" "\\'{u}" nil "&uacute;" "u" "ú" "ú") ("Ucirc" "\\^{U}" nil "&Ucirc;" "U" "Û" "Û") ("ucirc" "\\^{u}" nil "&ucirc;" "u" "û" "û") ("Uuml" "\\\"{U}" nil "&Uuml;" "Ue" "Ü" "Ü") ("uuml" "\\\"{u}" nil "&uuml;" "ue" "ü" "ü") ("Yacute" "\\'{Y}" nil "&Yacute;" "Y" "Ý" "Ý") ("yacute" "\\'{y}" nil "&yacute;" "y" "ý" "ý") ("Yuml" "\\\"{Y}" nil "&Yuml;" "Y" "Y" "Ÿ") ("yuml" "\\\"{y}" nil "&yuml;" "y" "ÿ" "ÿ") "** Latin (special face)" ("fnof" "\\textit{f}" nil "&fnof;" "f" "f" "ƒ") ("real" "\\Re" t "&real;" "R" "R" "ℜ") ("image" "\\Im" t "&image;" "I" "I" "ℑ") ("weierp" "\\wp" t "&weierp;" "P" "P" "℘") ("ell" "\\ell" t "&ell;" "ell" "ell" "ℓ") ("imath" "\\imath" t "&imath;" "[dotless i]" "dotless i" "ı") ("jmath" "\\jmath" t "&jmath;" "[dotless j]" "dotless j" "ȷ") "** Greek" ("Alpha" "A" nil "&Alpha;" "Alpha" "Alpha" "Α") ("alpha" "\\alpha" t "&alpha;" "alpha" "alpha" "α") ("Beta" "B" nil "&Beta;" "Beta" "Beta" "Β") ("beta" "\\beta" t "&beta;" "beta" "beta" "β") ("Gamma" "\\Gamma" t "&Gamma;" "Gamma" "Gamma" "Γ") ("gamma" "\\gamma" t "&gamma;" "gamma" "gamma" "γ") ("Delta" "\\Delta" t "&Delta;" "Delta" "Delta" "Δ") ("delta" "\\delta" t "&delta;" "delta" "delta" "δ") ("Epsilon" "E" nil "&Epsilon;" "Epsilon" "Epsilon" "Ε") ("epsilon" "\\epsilon" t "&epsilon;" "epsilon" "epsilon" "ε") ("varepsilon" "\\varepsilon" t "&epsilon;" "varepsilon" "varepsilon" "ε") ("Zeta" "Z" nil "&Zeta;" "Zeta" "Zeta" "Ζ") ("zeta" "\\zeta" t "&zeta;" "zeta" "zeta" "ζ") ("Eta" "H" nil "&Eta;" "Eta" "Eta" "Η") ("eta" "\\eta" t "&eta;" "eta" "eta" "η") ("Theta" "\\Theta" t "&Theta;" "Theta" "Theta" "Θ") ("theta" "\\theta" t "&theta;" "theta" "theta" "θ") ("thetasym" "\\vartheta" t "&thetasym;" "theta" "theta" "ϑ") ("vartheta" "\\vartheta" t "&thetasym;" "theta" "theta" "ϑ") ("Iota" "I" nil "&Iota;" "Iota" "Iota" "Ι") ("iota" "\\iota" t "&iota;" "iota" "iota" "ι") ("Kappa" "K" nil "&Kappa;" "Kappa" "Kappa" "Κ") ("kappa" "\\kappa" t "&kappa;" "kappa" "kappa" "κ") ("Lambda" "\\Lambda" t "&Lambda;" "Lambda" "Lambda" "Λ") ("lambda" "\\lambda" t "&lambda;" "lambda" "lambda" "λ") ("Mu" "M" nil "&Mu;" "Mu" "Mu" "Μ") ("mu" "\\mu" t "&mu;" "mu" "mu" "μ") ("nu" "\\nu" t "&nu;" "nu" "nu" "ν") ("Nu" "N" nil "&Nu;" "Nu" "Nu" "Ν") ("Xi" "\\Xi" t "&Xi;" "Xi" "Xi" "Ξ") ("xi" "\\xi" t "&xi;" "xi" "xi" "ξ") ("Omicron" "O" nil "&Omicron;" "Omicron" "Omicron" "Ο") ("omicron" "\\textit{o}" nil "&omicron;" "omicron" "omicron" "ο") ("Pi" "\\Pi" t "&Pi;" "Pi" "Pi" "Π") ("pi" "\\pi" t "&pi;" "pi" "pi" "π") ("Rho" "P" nil "&Rho;" "Rho" "Rho" "Ρ") ("rho" "\\rho" t "&rho;" "rho" "rho" "ρ") ("Sigma" "\\Sigma" t "&Sigma;" "Sigma" "Sigma" "Σ") ("sigma" "\\sigma" t "&sigma;" "sigma" "sigma" "σ") ("sigmaf" "\\varsigma" t "&sigmaf;" "sigmaf" "sigmaf" "ς") ("varsigma" "\\varsigma" t "&sigmaf;" "varsigma" "varsigma" "ς") ("Tau" "T" nil "&Tau;" "Tau" "Tau" "Τ") ("Upsilon" "\\Upsilon" t "&Upsilon;" "Upsilon" "Upsilon" "Υ") ("upsih" "\\Upsilon" t "&upsih;" "upsilon" "upsilon" "ϒ") ("upsilon" "\\upsilon" t "&upsilon;" "upsilon" "upsilon" "υ") ("Phi" "\\Phi" t "&Phi;" "Phi" "Phi" "Φ") ("phi" "\\phi" t "&phi;" "phi" "phi" "ɸ") ("varphi" "\\varphi" t "&varphi;" "varphi" "varphi" "φ") ("Chi" "X" nil "&Chi;" "Chi" "Chi" "Χ") ("chi" "\\chi" t "&chi;" "chi" "chi" "χ") ("acutex" "\\acute x" t "&acute;x" "'x" "'x" "𝑥́") ("Psi" "\\Psi" t "&Psi;" "Psi" "Psi" "Ψ") ("psi" "\\psi" t "&psi;" "psi" "psi" "ψ") ("tau" "\\tau" t "&tau;" "tau" "tau" "τ") ("Omega" "\\Omega" t "&Omega;" "Omega" "Omega" "Ω") ("omega" "\\omega" t "&omega;" "omega" "omega" "ω") ("piv" "\\varpi" t "&piv;" "omega-pi" "omega-pi" "ϖ") ("varpi" "\\varpi" t "&piv;" "omega-pi" "omega-pi" "ϖ") ("partial" "\\partial" t "&part;" "[partial differential]" "[partial differential]" "∂") "** Hebrew" ("alefsym" "\\aleph" t "&alefsym;" "aleph" "aleph" "ℵ") ("aleph" "\\aleph" t "&aleph;" "aleph" "aleph" "ℵ") ("gimel" "\\gimel" t "&gimel;" "gimel" "gimel" "ℷ") ("beth" "\\beth" t "&beth;" "beth" "beth" "ב") ("dalet" "\\daleth" t "&daleth;" "dalet" "dalet" "ד") "** Dead languages" ("ETH" "\\DH{}" nil "&ETH;" "D" "Ð" "Ð") ("eth" "\\dh{}" nil "&eth;" "dh" "ð" "ð") ("THORN" "\\TH{}" nil "&THORN;" "TH" "Þ" "Þ") ("thorn" "\\th{}" nil "&thorn;" "th" "þ" "þ") "* Punctuation" "** Dots and Marks" ("dots" "\\dots{}" nil "&hellip;" "..." "..." "…") ("cdots" "\\cdots{}" t "&ctdot;" "..." "..." "⋯") ("hellip" "\\dots{}" nil "&hellip;" "..." "..." "…") ("middot" "\\textperiodcentered{}" nil "&middot;" "." "·" "·") ("iexcl" "!`" nil "&iexcl;" "!" "¡" "¡") ("iquest" "?`" nil "&iquest;" "?" "¿" "¿") "** Dash-like" ("shy" "\\-" nil "&shy;" "" "" "") ("ndash" "--" nil "&ndash;" "-" "-" "–") ("mdash" "---" nil "&mdash;" "--" "--" "—") "** Quotations" ("quot" "\\textquotedbl{}" nil "&quot;" "\"" "\"" "\"") ("acute" "\\textasciiacute{}" nil "&acute;" "'" "´" "´") ("ldquo" "\\textquotedblleft{}" nil "&ldquo;" "\"" "\"" "“") ("rdquo" "\\textquotedblright{}" nil "&rdquo;" "\"" "\"" "”") ("bdquo" "\\quotedblbase{}" nil "&bdquo;" "\"" "\"" "„") ("lsquo" "\\textquoteleft{}" nil "&lsquo;" "`" "`" "‘") ("rsquo" "\\textquoteright{}" nil "&rsquo;" "'" "'" "’") ("sbquo" "\\quotesinglbase{}" nil "&sbquo;" "," "," "‚") ("laquo" "\\guillemotleft{}" nil "&laquo;" "<<" "«" "«") ("raquo" "\\guillemotright{}" nil "&raquo;" ">>" "»" "»") ("lsaquo" "\\guilsinglleft{}" nil "&lsaquo;" "<" "<" "‹") ("rsaquo" "\\guilsinglright{}" nil "&rsaquo;" ">" ">" "›") "* Other" "** Misc. (often used)" ("circ" "\\^{}" nil "&circ;" "^" "^" "∘") ("vert" "\\vert{}" t "&vert;" "|" "|" "|") ("vbar" "|" nil "|" "|" "|" "|") ("brvbar" "\\textbrokenbar{}" nil "&brvbar;" "|" "¦" "¦") ("S" "\\S" nil "&sect;" "paragraph" "§" "§") ("sect" "\\S" nil "&sect;" "paragraph" "§" "§") ("amp" "\\&" nil "&amp;" "&" "&" "&") ("lt" "\\textless{}" nil "&lt;" "<" "<" "<") ("gt" "\\textgreater{}" nil "&gt;" ">" ">" ">") ("tilde" "\\textasciitilde{}" nil "~" "~" "~" "~") ("slash" "/" nil "/" "/" "/" "/") ("plus" "+" nil "+" "+" "+" "+") ("under" "\\_" nil "_" "_" "_" "_") ("equal" "=" nil "=" "=" "=" "=") ("asciicirc" "\\textasciicircum{}" nil "^" "^" "^" "^") ("dagger" "\\textdagger{}" nil "&dagger;" "[dagger]" "[dagger]" "†") ("dag" "\\dag{}" nil "&dagger;" "[dagger]" "[dagger]" "†") ("Dagger" "\\textdaggerdbl{}" nil "&Dagger;" "[doubledagger]" "[doubledagger]" "‡") ("ddag" "\\ddag{}" nil "&Dagger;" "[doubledagger]" "[doubledagger]" "‡") "** Whitespace" ("nbsp" "~" nil "&nbsp;" " " " " " ") ("ensp" "\\hspace*{.5em}" nil "&ensp;" " " " " " ") ("emsp" "\\hspace*{1em}" nil "&emsp;" " " " " " ") ("thinsp" "\\hspace*{.2em}" nil "&thinsp;" " " " " " ") "** Currency" ("curren" "\\textcurrency{}" nil "&curren;" "curr." "¤" "¤") ("cent" "\\textcent{}" nil "&cent;" "cent" "¢" "¢") ("pound" "\\pounds{}" nil "&pound;" "pound" "£" "£") ("yen" "\\textyen{}" nil "&yen;" "yen" "¥" "¥") ("euro" "\\texteuro{}" nil "&euro;" "EUR" "EUR" "€") ("EUR" "\\texteuro{}" nil "&euro;" "EUR" "EUR" "€") "** Property Marks" ("copy" "\\textcopyright{}" nil "&copy;" "(c)" "©" "©") ("reg" "\\textregistered{}" nil "&reg;" "(r)" "®" "®") ("trade" "\\texttrademark{}" nil "&trade;" "TM" "TM" "™") "** Science et al." ("minus" "\\minus" t "&minus;" "-" "-" "−") ("pm" "\\textpm{}" nil "&plusmn;" "+-" "±" "±") ("plusmn" "\\textpm{}" nil "&plusmn;" "+-" "±" "±") ("times" "\\texttimes{}" nil "&times;" "*" "×" "×") ("frasl" "/" nil "&frasl;" "/" "/" "⁄") ("colon" "\\colon" t ":" ":" ":" ":") ("div" "\\textdiv{}" nil "&divide;" "/" "÷" "÷") ("frac12" "\\textonehalf{}" nil "&frac12;" "1/2" "½" "½") ("frac14" "\\textonequarter{}" nil "&frac14;" "1/4" "¼" "¼") ("frac34" "\\textthreequarters{}" nil "&frac34;" "3/4" "¾" "¾") ("permil" "\\textperthousand{}" nil "&permil;" "per thousand" "per thousand" "‰") ("sup1" "\\textonesuperior{}" nil "&sup1;" "^1" "¹" "¹") ("sup2" "\\texttwosuperior{}" nil "&sup2;" "^2" "²" "²") ("sup3" "\\textthreesuperior{}" nil "&sup3;" "^3" "³" "³") ("radic" "\\sqrt{\\,}" t "&radic;" "[square root]" "[square root]" "√") ("sum" "\\sum" t "&sum;" "[sum]" "[sum]" "∑") ("prod" "\\prod" t "&prod;" "[product]" "[n-ary product]" "∏") ("micro" "\\textmu{}" nil "&micro;" "micro" "µ" "µ") ("macr" "\\textasciimacron{}" nil "&macr;" "[macron]" "¯" "¯") ("deg" "\\textdegree{}" nil "&deg;" "degree" "°" "°") ("prime" "\\prime" t "&prime;" "'" "'" "′") ("Prime" "\\prime{}\\prime" t "&Prime;" "''" "''" "″") ("infin" "\\infty" t "&infin;" "[infinity]" "[infinity]" "∞") ("infty" "\\infty" t "&infin;" "[infinity]" "[infinity]" "∞") ("prop" "\\propto" t "&prop;" "[proportional to]" "[proportional to]" "∝") ("propto" "\\propto" t "&prop;" "[proportional to]" "[proportional to]" "∝") ("not" "\\textlnot{}" nil "&not;" "[angled dash]" "¬" "¬") ("neg" "\\neg{}" t "&not;" "[angled dash]" "¬" "¬") ("land" "\\land" t "&and;" "[logical and]" "[logical and]" "∧") ("wedge" "\\wedge" t "&and;" "[logical and]" "[logical and]" "∧") ("lor" "\\lor" t "&or;" "[logical or]" "[logical or]" "∨") ("vee" "\\vee" t "&or;" "[logical or]" "[logical or]" "∨") ("cap" "\\cap" t "&cap;" "[intersection]" "[intersection]" "∩") ("cup" "\\cup" t "&cup;" "[union]" "[union]" "∪") ("smile" "\\smile" t "&smile;" "[cup product]" "[cup product]" "⌣") ("frown" "\\frown" t "&frown;" "[Cap product]" "[cap product]" "⌢") ("int" "\\int" t "&int;" "[integral]" "[integral]" "∫") ("therefore" "\\therefore" t "&there4;" "[therefore]" "[therefore]" "∴") ("there4" "\\therefore" t "&there4;" "[therefore]" "[therefore]" "∴") ("because" "\\because" t "&because;" "[because]" "[because]" "∵") ("sim" "\\sim" t "&sim;" "~" "~" "∼") ("cong" "\\cong" t "&cong;" "[approx. equal to]" "[approx. equal to]" "≅") ("simeq" "\\simeq" t "&cong;" "[approx. equal to]" "[approx. equal to]" "≅") ("asymp" "\\asymp" t "&asymp;" "[almost equal to]" "[almost equal to]" "≈") ("approx" "\\approx" t "&asymp;" "[almost equal to]" "[almost equal to]" "≈") ("ne" "\\ne" t "&ne;" "[not equal to]" "[not equal to]" "≠") ("neq" "\\neq" t "&ne;" "[not equal to]" "[not equal to]" "≠") ("equiv" "\\equiv" t "&equiv;" "[identical to]" "[identical to]" "≡") ("triangleq" "\\triangleq" t "&triangleq;" "[defined to]" "[defined to]" "≜") ("le" "\\le" t "&le;" "<=" "<=" "≤") ("leq" "\\le" t "&le;" "<=" "<=" "≤") ("ge" "\\ge" t "&ge;" ">=" ">=" "≥") ("geq" "\\ge" t "&ge;" ">=" ">=" "≥") ("lessgtr" "\\lessgtr" t "&lessgtr;" "[less than or greater than]" "[less than or greater than]" "≶") ("lesseqgtr" "\\lesseqgtr" t "&lesseqgtr;" "[less than or equal or greater than or equal]" "[less than or equal or greater than or equal]" "⋚") ("ll" "\\ll" t "&Lt;" "<<" "<<" "≪") ("Ll" "\\lll" t "&Ll;" "<<<" "<<<" "⋘") ("lll" "\\lll" t "&Ll;" "<<<" "<<<" "⋘") ("gg" "\\gg" t "&Gt;" ">>" ">>" "≫") ("Gg" "\\ggg" t "&Gg;" ">>>" ">>>" "⋙") ("ggg" "\\ggg" t "&Gg;" ">>>" ">>>" "⋙") ("prec" "\\prec" t "&pr;" "[precedes]" "[precedes]" "≺") ("preceq" "\\preceq" t "&prcue;" "[precedes or equal]" "[precedes or equal]" "≼") ("preccurlyeq" "\\preccurlyeq" t "&prcue;" "[precedes or equal]" "[precedes or equal]" "≼") ("succ" "\\succ" t "&sc;" "[succeeds]" "[succeeds]" "≻") ("succeq" "\\succeq" t "&sccue;" "[succeeds or equal]" "[succeeds or equal]" "≽") ("succcurlyeq" "\\succcurlyeq" t "&sccue;" "[succeeds or equal]" "[succeeds or equal]" "≽") ("sub" "\\subset" t "&sub;" "[subset of]" "[subset of]" "⊂") ("subset" "\\subset" t "&sub;" "[subset of]" "[subset of]" "⊂") ("sup" "\\supset" t "&sup;" "[superset of]" "[superset of]" "⊃") ("supset" "\\supset" t "&sup;" "[superset of]" "[superset of]" "⊃") ("nsub" "\\not\\subset" t "&nsub;" "[not a subset of]" "[not a subset of" "⊄") ("sube" "\\subseteq" t "&sube;" "[subset of or equal to]" "[subset of or equal to]" "⊆") ("nsup" "\\not\\supset" t "&nsup;" "[not a superset of]" "[not a superset of]" "⊅") ("supe" "\\supseteq" t "&supe;" "[superset of or equal to]" "[superset of or equal to]" "⊇") ("setminus" "\\setminus" t "&setminus;" "\" " \" "⧵") ("forall" "\\forall" t "&forall;" "[for all]" "[for all]" "∀") ("exist" "\\exists" t "&exist;" "[there exists]" "[there exists]" "∃") ("exists" "\\exists" t "&exist;" "[there exists]" "[there exists]" "∃") ("nexist" "\\nexists" t "&exist;" "[there does not exists]" "[there does not  exists]" "∄") ("nexists" "\\nexists" t "&exist;" "[there does not exists]" "[there does not  exists]" "∄") ("empty" "\\empty" t "&empty;" "[empty set]" "[empty set]" "∅") ("emptyset" "\\emptyset" t "&empty;" "[empty set]" "[empty set]" "∅") ("isin" "\\in" t "&isin;" "[element of]" "[element of]" "∈") ("in" "\\in" t "&isin;" "[element of]" "[element of]" "∈") ("notin" "\\notin" t "&notin;" "[not an element of]" "[not an element of]" "∉") ("ni" "\\ni" t "&ni;" "[contains as member]" "[contains as member]" "∋") ("nabla" "\\nabla" t "&nabla;" "[nabla]" "[nabla]" "∇") ("ang" "\\angle" t "&ang;" "[angle]" "[angle]" "∠") ("angle" "\\angle" t "&ang;" "[angle]" "[angle]" "∠") ("perp" "\\perp" t "&perp;" "[up tack]" "[up tack]" "⊥") ("parallel" "\\parallel" t "&parallel;" "||" "||" "∥") ("sdot" "\\cdot" t "&sdot;" "[dot]" "[dot]" "⋅") ("cdot" "\\cdot" t "&sdot;" "[dot]" "[dot]" "⋅") ("lceil" "\\lceil" t "&lceil;" "[left ceiling]" "[left ceiling]" "⌈") ("rceil" "\\rceil" t "&rceil;" "[right ceiling]" "[right ceiling]" "⌉") ("lfloor" "\\lfloor" t "&lfloor;" "[left floor]" "[left floor]" "⌊") ("rfloor" "\\rfloor" t "&rfloor;" "[right floor]" "[right floor]" "⌋") ("lang" "\\langle" t "&lang;" "<" "<" "⟨") ("rang" "\\rangle" t "&rang;" ">" ">" "⟩") ("langle" "\\langle" t "&lang;" "<" "<" "⟨") ("rangle" "\\rangle" t "&rang;" ">" ">" "⟩") ("hbar" "\\hbar" t "&hbar;" "hbar" "hbar" "ℏ") ("mho" "\\mho" t "&mho;" "mho" "mho" "℧") "** Arrows" ("larr" "\\leftarrow" t "&larr;" "<-" "<-" "←") ("leftarrow" "\\leftarrow" t "&larr;" "<-" "<-" "←") ("gets" "\\gets" t "&larr;" "<-" "<-" "←") ("lArr" "\\Leftarrow" t "&lArr;" "<=" "<=" "⇐") ("Leftarrow" "\\Leftarrow" t "&lArr;" "<=" "<=" "⇐") ("uarr" "\\uparrow" t "&uarr;" "[uparrow]" "[uparrow]" "↑") ("uparrow" "\\uparrow" t "&uarr;" "[uparrow]" "[uparrow]" "↑") ("uArr" "\\Uparrow" t "&uArr;" "[dbluparrow]" "[dbluparrow]" "⇑") ("Uparrow" "\\Uparrow" t "&uArr;" "[dbluparrow]" "[dbluparrow]" "⇑") ("rarr" "\\rightarrow" t "&rarr;" "->" "->" "→") ("to" "\\to" t "&rarr;" "->" "->" "→") ("rightarrow" "\\rightarrow" t "&rarr;" "->" "->" "→") ("rArr" "\\Rightarrow" t "&rArr;" "=>" "=>" "⇒") ("Rightarrow" "\\Rightarrow" t "&rArr;" "=>" "=>" "⇒") ("darr" "\\downarrow" t "&darr;" "[downarrow]" "[downarrow]" "↓") ("downarrow" "\\downarrow" t "&darr;" "[downarrow]" "[downarrow]" "↓") ("dArr" "\\Downarrow" t "&dArr;" "[dbldownarrow]" "[dbldownarrow]" "⇓") ("Downarrow" "\\Downarrow" t "&dArr;" "[dbldownarrow]" "[dbldownarrow]" "⇓") ("harr" "\\leftrightarrow" t "&harr;" "<->" "<->" "↔") ("leftrightarrow" "\\leftrightarrow" t "&harr;" "<->" "<->" "↔") ("hArr" "\\Leftrightarrow" t "&hArr;" "<=>" "<=>" "⇔") ("Leftrightarrow" "\\Leftrightarrow" t "&hArr;" "<=>" "<=>" "⇔") ("crarr" "\\hookleftarrow" t "&crarr;" "<-'" "<-'" "↵") ("hookleftarrow" "\\hookleftarrow" t "&crarr;" "<-'" "<-'" "↵") "** Function names" ("arccos" "\\arccos" t "arccos" "arccos" "arccos" "arccos") ("arcsin" "\\arcsin" t "arcsin" "arcsin" "arcsin" "arcsin") ("arctan" "\\arctan" t "arctan" "arctan" "arctan" "arctan") ("arg" "\\arg" t "arg" "arg" "arg" "arg") ("cos" "\\cos" t "cos" "cos" "cos" "cos") ("cosh" "\\cosh" t "cosh" "cosh" "cosh" "cosh") ("cot" "\\cot" t "cot" "cot" "cot" "cot") ("coth" "\\coth" t "coth" "coth" "coth" "coth") ("csc" "\\csc" t "csc" "csc" "csc" "csc") ("deg" "\\deg" t "&deg;" "deg" "deg" "deg") ("det" "\\det" t "det" "det" "det" "det") ("dim" "\\dim" t "dim" "dim" "dim" "dim") ("exp" "\\exp" t "exp" "exp" "exp" "exp") ("gcd" "\\gcd" t "gcd" "gcd" "gcd" "gcd") ("hom" "\\hom" t "hom" "hom" "hom" "hom") ("inf" "\\inf" t "inf" "inf" "inf" "inf") ("ker" "\\ker" t "ker" "ker" "ker" "ker") ("lg" "\\lg" t "lg" "lg" "lg" "lg") ("lim" "\\lim" t "lim" "lim" "lim" "lim") ("liminf" "\\liminf" t "liminf" "liminf" "liminf" "liminf") ("limsup" "\\limsup" t "limsup" "limsup" "limsup" "limsup") ("ln" "\\ln" t "ln" "ln" "ln" "ln") ("log" "\\log" t "log" "log" "log" "log") ("max" "\\max" t "max" "max" "max" "max") ("min" "\\min" t "min" "min" "min" "min") ("Pr" "\\Pr" t "Pr" "Pr" "Pr" "Pr") ("sec" "\\sec" t "sec" "sec" "sec" "sec") ("sin" "\\sin" t "sin" "sin" "sin" "sin") ("sinh" "\\sinh" t "sinh" "sinh" "sinh" "sinh") ("sup" "\\sup" t "&sup;" "sup" "sup" "sup") ("tan" "\\tan" t "tan" "tan" "tan" "tan") ("tanh" "\\tanh" t "tanh" "tanh" "tanh" "tanh") "** Signs & Symbols" ("bull" "\\textbullet{}" nil "&bull;" "*" "*" "•") ("bullet" "\\textbullet{}" nil "&bull;" "*" "*" "•") ("star" "\\star" t "*" "*" "*" "⋆") ("lowast" "\\ast" t "&lowast;" "*" "*" "∗") ("ast" "\\ast" t "&lowast;" "*" "*" "*") ("odot" "\\odot" t "o" "[circled dot]" "[circled dot]" "ʘ") ("oplus" "\\oplus" t "&oplus;" "[circled plus]" "[circled plus]" "⊕") ("otimes" "\\otimes" t "&otimes;" "[circled times]" "[circled times]" "⊗") ("check" "\\checkmark" t "&checkmark;" "[checkmark]" "[checkmark]" "✓") ("checkmark" "\\checkmark" t "&check;" "[checkmark]" "[checkmark]" "✓") "** Miscellaneous (seldom used)" ("para" "\\P{}" nil "&para;" "[pilcrow]" "¶" "¶") ("ordf" "\\textordfeminine{}" nil "&ordf;" "_a_" "ª" "ª") ("ordm" "\\textordmasculine{}" nil "&ordm;" "_o_" "º" "º") ("cedil" "\\c{}" nil "&cedil;" "[cedilla]" "¸" "¸") ("oline" "\\overline{~}" t "&oline;" "[overline]" "¯" "‾") ("uml" "\\textasciidieresis{}" nil "&uml;" "[diaeresis]" "¨" "¨") ("zwnj" "\\/{}" nil "&zwnj;" "" "" "‌") ("zwj" "" nil "&zwj;" "" "" "‍") ("lrm" "" nil "&lrm;" "" "" "‎") ("rlm" "" nil "&rlm;" "" "" "‏") "** Smilies" ("smiley" "\\ddot\\smile" t "&#9786;" ":-)" ":-)" "☺") ("blacksmile" "\\ddot\\smile" t "&#9787;" ":-)" ":-)" "☻") ("sad" "\\ddot\\frown" t "&#9785;" ":-(" ":-(" "☹") ("frowny" "\\ddot\\frown" t "&#9785;" ":-(" ":-(" "☹") "** Suits" ("clubs" "\\clubsuit" t "&clubs;" "[clubs]" "[clubs]" "♣") ("clubsuit" "\\clubsuit" t "&clubs;" "[clubs]" "[clubs]" "♣") ("spades" "\\spadesuit" t "&spades;" "[spades]" "[spades]" "♠") ("spadesuit" "\\spadesuit" t "&spades;" "[spades]" "[spades]" "♠") ("hearts" "\\heartsuit" t "&hearts;" "[hearts]" "[hearts]" "♥") ("heartsuit" "\\heartsuit" t "&heartsuit;" "[hearts]" "[hearts]" "♥") ("diams" "\\diamondsuit" t "&diams;" "[diamonds]" "[diamonds]" "◆") ("diamondsuit" "\\diamondsuit" t "&diams;" "[diamonds]" "[diamonds]" "◆") ("diamond" "\\diamondsuit" t "&diamond;" "[diamond]" "[diamond]" "◆") ("Diamond" "\\diamondsuit" t "&diamond;" "[diamond]" "[diamond]" "◆") ("loz" "\\lozenge" t "&loz;" "[lozenge]" "[lozenge]" "⧫"))) (let (space-entities html-spaces (entity "_")) (dolist (n (number-sequence 1 20) (nreverse space-entities)) (let ((spaces (make-string n 32))) (push (list (setq entity (concat entity " ")) (format "\\hspace*{%sem}" (* n 0.5)) nil (setq html-spaces (concat "&ensp;" html-spaces)) spaces spaces (make-string n 8194)) space-entities))))))
                nil [3031 26856])
            ("org-entity-get" function (:arguments ("name")) nil [26858 27080])
            ("org-entities-create-table" function (:user-visible-flag t) nil [27155 27911])
            ("org-pretty-entities" variable nil nil [27913 27941])
            ("org-entities-help" function (:user-visible-flag t) nil [27972 28986])
            ("org-entities" package nil nil [28989 29012]))          
      :file "org-entities.el"
      :pointmax 29090
      :fsize 29706
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-faces" customgroup (:user-visible-flag t) nil [1099 1190])
            ("org-default" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [1192 1289])
            ("org-hide" variable
               (:default-value (quote ((((background light)) (:foreground "white")) (((background dark)) (:foreground "black"))))
                :type "face")
                nil [1291 1565])
            ("org-level-1" variable
               (:default-value (quote ((t :inherit outline-1)))
                :type "face")
                nil [1567 1671])
            ("org-level-2" variable
               (:default-value (quote ((t :inherit outline-2)))
                :type "face")
                nil [1673 1777])
            ("org-level-3" variable
               (:default-value (quote ((t :inherit outline-3)))
                :type "face")
                nil [1779 1883])
            ("org-level-4" variable
               (:default-value (quote ((t :inherit outline-4)))
                :type "face")
                nil [1885 1989])
            ("org-level-5" variable
               (:default-value (quote ((t :inherit outline-5)))
                :type "face")
                nil [1991 2095])
            ("org-level-6" variable
               (:default-value (quote ((t :inherit outline-6)))
                :type "face")
                nil [2097 2201])
            ("org-level-7" variable
               (:default-value (quote ((t :inherit outline-7)))
                :type "face")
                nil [2203 2307])
            ("org-level-8" variable
               (:default-value (quote ((t :inherit outline-8)))
                :type "face")
                nil [2309 2413])
            ("org-special-keyword" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [2415 2539])
            ("org-drawer" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t))))
                :type "face")
                nil [2541 3067])
            ("org-property-value" variable (:type "face") nil [3069 3164])
            ("org-column" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:background "grey90" :weight normal :slant normal :strike-through nil :underline nil)) (((class color) (min-colors 16) (background dark)) (:background "grey30" :weight normal :slant normal :strike-through nil :underline nil)) (((class color) (min-colors 8)) (:background "cyan" :foreground "black" :weight normal :slant normal :strike-through nil :underline nil)) (t (:inverse-video t))))
                :type "face")
                nil [3166 4713])
            ("org-column-title" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:background "grey90" :underline t :weight bold)) (((class color) (min-colors 16) (background dark)) (:background "grey30" :underline t :weight bold)) (((class color) (min-colors 8)) (:background "cyan" :foreground "black" :underline t :weight bold)) (t (:inverse-video t))))
                :type "face")
                nil [4715 5168])
            ("org-agenda-column-dateline" variable
               (:default-value (quote ((t :inherit org-column)))
                :type "face")
                nil [5170 5319])
            ("org-warning" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [5321 5443])
            ("org-archived" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [5445 5554])
            ("org-link" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [5556 5635])
            ("org-footnote" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple" :underline t)) (((class color) (background dark)) (:foreground "Cyan" :underline t)) (t (:underline t))))
                :type "face")
                nil [5637 5878])
            ("org-ellipsis" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "DarkGoldenrod" :underline t)) (((class color) (background dark)) (:foreground "LightGoldenrod" :underline t)) (t (:strike-through t))))
                :type "face")
                nil [5880 6161])
            ("org-target" variable
               (:default-value (quote ((((class color) (background light)) (:underline t)) (((class color) (background dark)) (:underline t)) (t (:underline t))))
                :type "face")
                nil [6163 6365])
            ("org-date" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple" :underline t)) (((class color) (background dark)) (:foreground "Cyan" :underline t)) (t (:underline t))))
                :type "face")
                nil [6367 6611])
            ("org-date-selected" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "Red1" :inverse-video t)) (((class color) (min-colors 16) (background dark)) (:foreground "Pink" :inverse-video t)) (((class color) (min-colors 8) (background light)) (:foreground "red" :inverse-video t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :inverse-video t)) (t (:inverse-video t))))
                :type "face")
                nil [6613 7219])
            ("org-sexp-date" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple")) (((class color) (background dark)) (:foreground "Cyan")) (t (:underline t))))
                :type "face")
                nil [7221 7463])
            ("org-tag" variable
               (:default-value (quote ((t (:bold t))))
                :type "face")
                nil [7465 7638])
            ("org-list-dt" variable
               (:default-value (quote ((t (:bold t))))
                :type "face")
                nil [7640 7746])
            ("org-todo" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "Red1" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "Pink" :bold t)) (((class color) (min-colors 8) (background light)) (:foreground "red" :bold t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:inverse-video t :bold t))))
                :type "face")
                nil [7748 8234])
            ("org-done" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "ForestGreen" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "PaleGreen" :bold t)) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t))))
                :type "face")
                nil [8236 8633])
            ("org-agenda-done" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "ForestGreen")) (((class color) (min-colors 16) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold nil))))
                :type "face")
                nil [8635 9350])
            ("org-headline-done" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon")) (((class color) (min-colors 8) (background light)) (:bold nil))))
                :type "face")
                nil [9352 9852])
            ("org-faces-easy-properties" variable (:default-value (quote ((todo . :foreground) (tag . :foreground) (priority . :foreground)))) nil [9854 10400])
            ("org-todo-keyword-faces" variable nil nil [10402 11059])
            ("org-priority" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [11061 11178])
            ("org-priority-faces" variable nil nil [11180 11790])
            ("org-tags-special-faces-re" variable nil nil [11792 11830])
            ("org-set-tag-faces" function (:arguments ("var" "value")) nil [11831 12040])
            ("org-checkbox" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [12042 12130])
            ("org-checkbox-statistics-todo" variable
               (:default-value (quote ((t (:inherit org-todo))))
                :type "face")
                nil [12132 12267])
            ("org-checkbox-statistics-done" variable
               (:default-value (quote ((t (:inherit org-done))))
                :type "face")
                nil [12269 12402])
            ("org-tag-faces" variable nil nil [12404 13132])
            ("org-table" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8) (background light)) (:foreground "blue")) (((class color) (min-colors 8) (background dark)))))
                :type "face")
                nil [13134 13708])
            ("org-formula" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red")) (t (:bold t :italic t))))
                :type "face")
                nil [13710 14122])
            ("org-code" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [14124 14253])
            ("org-meta-line" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [14255 14401])
            ("org-document-title" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "midnight blue" :weight bold)) (((class color) (background dark)) (:foreground "pale turquoise" :weight bold)) (t (:weight bold))))
                :type "face")
                nil [14403 14718])
            ("org-document-info" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "midnight blue")) (((class color) (background dark)) (:foreground "pale turquoise")) (t nil)))
                :type "face")
                nil [14720 15034])
            ("org-document-info-keyword" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [15036 15179])
            ("org-block" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [15181 15409])
            ("org-block-begin-line" variable
               (:default-value (quote ((t (:inherit org-meta-line))))
                :type "face")
                nil [15411 15559])
            ("org-block-end-line" variable
               (:default-value (quote ((t (:inherit org-block-begin-line))))
                :type "face")
                nil [15561 15712])
            ("org-verbatim" variable
               (:default-value (quote ((t (:inherit shadow))))
                :type "face")
                nil [15714 15847])
            ("org-quote" variable
               (:default-value (quote ((t (:inherit org-block))))
                :type "face")
                nil [15849 15967])
            ("org-verse" variable
               (:default-value (quote ((t (:inherit org-block))))
                :type "face")
                nil [15969 16087])
            ("org-fontify-quote-and-verse-blocks" variable nil nil [16089 16407])
            ("org-clock-overlay" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "LightGray" :foreground "black")) (((class color) (min-colors 88) (background dark)) (:background "SkyBlue4" :foreground "white")) (((class color) (min-colors 16) (background light)) (:background "gray" :foreground "black")) (((class color) (min-colors 16) (background dark)) (:background "SkyBlue4" :foreground "white")) (((class color) (min-colors 8)) (:background "cyan" :foreground "black")) (t (:inverse-video t))))
                :type "face")
                nil [16409 17084])
            ("org-agenda-structure" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t))))
                :type "face")
                nil [17086 17640])
            ("org-agenda-date" variable
               (:default-value (quote ((t (:inherit org-agenda-structure))))
                :type "face")
                nil [17642 17767])
            ("org-agenda-date-today" variable
               (:default-value (quote ((t (:inherit org-agenda-date :weight bold :italic t))))
                :type "face")
                nil [17769 17914])
            ("org-agenda-clocking" variable
               (:default-value (quote ((t (:inherit secondary-selection))))
                :type "face")
                nil [17916 18058])
            ("org-agenda-date-weekend" variable
               (:default-value (quote ((t (:inherit org-agenda-date :weight bold))))
                :type "face")
                nil [18060 18300])
            ("org-scheduled" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "DarkGreen")) (((class color) (min-colors 88) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t :italic t))))
                :type "face")
                nil [18302 18646])
            ("org-scheduled-today" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "DarkGreen")) (((class color) (min-colors 88) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t :italic t))))
                :type "face")
                nil [18648 18998])
            ("org-agenda-dimmed-todo-face" variable
               (:default-value (quote ((((background light)) (:foreground "grey50")) (((background dark)) (:foreground "grey50"))))
                :type "face")
                nil [19000 19207])
            ("org-scheduled-previously" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t))))
                :type "face")
                nil [19209 19668])
            ("org-upcoming-deadline" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t))))
                :type "face")
                nil [19670 20126])
            ("org-agenda-deadline-faces" variable (:default-value (quote ((1.0 . org-warning) (0.5 . org-upcoming-deadline) (0.0 . default)))) nil [20128 21123])
            ("org-agenda-restriction-lock" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "#eeeeee")) (((class color) (min-colors 88) (background dark)) (:background "#1C1C1C")) (((class color) (min-colors 16) (background light)) (:background "#eeeeee")) (((class color) (min-colors 16) (background dark)) (:background "#1C1C1C")) (((class color) (min-colors 8)) (:background "cyan" :foreground "black")) (t (:inverse-video t))))
                :type "face")
                nil [21125 21662])
            ("org-agenda-filter-tags" variable
               (:default-value (quote ((t :inherit mode-line)))
                :type "face")
                nil [21664 21806])
            ("org-agenda-filter-regexp" variable
               (:default-value (quote ((t :inherit mode-line)))
                :type "face")
                nil [21808 21955])
            ("org-agenda-filter-category" variable
               (:default-value (quote ((t :inherit mode-line)))
                :type "face")
                nil [21957 22110])
            ("org-time-grid" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "DarkGoldenrod")) (((class color) (min-colors 16) (background dark)) (:foreground "LightGoldenrod")) (((class color) (min-colors 8)) (:foreground "yellow" :weight light))))
                :type "face")
                nil [22112 22481])
            ("org-agenda-current-time" variable
               (:default-value (quote ((t (:inherit org-time-grid))))
                :type "face")
                nil [22483 22625])
            ("org-agenda-diary" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [22627 22762])
            ("org-agenda-calendar-event" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [22764 22904])
            ("org-agenda-calendar-sexp" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [22906 23043])
            ("org-level-faces" variable
               (:constant-flag t
                :default-value (quote (org-level-1 org-level-2 org-level-3 org-level-4 org-level-5 org-level-6 org-level-7 org-level-8)))
                nil [23045 23174])
            ("org-n-level-faces" variable (:default-value (length org-level-faces)) nil [23176 23469])
            ("org-cycle-level-faces" variable (:default-value t) nil [23471 23798])
            ("org-latex-and-related" variable
               (:default-value (let ((font (cond ((assq :inherit custom-face-attributes) (quote (:inherit underline))) (t (quote (:underline t)))))) (\` ((((class grayscale) (background light)) (:foreground "DimGray" (\,@ font))) (((class grayscale) (background dark)) (:foreground "LightGray" (\,@ font))) (((class color) (background light)) (:foreground "SaddleBrown")) (((class color) (background dark)) (:foreground "burlywood")) (t ((\,@ font))))))
                :type "face")
                nil [23800 24436])
            ("org-macro" variable
               (:default-value (quote ((t :inherit org-latex-and-related)))
                :type "face")
                nil [24438 24588])
            ("org-tag-group" variable
               (:default-value (quote ((t :inherit org-tag)))
                :type "face")
                nil [24590 24734])
            ("org-mode-line-clock" variable
               (:default-value (quote ((t (:inherit mode-line))))
                :type "face")
                nil [24736 24859])
            ("org-mode-line-clock-overrun" variable
               (:default-value (quote ((t (:inherit mode-line :background "red"))))
                :type "face")
                nil [24861 25030])
            ("org-faces" package nil nil [25032 25052]))          
      :file "org-faces.el"
      :pointmax 25081
      :fsize 25080
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-macs" include nil nil [1120 1139])
            ("org-compat" include nil nil [1140 1161])
            ("pcomplete" include nil nil [1162 1182])
            ("declare-function" code nil nil [1184 1262])
            ("declare-function" code nil nil [1263 1310])
            ("declare-function" code nil nil [1311 1351])
            ("declare-function" code nil nil [1352 1460])
            ("declare-function" code nil nil [1461 1528])
            ("declare-function" code nil nil [1529 1604])
            ("org-complete" customgroup (:user-visible-flag t) nil [1636 1740])
            ("org-drawer-regexp" variable nil nil [1742 1768])
            ("org-property-re" variable nil nil [1769 1793])
            ("org-current-tag-alist" variable nil nil [1794 1824])
            ("org-thing-at-point" function nil nil [1826 3723])
            ("org-command-at-point" function nil nil [3725 4216])
            ("org-parse-arguments" function nil nil [4218 4764])
            ("org-pcomplete-initial" function nil nil [4766 5006])
            ("org-options-keywords" variable nil nil [5008 5037])
            ("org-element-affiliated-keywords" variable nil nil [5054 5094])
            ("declare-function" code nil nil [5117 5168])
            ("pcomplete/org-mode/file-option" function nil nil [5169 6089])
            ("pcomplete/org-mode/file-option/author" function nil nil [6091 6233])
            ("org-time-stamp-formats" variable nil nil [6235 6266])
            ("pcomplete/org-mode/file-option/date" function nil nil [6267 6440])
            ("pcomplete/org-mode/file-option/email" function nil nil [6442 6585])
            ("org-export-exclude-tags" variable nil nil [6587 6619])
            ("pcomplete/org-mode/file-option/exclude_tags" function nil nil [6620 6859])
            ("org-file-tags" variable nil nil [6861 6883])
            ("pcomplete/org-mode/file-option/filetags" function nil nil [6884 7068])
            ("org-export-default-language" variable nil nil [7070 7106])
            ("pcomplete/org-mode/file-option/language" function nil nil [7107 7319])
            ("org-default-priority" variable nil nil [7321 7350])
            ("org-highest-priority" variable nil nil [7351 7380])
            ("org-lowest-priority" variable nil nil [7381 7409])
            ("pcomplete/org-mode/file-option/priorities" function nil nil [7410 7639])
            ("org-export-select-tags" variable nil nil [7641 7672])
            ("pcomplete/org-mode/file-option/select_tags" function nil nil [7673 7908])
            ("org-startup-options" variable nil nil [7910 7938])
            ("pcomplete/org-mode/file-option/startup" function nil nil [7939 8427])
            ("pcomplete/org-mode/file-option/tags" function nil nil [8429 8603])
            ("pcomplete/org-mode/file-option/title" function nil nil [8605 8946])
            ("declare-function" code nil nil [8949 9008])
            ("pcomplete/org-mode/file-option/options" function nil nil [9009 9761])
            ("pcomplete/org-mode/file-option/infojs_opt" function nil nil [9763 10033])
            ("pcomplete/org-mode/file-option/bind" function nil nil [10035 10288])
            ("org-link-abbrev-alist-local" variable nil nil [10290 10326])
            ("org-link-abbrev-alist" variable nil nil [10327 10357])
            ("pcomplete/org-mode/link" function nil nil [10358 10603])
            ("org-entities" variable nil nil [10605 10626])
            ("pcomplete/org-mode/tex" function nil nil [10627 10868])
            ("org-todo-keywords-1" variable nil nil [10870 10898])
            ("pcomplete/org-mode/todo" function nil nil [10899 11055])
            ("org-todo-line-regexp" variable nil nil [11057 11086])
            ("pcomplete/org-mode/searchhead" function nil nil [11087 11596])
            ("pcomplete/org-mode/tag" function nil nil [11598 12126])
            ("pcomplete/org-mode/prop" function nil nil [12128 12526])
            ("pcomplete/org-mode/block-option/src" function nil nil [12528 13138])
            ("pcomplete/org-mode/block-option/clocktable" function nil nil [13140 13517])
            ("org-pcomplete-case-double" function (:arguments ("list")) nil [13519 13763])
            ("org-pcomplete" package nil nil [13781 13805]))          
      :file "org-pcomplete.el"
      :pointmax 13838
      :fsize 13837
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1245 1262])
            ("org-macs" include nil nil [1263 1282])
            ("org-compat" include nil nil [1283 1304])
            ("ob-keys" include nil nil [1305 1323])
            ("ob-comint" include nil nil [1324 1344])
            ("declare-function" code nil nil [1346 1395])
            ("declare-function" code nil nil [1396 1460])
            ("declare-function" code nil nil [1461 1517])
            ("declare-function" code nil nil [1518 1593])
            ("declare-function" code nil nil [1594 1666])
            ("declare-function" code nil nil [1667 1756])
            ("declare-function" code nil nil [1757 1829])
            ("declare-function" code nil nil [1830 1889])
            ("declare-function" code nil nil [1890 1983])
            ("declare-function" code nil nil [1984 2045])
            ("declare-function" code nil nil [2046 2117])
            ("declare-function" code nil nil [2118 2175])
            ("org-inhibit-startup" variable nil nil [2177 2205])
            ("org-edit-src-turn-on-auto-save" variable nil nil [2207 2693])
            ("org-edit-src-auto-save-idle-delay" variable nil nil [2695 3129])
            ("org-coderef-label-format" variable (:default-value "(ref:%s)") nil [3131 3816])
            ("org-edit-fixed-width-region-mode" variable (:default-value (quote artist-mode)) nil [3818 4155])
            ("org-src-preserve-indentation" variable nil nil [4157 4764])
            ("org-edit-src-content-indentation" variable (:default-value 2) nil [4766 5164])
            ("org-edit-src-persistent-message" variable (:default-value t) nil [5166 5460])
            ("org-src-ask-before-returning-to-edit-buffer" variable (:default-value t) nil [5462 5902])
            ("org-src-window-setup" variable (:default-value (quote reorganize-frame)) nil [5904 6717])
            ("org-src-mode-hook" variable nil nil [6719 7205])
            ("org-src-lang-modes" variable (:default-value (quote (("ocaml" . tuareg) ("elisp" . emacs-lisp) ("ditaa" . artist) ("asymptote" . asy) ("dot" . fundamental) ("sqlite" . sql) ("calc" . fundamental) ("C" . c) ("cpp" . c++) ("C++" . c++) ("screen" . shell-script) ("shell" . sh) ("bash" . sh)))) nil [7207 7991])
            ("org-src-block-faces" variable nil nil [7993 8708])
            ("org-src-tab-acts-natively" variable nil nil [8710 8915])
            ("org-src--allow-write-back" variable (:default-value t) nil [8958 8994])
            ("org-src--auto-save-timer" variable nil nil [8995 9032])
            ("org-src--babel-info" variable nil nil [9033 9065])
            ("org-src--beg-marker" variable nil nil [9066 9098])
            ("org-src--block-indentation" variable nil nil [9099 9138])
            ("org-src--end-marker" variable nil nil [9139 9171])
            ("org-src--from-org-mode" variable nil nil [9172 9207])
            ("org-src--overlay" variable nil nil [9208 9237])
            ("org-src--preserve-indentation" variable nil nil [9238 9280])
            ("org-src--remote" variable nil nil [9281 9309])
            ("org-src--saved-temp-window-config" variable nil nil [9310 9356])
            ("org-src--construct-edit-buffer-name" function (:arguments ("org-buffer-name" "lang")) nil [9358 9538])
            ("org-src--edit-buffer" function (:arguments ("beg" "end")) nil [9540 10001])
            ("org-src--source-buffer" function nil nil [10003 10269])
            ("org-src--get-lang-mode" function (:arguments ("lang")) nil [10271 10559])
            ("org-src--coordinates" function (:arguments ("pos" "beg" "end")) nil [10561 11146])
            ("org-src--goto-coordinates" function (:arguments ("coord" "beg" "end")) nil [11148 11709])
            ("org-src--contents-area" function (:arguments ("datum")) nil [11711 13646])
            ("org-src--make-source-overlay" function (:arguments ("beg" "end" "edit-buffer")) nil [13648 14614])
            ("org-src--remove-overlay" function nil nil [14616 14768])
            ("org-src--on-datum-p" function (:arguments ("datum")) nil [14770 15219])
            ("org-src--contents-for-write-back" function nil nil [15221 15988])
            ("org-src--edit-element" function (:arguments ("datum" "name" "major" "write-back" "contents" "remote")) nil [15990 19988])
            ("org-src-font-lock-fontify-block" function (:arguments ("lang" "start" "end")) nil [20029 21609])
            ("org-escape-code-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [21634 22003])
            ("org-escape-code-in-string" function (:arguments ("s")) nil [22005 22250])
            ("org-unescape-code-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [22252 22639])
            ("org-unescape-code-in-string" function (:arguments ("s")) nil [22641 22907])
            ("org-src-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "'" (quote org-edit-src-exit)) (define-key map "" (quote org-edit-src-abort)) (define-key map "" (quote org-edit-src-save)) map)) nil [22936 23157])
            ("define-minor-mode" code nil nil [23159 24669])
            ("org-src-mode-configure-edit-buffer" function nil nil [24671 25080])
            ("add-hook" code nil nil [25082 25148])
            ("org-src-associate-babel-session" function
               (:user-visible-flag t
                :arguments ("info"))
                nil [25182 25598])
            ("org-src-babel-configure-edit-buffer" function nil nil [25600 25733])
            ("add-hook" code nil nil [25735 25802])
            ("org-src-do-at-code-block" function (:arguments ("body")) nil [25822 26115])
            ("org-src-do-key-sequence-at-code-block" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [26117 27113])
            ("org-src-edit-buffer-p" function (:arguments ("buffer")) nil [27115 27459])
            ("org-src-switch-to-buffer" function (:arguments ("buffer" "context")) nil [27461 28309])
            ("org-src-coderef-format" function (:arguments ("element")) nil [28311 28880])
            ("org-src-coderef-regexp" function (:arguments ("fmt" "label")) nil [28882 29500])
            ("org-edit-footnote-reference" function (:user-visible-flag t) nil [29502 31604])
            ("org-edit-table.el" function (:user-visible-flag t) nil [31606 32437])
            ("org-edit-export-block" function (:user-visible-flag t) nil [32439 33415])
            ("org-edit-src-code" function
               (:user-visible-flag t
                :arguments ("code" "edit-buffer-name"))
                nil [33417 35725])
            ("org-edit-inline-src-code" function (:user-visible-flag t) nil [35727 37033])
            ("org-edit-fixed-width-region" function (:user-visible-flag t) nil [37035 37987])
            ("org-edit-src-abort" function (:user-visible-flag t) nil [37989 38154])
            ("org-edit-src-continue" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [38156 38509])
            ("org-edit-src-save" function (:user-visible-flag t) nil [38511 39298])
            ("org-edit-src-exit" function (:user-visible-flag t) nil [39300 41112])
            ("org-src" package nil nil [41115 41133]))          
      :file "org-src.el"
      :pointmax 41160
      :fsize 41159
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1152 1169])
            ("org-macs" include nil nil [1170 1189])
            ("org-compat" include nil nil [1190 1211])
            ("declare-function" code nil nil [1213 1257])
            ("declare-function" code nil nil [1258 1319])
            ("declare-function" code nil nil [1320 1373])
            ("declare-function" code nil nil [1374 1433])
            ("declare-function" code nil nil [1434 1490])
            ("declare-function" code nil nil [1491 1566])
            ("declare-function" code nil nil [1567 1639])
            ("declare-function" code nil nil [1640 1725])
            ("declare-function" code nil nil [1726 1798])
            ("declare-function" code nil nil [1799 1858])
            ("declare-function" code nil nil [1859 1939])
            ("declare-function" code nil nil [1940 2003])
            ("declare-function" code nil nil [2004 2051])
            ("declare-function" code nil nil [2052 2121])
            ("declare-function" code nil nil [2122 2174])
            ("declare-function" code nil nil [2175 2230])
            ("declare-function" code nil nil [2231 2283])
            ("declare-function" code nil nil [2284 2350])
            ("declare-function" code nil nil [2351 2408])
            ("declare-function" code nil nil [2409 2466])
            ("declare-function" code nil nil [2467 2516])
            ("electric-indent-mode" variable nil nil [2518 2547])
            ("org-blank-before-new-entry" variable nil nil [2548 2583])
            ("org-bracket-link-regexp" variable nil nil [2604 2636])
            ("org-complex-heading-regexp" variable nil nil [2657 2692])
            ("org-odd-levels-only" variable nil nil [2713 2741])
            ("org-outline-regexp" variable nil nil [2763 2790])
            ("org-outline-regexp-bol" variable nil nil [2812 2843])
            ("org-footnote-re" variable
               (:constant-flag t
                :default-value "\\[fn:\\(?:\\(?1:[-_[:word:]]+\\)?\\(:\\)\\|\\(?1:[-_[:word:]]+\\)\\]\\)")
                nil [2884 3205])
            ("org-footnote-definition-re" variable
               (:constant-flag t
                :default-value "^\\[fn:\\([-_[:word:]]+\\)\\]")
                nil [3207 3381])
            ("org-footnote-forbidden-blocks" variable
               (:constant-flag t
                :default-value (quote ("comment" "example" "export" "src")))
                nil [3383 3514])
            ("org-footnote" customgroup (:user-visible-flag t) nil [3538 3628])
            ("org-footnote-section" variable (:default-value "Footnotes") nil [3630 4677])
            ("org-footnote-define-inline" variable nil nil [4679 5021])
            ("org-footnote-auto-label" variable (:default-value t) nil [5023 5704])
            ("org-footnote-auto-adjust" variable nil nil [5706 6344])
            ("org-footnote-fill-after-inline-note-extraction" variable nil nil [6346 6690])
            ("org-footnote-in-valid-context-p" function nil nil [6711 7137])
            ("org-footnote-at-reference-p" function nil nil [7139 8582])
            ("org-footnote-at-definition-p" function nil nil [8584 9878])
            ("org-footnote--allow-reference-p" function nil nil [9907 12147])
            ("org-footnote--clear-footnote-section" function nil nil [12149 13087])
            ("org-footnote--set-label" function (:arguments ("label")) nil [13089 13404])
            ("org-footnote--collect-references" function (:arguments ("anonymous")) nil [13406 15924])
            ("org-footnote--collect-definitions" function (:arguments ("delete")) nil [15926 17210])
            ("org-footnote--goto-local-insertion-point" function nil nil [17212 17765])
            ("org-footnote-get-next-reference" function (:arguments ("label" "backward" "limit")) nil [17786 18572])
            ("org-footnote-next-reference-or-definition" function (:arguments ("limit")) nil [18574 19537])
            ("org-footnote-goto-definition" function
               (:user-visible-flag t
                :arguments ("label" "location"))
                nil [19539 20666])
            ("org-footnote-goto-previous-reference" function
               (:user-visible-flag t
                :arguments ("label"))
                nil [20668 21334])
            ("org-footnote-normalize-label" function (:arguments ("label")) nil [21352 21634])
            ("org-footnote-get-definition" function (:arguments ("label")) nil [21636 22550])
            ("org-footnote-all-labels" function nil nil [22552 23099])
            ("org-footnote-unique-label" function (:arguments ("current")) nil [23101 23514])
            ("org-footnote-new" function (:user-visible-flag t) nil [23551 25356])
            ("org-footnote-create-definition" function (:arguments ("label")) nil [25358 26203])
            ("org-footnote-delete-references" function (:arguments ("label")) nil [26205 26567])
            ("org-footnote-delete-definitions" function (:arguments ("label")) nil [26569 27193])
            ("org-footnote-delete" function (:arguments ("label")) nil [27195 28468])
            ("org-footnote-renumber-fn:N" function (:user-visible-flag t) nil [28512 29504])
            ("org-footnote-sort" function nil nil [29506 31281])
            ("org-footnote-normalize" function (:user-visible-flag t) nil [31283 34480])
            ("org-footnote-auto-adjust-maybe" function nil nil [34482 34984])
            ("org-footnote-action" function
               (:user-visible-flag t
                :arguments ("special"))
                nil [35028 37168])
            ("org-footnote" package nil nil [37171 37194]))          
      :file "org-footnote.el"
      :pointmax 37301
      :fsize 37300
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1855 1872])
            ("org-macs" include nil nil [1873 1892])
            ("org-compat" include nil nil [1893 1914])
            ("declare-function" code nil nil [1916 1972])
            ("declare-function" code nil nil [1973 2045])
            ("declare-function" code nil nil [2046 2174])
            ("declare-function" code nil nil [2175 2273])
            ("declare-function" code nil nil [2274 2346])
            ("declare-function" code nil nil [2347 2406])
            ("declare-function" code nil nil [2407 2474])
            ("declare-function" code nil nil [2475 2511])
            ("declare-function" code nil nil [2512 2556])
            ("declare-function" code nil nil [2557 2618])
            ("declare-function" code nil nil [2619 2674])
            ("defvar-local" code nil nil [2691 3027])
            ("org-macro--collect-macros" function nil nil [3044 4659])
            ("org-macro-initialize-templates" function nil nil [4661 6329])
            ("org-macro-expand" function (:arguments ("macro" "templates")) nil [6331 7398])
            ("org-macro-replace-all" function (:arguments ("templates" "finalize" "keywords")) nil [7400 9654])
            ("org-macro-escape-arguments" function (:arguments ("args")) nil [9656 10446])
            ("org-macro-extract-arguments" function (:arguments ("s")) nil [10448 11005])
            ("org-macro--vc-modified-time" function (:arguments ("file")) nil [11007 11737])
            ("org-macro" package nil nil [11740 11760]))          
      :file "org-macro.el"
      :pointmax 11788
      :fsize 11787
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "ob.el"
      :fsize 1262
      :lastmodtime '(22659 33033 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [2880 2894])
            ("declare-function" code nil nil [2896 2945])
            ("org-id" customgroup (:user-visible-flag t) nil [2966 3078])
            ("org-id-link-to-org-use-id" variable nil nil [3080 4695])
            ("org-id-uuid-program" variable (:default-value "uuidgen") nil [4697 4796])
            ("org-id-method" variable (:default-value (quote uuid)) nil [4798 5579])
            ("org-id-prefix" variable nil nil [5581 5918])
            ("org-id-include-domain" variable nil nil [5920 6427])
            ("org-id-track-globally" variable (:default-value t) nil [6429 6952])
            ("org-id-locations-file" variable (:default-value (convert-standard-filename (concat user-emacs-directory ".org-id-locations"))) nil [6954 7232])
            ("org-id-locations" variable nil nil [7234 7306])
            ("org-id-files" variable nil nil [7308 7369])
            ("org-id-extra-files" variable (:default-value (quote org-agenda-text-search-extra-files)) nil [7371 7980])
            ("org-id-search-archives" variable (:default-value t) nil [7982 8317])
            ("org-id-get-create" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [8357 8667])
            ("org-id-copy" function (:user-visible-flag t) nil [8684 8847])
            ("org-id-get" function (:arguments ("pom" "create" "prefix")) nil [8864 9531])
            ("org-id-get-with-outline-path-completion" function (:arguments ("targets")) nil [9548 10298])
            ("org-id-get-with-outline-drilling" function nil nil [10315 10757])
            ("org-id-goto" function
               (:user-visible-flag t
                :arguments ("id"))
                nil [10774 11147])
            ("org-id-find" function (:arguments ("id" "markerp")) nil [11164 11864])
            ("org-id-new" function (:arguments ("prefix")) nil [11926 13046])
            ("org-id-uuid" function nil nil [13048 13610])
            ("org-id-int-to-b36-one-digit" function (:arguments ("i")) nil [13612 13821])
            ("org-id-b36-to-int-one-digit" function (:arguments ("i")) nil [13823 14160])
            ("org-id-int-to-b36" function (:arguments ("i" "length")) nil [14162 14559])
            ("org-id-b36-to-int" function (:arguments ("s")) nil [14561 14756])
            ("org-id-time-to-b36" function (:arguments ("time")) nil [14758 15102])
            ("org-id-decode" function (:arguments ("id")) nil [15104 15751])
            ("org-id-update-id-locations" function
               (:user-visible-flag t
                :arguments ("files" "silent"))
                nil [15801 18724])
            ("org-id-locations-save" function nil nil [18726 19118])
            ("org-id-locations-load" function nil nil [19120 19694])
            ("org-id-add-location" function (:arguments ("id" "file")) nil [19696 20088])
            ("unless" code nil nil [20090 20166])
            ("org-id-hash-to-alist" function (:arguments ("hash")) nil [20168 20439])
            ("org-id-alist-to-hash" function (:arguments ("list")) nil [20441 20755])
            ("org-id-paste-tracker" function (:arguments ("txt" "buffer-or-file")) nil [20757 21421])
            ("org-id-find-id-file" function (:arguments ("id")) nil [21476 21857])
            ("org-id-find-id-in-file" function (:arguments ("id" "file" "markerp")) nil [21859 22500])
            ("org-id-store-link" function (:user-visible-flag t) nil [22664 23205])
            ("org-id-open" function (:arguments ("id")) nil [23207 23913])
            ("org-link-set-parameters" code nil nil [23915 23967])
            ("org-id" package nil nil [23969 23986]))          
      :file "org-id.el"
      :pointmax 24087
      :fsize 24086
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [1194 1212])
            ("org-babel-key-prefix" variable (:default-value "") nil [1214 1468])
            ("org-babel-map" variable (:default-value (make-sparse-keymap)) nil [1470 1561])
            ("org-babel-describe-bindings" function (:user-visible-flag t) nil [1578 1735])
            ("org-babel-key-bindings" variable (:default-value (quote (("p" . org-babel-previous-src-block) ("" . org-babel-previous-src-block) ("n" . org-babel-next-src-block) ("" . org-babel-next-src-block) ("e" . org-babel-execute-maybe) ("" . org-babel-execute-maybe) ("o" . org-babel-open-src-block-result) ("" . org-babel-open-src-block-result) ("" . org-babel-expand-src-block) ("v" . org-babel-expand-src-block) ("u" . org-babel-goto-src-block-head) ("" . org-babel-goto-src-block-head) ("g" . org-babel-goto-named-src-block) ("r" . org-babel-goto-named-result) ("" . org-babel-goto-named-result) ("" . org-babel-execute-buffer) ("b" . org-babel-execute-buffer) ("" . org-babel-execute-subtree) ("s" . org-babel-execute-subtree) ("" . org-babel-demarcate-block) ("d" . org-babel-demarcate-block) ("" . org-babel-tangle) ("t" . org-babel-tangle) ("" . org-babel-tangle-file) ("f" . org-babel-tangle-file) ("" . org-babel-check-src-block) ("c" . org-babel-check-src-block) ("
" . org-babel-insert-header-arg) ("j" . org-babel-insert-header-arg) ("" . org-babel-load-in-session) ("l" . org-babel-load-in-session) ("	" . org-babel-lob-ingest) ("i" . org-babel-lob-ingest) ("	" . org-babel-view-src-block-info) ("I" . org-babel-view-src-block-info) ("" . org-babel-switch-to-session) ("z" . org-babel-switch-to-session-with-code) ("" . org-babel-sha1-hash) ("a" . org-babel-sha1-hash) ("h" . org-babel-describe-bindings) ("" . org-babel-do-key-sequence-in-edit-buffer) ("x" . org-babel-do-key-sequence-in-edit-buffer) ("k" . org-babel-remove-result-one-or-many) ("\210" . org-babel-mark-block)))) nil [1737 3842])
            ("ob-keys" package nil nil [3844 3862]))          
      :file "ob-keys.el"
      :pointmax 3964
      :fsize 3963
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [1190 1208])
            ("org-compat" include nil nil [1209 1230])
            ("comint" include nil nil [1231 1248])
            ("tramp" include nil nil [1249 1265])
            ("org-babel-comint-buffer-livep" function (:arguments ("buffer")) nil [1267 1499])
            ("org-babel-comint-in-buffer" function (:arguments ("buffer" "body")) nil [1501 2036])
            ("def-edebug-spec" code nil nil [2037 2093])
            ("org-babel-comint-with-output" function (:arguments ("meta" "body")) nil [2095 4319])
            ("def-edebug-spec" code nil nil [4320 4378])
            ("org-babel-comint-input-command" function (:arguments ("buffer" "cmd")) nil [4380 4669])
            ("org-babel-comint-wait-for-output" function (:arguments ("buffer")) nil [4671 5274])
            ("org-babel-comint-eval-invisibly-and-wait-for-file" function (:arguments ("buffer" "file" "string" "period")) nil [5276 6083])
            ("ob-comint" package nil nil [6085 6105]))          
      :file "ob-comint.el"
      :pointmax 6136
      :fsize 6135
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [5578 5592])
            ("avl-tree" include nil nil [5593 5612])
            ("cl-lib" include nil nil [5613 5630])
            ("org-element-paragraph-separate" variable nil nil [5941 6219])
            ("org-element--object-regexp" variable nil nil [6221 6545])
            ("org-element--set-regexps" function nil nil [6547 9173])
            ("org-element--set-regexps" code nil nil [9175 9201])
            ("org-element-update-syntax" function (:user-visible-flag t) nil [9218 9361])
            ("org-element-all-elements" variable
               (:constant-flag t
                :default-value (quote (babel-call center-block clock comment comment-block diary-sexp drawer dynamic-block example-block export-block fixed-width footnote-definition headline horizontal-rule inlinetask item keyword latex-environment node-property paragraph plain-list planning property-drawer quote-block section special-block src-block table table-row verse-block)))
                nil [9363 9821])
            ("org-element-greater-elements" variable
               (:constant-flag t
                :default-value (quote (center-block drawer dynamic-block footnote-definition headline inlinetask item plain-list property-drawer quote-block section special-block table)))
                nil [9823 10077])
            ("org-element-all-objects" variable
               (:constant-flag t
                :default-value (quote (bold code entity export-snippet footnote-reference inline-babel-call inline-src-block italic line-break latex-fragment link macro radio-target statistics-cookie strike-through subscript superscript table-cell target timestamp underline verbatim)))
                nil [10079 10404])
            ("org-element-recursive-objects" variable
               (:constant-flag t
                :default-value (quote (bold footnote-reference italic link subscript radio-target strike-through superscript table-cell underline)))
                nil [10406 10596])
            ("org-element-object-containers" variable
               (:constant-flag t
                :default-value (append org-element-recursive-objects (quote (paragraph table-row verse-block))))
                nil [10598 10785])
            ("org-element-affiliated-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION" "DATA" "HEADER" "HEADERS" "LABEL" "NAME" "PLOT" "RESNAME" "RESULT" "RESULTS" "SOURCE" "SRCNAME" "TBLNAME")))
                nil [10787 11122])
            ("org-element-keyword-translation-alist" variable
               (:constant-flag t
                :default-value (quote (("DATA" . "NAME") ("LABEL" . "NAME") ("RESNAME" . "NAME") ("SOURCE" . "NAME") ("SRCNAME" . "NAME") ("TBLNAME" . "NAME") ("RESULT" . "RESULTS") ("HEADERS" . "HEADER"))))
                nil [11124 11524])
            ("org-element-multiple-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION" "HEADER")))
                nil [11526 12004])
            ("org-element-parsed-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION")))
                nil [12006 12304])
            ("org-element--parsed-properties-alist" variable
               (:constant-flag t
                :default-value (mapcar (lambda (k) (cons k (intern (concat ":" (downcase k))))) org-element-parsed-keywords))
                nil [12306 12573])
            ("org-element-dual-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION" "RESULTS")))
                nil [12575 13014])
            ("org-element--affiliated-re" variable
               (:constant-flag t
                :default-value (format "[ 	]*#\\+\\(?:%s\\):[ 	]*" (concat (format "\\(?1:%s\\)\\(?:\\[\\(.*\\)\\]\\)?" (regexp-opt org-element-dual-keywords)) "\\|" (format "\\(?1:%s\\)" (regexp-opt (cl-remove-if (lambda (k) (member k org-element-dual-keywords)) org-element-affiliated-keywords))) "\\|" "\\(?1:ATTR_[-_A-Za-z0-9]+\\)")))
                nil [13016 13759])
            ("org-element-object-restrictions" variable
               (:constant-flag t
                :default-value (let* ((standard-set (remq (quote table-cell) org-element-all-objects)) (standard-set-no-line-break (remq (quote line-break) standard-set))) (\` ((bold (\,@ standard-set)) (footnote-reference (\,@ standard-set)) (headline (\,@ standard-set-no-line-break)) (inlinetask (\,@ standard-set-no-line-break)) (italic (\,@ standard-set)) (item (\,@ standard-set-no-line-break)) (keyword (\,@ (remq (quote footnote-reference) standard-set))) (link bold code entity export-snippet inline-babel-call inline-src-block italic latex-fragment macro simple-link statistics-cookie strike-through subscript superscript underline verbatim) (paragraph (\,@ standard-set)) (radio-target bold code entity italic latex-fragment strike-through subscript superscript underline superscript) (strike-through (\,@ standard-set)) (subscript (\,@ standard-set)) (superscript (\,@ standard-set)) (table-cell bold code entity export-snippet footnote-reference italic latex-fragment link macro radio-target strike-through subscript superscript target timestamp underline verbatim) (table-row table-cell) (underline (\,@ standard-set)) (verse-block (\,@ standard-set))))))
                nil [13761 15896])
            ("org-element-secondary-value-alist" variable
               (:constant-flag t
                :default-value (quote ((headline :title) (inlinetask :title) (item :tag))))
                nil [15898 16072])
            ("org-element--pair-round-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table))) (modify-syntax-entry 40 "()" table) (modify-syntax-entry 41 ")(" table) (dolist (char (quote (123 125 91 93 60 62)) table) (modify-syntax-entry char " " table))))
                nil [16074 16423])
            ("org-element--pair-square-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table))) (modify-syntax-entry 91 "(]" table) (modify-syntax-entry 93 ")[" table) (dolist (char (quote (123 125 40 41 60 62)) table) (modify-syntax-entry char " " table))))
                nil [16425 16776])
            ("org-element--pair-curly-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table))) (modify-syntax-entry 123 "(}" table) (modify-syntax-entry 125 "){" table) (dolist (char (quote (91 93 40 41 60 62)) table) (modify-syntax-entry char " " table))))
                nil [16778 17127])
            ("org-element--parse-paired-brackets" function (:arguments ("char")) nil [17129 17800])
            ("org-element-type" function (:arguments ("element")) nil [18678 19091])
            ("org-element-property" function (:arguments ("property" "element")) nil [19093 19303])
            ("org-element-contents" function (:arguments ("element")) nil [19305 19480])
            ("org-element-restriction" function (:arguments ("element")) nil [19482 19772])
            ("org-element-put-property" function (:arguments ("element" "property" "value")) nil [19774 20047])
            ("org-element-set-contents" function (:arguments ("element" "contents")) nil [20049 20329])
            ("org-element-secondary-p" function (:arguments ("object")) nil [20331 20765])
            ("org-element-class" function (:arguments ("datum" "parent")) nil [20767 21834])
            ("org-element-adopt-elements" function (:arguments ("parent" "children")) nil [21836 22605])
            ("org-element-extract-element" function (:arguments ("element")) nil [22607 23235])
            ("org-element-insert-before" function (:arguments ("element" "location")) nil [23237 24714])
            ("org-element-set-element" function (:arguments ("old" "new")) nil [24716 25802])
            ("org-element-create" function (:arguments ("type" "props" "children")) nil [25804 26110])
            ("org-element-copy" function (:arguments ("datum")) nil [26112 26550])
            ("org-element-center-block-parser" function (:arguments ("limit" "affiliated")) nil [28004 29557])
            ("org-element-center-block-interpreter" function (:arguments ("_" "contents")) nil [29559 29762])
            ("org-element-drawer-parser" function (:arguments ("limit" "affiliated")) nil [29778 31422])
            ("org-element-drawer-interpreter" function (:arguments ("drawer" "contents")) nil [31424 31650])
            ("org-element-dynamic-block-parser" function (:arguments ("limit" "affiliated")) nil [31673 33394])
            ("org-element-dynamic-block-interpreter" function (:arguments ("dynamic-block" "contents")) nil [33396 33759])
            ("org-element--footnote-separator" variable
               (:constant-flag t
                :default-value (concat org-outline-regexp-bol "\\|" org-footnote-definition-re "\\|" "^\\([ 	]*
\\)\\{2,\\}"))
                nil [33788 33987])
            ("org-element-footnote-definition-parser" function (:arguments ("limit" "affiliated")) nil [33989 35925])
            ("org-element-footnote-definition-interpreter" function (:arguments ("footnote-definition" "contents")) nil [35927 36218])
            ("org-element--get-node-properties" function nil nil [36236 36958])
            ("org-element--get-time-properties" function nil nil [36960 37682])
            ("org-element-headline-parser" function (:arguments ("limit" "raw-secondary-p")) nil [37684 41153])
            ("org-element-headline-interpreter" function (:arguments ("headline" "contents")) nil [41155 42594])
            ("org-element-inlinetask-parser" function (:arguments ("limit" "raw-secondary-p")) nil [42614 45817])
            ("org-element-inlinetask-interpreter" function (:arguments ("inlinetask" "contents")) nil [45819 47069])
            ("org-element-item-parser" function (:arguments ("_" "struct" "raw-secondary-p")) nil [47083 49575])
            ("org-element-item-interpreter" function (:arguments ("item" "contents")) nil [49577 50753])
            ("org-element--list-struct" function (:arguments ("limit")) nil [50773 53621])
            ("org-element-plain-list-parser" function (:arguments ("limit" "affiliated" "structure")) nil [53623 55209])
            ("org-element-plain-list-interpreter" function (:arguments ("_" "contents")) nil [55211 55468])
            ("org-element-property-drawer-parser" function (:arguments ("limit")) nil [55493 56502])
            ("org-element-property-drawer-interpreter" function (:arguments ("_" "contents")) nil [56504 56707])
            ("org-element-quote-block-parser" function (:arguments ("limit" "affiliated")) nil [56728 58233])
            ("org-element-quote-block-interpreter" function (:arguments ("_" "contents")) nil [58235 58432])
            ("org-element-section-parser" function (:arguments ("_")) nil [58449 59206])
            ("org-element-section-interpreter" function (:arguments ("_" "contents")) nil [59208 59357])
            ("org-element-special-block-parser" function (:arguments ("limit" "affiliated")) nil [59380 61047])
            ("org-element-special-block-interpreter" function (:arguments ("special-block" "contents")) nil [61049 61346])
            ("org-element-babel-call-parser" function (:arguments ("limit" "affiliated")) nil [61795 63303])
            ("org-element-babel-call-interpreter" function (:arguments ("babel-call" "_")) nil [63305 63724])
            ("org-element-clock-parser" function (:arguments ("limit")) nil [63739 64837])
            ("org-element-clock-interpreter" function (:arguments ("clock" "_")) nil [64839 65215])
            ("org-element-comment-parser" function (:arguments ("limit" "affiliated")) nil [65232 66626])
            ("org-element-comment-interpreter" function (:arguments ("comment" "_")) nil [66628 66817])
            ("org-element-comment-block-parser" function (:arguments ("limit" "affiliated")) nil [66840 68210])
            ("org-element-comment-block-interpreter" function (:arguments ("comment-block" "_")) nil [68212 68484])
            ("org-element-diary-sexp-parser" function (:arguments ("limit" "affiliated")) nil [68504 69471])
            ("org-element-diary-sexp-interpreter" function (:arguments ("diary-sexp" "_")) nil [69473 69613])
            ("org-element-example-block-parser" function (:arguments ("limit" "affiliated")) nil [69636 72419])
            ("org-element-example-block-interpreter" function (:arguments ("example-block" "_")) nil [72421 72971])
            ("org-element-export-block-parser" function (:arguments ("limit" "affiliated")) nil [72993 74633])
            ("org-element-export-block-interpreter" function (:arguments ("export-block" "_")) nil [74635 74884])
            ("org-element-fixed-width-parser" function (:arguments ("limit" "affiliated")) nil [74905 76126])
            ("org-element-fixed-width-interpreter" function (:arguments ("fixed-width" "_")) nil [76128 76419])
            ("org-element-horizontal-rule-parser" function (:arguments ("limit" "affiliated")) nil [76444 77299])
            ("org-element-horizontal-rule-interpreter" function (:arguments ("_")) nil [77301 77421])
            ("org-element-keyword-parser" function (:arguments ("limit" "affiliated")) nil [77438 78703])
            ("org-element-keyword-interpreter" function (:arguments ("keyword" "_")) nil [78705 78903])
            ("org-element--latex-begin-environment" variable
               (:constant-flag t
                :default-value "^[ 	]*\\\\begin{\\([A-Za-z0-9*]+\\)}")
                nil [78930 79173])
            ("org-element--latex-end-environment" variable
               (:constant-flag t
                :default-value "\\\\end{%s}[ 	]*$")
                nil [79175 79354])
            ("org-element-latex-environment-parser" function (:arguments ("limit" "affiliated")) nil [79356 80712])
            ("org-element-latex-environment-interpreter" function (:arguments ("latex-environment" "_")) nil [80714 80890])
            ("org-element-node-property-parser" function (:arguments ("limit")) nil [80913 81609])
            ("org-element-node-property-interpreter" function (:arguments ("node-property" "_")) nil [81611 81872])
            ("org-element-paragraph-parser" function (:arguments ("limit" "affiliated")) nil [81891 84304])
            ("org-element-paragraph-interpreter" function (:arguments ("_" "contents")) nil [84306 84459])
            ("org-element-planning-parser" function (:arguments ("limit")) nil [84477 85654])
            ("org-element-planning-interpreter" function (:arguments ("planning" "_")) nil [85656 86343])
            ("org-element-src-block-parser" function (:arguments ("limit" "affiliated")) nil [86362 89623])
            ("org-element-src-block-interpreter" function (:arguments ("src-block" "_")) nil [89625 90569])
            ("org-element-table-parser" function (:arguments ("limit" "affiliated")) nil [90584 92343])
            ("org-element-table-interpreter" function (:arguments ("table" "contents")) nil [92345 92848])
            ("org-element-table-row-parser" function (:arguments ("_")) nil [92867 93743])
            ("org-element-table-row-interpreter" function (:arguments ("table-row" "contents")) nil [93745 93985])
            ("org-element-verse-block-parser" function (:arguments ("limit" "affiliated")) nil [94006 95364])
            ("org-element-verse-block-interpreter" function (:arguments ("_" "contents")) nil [95366 95556])
            ("org-element-bold-parser" function nil nil [96140 96921])
            ("org-element-bold-interpreter" function (:arguments ("_" "contents")) nil [96923 97080])
            ("org-element-code-parser" function nil nil [97094 97764])
            ("org-element-code-interpreter" function (:arguments ("code" "_")) nil [97766 97905])
            ("org-element-entity-parser" function nil nil [97921 99109])
            ("org-element-entity-interpreter" function (:arguments ("entity" "_")) nil [99111 99319])
            ("org-element-export-snippet-parser" function nil nil [99343 100285])
            ("org-element-export-snippet-interpreter" function (:arguments ("export-snippet" "_")) nil [100287 100525])
            ("org-element-footnote-reference-parser" function nil nil [100553 101574])
            ("org-element-footnote-reference-interpreter" function (:arguments ("footnote-reference" "contents")) nil [101576 101885])
            ("org-element-inline-babel-call-parser" function nil nil [101912 103419])
            ("org-element-inline-babel-call-interpreter" function (:arguments ("inline-babel-call" "_")) nil [103421 103879])
            ("org-element-inline-src-block-parser" function nil nil [103905 105007])
            ("org-element-inline-src-block-interpreter" function (:arguments ("inline-src-block" "_")) nil [105009 105423])
            ("org-element-italic-parser" function nil nil [105438 106231])
            ("org-element-italic-interpreter" function (:arguments ("_" "contents")) nil [106233 106394])
            ("org-element-latex-fragment-parser" function nil nil [106418 107739])
            ("org-element-latex-fragment-interpreter" function (:arguments ("latex-fragment" "_")) nil [107741 107904])
            ("org-element-line-break-parser" function nil nil [107923 108390])
            ("org-element-line-break-interpreter" function (:arguments ("_")) nil [108392 108502])
            ("org-element-link-parser" function nil nil [108516 113402])
            ("org-element-link-interpreter" function (:arguments ("link" "contents")) nil [113404 114828])
            ("org-element-macro-parser" function nil nil [114843 115710])
            ("org-element-macro-interpreter" function (:arguments ("macro" "_")) nil [115712 115839])
            ("org-element-radio-target-parser" function nil nil [115861 116694])
            ("org-element-radio-target-interpreter" function (:arguments ("_" "contents")) nil [116696 116868])
            ("org-element-statistics-cookie-parser" function nil nil [116895 117641])
            ("org-element-statistics-cookie-interpreter" function (:arguments ("statistics-cookie" "_")) nil [117643 117818])
            ("org-element-strike-through-parser" function nil nil [117842 118677])
            ("org-element-strike-through-interpreter" function (:arguments ("_" "contents")) nil [118679 118856])
            ("org-element-subscript-parser" function nil nil [118875 119813])
            ("org-element-subscript-interpreter" function (:arguments ("subscript" "contents")) nil [119815 120057])
            ("org-element-superscript-parser" function nil nil [120078 121021])
            ("org-element-superscript-interpreter" function (:arguments ("superscript" "contents")) nil [121023 121273])
            ("org-element-table-cell-parser" function nil nil [121293 121833])
            ("org-element-table-cell-interpreter" function (:arguments ("_" "contents")) nil [121835 122014])
            ("org-element-target-parser" function nil nil [122030 122640])
            ("org-element-target-interpreter" function (:arguments ("target" "_")) nil [122642 122791])
            ("org-element--timestamp-regexp" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp-both "\\|" "\\(?:<[0-9]+-[0-9]+-[0-9]+[^>
]+?\\+[0-9]+[dwmy]>\\)" "\\|" "\\(?:<%%\\(?:([^>
]+)\\)>\\)"))
                nil [122810 123039])
            ("org-element-timestamp-parser" function nil nil [123041 126789])
            ("org-element-timestamp-interpreter" function (:arguments ("timestamp" "_")) nil [126791 130488])
            ("org-element-underline-parser" function nil nil [130507 131319])
            ("org-element-underline-interpreter" function (:arguments ("_" "contents")) nil [131321 131488])
            ("org-element-verbatim-parser" function nil nil [131506 132201])
            ("org-element-verbatim-interpreter" function (:arguments ("verbatim" "_")) nil [132203 132358])
            ("org-element--current-element" function (:arguments ("limit" "granularity" "mode" "structure")) nil [132865 138399])
            ("org-element--collect-affiliated-keywords" function (:arguments ("limit")) nil [138672 141349])
            ("org-element-parse-buffer" function (:arguments ("granularity" "visible-only")) nil [141899 144123])
            ("org-element-parse-secondary-string" function (:arguments ("string" "restriction" "parent")) nil [144125 144973])
            ("org-element-map" function (:arguments ("data" "types" "fun" "info" "first-match" "no-recursion" "with-affiliated")) nil [144975 151299])
            ("put" code nil nil [151300 151346])
            ("org-element--next-mode" function (:arguments ("type" "parentp")) nil [151700 152383])
            ("org-element--parse-elements" function (:arguments ("beg" "end" "mode" "structure" "granularity" "visible-only" "acc")) nil [152385 155261])
            ("org-element--object-lex" function (:arguments ("restriction")) nil [155263 159271])
            ("org-element--parse-objects" function (:arguments ("beg" "end" "acc" "restriction" "parent")) nil [159273 161330])
            ("org-element-interpret-data" function (:arguments ("data")) nil [161721 164173])
            ("org-element--interpret-affiliated-keywords" function (:arguments ("element")) nil [164175 165750])
            ("org-element-normalize-string" function (:arguments ("s")) nil [166255 166652])
            ("org-element-normalize-contents" function (:arguments ("element" "ignore-first")) nil [166654 170018])
            ("org-element-use-cache" variable (:default-value t) nil [172315 172439])
            ("org-element-cache-sync-idle-time" variable (:default-value 0.6) nil [172441 172545])
            ("org-element-cache-sync-duration" variable (:default-value (seconds-to-time 0.04)) nil [172547 172808])
            ("org-element-cache-sync-break" variable (:default-value (seconds-to-time 0.3)) nil [172810 172999])
            ("org-element--cache" variable nil nil [173023 173236])
            ("org-element--cache-objects" variable nil nil [173238 174046])
            ("org-element--cache-sync-requests" variable nil nil [174048 175281])
            ("org-element--cache-sync-timer" variable nil nil [175283 175367])
            ("org-element--cache-sync-keys" variable nil nil [175369 175519])
            ("org-element--cache-key" function (:arguments ("element")) nil [175521 176803])
            ("org-element--cache-generate-key" function (:arguments ("lower" "upper")) nil [176805 179057])
            ("org-element--cache-key-less-p" function (:arguments ("a" "b")) nil [179059 179792])
            ("org-element--cache-compare" function (:arguments ("a" "b")) nil [179794 179983])
            ("org-element--cache-root" function nil nil [179985 180183])
            ("org-element--cache-active-p" function nil nil [180198 180381])
            ("org-element--cache-find" function (:arguments ("pos" "side")) nil [180383 182310])
            ("org-element--cache-put" function (:arguments ("element" "data")) nil [182312 183472])
            ("org-element--cache-remove" function (:arguments ("element")) nil [183474 183705])
            ("org-element--cache-set-timer" function (:arguments ("buffer")) nil [183730 184162])
            ("org-element--cache-interrupt-p" function (:arguments ("time-limit")) nil [184164 184410])
            ("org-element--cache-shift-positions" function (:arguments ("element" "offset" "props")) nil [184412 185554])
            ("org-element--cache-sync" function (:arguments ("buffer" "threshold" "future-change")) nil [185556 187276])
            ("org-element--cache-process-request" function (:arguments ("request" "next" "threshold" "time-limit" "future-change")) nil [187278 194793])
            ("org-element--parse-to" function (:arguments ("pos" "syncp" "time-limit")) nil [194795 200369])
            ("org-element--cache-sensitive-re" variable
               (:constant-flag t
                :default-value (concat org-outline-regexp-bol "\\|" "\\\\end{[A-Za-z0-9*]+}[ 	]*$" "\\|" "^[ 	]*\\(?:" "#\\+\\(?:BEGIN[:_]\\|END\\(?:_\\|:?[ 	]*$\\)\\)" "\\|" "\\\\begin{[A-Za-z0-9*]+}" "\\|" ":\\(?:\\w\\|[-_]\\)+:[ 	]*$" "\\)"))
                nil [200401 200960])
            ("org-element--cache-change-warning" variable nil nil [200962 201110])
            ("org-element--cache-before-change" function (:arguments ("beg" "end")) nil [201112 201821])
            ("org-element--cache-after-change" function (:arguments ("beg" "end" "pre")) nil [201823 203405])
            ("org-element--cache-for-removal" function (:arguments ("beg" "end" "offset")) nil [203407 205317])
            ("org-element--cache-submit-request" function (:arguments ("beg" "end" "offset")) nil [205319 208357])
            ("org-element-cache-reset" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [208398 209301])
            ("org-element-cache-refresh" function (:arguments ("pos")) nil [209318 209584])
            ("org-element-at-point" function nil nil [210305 211757])
            ("org-element-context" function (:arguments ("element")) nil [211774 219344])
            ("org-element-lineage" function (:arguments ("blob" "types" "with-self")) nil [219346 220233])
            ("org-element-nested-p" function (:arguments ("elem-A" "elem-B")) nil [220235 220614])
            ("org-element-swap-A-B" function (:arguments ("elem-A" "elem-B")) nil [220616 223402])
            ("org-element" package nil nil [223405 223427]))          
      :file "org-element.el"
      :pointmax 223533
      :fsize 223532
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [1676 1694])
            ("cl-lib" include nil nil [1695 1712])
            ("declare-function" code nil nil [1714 1782])
            ("declare-function" code nil nil [1783 1839])
            ("declare-function" code nil nil [1840 1912])
            ("declare-function" code nil nil [1913 1972])
            ("declare-function" code nil nil [1973 2035])
            ("declare-function" code nil nil [2036 2105])
            ("declare-function" code nil nil [2106 2158])
            ("declare-function" code nil nil [2159 2237])
            ("declare-function" code nil nil [2238 2316])
            ("declare-function" code nil nil [2317 2366])
            ("declare-function" code nil nil [2367 2424])
            ("declare-function" code nil nil [2425 2482])
            ("org-babel-ref-split-regexp" variable (:default-value "[ 	
]*\\(.+?\\)[ 	
]*=[ 	
]*\\(.+\\)[ 	
]*") nil [2484 2598])
            ("org-babel-update-intermediate" variable nil nil [2600 2722])
            ("org-babel-ref-parse" function (:arguments ("assignment")) nil [2724 3804])
            ("org-babel-ref-goto-headline-id" function (:arguments ("id")) nil [3806 4202])
            ("org-babel-ref-headline-body" function nil nil [4204 4422])
            ("org-babel-library-of-babel" variable nil nil [4424 4459])
            ("org-babel-ref-resolve" function (:arguments ("ref")) nil [4460 7585])
            ("org-babel-ref-index-list" function (:arguments ("index" "lis")) nil [7587 9218])
            ("org-babel-ref-split-args" function (:arguments ("arg-string")) nil [9220 9399])
            ("ob-ref" package nil nil [9402 9419]))          
      :file "ob-ref.el"
      :pointmax 9445
      :fsize 9444
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1910 1924])
            ("declare-function" code nil nil [1972 2039])
            ("declare-function" code nil nil [2040 2078])
            ("declare-function" code nil nil [2079 2125])
            ("declare-function" code nil nil [2126 2174])
            ("declare-function" code nil nil [2175 2244])
            ("declare-function" code nil nil [2245 2290])
            ("declare-function" code nil nil [2291 2347])
            ("declare-function" code nil nil [2348 2409])
            ("org-irc-client" variable (:default-value (quote erc)) nil [2411 2469])
            ("org-irc-link-to-logs" variable nil nil [2470 2581])
            ("erc-default-port" variable nil nil [2583 2608])
            ("erc-session-port" variable nil nil [2644 2669])
            ("erc-session-server" variable nil nil [2713 2740])
            ("org-link-set-parameters" code nil nil [2845 2928])
            ("org-irc-visit" function (:arguments ("link")) nil [2930 3201])
            ("org-irc-parse-link" function (:arguments ("link")) nil [3203 3682])
            ("org-irc-store-link" function nil nil [3699 3873])
            ("org-irc-ellipsify-description" function (:arguments ("string" "after")) nil [3875 4441])
            ("org-irc-erc-get-line-from-log" function (:arguments ("erc-line")) nil [4470 5335])
            ("org-irc-erc-store-link" function nil nil [5337 6597])
            ("org-irc-get-erc-link" function nil nil [6599 7174])
            ("org-irc-get-current-erc-port" function nil nil [7176 7493])
            ("org-irc-visit-erc" function (:arguments ("link")) nil [7495 8982])
            ("org-irc" package nil nil [8984 9002]))          
      :file "org-irc.el"
      :pointmax 9104
      :fsize 9103
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1324 1338])
            ("gnus-util" include nil nil [1339 1359])
            ("gnus-sum" include nil nil [1379 1398])
            ("declare-function" code nil nil [1446 1521])
            ("declare-function" code nil nil [1522 1579])
            ("declare-function" code nil nil [1580 1639])
            ("declare-function" code nil nil [1640 1702])
            ("defvaralias" code nil nil [1732 1804])
            ("org-gnus-prefer-web-links" variable nil nil [1806 2160])
            ("org-gnus-nnimap-query-article-no-from-file" variable nil nil [2162 2678])
            ("org-gnus-no-server" variable nil nil [2680 2853])
            ("org-link-set-parameters" code nil nil [2880 2965])
            ("org-gnus-nnimap-cached-article-number" function (:arguments ("group" "server" "message-id")) nil [2986 3854])
            ("org-gnus-group-link" function (:arguments ("group")) nil [3856 4593])
            ("org-gnus-article-link" function (:arguments ("group" "newsgroups" "message-id" "x-no-archive")) nil [4595 5575])
            ("org-gnus-store-link" function nil nil [5577 9165])
            ("org-gnus-open-nntp" function (:arguments ("path")) nil [9167 9482])
            ("org-gnus-open" function (:arguments ("path")) nil [9484 9939])
            ("org-gnus-follow-link" function (:arguments ("group" "article")) nil [9941 11538])
            ("org-gnus-no-new-news" function nil nil [11540 11699])
            ("org-gnus" package nil nil [11701 11720]))          
      :file "org-gnus.el"
      :pointmax 11749
      :fsize 11748
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax '((close-paren 1398 . 1399) (symbol 1361 . 1378) (open-paren 1360 . 1361)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1078 1095])
            ("ox-html" include nil nil [1096 1114])
            ("ox-publish" include nil nil [1115 1136])
            ("org-export-md" customgroup (:user-visible-flag t) nil [1173 1346])
            ("org-md-headline-style" variable (:default-value (quote atx)) nil [1348 1604])
            ("org-md-footnotes-section" variable (:default-value "%s%s") nil [1623 1942])
            ("org-md-footnote-format" variable (:default-value "<sup>%s</sup>") nil [1944 2190])
            ("org-export-define-derived-backend" code nil nil [2215 3829])
            ("org-md-separate-elements" function (:arguments ("tree" "_backend" "info")) nil [3846 4874])
            ("org-md-bold" function (:arguments ("_bold" "contents" "_info")) nil [4915 5125])
            ("org-md-verbatim" function (:arguments ("verbatim" "_contents" "_info")) nil [5152 5558])
            ("org-md-example-block" function (:arguments ("example-block" "_contents" "info")) nil [5609 5920])
            ("org-md-export-block" function (:arguments ("export-block" "contents" "info")) nil [5922 6357])
            ("org-md-headline" function (:arguments ("headline" "contents" "info")) nil [6375 8290])
            ("org-md--headline-title" function (:arguments ("style" "level" "title" "anchor" "tags")) nil [8312 9161])
            ("org-md-horizontal-rule" function (:arguments ("_horizontal-rule" "_contents" "_info")) nil [9185 9410])
            ("org-md-italic" function (:arguments ("_italic" "contents" "_info")) nil [9426 9642])
            ("org-md-item" function (:arguments ("item" "contents" "info")) nil [9656 10586])
            ("org-md-keyword" function (:arguments ("keyword" "contents" "info")) nil [10604 10944])
            ("org-md-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [10964 11149])
            ("org-md-link" function (:arguments ("link" "contents" "info")) nil [11163 14089])
            ("org-md-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [14112 14484])
            ("org-md-paragraph" function (:arguments ("paragraph" "contents" "_info")) nil [14503 14919])
            ("org-md-plain-list" function (:arguments ("_plain-list" "contents" "_info")) nil [14939 15146])
            ("org-md-plain-text" function (:arguments ("text" "info")) nil [15166 16181])
            ("org-md-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [16206 16513])
            ("org-md-quote-block" function (:arguments ("_quote-block" "contents" "_info")) nil [16534 16825])
            ("org-md-section" function (:arguments ("_section" "contents" "_info")) nil [16842 17037])
            ("org-md--footnote-formatted" function (:arguments ("footnote" "info")) nil [17055 17621])
            ("org-md--footnote-section" function (:arguments ("info")) nil [17623 18367])
            ("org-md-inner-template" function (:arguments ("contents" "info")) nil [18369 18905])
            ("org-md-template" function (:arguments ("contents" "_info")) nil [18907 19115])
            ("org-md-export-as-markdown" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only"))
                nil [19161 20062])
            ("org-md-convert-region-to-md" function (:user-visible-flag t) nil [20079 20392])
            ("org-md-export-to-markdown" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only"))
                nil [20410 21216])
            ("org-md-publish-to-md" function (:arguments ("plist" "filename" "pub-dir")) nil [21233 21553])
            ("ox-md" package nil nil [21555 21571]))          
      :file "ox-md.el"
      :pointmax 21671
      :fsize 21670
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1129 1146])
            ("format-spec" include nil nil [1147 1169])
            ("ox" include nil nil [1170 1183])
            ("ox-publish" include nil nil [1184 1205])
            ("table" include nil nil [1206 1222])
            ("declare-function" code nil nil [1253 1305])
            ("declare-function" code nil nil [1306 1363])
            ("declare-function" code nil nil [1364 1417])
            ("htmlize-css-name-prefix" variable nil nil [1419 1451])
            ("htmlize-output-type" variable nil nil [1452 1480])
            ("htmlize-output-type" variable nil nil [1481 1509])
            ("htmlize-css-name-prefix" variable nil nil [1510 1542])
            ("org-export-define-backend" code nil nil [1565 7761])
            ("org-html-format-table-no-css" variable nil nil [7789 7826])
            ("htmlize-buffer-places" variable nil nil [7827 7857])
            ("org-html--pre/postamble-class" variable (:default-value "status") nil [7878 7962])
            ("org-html-doctype-alist" variable
               (:constant-flag t
                :default-value (quote (("html4-strict" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"
\"http://www.w3.org/TR/html4/strict.dtd\">") ("html4-transitional" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"
\"http://www.w3.org/TR/html4/loose.dtd\">") ("html4-frameset" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\"
\"http://www.w3.org/TR/html4/frameset.dtd\">") ("xhtml-strict" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">") ("xhtml-transitional" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">") ("xhtml-frameset" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">") ("xhtml-11" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml11.dtd\">") ("html5" . "<!DOCTYPE html>") ("xhtml5" . "<!DOCTYPE html>"))))
                nil [7964 9082])
            ("org-html-html5-elements" variable
               (:constant-flag t
                :default-value (quote ("article" "aside" "audio" "canvas" "details" "figcaption" "figure" "footer" "header" "menu" "meter" "nav" "output" "progress" "section" "video")))
                nil [9084 9401])
            ("org-html-special-string-regexps" variable
               (:constant-flag t
                :default-value (quote (("\\\\-" . "&#x00ad;") ("---\\([^-]\\)" . "&#x2014;\\1") ("--\\([^-]\\)" . "&#x2013;\\1") ("\\.\\.\\." . "&#x2026;"))))
                nil [9403 9667])
            ("org-html-scripts" variable
               (:constant-flag t
                :default-value "<script type=\"text/javascript\">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = \"code-highlighted\";
     elem.className   = \"code-highlighted\";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>")
                nil [9669 11389])
            ("org-html-style-default" variable
               (:constant-flag t
                :default-value "<style type=\"text/css\">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per \"defun org-babel-execute\"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf \" \")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>")
                nil [11391 18568])
            ("org-export-html" customgroup (:user-visible-flag t) nil [18606 18732])
            ("org-html-infojs-opts-table" variable (:default-value (quote ((path PATH "http://orgmode.org/org-info.js") (view VIEW "info") (toc TOC :with-toc) (ftoc FIXED_TOC "0") (tdepth TOC_DEPTH "max") (sdepth SECTION_DEPTH "max") (mouse MOUSE_HINT "underline") (buttons VIEW_BUTTONS "0") (ltoc LOCAL_TOC "1") (up LINK_UP :html-link-up) (home LINK_HOME :html-link-home)))) nil [18754 19194])
            ("org-html-use-infojs" variable (:default-value (quote when-configured)) nil [19196 19813])
            ("org-html-infojs-options" variable (:default-value (mapcar (lambda (x) (cons (car x) (nth 2 x))) org-html-infojs-opts-table)) nil [19815 20675])
            ("org-html-infojs-template" variable (:default-value "<script type=\"text/javascript\" src=\"%SCRIPT_PATH\">
/**
 *
 * @source: %SCRIPT_PATH
 *
 * @licstart  The following is the entire license notice for the
 *  JavaScript code in %SCRIPT_PATH.
 *
 * Copyright (C) 2012-2013 Free Software Foundation, Inc.
 *
 *
 * The JavaScript code in this tag is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License (GNU GPL) as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.  The code is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
 *
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in %SCRIPT_PATH.
 *
 */
</script>

<script type=\"text/javascript\">

/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/

<!--/*--><![CDATA[/*><!--*/
%MANAGER_OPTIONS
org_html_manager.setup();  // activate after the parameters are set
/*]]>*///-->
</script>") nil [20677 23287])
            ("org-html-infojs-install-script" function (:arguments ("exp-plist" "_backend")) nil [23289 26580])
            ("org-html-text-markup-alist" variable (:default-value (quote ((bold . "<b>%s</b>") (code . "<code>%s</code>") (italic . "<i>%s</i>") (strike-through . "<del>%s</del>") (underline . "<span class=\"underline\">%s</span>") (verbatim . "<code>%s</code>")))) nil [26599 27395])
            ("org-html-indent" variable nil nil [27397 27633])
            ("org-html-format-drawer-function" variable (:default-value (lambda (_name contents) contents)) nil [27649 28218])
            ("org-html-footnotes-section" variable (:default-value "<div id=\"footnotes\">
<h2 class=\"footnotes\">%s: </h2>
<div id=\"text-footnotes\">
%s
</div>
</div>") nil [28236 28636])
            ("org-html-footnote-format" variable (:default-value "<sup>%s</sup>") nil [28638 28829])
            ("org-html-footnote-separator" variable (:default-value "<sup>, </sup>") nil [28831 28965])
            ("org-html-toplevel-hlevel" variable (:default-value 2) nil [28982 29508])
            ("org-html-format-headline-function" variable (:default-value (quote org-html-format-headline-default-function)) nil [29510 30122])
            ("org-html-allow-name-attribute-in-anchors" variable nil nil [30144 30447])
            ("org-html-format-inlinetask-function" variable (:default-value (quote org-html-format-inlinetask-default-function)) nil [30467 31172])
            ("org-html-with-latex" variable (:default-value org-export-with-latex) nil [31186 32055])
            ("org-html-link-org-files-as-html" variable (:default-value t) nil [32080 32619])
            ("org-html-inline-images" variable (:default-value t) nil [32650 32933])
            ("org-html-inline-image-rules" variable (:default-value (quote (("file" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'") ("http" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'") ("https" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'")))) nil [32935 33520])
            ("org-html-protect-char-alist" variable (:default-value (quote (("&" . "&amp;") ("<" . "&lt;") (">" . "&gt;")))) nil [33539 33707])
            ("org-html-htmlize-output-type" variable (:default-value (quote inline-css)) nil [33725 34842])
            ("org-html-htmlize-font-prefix" variable (:default-value "org-") nil [34844 35001])
            ("org-html-table-default-attributes" variable (:default-value (quote (:border "2" :cellspacing "0" :cellpadding "6" :rules "groups" :frame "hsides"))) nil [35015 35529])
            ("org-html-table-header-tags" variable (:default-value (quote ("<th scope=\"%s\"%s>" . "</th>"))) nil [35531 36105])
            ("org-html-table-data-tags" variable (:default-value (quote ("<td%s>" . "</td>"))) nil [36107 36591])
            ("org-html-table-row-open-tag" variable (:default-value "<tr>") nil [36593 37907])
            ("org-html-table-row-close-tag" variable (:default-value "</tr>") nil [37909 38341])
            ("org-html-table-align-individual-fields" variable (:default-value t) nil [38343 38668])
            ("org-html-table-use-header-tags-for-first-column" variable nil nil [38670 38886])
            ("org-html-table-caption-above" variable (:default-value t) nil [38888 39077])
            ("org-html-tag-class-prefix" variable nil nil [39090 39472])
            ("org-html-extension" variable (:default-value "html") nil [39500 39622])
            ("org-html-xml-declaration" variable (:default-value (quote (("html" . "<?xml version=\"1.0\" encoding=\"%s\"?>") ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>")))) nil [39624 40241])
            ("org-html-coding-system" variable (:default-value (quote utf-8)) nil [40243 40452])
            ("org-html-doctype" variable (:default-value "xhtml-strict") nil [40454 40858])
            ("org-html-html5-fancy" variable nil nil [40860 41363])
            ("org-html-container-element" variable (:default-value "div") nil [41365 41745])
            ("org-html-divs" variable (:default-value (quote ((preamble "div" "preamble") (content "div" "content") (postamble "div" "postamble")))) nil [41747 42643])
            ("org-html-checkbox-types" variable
               (:constant-flag t
                :default-value (quote ((unicode (on . "&#x2611;") (off . "&#x2610;") (trans . "&#x2610;")) (ascii (on . "<code>[X]</code>") (off . "<code>[&#xa0;]</code>") (trans . "<code>[-]</code>")) (html (on . "<input type='checkbox' checked='checked' />") (off . "<input type='checkbox' />") (trans . "<input type='checkbox' />")))))
                nil [42645 43404])
            ("org-html-checkbox-type" variable (:default-value (quote ascii)) nil [43406 43790])
            ("org-html-metadata-timestamp-format" variable (:default-value "%Y-%m-%d %a %H:%M") nil [43792 44085])
            ("org-html-mathjax-options" variable (:default-value (quote ((path "http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML") (scale "100") (align "center") (font "TeX") (linebreaks "false") (autonumber "AMS") (indent "0em") (multlinewidth "85%") (tagindent ".8em") (tagside "right")))) nil [44113 47499])
            ("org-html-mathjax-template" variable (:default-value "<script type=\"text/x-mathjax-config\">
    MathJax.Hub.Config({
        displayAlign: \"%ALIGN\",
        displayIndent: \"%INDENT\",

        \"HTML-CSS\": { scale: %SCALE,
                        linebreaks: { automatic: \"%LINEBREAKS\" },
                        webFont: \"%FONT\"
                       },
        SVG: {scale: %SCALE,
              linebreaks: { automatic: \"%LINEBREAKS\" },
              font: \"%FONT\"},
        NativeMML: {scale: %SCALE},
        TeX: { equationNumbers: {autoNumber: \"%AUTONUMBER\"},
               MultLineWidth: \"%MULTLINEWIDTH\",
               TagSide: \"%TAGSIDE\",
               TagIndent: \"%TAGINDENT\"
             }
});
</script>
<script type=\"text/javascript\"
        src=\"%PATH\"></script>") nil [47501 48401])
            ("org-html-postamble" variable (:default-value (quote auto)) nil [48431 49301])
            ("org-html-postamble-format" variable (:default-value (quote (("en" "<p class=\"author\">Author: %a (%e)</p>
<p class=\"date\">Date: %d</p>
<p class=\"creator\">%c</p>
<p class=\"validation\">%v</p>")))) nil [49303 50352])
            ("org-html-validation-link" variable (:default-value "<a href=\"http://validator.w3.org/check?uri=referer\">Validate</a>") nil [50354 50540])
            ("org-html-creator-string" variable (:default-value (format "<a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> %s (<a href=\"http://orgmode.org\">Org</a> mode %s)" emacs-version (if (fboundp (quote org-version)) (org-version) "unknown version"))) nil [50542 51010])
            ("org-html-preamble" variable (:default-value t) nil [51039 51802])
            ("org-html-preamble-format" variable (:default-value (quote (("en" "")))) nil [51804 52789])
            ("org-html-link-up" variable nil nil [52791 52947])
            ("org-html-link-home" variable nil nil [52949 53109])
            ("org-html-link-use-abs-url" variable nil nil [53111 53305])
            ("org-html-home/up-format" variable (:default-value "<div id=\"org-div-home-and-up\">
 <a accesskey=\"h\" href=\"%s\"> UP </a>
 |
 <a accesskey=\"H\" href=\"%s\"> HOME </a>
</div>") nil [53307 53755])
            ("org-html-head-include-scripts" variable (:default-value t) nil [53783 54074])
            ("org-html-head-include-default-style" variable (:default-value t) nil [54101 54453])
            ("put" code nil nil [54469 54542])
            ("org-html-head" variable nil nil [54544 55629])
            ("put" code nil nil [55645 55695])
            ("org-html-head-extra" variable nil nil [55697 56007])
            ("put" code nil nil [56023 56079])
            ("org-html-viewport" variable (:default-value (quote ((width "device-width") (initial-scale "1") (minimum-scale "") (maximum-scale "") (user-scalable "")))) nil [56108 57713])
            ("org-html-todo-kwd-class-prefix" variable nil nil [57727 58127])
            ("org-html-xhtml-p" function (:arguments ("info")) nil [58155 58275])
            ("org-html-html5-p" function (:arguments ("info")) nil [58277 58416])
            ("org-html--html5-fancy-p" function (:arguments ("info")) nil [58418 58648])
            ("org-html-close-tag" function (:arguments ("tag" "attr" "info")) nil [58650 58762])
            ("org-html-doctype" function (:arguments ("info")) nil [58764 59101])
            ("org-html--make-attribute-string" function (:arguments ("attributes")) nil [59103 59775])
            ("org-html--wrap-image" function (:arguments ("contents" "info" "caption" "label")) nil [59777 60517])
            ("org-html--format-image" function (:arguments ("source" "attributes" "info")) nil [60519 61256])
            ("org-html--svg-image" function (:arguments ("source" "attributes" "info")) nil [61258 62304])
            ("org-html--textarea-block" function (:arguments ("element")) nil [62306 62739])
            ("org-html--has-caption-p" function (:arguments ("element" "_info")) nil [62741 63080])
            ("org-html-htmlize-region-for-paste" function (:arguments ("beg" "end")) nil [63094 63686])
            ("org-html-htmlize-generate-css" function (:user-visible-flag t) nil [63703 65093])
            ("org-html--make-string" function (:arguments ("n" "string")) nil [65095 65252])
            ("org-html-fix-class-name" function (:arguments ("kwd")) nil [65254 65474])
            ("org-html-footnote-section" function (:arguments ("info")) nil [65476 66422])
            ("org-html--build-meta-info" function (:arguments ("info")) nil [66440 68897])
            ("org-html--build-head" function (:arguments ("info")) nil [68899 69679])
            ("org-html--build-mathjax-config" function (:arguments ("info")) nil [69681 70633])
            ("org-html-format-spec" function (:arguments ("info")) nil [70635 71597])
            ("org-html--build-pre/postamble" function (:arguments ("type" "info")) nil [71599 73923])
            ("org-html-inner-template" function (:arguments ("contents" "info")) nil [73925 74339])
            ("org-html-template" function (:arguments ("contents" "info")) nil [74341 76889])
            ("org-html--translate" function (:arguments ("s" "info")) nil [76891 77070])
            ("org-html--anchor" function (:arguments ("id" "desc" "attributes" "info")) nil [77085 77419])
            ("org-html--todo" function (:arguments ("todo" "info")) nil [77432 77725])
            ("org-html--priority" function (:arguments ("priority" "_info")) nil [77742 77991])
            ("org-html--tags" function (:arguments ("tags" "info")) nil [78004 78384])
            ("org-html-fontify-code" function (:arguments ("code" "lang")) nil [78401 80663])
            ("org-html-do-format-code" function (:arguments ("code" "lang" "refs" "retain-labels" "num-start")) nil [80665 81929])
            ("org-html-format-code" function (:arguments ("element" "info")) nil [81931 82566])
            ("org-html-toc" function (:arguments ("depth" "info" "scope")) nil [82594 83684])
            ("org-html--toc-text" function (:arguments ("toc-entries")) nil [83686 84496])
            ("org-html--format-toc-headline" function (:arguments ("headline" "info")) nil [84498 86070])
            ("org-html-list-of-listings" function (:arguments ("info")) nil [86072 87337])
            ("org-html-list-of-tables" function (:arguments ("info")) nil [87339 88586])
            ("org-html-bold" function (:arguments ("_bold" "contents" "info")) nil [88626 88887])
            ("org-html-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [88908 89173])
            ("org-html-clock" function (:arguments ("clock" "_contents" "_info")) nil [89187 89704])
            ("org-html-code" function (:arguments ("code" "_contents" "info")) nil [89717 90011])
            ("org-html-drawer" function (:arguments ("drawer" "contents" "info")) nil [90026 90330])
            ("org-html-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [90352 90596])
            ("org-html-entity" function (:arguments ("entity" "_contents" "_info")) nil [90611 90831])
            ("org-html-example-block" function (:arguments ("example-block" "_contents" "info")) nil [90853 91566])
            ("org-html-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [91589 91888])
            ("org-html-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [91909 92230])
            ("org-html-fixed-width" function (:arguments ("fixed-width" "_contents" "_info")) nil [92250 92580])
            ("org-html-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [92607 93418])
            ("org-html-headline" function (:arguments ("headline" "contents" "info")) nil [93435 97459])
            ("org-html-format-headline-default-function" function (:arguments ("todo" "_todo-type" "priority" "text" "tags" "info")) nil [97461 97897])
            ("org-html--container" function (:arguments ("headline" "info")) nil [97899 98103])
            ("org-html-horizontal-rule" function (:arguments ("_horizontal-rule" "_contents" "info")) nil [98127 98355])
            ("org-html-inline-src-block" function (:arguments ("inline-src-block" "_contents" "info")) nil [98380 98967])
            ("org-html-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [98986 99808])
            ("org-html-format-inlinetask-default-function" function (:arguments ("todo" "todo-type" "priority" "text" "tags" "contents" "info")) nil [99810 100218])
            ("org-html-italic" function (:arguments ("_italic" "contents" "info")) nil [100233 100507])
            ("org-html-checkbox" function (:arguments ("checkbox" "info")) nil [100520 100804])
            ("org-html-format-list-item" function (:arguments ("contents" "type" "checkbox" "info" "term-counter-id" "headline")) nil [100806 102023])
            ("org-html-item" function (:arguments ("item" "contents" "info")) nil [102025 102583])
            ("org-html-keyword" function (:arguments ("keyword" "_contents" "info")) nil [102599 103355])
            ("org-html-format-latex" function (:arguments ("latex-frag" "processing-type" "info")) nil [103381 104838])
            ("org-html-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [104840 105813])
            ("org-html-latex-fragment" function (:arguments ("latex-fragment" "_contents" "info")) nil [105836 106560])
            ("org-html-line-break" function (:arguments ("_line-break" "_contents" "info")) nil [106579 106804])
            ("org-html-inline-image-p" function (:arguments ("link" "info")) nil [106817 107714])
            ("org-html-standalone-image-predicate" variable nil nil [107716 107760])
            ("org-html-standalone-image-p" function (:arguments ("element" "info")) nil [107761 109120])
            ("org-html-link" function (:arguments ("link" "desc" "info")) nil [109122 116112])
            ("org-html-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [116134 116504])
            ("org-html-paragraph" function (:arguments ("paragraph" "contents" "info")) nil [116522 118349])
            ("org-html-begin-plain-list" function (:arguments ("type" "arg1")) nil [118481 118872])
            ("org-html-end-plain-list" function (:arguments ("type")) nil [118874 119057])
            ("org-html-plain-list" function (:arguments ("plain-list" "contents" "_info")) nil [119059 119418])
            ("org-html-convert-special-strings" function (:arguments ("string")) nil [119437 119695])
            ("org-html-encode-plain-text" function (:arguments ("text")) nil [119697 119990])
            ("org-html-plain-text" function (:arguments ("text" "info")) nil [119992 120928])
            ("org-html-planning" function (:arguments ("planning" "_contents" "info")) nil [120944 121739])
            ("org-html-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [121763 122075])
            ("org-html-quote-block" function (:arguments ("quote-block" "contents" "_info")) nil [122095 122684])
            ("org-html-section" function (:arguments ("section" "contents" "info")) nil [122700 123640])
            ("org-html-radio-target" function (:arguments ("radio-target" "text" "info")) nil [123661 123952])
            ("org-html-special-block" function (:arguments ("special-block" "contents" "info")) nil [123974 125146])
            ("org-html-src-block" function (:arguments ("src-block" "_contents" "info")) nil [125164 126449])
            ("org-html-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [126475 126787])
            ("org-html-strike-through" function (:arguments ("_strike-through" "contents" "info")) nil [126810 127131])
            ("org-html-subscript" function (:arguments ("_subscript" "contents" "_info")) nil [127149 127379])
            ("org-html-superscript" function (:arguments ("_superscript" "contents" "_info")) nil [127399 127635])
            ("org-html-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [127654 129047])
            ("org-html-table-row" function (:arguments ("table-row" "contents" "info")) nil [129065 130970])
            ("org-html-table-first-row-data-cells" function (:arguments ("table" "info")) nil [130984 131466])
            ("org-html-table--table.el-table" function (:arguments ("table" "_info")) nil [131468 132072])
            ("org-html-table" function (:arguments ("table" "contents" "info")) nil [132074 134209])
            ("org-html-target" function (:arguments ("target" "_contents" "info")) nil [134224 134480])
            ("org-html-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [134498 134895])
            ("org-html-underline" function (:arguments ("_underline" "contents" "info")) nil [134913 135206])
            ("org-html-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [135223 135537])
            ("org-html-verse-block" function (:arguments ("_verse-block" "contents" "info")) nil [135557 136441])
            ("org-html-final-function" function (:arguments ("contents" "_backend" "info")) nil [136467 136786])
            ("org-html-export-as-html" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [136829 138025])
            ("org-html-convert-region-to-html" function (:user-visible-flag t) nil [138042 138354])
            ("org-html-export-to-html" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [138371 139634])
            ("org-html-publish-to-html" function (:arguments ("plist" "filename" "pub-dir")) nil [139651 140081])
            ("ox-html" package nil nil [140084 140102]))          
      :file "ox-html.el"
      :pointmax 140204
      :fsize 140203
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1562 1579])
            ("format-spec" include nil nil [1580 1602])
            ("ox" include nil nil [1603 1616])
            ("org-publish-temp-files" variable nil nil [1636 1716])
            ("org-publish-cache" variable nil nil [1791 1933])
            ("org-publish-after-publishing-hook" variable nil nil [1935 2153])
            ("org-publish" customgroup (:user-visible-flag t) nil [2155 2262])
            ("org-publish-project-alist" variable nil nil [2264 9796])
            ("org-publish-use-timestamps-flag" variable (:default-value t) nil [9798 10026])
            ("org-publish-timestamp-directory" variable (:default-value (convert-standard-filename "~/.org-timestamps/")) nil [10028 10233])
            ("org-publish-list-skipped-files" variable (:default-value t) nil [10235 10385])
            ("org-publish-sitemap-sort-files" variable (:default-value (quote alphabetically)) nil [10387 10975])
            ("org-publish-sitemap-sort-folders" variable (:default-value (quote first)) nil [10977 11450])
            ("org-publish-sitemap-sort-ignore-case" variable nil nil [11452 11715])
            ("org-publish-sitemap-date-format" variable (:default-value "%Y-%m-%d") nil [11717 11912])
            ("org-publish-sitemap-file-entry-format" variable (:default-value "%t") nil [11914 12223])
            ("org-publish-timestamp-filename" function (:arguments ("filename" "pub-dir" "pub-func")) nil [12334 12631])
            ("org-publish-needed-p" function (:arguments ("filename" "pub-dir" "pub-func" "_true-pub-dir" "base-dir")) nil [12633 13478])
            ("org-publish-update-timestamp" function (:arguments ("filename" "pub-dir" "pub-func" "_base-dir")) nil [13480 13819])
            ("org-publish-remove-all-timestamps" function nil nil [13821 14119])
            ("org-publish-expand-projects" function (:arguments ("projects-alist")) nil [14265 14726])
            ("org-publish-sitemap-sort-files" variable nil nil [14728 14767])
            ("org-publish-sitemap-sort-folders" variable nil nil [14768 14809])
            ("org-publish-sitemap-ignore-case" variable nil nil [14810 14850])
            ("org-publish-sitemap-requested" variable nil nil [14851 14889])
            ("org-publish-sitemap-date-format" variable nil nil [14890 14930])
            ("org-publish-sitemap-file-entry-format" variable nil nil [14931 14977])
            ("org-publish-compare-directory-files" function (:arguments ("a" "b")) nil [14978 16618])
            ("org-publish-get-base-files-1" function (:arguments ("base-dir" "recurse" "match" "skip-file" "skip-dir")) nil [16620 18057])
            ("org-publish-get-base-files" function (:arguments ("project" "exclude-regexp")) nil [18059 20323])
            ("org-publish-get-project-from-filename" function (:arguments ("filename" "up")) nil [20325 21500])
            ("org-publish-org-to" function (:arguments ("backend" "filename" "extension" "plist" "pub-dir")) nil [21627 23218])
            ("org-publish-attachment" function (:arguments ("_plist" "filename" "pub-dir")) nil [23220 23848])
            ("org-publish-file" function (:arguments ("filename" "project" "no-cache")) nil [23976 25933])
            ("org-publish-projects" function (:arguments ("projects")) nil [25935 28088])
            ("org-publish-org-sitemap" function (:arguments ("project" "sitemap-filename")) nil [28090 31247])
            ("org-publish-format-file-entry" function (:arguments ("fmt" "file" "project-plist")) nil [31249 31546])
            ("org-publish-find-title" function (:arguments ("file" "reset")) nil [31548 32388])
            ("org-publish-find-date" function (:arguments ("file")) nil [32390 33602])
            ("defalias" code nil nil [33733 33777])
            ("org-publish" function
               (:user-visible-flag t
                :arguments ("project" "force" "async"))
                nil [33794 35074])
            ("org-publish-all" function
               (:user-visible-flag t
                :arguments ("force" "async"))
                nil [35091 35907])
            ("org-publish-current-file" function
               (:user-visible-flag t
                :arguments ("force" "async"))
                nil [35925 36586])
            ("org-publish-current-project" function
               (:user-visible-flag t
                :arguments ("force" "async"))
                nil [36603 37101])
            ("org-publish-collect-index" function (:arguments ("output" "_backend" "info")) nil [37128 38688])
            ("org-publish-index-generate-theindex" function (:arguments ("project" "directory")) nil [38690 41439])
            ("org-publish--store-crossrefs" function (:arguments ("output" "_backend" "info")) nil [41613 42419])
            ("org-publish-resolve-external-link" function (:arguments ("search" "file")) nil [42421 43903])
            ("org-publish-write-cache-file" function (:arguments ("free-cache")) nil [43931 44711])
            ("org-publish-initialize-cache" function (:arguments ("project-name")) nil [44713 45880])
            ("org-publish-reset-cache" function nil nil [45882 46114])
            ("org-publish-cache-file-needs-publishing" function (:arguments ("filename" "pub-dir" "pub-func" "_base-dir")) nil [46116 47929])
            ("org-publish-cache-set-file-property" function (:arguments ("filename" "property" "value" "project-name")) nil [47931 48504])
            ("org-publish-cache-get-file-property" function (:arguments ("filename" "property" "default" "no-create" "project-name")) nil [48506 49277])
            ("org-publish-cache-get" function (:arguments ("key")) nil [49279 49594])
            ("org-publish-cache-set" function (:arguments ("key" "value")) nil [49596 49903])
            ("org-publish-cache-ctime-of-src" function (:arguments ("file")) nil [49905 50233])
            ("ox-publish" package nil nil [50236 50257]))          
      :file "ox-publish.el"
      :pointmax 50362
      :fsize 50361
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2932 2949])
            ("ob-exp" include nil nil [2950 2967])
            ("org-element" include nil nil [2968 2990])
            ("org-macro" include nil nil [2991 3011])
            ("tabulated-list" include nil nil [3012 3037])
            ("declare-function" code nil nil [3039 3114])
            ("declare-function" code nil nil [3115 3186])
            ("declare-function" code nil nil [3187 3267])
            ("declare-function" code nil nil [3268 3351])
            ("declare-function" code nil nil [3352 3423])
            ("declare-function" code nil nil [3424 3497])
            ("org-publish-project-alist" variable nil nil [3499 3533])
            ("org-table-number-fraction" variable nil nil [3534 3568])
            ("org-table-number-regexp" variable nil nil [3569 3601])
            ("org-export-max-depth" variable
               (:constant-flag t
                :default-value 19)
                nil [3824 3916])
            ("org-export-options-alist" variable
               (:constant-flag t
                :default-value (quote ((:title "TITLE" nil nil parse) (:date "DATE" nil nil parse) (:author "AUTHOR" nil user-full-name parse) (:email "EMAIL" nil user-mail-address t) (:language "LANGUAGE" nil org-export-default-language t) (:select-tags "SELECT_TAGS" nil org-export-select-tags split) (:exclude-tags "EXCLUDE_TAGS" nil org-export-exclude-tags split) (:creator "CREATOR" nil org-export-creator-string) (:headline-levels nil "H" org-export-headline-levels) (:preserve-breaks nil "\\n" org-export-preserve-breaks) (:section-numbers nil "num" org-export-with-section-numbers) (:time-stamp-file nil "timestamp" org-export-time-stamp-file) (:with-archived-trees nil "arch" org-export-with-archived-trees) (:with-author nil "author" org-export-with-author) (:with-broken-links nil "broken-links" org-export-with-broken-links) (:with-clocks nil "c" org-export-with-clocks) (:with-creator nil "creator" org-export-with-creator) (:with-date nil "date" org-export-with-date) (:with-drawers nil "d" org-export-with-drawers) (:with-email nil "email" org-export-with-email) (:with-emphasize nil "*" org-export-with-emphasize) (:with-entities nil "e" org-export-with-entities) (:with-fixed-width nil ":" org-export-with-fixed-width) (:with-footnotes nil "f" org-export-with-footnotes) (:with-inlinetasks nil "inline" org-export-with-inlinetasks) (:with-latex nil "tex" org-export-with-latex) (:with-planning nil "p" org-export-with-planning) (:with-priority nil "pri" org-export-with-priority) (:with-properties nil "prop" org-export-with-properties) (:with-smart-quotes nil "'" org-export-with-smart-quotes) (:with-special-strings nil "-" org-export-with-special-strings) (:with-statistics-cookies nil "stat" org-export-with-statistics-cookies) (:with-sub-superscript nil "^" org-export-with-sub-superscripts) (:with-toc nil "toc" org-export-with-toc) (:with-tables nil "|" org-export-with-tables) (:with-tags nil "tags" org-export-with-tags) (:with-tasks nil "tasks" org-export-with-tasks) (:with-timestamps nil "<" org-export-with-timestamps) (:with-title nil "title" org-export-with-title) (:with-todo-keywords nil "todo" org-export-with-todo-keywords))))
                nil [3918 7638])
            ("org-export-special-keywords" variable
               (:constant-flag t
                :default-value (quote ("FILETAGS" "SETUPFILE" "OPTIONS")))
                nil [7640 7930])
            ("org-export-filters-alist" variable
               (:constant-flag t
                :default-value (quote ((:filter-body . org-export-filter-body-functions) (:filter-bold . org-export-filter-bold-functions) (:filter-babel-call . org-export-filter-babel-call-functions) (:filter-center-block . org-export-filter-center-block-functions) (:filter-clock . org-export-filter-clock-functions) (:filter-code . org-export-filter-code-functions) (:filter-diary-sexp . org-export-filter-diary-sexp-functions) (:filter-drawer . org-export-filter-drawer-functions) (:filter-dynamic-block . org-export-filter-dynamic-block-functions) (:filter-entity . org-export-filter-entity-functions) (:filter-example-block . org-export-filter-example-block-functions) (:filter-export-block . org-export-filter-export-block-functions) (:filter-export-snippet . org-export-filter-export-snippet-functions) (:filter-final-output . org-export-filter-final-output-functions) (:filter-fixed-width . org-export-filter-fixed-width-functions) (:filter-footnote-definition . org-export-filter-footnote-definition-functions) (:filter-footnote-reference . org-export-filter-footnote-reference-functions) (:filter-headline . org-export-filter-headline-functions) (:filter-horizontal-rule . org-export-filter-horizontal-rule-functions) (:filter-inline-babel-call . org-export-filter-inline-babel-call-functions) (:filter-inline-src-block . org-export-filter-inline-src-block-functions) (:filter-inlinetask . org-export-filter-inlinetask-functions) (:filter-italic . org-export-filter-italic-functions) (:filter-item . org-export-filter-item-functions) (:filter-keyword . org-export-filter-keyword-functions) (:filter-latex-environment . org-export-filter-latex-environment-functions) (:filter-latex-fragment . org-export-filter-latex-fragment-functions) (:filter-line-break . org-export-filter-line-break-functions) (:filter-link . org-export-filter-link-functions) (:filter-node-property . org-export-filter-node-property-functions) (:filter-options . org-export-filter-options-functions) (:filter-paragraph . org-export-filter-paragraph-functions) (:filter-parse-tree . org-export-filter-parse-tree-functions) (:filter-plain-list . org-export-filter-plain-list-functions) (:filter-plain-text . org-export-filter-plain-text-functions) (:filter-planning . org-export-filter-planning-functions) (:filter-property-drawer . org-export-filter-property-drawer-functions) (:filter-quote-block . org-export-filter-quote-block-functions) (:filter-radio-target . org-export-filter-radio-target-functions) (:filter-section . org-export-filter-section-functions) (:filter-special-block . org-export-filter-special-block-functions) (:filter-src-block . org-export-filter-src-block-functions) (:filter-statistics-cookie . org-export-filter-statistics-cookie-functions) (:filter-strike-through . org-export-filter-strike-through-functions) (:filter-subscript . org-export-filter-subscript-functions) (:filter-superscript . org-export-filter-superscript-functions) (:filter-table . org-export-filter-table-functions) (:filter-table-cell . org-export-filter-table-cell-functions) (:filter-table-row . org-export-filter-table-row-functions) (:filter-target . org-export-filter-target-functions) (:filter-timestamp . org-export-filter-timestamp-functions) (:filter-underline . org-export-filter-underline-functions) (:filter-verbatim . org-export-filter-verbatim-functions) (:filter-verse-block . org-export-filter-verse-block-functions))))
                nil [7932 12024])
            ("org-export-default-inline-image-rule" variable
               (:constant-flag t
                :default-value (\` (("file" \, (format "\\.%s\\'" (regexp-opt (quote ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm")) t))))))
                nil [12026 12595])
            ("org-export-ignored-local-variables" variable
               (:constant-flag t
                :default-value (quote (org-font-lock-keywords org-element--cache org-element--cache-objects org-element--cache-sync-keys org-element--cache-sync-requests org-element--cache-sync-timer)))
                nil [12597 13103])
            ("org-export-async-debug" variable nil nil [13105 13470])
            ("org-export-stack-contents" variable nil nil [13472 13892])
            ("org-export-registered-backends" variable nil nil [13894 14100])
            ("org-export-dispatch-last-action" variable nil nil [14102 14297])
            ("org-export-dispatch-last-position" variable (:default-value (make-marker)) nil [14299 14586])
            ("org-export-current-backend" variable nil nil [14622 14992])
            ("org-export" customgroup (:user-visible-flag t) nil [15254 15355])
            ("org-export-general" customgroup (:user-visible-flag t) nil [15357 15478])
            ("org-export-with-archived-trees" variable (:default-value (quote headline)) nil [15480 16072])
            ("org-export-with-author" variable (:default-value t) nil [16074 16311])
            ("org-export-with-clocks" variable nil nil [16313 16525])
            ("org-export-with-creator" variable nil nil [16527 16894])
            ("org-export-with-date" variable (:default-value t) nil [16896 17124])
            ("org-export-date-timestamp-format" variable nil nil [17126 17600])
            ("org-export-creator-string" variable (:default-value (format "Emacs %s (Org mode %s)" emacs-version (if (fboundp (quote org-version)) (org-version) "unknown version"))) nil [17602 17950])
            ("org-export-with-drawers" variable (:default-value (quote (not "LOGBOOK"))) nil [17952 18962])
            ("org-export-with-email" variable nil nil [18964 19200])
            ("org-export-with-emphasize" variable (:default-value t) nil [19202 19582])
            ("org-export-exclude-tags" variable (:default-value (quote ("noexport"))) nil [19584 20046])
            ("org-export-with-fixed-width" variable (:default-value t) nil [20048 20328])
            ("org-export-with-footnotes" variable (:default-value t) nil [20330 20556])
            ("org-export-with-latex" variable (:default-value t) nil [20558 21159])
            ("org-export-headline-levels" variable (:default-value 3) nil [21161 21507])
            ("org-export-default-language" variable (:default-value "en") nil [21509 21899])
            ("org-export-preserve-breaks" variable nil nil [21901 22137])
            ("org-export-with-entities" variable (:default-value t) nil [22139 22546])
            ("org-export-with-inlinetasks" variable (:default-value t) nil [22548 22831])
            ("org-export-with-planning" variable nil nil [22833 23225])
            ("org-export-with-priority" variable nil nil [23227 23456])
            ("org-export-with-properties" variable nil nil [23458 24044])
            ("org-export-with-section-numbers" variable (:default-value t) nil [24046 24408])
            ("org-export-select-tags" variable (:default-value (quote ("export"))) nil [24410 24931])
            ("org-export-with-smart-quotes" variable nil nil [24933 25423])
            ("org-export-with-special-strings" variable (:default-value t) nil [25425 25938])
            ("org-export-with-statistics-cookies" variable (:default-value t) nil [25940 26233])
            ("org-export-with-sub-superscripts" variable (:default-value t) nil [26235 27786])
            ("org-export-with-toc" variable (:default-value t) nil [27788 28499])
            ("org-export-with-tables" variable (:default-value t) nil [28501 28757])
            ("org-export-with-tags" variable (:default-value t) nil [28759 29261])
            ("org-export-with-tasks" variable (:default-value t) nil [29263 30096])
            ("org-export-with-title" variable (:default-value t) nil [30098 30378])
            ("org-export-time-stamp-file" variable (:default-value t) nil [30380 30674])
            ("org-export-with-timestamps" variable (:default-value t) nil [30676 31440])
            ("org-export-with-todo-keywords" variable (:default-value t) nil [31442 31710])
            ("org-export-allow-bind-keywords" variable nil nil [31712 32053])
            ("org-export-with-broken-links" variable nil nil [32055 32720])
            ("org-export-snippet-translation-alist" variable nil nil [32722 33402])
            ("org-export-coding-system" variable nil nil [33404 33589])
            ("org-export-copy-to-kill-ring" variable nil nil [33591 33967])
            ("org-export-initial-scope" variable (:default-value (quote buffer)) nil [33969 34279])
            ("org-export-show-temporary-export-buffer" variable (:default-value t) nil [34281 34703])
            ("org-export-in-background" variable nil nil [34705 35043])
            ("org-export-async-init-file" variable nil nil [35045 35699])
            ("org-export-dispatch-use-expert-ui" variable nil nil [35701 36353])
            ("cl-defstruct" code nil nil [37628 37778])
            ("org-export-get-backend" function (:arguments ("name")) nil [37780 38056])
            ("org-export-register-backend" function (:arguments ("backend")) nil [38058 38973])
            ("org-export-barf-if-invalid-backend" function (:arguments ("backend")) nil [38975 39178])
            ("org-export-derived-backend-p" function (:arguments ("backend" "backends")) nil [39180 39841])
            ("org-export-get-all-transcoders" function (:arguments ("backend")) nil [39843 40638])
            ("org-export-get-all-options" function (:arguments ("backend")) nil [40640 41345])
            ("org-export-get-all-filters" function (:arguments ("backend")) nil [41347 42075])
            ("org-export-define-backend" function (:arguments ("backend" "transcoders" "body")) nil [42077 46605])
            ("org-export-define-derived-backend" function (:arguments ("child" "parent" "body")) nil [46607 48658])
            ("org-export-get-environment" function (:arguments ("backend" "subtreep" "ext-plist")) nil [50242 51313])
            ("org-export--parse-option-keyword" function (:arguments ("options" "backend")) nil [51315 52210])
            ("org-export--get-subtree-options" function (:arguments ("backend")) nil [52212 54285])
            ("org-export--get-inbuffer-options" function (:arguments ("backend")) nil [54287 58539])
            ("org-export--get-export-attributes" function (:arguments ("backend" "subtreep" "visible-only" "body-only")) nil [58541 59122])
            ("org-export--get-buffer-attributes" function nil nil [59124 59343])
            ("org-export--get-global-options" function (:arguments ("backend")) nil [59345 60178])
            ("org-export--list-bound-variables" function nil nil [60180 61711])
            ("org-export-get-parent" function (:arguments ("blob")) nil [61832 61982])
            ("org-export--collect-tree-properties" function (:arguments ("data" "info")) nil [62647 64067])
            ("org-export--get-min-level" function (:arguments ("data" "options")) nil [64069 64813])
            ("org-export--collect-headline-numbering" function (:arguments ("data" "options")) nil [64815 65815])
            ("org-export--selected-trees" function (:arguments ("data" "info")) nil [65817 67314])
            ("org-export--skip-p" function (:arguments ("blob" "options" "selected")) nil [67316 70998])
            ("org-export-transcoder" function (:arguments ("blob" "info")) nil [71691 72108])
            ("org-export-data" function (:arguments ("data" "info")) nil [72110 75901])
            ("org-export-data-with-backend" function (:arguments ("data" "backend" "info")) nil [75903 77127])
            ("org-export-expand" function (:arguments ("blob" "contents" "with-affiliated")) nil [77129 77695])
            ("org-export-before-processing-hook" variable nil nil [80285 80714])
            ("org-export-before-parsing-hook" variable nil nil [80716 81140])
            ("org-export-filter-options-functions" variable nil nil [81165 81430])
            ("org-export-filter-parse-tree-functions" variable nil nil [81432 81760])
            ("org-export-filter-plain-text-functions" variable nil nil [81762 82044])
            ("org-export-filter-body-functions" variable nil nil [82046 82327])
            ("org-export-filter-final-output-functions" variable nil nil [82329 82651])
            ("org-export-filter-babel-call-functions" variable nil nil [82677 82967])
            ("org-export-filter-center-block-functions" variable nil nil [82969 83263])
            ("org-export-filter-clock-functions" variable nil nil [83265 83545])
            ("org-export-filter-diary-sexp-functions" variable nil nil [83547 83837])
            ("org-export-filter-drawer-functions" variable nil nil [83839 84121])
            ("org-export-filter-dynamic-block-functions" variable nil nil [84123 84419])
            ("org-export-filter-example-block-functions" variable nil nil [84421 84717])
            ("org-export-filter-export-block-functions" variable nil nil [84719 85013])
            ("org-export-filter-fixed-width-functions" variable nil nil [85015 85307])
            ("org-export-filter-footnote-definition-functions" variable nil nil [85309 85617])
            ("org-export-filter-headline-functions" variable nil nil [85619 85905])
            ("org-export-filter-horizontal-rule-functions" variable nil nil [85907 86207])
            ("org-export-filter-inlinetask-functions" variable nil nil [86209 86499])
            ("org-export-filter-item-functions" variable nil nil [86501 86779])
            ("org-export-filter-keyword-functions" variable nil nil [86781 87065])
            ("org-export-filter-latex-environment-functions" variable nil nil [87067 87371])
            ("org-export-filter-node-property-functions" variable nil nil [87373 87669])
            ("org-export-filter-paragraph-functions" variable nil nil [87671 87959])
            ("org-export-filter-plain-list-functions" variable nil nil [87961 88251])
            ("org-export-filter-planning-functions" variable nil nil [88253 88539])
            ("org-export-filter-property-drawer-functions" variable nil nil [88541 88841])
            ("org-export-filter-quote-block-functions" variable nil nil [88843 89141])
            ("org-export-filter-section-functions" variable nil nil [89143 89427])
            ("org-export-filter-special-block-functions" variable nil nil [89429 89725])
            ("org-export-filter-src-block-functions" variable nil nil [89727 90015])
            ("org-export-filter-table-functions" variable nil nil [90017 90297])
            ("org-export-filter-table-cell-functions" variable nil nil [90299 90589])
            ("org-export-filter-table-row-functions" variable nil nil [90591 90879])
            ("org-export-filter-verse-block-functions" variable nil nil [90881 91173])
            ("org-export-filter-bold-functions" variable nil nil [91198 91479])
            ("org-export-filter-code-functions" variable nil nil [91481 91762])
            ("org-export-filter-entity-functions" variable nil nil [91764 92046])
            ("org-export-filter-export-snippet-functions" variable nil nil [92048 92346])
            ("org-export-filter-footnote-reference-functions" variable nil nil [92348 92654])
            ("org-export-filter-inline-babel-call-functions" variable nil nil [92656 92960])
            ("org-export-filter-inline-src-block-functions" variable nil nil [92962 93264])
            ("org-export-filter-italic-functions" variable nil nil [93266 93551])
            ("org-export-filter-latex-fragment-functions" variable nil nil [93553 93851])
            ("org-export-filter-line-break-functions" variable nil nil [93853 94143])
            ("org-export-filter-link-functions" variable nil nil [94145 94423])
            ("org-export-filter-radio-target-functions" variable nil nil [94425 94719])
            ("org-export-filter-statistics-cookie-functions" variable nil nil [94721 95025])
            ("org-export-filter-strike-through-functions" variable nil nil [95027 95328])
            ("org-export-filter-subscript-functions" variable nil nil [95330 95618])
            ("org-export-filter-superscript-functions" variable nil nil [95620 95912])
            ("org-export-filter-target-functions" variable nil nil [95914 96196])
            ("org-export-filter-timestamp-functions" variable nil nil [96198 96486])
            ("org-export-filter-underline-functions" variable nil nil [96488 96779])
            ("org-export-filter-verbatim-functions" variable nil nil [96781 97070])
            ("org-export-filter-apply-functions" function (:arguments ("filters" "value" "info")) nil [97520 98433])
            ("org-export-install-filters" function (:arguments ("info")) nil [98435 99613])
            ("org-export-copy-buffer" function nil nil [100795 101181])
            ("org-export-with-buffer-copy" function (:arguments ("body")) nil [101183 101839])
            ("org-export--generate-copy-script" function (:arguments ("buffer")) nil [101841 104057])
            ("org-export--delete-comments" function nil nil [104059 105824])
            ("org-export--prune-tree" function (:arguments ("data" "info")) nil [105826 108730])
            ("org-export--missing-definitions" function (:arguments ("tree" "definitions")) nil [108732 111709])
            ("org-export--install-footnote-definitions" function (:arguments ("definitions" "tree")) nil [111711 113907])
            ("org-export--remove-uninterpreted-data" function (:arguments ("data" "info")) nil [113909 114513])
            ("org-export--remove-uninterpreted-data-1" function (:arguments ("data" "info")) nil [114515 116772])
            ("org-export-as" function (:arguments ("backend" "subtreep" "visible-only" "body-only" "ext-plist")) nil [116789 123269])
            ("org-export-string-as" function (:arguments ("string" "backend" "body-only" "ext-plist")) nil [123286 123975])
            ("org-export-replace-region-by" function (:arguments ("backend")) nil [123992 124418])
            ("org-export-insert-default-template" function
               (:user-visible-flag t
                :arguments ("backend" "subtreep"))
                nil [124435 127796])
            ("org-export-expand-include-keyword" function (:arguments ("included" "dir" "footnotes")) nil [127798 132984])
            ("org-export--inclusion-absolute-lines" function (:arguments ("file" "location" "only-contents" "lines")) nil [132986 135338])
            ("org-export--prepare-file-contents" function (:arguments ("file" "lines" "ind" "minlevel" "id" "footnotes")) nil [135340 140612])
            ("org-export--copy-to-kill-ring-p" function nil nil [140614 140919])
            ("org-export-read-attribute" function (:arguments ("attribute" "element" "property")) nil [141531 142923])
            ("org-export-get-caption" function (:arguments ("element" "shortp")) nil [142925 143435])
            ("org-export-with-backend" function (:arguments ("backend" "data" "contents" "info")) nil [143705 145011])
            ("org-export-snippet-backend" function (:arguments ("export-snippet")) nil [145325 145666])
            ("org-export-get-footnote-definition" function (:arguments ("footnote-reference" "info")) nil [146274 147652])
            ("org-export--footnote-reference-map" function (:arguments ("function" "data" "info" "body-first")) nil [147654 149518])
            ("org-export-collect-footnote-definitions" function (:arguments ("info" "data" "body-first")) nil [149520 150654])
            ("org-export-footnote-first-reference-p" function (:arguments ("footnote-reference" "info" "data" "body-first")) nil [150656 151707])
            ("org-export-get-footnote-number" function (:arguments ("footnote" "info" "data" "body-first")) nil [151709 152951])
            ("org-export-get-relative-level" function (:arguments ("headline" "info")) nil [153956 154211])
            ("org-export-low-level-p" function (:arguments ("headline" "info")) nil [154213 154774])
            ("org-export-get-headline-number" function (:arguments ("headline" "info")) nil [154776 155060])
            ("org-export-numbered-headline-p" function (:arguments ("headline" "info")) nil [155062 155539])
            ("org-export-number-to-roman" function (:arguments ("n")) nil [155541 156007])
            ("org-export-get-tags" function (:arguments ("element" "info" "tags" "inherited")) nil [156009 157086])
            ("org-export-get-node-property" function (:arguments ("property" "blob" "inherited")) nil [157088 157825])
            ("org-export-get-category" function (:arguments ("blob" "info")) nil [157827 158521])
            ("org-export-get-alt-title" function (:arguments ("headline" "_")) nil [158523 158908])
            ("org-export-first-sibling-p" function (:arguments ("blob" "info")) nil [158910 159264])
            ("org-export-last-sibling-p" function (:arguments ("blob" "info")) nil [159266 159499])
            ("org-export-get-date" function (:arguments ("info" "fmt")) nil [159695 160399])
            ("org-define-error" code nil nil [161531 161601])
            ("org-export-custom-protocol-maybe" function (:arguments ("link" "desc" "backend")) nil [161603 162362])
            ("org-export-get-coderef-format" function (:arguments ("path" "desc")) nil [162364 162669])
            ("org-export-inline-image-p" function (:arguments ("link" "rules")) nil [162671 163517])
            ("org-export-resolve-coderef" function (:arguments ("ref" "info")) nil [163519 164477])
            ("org-export-search-cells" function (:arguments ("datum")) nil [164479 165815])
            ("org-export-string-to-search-cell" function (:arguments ("s")) nil [165817 166301])
            ("org-export-match-search-cell-p" function (:arguments ("datum" "cells")) nil [166303 166637])
            ("org-export-resolve-fuzzy-link" function (:arguments ("link" "info")) nil [166639 168349])
            ("org-export-resolve-id-link" function (:arguments ("link" "info")) nil [168351 169160])
            ("org-export-resolve-radio-link" function (:arguments ("link" "info")) nil [169162 169786])
            ("org-export-file-uri" function (:arguments ("filename")) nil [169788 170102])
            ("org-export-new-reference" function (:arguments ("references")) nil [170486 171175])
            ("org-export-format-reference" function (:arguments ("reference")) nil [171177 171393])
            ("org-export-get-reference" function (:arguments ("datum" "info")) nil [171395 173407])
            ("org-export-get-ordinal" function (:arguments ("element" "info" "types" "predicate")) nil [173409 175753])
            ("org-export-get-loc" function (:arguments ("element" "info")) nil [176761 177928])
            ("org-export-unravel-code" function (:arguments ("element")) nil [177930 179290])
            ("org-export-format-code" function (:arguments ("code" "fun" "num-lines" "ref-alist")) nil [179292 180511])
            ("org-export-format-code-default" function (:arguments ("element" "info")) nil [180513 182205])
            ("org-export-table-has-special-column-p" function (:arguments ("table")) nil [183357 184183])
            ("org-export-table-has-header-p" function (:arguments ("table" "info")) nil [184185 185013])
            ("org-export-table-row-is-special-p" function (:arguments ("table-row" "_")) nil [185015 186345])
            ("org-export-table-row-group" function (:arguments ("table-row" "info")) nil [186347 187293])
            ("org-export-table-cell-width" function (:arguments ("table-cell" "info")) nil [187295 188814])
            ("org-export-table-cell-alignment" function (:arguments ("table-cell" "info")) nil [188816 191873])
            ("org-export-table-cell-borders" function (:arguments ("table-cell" "info")) nil [191875 195436])
            ("org-export-table-cell-starts-colgroup-p" function (:arguments ("table-cell" "info")) nil [195438 195966])
            ("org-export-table-cell-ends-colgroup-p" function (:arguments ("table-cell" "info")) nil [195968 196419])
            ("org-export-table-row-starts-rowgroup-p" function (:arguments ("table-row" "info")) nil [196421 196877])
            ("org-export-table-row-ends-rowgroup-p" function (:arguments ("table-row" "info")) nil [196879 197330])
            ("org-export-table-row-in-header-p" function (:arguments ("table-row" "info")) nil [197332 197701])
            ("org-export-table-row-starts-header-p" function (:arguments ("table-row" "info")) nil [197703 197994])
            ("org-export-table-row-ends-header-p" function (:arguments ("table-row" "info")) nil [197996 198282])
            ("org-export-table-row-number" function (:arguments ("table-row" "info")) nil [198284 198907])
            ("org-export-table-dimensions" function (:arguments ("table" "info")) nil [198909 199587])
            ("org-export-table-cell-address" function (:arguments ("table-cell" "info")) nil [199589 200286])
            ("org-export-get-table-cell-at" function (:arguments ("address" "table" "info")) nil [200288 201141])
            ("org-export-collect-headlines" function (:arguments ("info" "n" "scope")) nil [201612 203084])
            ("org-export-collect-elements" function (:arguments ("type" "info" "predicate")) nil [203086 203822])
            ("org-export-collect-tables" function (:arguments ("info")) nil [203824 204034])
            ("org-export-collect-figures" function (:arguments ("info" "predicate")) nil [204036 204594])
            ("org-export-collect-listings" function (:arguments ("info")) nil [204596 204821])
            ("org-export-smart-quotes-alist" variable
               (:constant-flag t
                :default-value (quote (("da" (primary-opening :utf-8 "»" :html "&raquo;" :latex ">>" :texinfo "@guillemetright{}") (primary-closing :utf-8 "«" :html "&laquo;" :latex "<<" :texinfo "@guillemetleft{}") (secondary-opening :utf-8 "›" :html "&rsaquo;" :latex "\\frq{}" :texinfo "@guilsinglright{}") (secondary-closing :utf-8 "‹" :html "&lsaquo;" :latex "\\flq{}" :texinfo "@guilsingleft{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("de" (primary-opening :utf-8 "„" :html "&bdquo;" :latex "\"`" :texinfo "@quotedblbase{}") (primary-closing :utf-8 "“" :html "&ldquo;" :latex "\"'" :texinfo "@quotedblleft{}") (secondary-opening :utf-8 "‚" :html "&sbquo;" :latex "\\glq{}" :texinfo "@quotesinglbase{}") (secondary-closing :utf-8 "‘" :html "&lsquo;" :latex "\\grq{}" :texinfo "@quoteleft{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("en" (primary-opening :utf-8 "“" :html "&ldquo;" :latex "``" :texinfo "``") (primary-closing :utf-8 "”" :html "&rdquo;" :latex "''" :texinfo "''") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("es" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "“" :html "&ldquo;" :latex "``" :texinfo "``") (secondary-closing :utf-8 "”" :html "&rdquo;" :latex "''" :texinfo "''") (apostrophe :utf-8 "’" :html "&rsquo;")) ("fr" (primary-opening :utf-8 "« " :html "&laquo;&nbsp;" :latex "\\og " :texinfo "@guillemetleft{}@tie{}") (primary-closing :utf-8 " »" :html "&nbsp;&raquo;" :latex "\\fg{}" :texinfo "@tie{}@guillemetright{}") (secondary-opening :utf-8 "« " :html "&laquo;&nbsp;" :latex "\\og " :texinfo "@guillemetleft{}@tie{}") (secondary-closing :utf-8 " »" :html "&nbsp;&raquo;" :latex "\\fg{}" :texinfo "@tie{}@guillemetright{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("is" (primary-opening :utf-8 "„" :html "&bdquo;" :latex "\"`" :texinfo "@quotedblbase{}") (primary-closing :utf-8 "“" :html "&ldquo;" :latex "\"'" :texinfo "@quotedblleft{}") (secondary-opening :utf-8 "‚" :html "&sbquo;" :latex "\\glq{}" :texinfo "@quotesinglbase{}") (secondary-closing :utf-8 "‘" :html "&lsquo;" :latex "\\grq{}" :texinfo "@quoteleft{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("no" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("nb" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("nn" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("ru" (primary-opening :utf-8 "«" :html "&laquo;" :latex "{}<<" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex ">>{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "„" :html "&bdquo;" :latex "\\glqq{}" :texinfo "@quotedblbase{}") (secondary-closing :utf-8 "“" :html "&ldquo;" :latex "\\grqq{}" :texinfo "@quotedblleft{}") (apostrophe :utf-8 "’" :html: "&#39;")) ("sv" (primary-opening :utf-8 "”" :html "&rdquo;" :latex "’’" :texinfo "’’") (primary-closing :utf-8 "”" :html "&rdquo;" :latex "’’" :texinfo "’’") (secondary-opening :utf-8 "’" :html "&rsquo;" :latex "’" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "’" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")))))
                nil [205122 211206])
            ("org-export--smart-quote-status" function (:arguments ("s" "info")) nil [211208 214047])
            ("org-export-activate-smart-quotes" function (:arguments ("s" "encoding" "info" "original")) nil [214049 214938])
            ("org-export-get-parent-headline" function (:arguments ("blob")) nil [215514 215688])
            ("org-export-get-parent-element" function (:arguments ("object")) nil [215690 215877])
            ("org-export-get-parent-table" function (:arguments ("object")) nil [215879 216066])
            ("org-export-get-previous-element" function (:arguments ("blob" "info" "n")) nil [216068 217012])
            ("org-export-get-next-element" function (:arguments ("blob" "info" "n")) nil [217014 217967])
            ("org-export-dictionary" variable
               (:constant-flag t
                :default-value (quote (("%e %n: %c" ("fr" :default "%e %n : %c" :html "%e&nbsp;%n&nbsp;: %c")) ("Author" ("ca" :default "Autor") ("cs" :default "Autor") ("da" :default "Forfatter") ("de" :default "Autor") ("eo" :html "A&#365;toro") ("es" :default "Autor") ("et" :default "Autor") ("fi" :html "Tekij&auml;") ("fr" :default "Auteur") ("hu" :default "Szerz&otilde;") ("is" :html "H&ouml;fundur") ("it" :default "Autore") ("ja" :default "著者" :html "&#33879;&#32773;") ("nl" :default "Auteur") ("no" :default "Forfatter") ("nb" :default "Forfatter") ("nn" :default "Forfattar") ("pl" :default "Autor") ("pt_BR" :default "Autor") ("ru" :html "&#1040;&#1074;&#1090;&#1086;&#1088;" :utf-8 "Автор") ("sv" :html "F&ouml;rfattare") ("uk" :html "&#1040;&#1074;&#1090;&#1086;&#1088;" :utf-8 "Автор") ("zh-CN" :html "&#20316;&#32773;" :utf-8 "作者") ("zh-TW" :html "&#20316;&#32773;" :utf-8 "作者")) ("Continued from previous page" ("de" :default "Fortsetzung von vorheriger Seite") ("es" :html "Contin&uacute;a de la p&aacute;gina anterior" :ascii "Continua de la pagina anterior" :default "Continúa de la página anterior") ("fr" :default "Suite de la page précédente") ("it" :default "Continua da pagina precedente") ("ja" :default "前ページからの続き") ("nl" :default "Vervolg van vorige pagina") ("pt" :default "Continuação da página anterior") ("ru" :html "(&#1055;&#1088;&#1086;&#1076;&#1086;&#1083;&#1078;&#1077;&#1085;&#1080;&#1077;)" :utf-8 "(Продолжение)")) ("Continued on next page" ("de" :default "Fortsetzung nächste Seite") ("es" :html "Contin&uacute;a en la siguiente p&aacute;gina" :ascii "Continua en la siguiente pagina" :default "Continúa en la siguiente página") ("fr" :default "Suite page suivante") ("it" :default "Continua alla pagina successiva") ("ja" :default "次ページに続く") ("nl" :default "Vervolg op volgende pagina") ("pt" :default "Continua na página seguinte") ("ru" :html "(&#1055;&#1088;&#1086;&#1076;&#1086;&#1083;&#1078;&#1077;&#1085;&#1080;&#1077; &#1089;&#1083;&#1077;&#1076;&#1091;&#1077;&#1090;)" :utf-8 "(Продолжение следует)")) ("Date" ("ca" :default "Data") ("cs" :default "Datum") ("da" :default "Dato") ("de" :default "Datum") ("eo" :default "Dato") ("es" :default "Fecha") ("et" :html "Kuup&#228;ev" :utf-8 "Kuupäev") ("fi" :html "P&auml;iv&auml;m&auml;&auml;r&auml;") ("hu" :html "D&aacute;tum") ("is" :default "Dagsetning") ("it" :default "Data") ("ja" :default "日付" :html "&#26085;&#20184;") ("nl" :default "Datum") ("no" :default "Dato") ("nb" :default "Dato") ("nn" :default "Dato") ("pl" :default "Data") ("pt_BR" :default "Data") ("ru" :html "&#1044;&#1072;&#1090;&#1072;" :utf-8 "Дата") ("sv" :default "Datum") ("uk" :html "&#1044;&#1072;&#1090;&#1072;" :utf-8 "Дата") ("zh-CN" :html "&#26085;&#26399;" :utf-8 "日期") ("zh-TW" :html "&#26085;&#26399;" :utf-8 "日期")) ("Equation" ("da" :default "Ligning") ("de" :default "Gleichung") ("es" :ascii "Ecuacion" :html "Ecuaci&oacute;n" :default "Ecuación") ("et" :html "V&#245;rrand" :utf-8 "Võrrand") ("fr" :ascii "Equation" :default "Équation") ("is" :default "Jafna") ("ja" :default "方程式") ("no" :default "Ligning") ("nb" :default "Ligning") ("nn" :default "Likning") ("pt_BR" :html "Equa&ccedil;&atilde;o" :default "Equação" :ascii "Equacao") ("ru" :html "&#1059;&#1088;&#1072;&#1074;&#1085;&#1077;&#1085;&#1080;&#1077;" :utf-8 "Уравнение") ("sv" :default "Ekvation") ("zh-CN" :html "&#26041;&#31243;" :utf-8 "方程")) ("Figure" ("da" :default "Figur") ("de" :default "Abbildung") ("es" :default "Figura") ("et" :default "Joonis") ("is" :default "Mynd") ("ja" :default "図" :html "&#22259;") ("no" :default "Illustrasjon") ("nb" :default "Illustrasjon") ("nn" :default "Illustrasjon") ("pt_BR" :default "Figura") ("ru" :html "&#1056;&#1080;&#1089;&#1091;&#1085;&#1086;&#1082;" :utf-8 "Рисунок") ("sv" :default "Illustration") ("zh-CN" :html "&#22270;" :utf-8 "图")) ("Figure %d:" ("da" :default "Figur %d") ("de" :default "Abbildung %d:") ("es" :default "Figura %d:") ("et" :default "Joonis %d:") ("fr" :default "Figure %d :" :html "Figure&nbsp;%d&nbsp;:") ("is" :default "Mynd %d") ("ja" :default "図%d: " :html "&#22259;%d: ") ("no" :default "Illustrasjon %d") ("nb" :default "Illustrasjon %d") ("nn" :default "Illustrasjon %d") ("pt_BR" :default "Figura %d:") ("ru" :html "&#1056;&#1080;&#1089;. %d.:" :utf-8 "Рис. %d.:") ("sv" :default "Illustration %d") ("zh-CN" :html "&#22270;%d&nbsp;" :utf-8 "图%d ")) ("Footnotes" ("ca" :html "Peus de p&agrave;gina") ("cs" :default "Pozn\341mky pod carou") ("da" :default "Fodnoter") ("de" :html "Fu&szlig;noten" :default "Fußnoten") ("eo" :default "Piednotoj") ("es" :ascii "Nota al pie de pagina" :html "Nota al pie de p&aacute;gina" :default "Nota al pie de página") ("et" :html "Allm&#228;rkused" :utf-8 "Allmärkused") ("fi" :default "Alaviitteet") ("fr" :default "Notes de bas de page") ("hu" :html "L&aacute;bjegyzet") ("is" :html "Aftanm&aacute;lsgreinar") ("it" :html "Note a pi&egrave; di pagina") ("ja" :default "脚注" :html "&#33050;&#27880;") ("nl" :default "Voetnoten") ("no" :default "Fotnoter") ("nb" :default "Fotnoter") ("nn" :default "Fotnotar") ("pl" :default "Przypis") ("pt_BR" :html "Notas de Rodap&eacute;" :default "Notas de Rodapé" :ascii "Notas de Rodape") ("ru" :html "&#1057;&#1085;&#1086;&#1089;&#1082;&#1080;" :utf-8 "Сноски") ("sv" :default "Fotnoter") ("uk" :html "&#1055;&#1088;&#1080;&#1084;&#1110;&#1090;&#1082;&#1080;" :utf-8 "Примітки") ("zh-CN" :html "&#33050;&#27880;" :utf-8 "脚注") ("zh-TW" :html "&#33139;&#35387;" :utf-8 "腳註")) ("List of Listings" ("da" :default "Programmer") ("de" :default "Programmauflistungsverzeichnis") ("es" :ascii "Indice de Listados de programas" :html "&Iacute;ndice de Listados de programas" :default "Índice de Listados de programas") ("et" :default "Loendite nimekiri") ("fr" :default "Liste des programmes") ("ja" :default "ソースコード目次") ("no" :default "Dataprogrammer") ("nb" :default "Dataprogrammer") ("ru" :html "&#1057;&#1087;&#1080;&#1089;&#1086;&#1082; &#1088;&#1072;&#1089;&#1087;&#1077;&#1095;&#1072;&#1090;&#1086;&#1082;" :utf-8 "Список распечаток") ("zh-CN" :html "&#20195;&#30721;&#30446;&#24405;" :utf-8 "代码目录")) ("List of Tables" ("da" :default "Tabeller") ("de" :default "Tabellenverzeichnis") ("es" :ascii "Indice de tablas" :html "&Iacute;ndice de tablas" :default "Índice de tablas") ("et" :default "Tabelite nimekiri") ("fr" :default "Liste des tableaux") ("is" :default "Töfluskrá" :html "T&ouml;fluskr&aacute;") ("ja" :default "表目次") ("no" :default "Tabeller") ("nb" :default "Tabeller") ("nn" :default "Tabeller") ("pt_BR" :default "Índice de Tabelas" :ascii "Indice de Tabelas") ("ru" :html "&#1057;&#1087;&#1080;&#1089;&#1086;&#1082; &#1090;&#1072;&#1073;&#1083;&#1080;&#1094;" :utf-8 "Список таблиц") ("sv" :default "Tabeller") ("zh-CN" :html "&#34920;&#26684;&#30446;&#24405;" :utf-8 "表格目录")) ("Listing" ("da" :default "Program") ("de" :default "Programmlisting") ("es" :default "Listado de programa") ("et" :default "Loend") ("fr" :default "Programme" :html "Programme") ("ja" :default "ソースコード") ("no" :default "Dataprogram") ("nb" :default "Dataprogram") ("pt_BR" :default "Listagem") ("ru" :html "&#1056;&#1072;&#1089;&#1087;&#1077;&#1095;&#1072;&#1090;&#1082;&#1072;" :utf-8 "Распечатка") ("zh-CN" :html "&#20195;&#30721;" :utf-8 "代码")) ("Listing %d:" ("da" :default "Program %d") ("de" :default "Programmlisting %d") ("es" :default "Listado de programa %d") ("et" :default "Loend %d") ("fr" :default "Programme %d :" :html "Programme&nbsp;%d&nbsp;:") ("ja" :default "ソースコード%d:") ("no" :default "Dataprogram %d") ("nb" :default "Dataprogram %d") ("pt_BR" :default "Listagem %d") ("ru" :html "&#1056;&#1072;&#1089;&#1087;&#1077;&#1095;&#1072;&#1090;&#1082;&#1072; %d.:" :utf-8 "Распечатка %d.:") ("zh-CN" :html "&#20195;&#30721;%d&nbsp;" :utf-8 "代码%d ")) ("References" ("fr" :ascii "References" :default "Références") ("de" :default "Quellen") ("es" :default "Referencias")) ("See figure %s" ("fr" :default "cf. figure %s" :html "cf.&nbsp;figure&nbsp;%s" :latex "cf.~figure~%s")) ("See listing %s" ("fr" :default "cf. programme %s" :html "cf.&nbsp;programme&nbsp;%s" :latex "cf.~programme~%s")) ("See section %s" ("da" :default "jævnfør afsnit %s") ("de" :default "siehe Abschnitt %s") ("es" :ascii "Vea seccion %s" :html "Vea secci&oacute;n %s" :default "Vea sección %s") ("et" :html "Vaata peat&#252;kki %s" :utf-8 "Vaata peatükki %s") ("fr" :default "cf. section %s") ("ja" :default "セクション %s を参照") ("pt_BR" :html "Veja a se&ccedil;&atilde;o %s" :default "Veja a seção %s" :ascii "Veja a secao %s") ("ru" :html "&#1057;&#1084;. &#1088;&#1072;&#1079;&#1076;&#1077;&#1083; %s" :utf-8 "См. раздел %s") ("zh-CN" :html "&#21442;&#35265;&#31532;%s&#33410;" :utf-8 "参见第%s节")) ("See table %s" ("fr" :default "cf. tableau %s" :html "cf.&nbsp;tableau&nbsp;%s" :latex "cf.~tableau~%s")) ("Table" ("de" :default "Tabelle") ("es" :default "Tabla") ("et" :default "Tabel") ("fr" :default "Tableau") ("is" :default "Tafla") ("ja" :default "表" :html "&#34920;") ("pt_BR" :default "Tabela") ("ru" :html "&#1058;&#1072;&#1073;&#1083;&#1080;&#1094;&#1072;" :utf-8 "Таблица") ("zh-CN" :html "&#34920;" :utf-8 "表")) ("Table %d:" ("da" :default "Tabel %d") ("de" :default "Tabelle %d") ("es" :default "Tabla %d") ("et" :default "Tabel %d") ("fr" :default "Tableau %d :") ("is" :default "Tafla %d") ("ja" :default "表%d:" :html "&#34920;%d:") ("no" :default "Tabell %d") ("nb" :default "Tabell %d") ("nn" :default "Tabell %d") ("pt_BR" :default "Tabela %d") ("ru" :html "&#1058;&#1072;&#1073;&#1083;&#1080;&#1094;&#1072; %d.:" :utf-8 "Таблица %d.:") ("sv" :default "Tabell %d") ("zh-CN" :html "&#34920;%d&nbsp;" :utf-8 "表%d ")) ("Table of Contents" ("ca" :html "&Iacute;ndex") ("cs" :default "Obsah") ("da" :default "Indhold") ("de" :default "Inhaltsverzeichnis") ("eo" :default "Enhavo") ("es" :ascii "Indice" :html "&Iacute;ndice" :default "Índice") ("et" :default "Sisukord") ("fi" :html "Sis&auml;llysluettelo") ("fr" :ascii "Sommaire" :default "Table des matières") ("hu" :html "Tartalomjegyz&eacute;k") ("is" :default "Efnisyfirlit") ("it" :default "Indice") ("ja" :default "目次" :html "&#30446;&#27425;") ("nl" :default "Inhoudsopgave") ("no" :default "Innhold") ("nb" :default "Innhold") ("nn" :default "Innhald") ("pl" :html "Spis tre&#x015b;ci") ("pt_BR" :html "&Iacute;ndice" :utf8 "Índice" :ascii "Indice") ("ru" :html "&#1057;&#1086;&#1076;&#1077;&#1088;&#1078;&#1072;&#1085;&#1080;&#1077;" :utf-8 "Содержание") ("sv" :html "Inneh&aring;ll") ("uk" :html "&#1047;&#1084;&#1110;&#1089;&#1090;" :utf-8 "Зміст") ("zh-CN" :html "&#30446;&#24405;" :utf-8 "目录") ("zh-TW" :html "&#30446;&#37636;" :utf-8 "目錄")) ("Unknown reference" ("da" :default "ukendt reference") ("de" :default "Unbekannter Verweis") ("es" :default "Referencia desconocida") ("et" :default "Tundmatu viide") ("fr" :ascii "Destination inconnue" :default "Référence inconnue") ("ja" :default "不明な参照先") ("pt_BR" :default "Referência desconhecida" :ascii "Referencia desconhecida") ("ru" :html "&#1053;&#1077;&#1080;&#1079;&#1074;&#1077;&#1089;&#1090;&#1085;&#1072;&#1103; &#1089;&#1089;&#1099;&#1083;&#1082;&#1072;" :utf-8 "Неизвестная ссылка") ("zh-CN" :html "&#26410;&#30693;&#24341;&#29992;" :utf-8 "未知引用")))))
                nil [218179 231191])
            ("org-export-translate" function (:arguments ("s" "encoding" "info")) nil [231193 231808])
            ("org-export-async-start" function (:arguments ("fun" "body")) nil [233026 237188])
            ("org-export-to-buffer" function (:arguments ("backend" "buffer" "async" "subtreep" "visible-only" "body-only" "ext-plist" "post-process")) nil [237205 239617])
            ("org-export-to-file" function (:arguments ("backend" "file" "async" "subtreep" "visible-only" "body-only" "ext-plist" "post-process")) nil [239634 242127])
            ("org-export-output-file-name" function (:arguments ("extension" "subtreep" "pub-dir")) nil [242129 243884])
            ("org-export-add-to-stack" function (:arguments ("source" "backend" "process")) nil [243886 244385])
            ("org-export-stack" function (:user-visible-flag t) nil [244387 244724])
            ("org-export-stack-clear" function (:user-visible-flag t) nil [244726 244856])
            ("org-export-stack-refresh" function (:user-visible-flag t) nil [244858 244966])
            ("org-export-stack-remove" function
               (:user-visible-flag t
                :arguments ("source"))
                nil [244968 245330])
            ("org-export-stack-view" function
               (:user-visible-flag t
                :arguments ("in-emacs"))
                nil [245332 245776])
            ("org-export-stack-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (set-keymap-parent km tabulated-list-mode-map) (define-key km " " (quote next-line)) (define-key km "" (quote next-line)) (define-key km [down] (quote next-line)) (define-key km "" (quote previous-line)) (define-key km "" (quote previous-line)) (define-key km [up] (quote previous-line)) (define-key km "C" (quote org-export-stack-clear)) (define-key km "v" (quote org-export-stack-view)) (define-key km (kbd "RET") (quote org-export-stack-view)) (define-key km "d" (quote org-export-stack-remove)) km)) nil [245778 246373])
            ("define-derived-mode" code nil nil [246375 247382])
            ("org-export--stack-generate" function nil nil [247384 248499])
            ("org-export--stack-num-predicate" function (:arguments ("a" "b")) nil [248501 248633])
            ("org-export--stack-source-at-point" function nil nil [248635 249304])
            ("org-export-dispatch" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [249595 252494])
            ("org-export--dispatch-ui" function (:arguments ("options" "first-key" "expertp")) nil [252496 259209])
            ("org-export--dispatch-action" function (:arguments ("prompt" "allowed-keys" "entries" "options" "first-key" "expertp")) nil [259211 262576])
            ("ox" package nil nil [262580 262593]))          
      :file "ox.el"
      :pointmax 262690
      :fsize 263261
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [952 970])
            ("declare-function" code nil nil [972 1040])
            ("declare-function" code nil nil [1041 1097])
            ("declare-function" code nil nil [1098 1170])
            ("declare-function" code nil nil [1171 1243])
            ("declare-function" code nil nil [1244 1303])
            ("declare-function" code nil nil [1304 1362])
            ("declare-function" code nil nil [1363 1412])
            ("declare-function" code nil nil [1413 1472])
            ("declare-function" code nil nil [1473 1534])
            ("declare-function" code nil nil [1535 1613])
            ("org-src-preserve-indentation" variable nil nil [1615 1652])
            ("org-export-babel-evaluate" variable (:default-value t) nil [1654 2189])
            ("put" code nil nil [2190 2250])
            ("org-babel-exp--at-source" function (:arguments ("body")) nil [2252 2749])
            ("org-babel-exp-src-block" function (:user-visible-flag t) nil [2751 4254])
            ("org-babel-exp-call-line-template" variable nil nil [4256 4767])
            ("org-babel-exp-process-buffer" function (:user-visible-flag t) nil [4769 9928])
            ("org-babel-exp-do-export" function (:arguments ("info" "type" "hash")) nil [9930 10769])
            ("org-babel-exp-code-template" variable (:default-value "#+BEGIN_SRC %lang%switches%flags
%body
#+END_SRC") nil [10771 11564])
            ("org-babel-exp-inline-code-template" variable (:default-value "src_%lang[%switches%flags]{%body}") nil [11566 12408])
            ("org-babel-exp-code" function (:arguments ("info" "type")) nil [12410 13399])
            ("org-babel-exp-results" function (:arguments ("info" "type" "silent" "hash")) nil [13401 14926])
            ("ob-exp" package nil nil [14929 14946]))          
      :file "ob-exp.el"
      :pointmax 14972
      :fsize 14971
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1237 1251])
            ("org-datetree-base-level" variable (:default-value 1) nil [1253 1578])
            ("org-datetree-add-timestamp" variable nil nil [1580 1944])
            ("org-datetree-find-date-create" function (:arguments ("d" "keep-restriction")) nil [1961 3003])
            ("org-datetree-find-iso-week-create" function (:arguments ("d" "keep-restriction")) nil [3020 4620])
            ("org-datetree--find-create" function (:arguments ("regex" "year" "month" "day" "insert")) nil [4622 5595])
            ("org-datetree-insert-line" function (:arguments ("year" "month" "day" "text")) nil [5597 6397])
            ("org-datetree-file-entry-under" function (:arguments ("txt" "d")) nil [6399 6696])
            ("org-datetree-cleanup" function (:user-visible-flag t) nil [6698 8382])
            ("org-datetree" package nil nil [8384 8407]))          
      :file "org-datetree.el"
      :pointmax 8514
      :fsize 8513
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1109 1126])
            ("org" include nil nil [1127 1141])
            ("declare-function" code nil nil [1143 1206])
            ("declare-function" code nil nil [1207 1270])
            ("declare-function" code nil nil [1271 1349])
            ("declare-function" code nil nil [1350 1420])
            ("declare-function" code nil nil [1421 1487])
            ("declare-function" code nil nil [1488 1609])
            ("declare-function" code nil nil [1610 1715])
            ("declare-function" code nil nil [1716 1788])
            ("declare-function" code nil nil [1789 1855])
            ("declare-function" code nil nil [1856 1915])
            ("org-agenda-columns-add-appointments-to-effort-sum" variable nil nil [1917 1975])
            ("org-agenda-columns-compute-summary-properties" variable nil nil [1976 2030])
            ("org-agenda-columns-show-summaries" variable nil nil [2031 2073])
            ("org-agenda-view-columns-initially" variable nil nil [2074 2116])
            ("org-inlinetask-min-level" variable nil nil [2117 2150])
            ("org-columns-modify-value-for-display-function" variable nil nil [2173 2696])
            ("org-columns-summary-types" variable nil nil [2698 3662])
            ("org-columns-overlays" variable nil nil [3684 3764])
            ("org-columns--time" variable nil nil [3766 3863])
            ("defvar-local" code nil nil [3865 3969])
            ("defvar-local" code nil nil [3971 4128])
            ("defvar-local" code nil nil [4130 4235])
            ("org-columns-begin-marker" variable (:default-value (make-marker)) nil [4237 4360])
            ("org-columns-top-level-marker" variable (:default-value (make-marker)) nil [4362 4477])
            ("org-columns-map" variable (:default-value (make-sparse-keymap)) nil [4479 4564])
            ("org-columns-summary-types-default" variable
               (:constant-flag t
                :default-value (quote (("+" . org-columns--summary-sum) ("$" . org-columns--summary-currencies) ("X" . org-columns--summary-checkbox) ("X/" . org-columns--summary-checkbox-count) ("X%" . org-columns--summary-checkbox-percent) ("max" . org-columns--summary-max) ("mean" . org-columns--summary-mean) ("min" . org-columns--summary-min) (":" . org-columns--summary-sum-times) (":max" . org-columns--summary-max-time) (":mean" . org-columns--summary-mean-time) (":min" . org-columns--summary-min-time) ("@max" . org-columns--summary-max-age) ("@mean" . org-columns--summary-mean-age) ("@min" . org-columns--summary-min-age) ("est+" . org-columns--summary-estimate))))
                nil [4566 5431])
            ("org-columns-content" function (:user-visible-flag t) nil [5433 5563])
            ("org-defkey" code nil nil [5565 5618])
            ("org-defkey" code nil nil [5619 5665])
            ("org-defkey" code nil nil [5666 5722])
            ("org-defkey" code nil nil [5723 5780])
            ("org-defkey" code nil nil [5781 5852])
            ("org-defkey" code nil nil [5853 5915])
            ("org-defkey" code nil nil [5916 5972])
            ("org-defkey" code nil nil [5973 6023])
            ("org-defkey" code nil nil [6024 6074])
            ("org-defkey" code nil nil [6075 6125])
            ("org-defkey" code nil nil [6126 6176])
            ("org-defkey" code nil nil [6177 6227])
            ("org-defkey" code nil nil [6228 6286])
            ("org-defkey" code nil nil [6287 6348])
            ("org-defkey" code nil nil [6349 6440])
            ("org-defkey" code nil nil [6441 6533])
            ("org-defkey" code nil nil [6534 6836])
            ("org-defkey" code nil nil [6837 7137])
            ("org-defkey" code nil nil [7138 7214])
            ("org-defkey" code nil nil [7215 7279])
            ("org-defkey" code nil nil [7280 7359])
            ("org-defkey" code nil nil [7360 7428])
            ("org-defkey" code nil nil [7429 7481])
            ("org-defkey" code nil nil [7482 7533])
            ("org-defkey" code nil nil [7534 7601])
            ("org-defkey" code nil nil [7602 7667])
            ("org-defkey" code nil nil [7668 7734])
            ("org-defkey" code nil nil [7735 7803])
            ("dotimes" code nil nil [7804 7949])
            ("easy-menu-define" code nil nil [7951 8896])
            ("org-columns--displayed-value" function (:arguments ("spec" "value")) nil [8898 9498])
            ("org-columns--collect-values" function (:arguments ("compiled-fmt")) nil [9500 10645])
            ("org-columns--set-widths" function (:arguments ("cache")) nil [10647 11375])
            ("org-columns--new-overlay" function (:arguments ("beg" "end" "string" "face")) nil [11377 11676])
            ("org-columns--summarize" function (:arguments ("operator")) nil [11678 11964])
            ("org-columns--overlay-text" function (:arguments ("value" "fmt" "width" "property" "original")) nil [11966 12661])
            ("org-columns--display-here" function (:arguments ("columns" "dateline")) nil [12663 15598])
            ("org-columns-add-ellipses" function (:arguments ("string" "width")) nil [15600 15949])
            ("org-columns-full-header-line-format" variable nil nil [15951 16074])
            ("org-previous-header-line-format" variable nil nil [16075 16180])
            ("org-columns-inhibit-recalculation" variable nil nil [16181 16286])
            ("org-columns-flyspell-was-active" variable nil nil [16287 16496])
            ("header-line-format" variable nil nil [16498 16525])
            ("org-columns-previous-hscroll" variable nil nil [16526 16565])
            ("org-columns--display-here-title" function (:user-visible-flag t) nil [16567 17381])
            ("org-columns-hscroll-title" function nil nil [17383 17883])
            ("org-colview-initial-truncate-line-value" variable nil nil [17885 17996])
            ("org-columns-remove-overlays" function (:user-visible-flag t) nil [18013 19014])
            ("org-columns-compact-links" function (:arguments ("s")) nil [19016 19262])
            ("org-columns-show-value" function (:user-visible-flag t) nil [19264 19462])
            ("org-agenda-columns-active" variable nil nil [19464 19498])
            ("org-columns-quit" function (:user-visible-flag t) nil [19528 20025])
            ("org-columns-check-computed" function nil nil [20027 20364])
            ("org-columns-todo" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [20366 20507])
            ("org-columns-set-tags-or-toggle" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [20509 20819])
            ("org-agenda-overriding-columns-format" variable nil nil [20821 20989])
            ("org-columns-edit-value" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [20991 23883])
            ("org-columns-edit-allowed" function (:user-visible-flag t) nil [23885 24647])
            ("org-columns--call" function (:arguments ("fun")) nil [24649 25004])
            ("org-columns-previous-allowed-value" function (:user-visible-flag t) nil [25006 25162])
            ("org-columns-next-allowed-value" function
               (:user-visible-flag t
                :arguments ("previous" "nth"))
                nil [25164 27619])
            ("org-colview-construct-allowed-dates" function (:arguments ("s")) nil [27621 28658])
            ("org-columns-open-link" function (:arguments ("arg")) nil [28660 28832])
            ("org-columns-get-format-and-top-level" function nil nil [28849 28978])
            ("org-columns-get-format" function
               (:user-visible-flag t
                :arguments ("fmt-string"))
                nil [28980 29811])
            ("org-columns-goto-top-level" function nil nil [29813 30189])
            ("org-columns" function
               (:user-visible-flag t
                :arguments ("global" "columns-fmt-string"))
                nil [30206 32172])
            ("org-columns-new" function
               (:user-visible-flag t
                :arguments ("spec" "attributes"))
                nil [32174 33670])
            ("org-columns-delete" function (:user-visible-flag t) nil [33672 34416])
            ("org-columns-edit-attributes" function (:user-visible-flag t) nil [34418 34595])
            ("org-columns-widen" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [34597 35000])
            ("org-columns-narrow" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35002 35132])
            ("org-columns-move-right" function (:user-visible-flag t) nil [35134 36188])
            ("org-columns-move-left" function (:user-visible-flag t) nil [36190 36470])
            ("org-columns-store-format" function nil nil [36472 37894])
            ("org-columns-update" function (:arguments ("property")) nil [37896 38948])
            ("org-columns-redo" function (:user-visible-flag t) nil [38950 39536])
            ("org-columns-uncompile-format" function (:arguments ("compiled")) nil [39538 40068])
            ("org-columns-compile-format" function (:arguments ("fmt")) nil [40070 41541])
            ("org-columns--duration-re" variable
               (:constant-flag t
                :default-value (concat "[0-9.]+ *" (regexp-opt (mapcar (function car) org-effort-durations))))
                nil [41571 41710])
            ("org-columns--time-to-seconds" function (:arguments ("s")) nil [41712 42322])
            ("org-columns--age-to-seconds" function (:arguments ("s")) nil [42324 43038])
            ("org-columns--summary-apply-times" function (:arguments ("fun" "times")) nil [43040 43858])
            ("org-columns--compute-spec" function (:arguments ("spec" "update")) nil [43860 46459])
            ("org-columns-compute" function
               (:user-visible-flag t
                :arguments ("property"))
                nil [46476 46981])
            ("org-columns-compute-all" function nil nil [46983 47500])
            ("org-columns--summary-sum" function (:arguments ("values" "printf")) nil [47502 47709])
            ("org-columns--summary-currencies" function (:arguments ("values" "_")) nil [47711 47876])
            ("org-columns--summary-checkbox" function (:arguments ("check-boxes" "_")) nil [47878 48130])
            ("org-columns--summary-checkbox-count" function (:arguments ("check-boxes" "_")) nil [48132 48333])
            ("org-columns--summary-checkbox-percent" function (:arguments ("check-boxes" "_")) nil [48335 48564])
            ("org-columns--summary-min" function (:arguments ("values" "printf")) nil [48566 48782])
            ("org-columns--summary-max" function (:arguments ("values" "printf")) nil [48784 49000])
            ("org-columns--summary-mean" function (:arguments ("values" "printf")) nil [49002 49248])
            ("org-columns--summary-sum-times" function (:arguments ("times" "_")) nil [49250 49360])
            ("org-columns--summary-min-time" function (:arguments ("times" "_")) nil [49362 49500])
            ("org-columns--summary-max-time" function (:arguments ("times" "_")) nil [49502 49640])
            ("org-columns--summary-mean-time" function (:arguments ("times" "_")) nil [49642 49849])
            ("org-columns--summary-min-age" function (:arguments ("ages" "_")) nil [49851 50040])
            ("org-columns--summary-max-age" function (:arguments ("ages" "_")) nil [50042 50231])
            ("org-columns--summary-mean-age" function (:arguments ("ages" "_")) nil [50233 50453])
            ("org-columns--summary-estimate" function (:arguments ("estimates" "printf")) nil [50455 51137])
            ("org-columns--capture-view" function (:arguments ("maxlevel" "skip-empty" "format" "local")) nil [51177 52808])
            ("org-columns--clean-item" function (:arguments ("item")) nil [52810 53365])
            ("org-dblock-write:columnview" function (:arguments ("params")) nil [53382 57842])
            ("org-columns-insert-dblock" function (:user-visible-flag t) nil [57859 58359])
            ("org-agenda-columns" function (:user-visible-flag t) nil [58410 60526])
            ("org-agenda-colview-summarize" function (:arguments ("cache")) nil [60528 62621])
            ("org-agenda-colview-compute" function (:arguments ("fmt")) nil [62623 63513])
            ("org-colview" package nil nil [63516 63538]))          
      :file "org-colview.el"
      :pointmax 63569
      :fsize 63568
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1124 1141])
            ("org" include nil nil [1142 1156])
            ("declare-function" code nil nil [1158 1218])
            ("declare-function" code nil nil [1219 1289])
            ("declare-function" code nil nil [1290 1362])
            ("declare-function" code nil nil [1363 1422])
            ("declare-function" code nil nil [1423 1477])
            ("org-frame-title-format-backup" variable (:default-value frame-title-format) nil [1479 1536])
            ("org-time-stamp-formats" variable nil nil [1537 1568])
            ("org-ts-what" variable nil nil [1569 1589])
            ("org-clock" customgroup (:user-visible-flag t) nil [1592 1716])
            ("org-clock-into-drawer" variable (:default-value t) nil [1718 2658])
            ("org-clock-into-drawer" function nil nil [2660 3365])
            ("org-clock-out-when-done" variable (:default-value t) nil [3367 3930])
            ("org-clock-rounding-minutes" variable nil nil [3932 4676])
            ("org-clock-out-remove-zero-time-clocks" variable nil nil [4678 4841])
            ("org-clock-in-switch-to-state" variable nil nil [4843 5295])
            ("org-clock-out-switch-to-state" variable nil nil [5297 5751])
            ("org-clock-history-length" variable (:default-value 5) nil [5753 5878])
            ("org-clock-goto-may-find-recent-task" variable (:default-value t) nil [5880 6043])
            ("org-clock-heading-function" variable nil nil [6045 6353])
            ("org-clock-string-limit" variable nil nil [6355 6501])
            ("org-clock-in-resume" variable nil nil [6503 6759])
            ("org-clock-persist" variable nil nil [6761 7574])
            ("org-clock-persist-file" variable (:default-value (convert-standard-filename (concat user-emacs-directory "org-clock-save.el"))) nil [7576 7763])
            ("org-clock-persist-query-save" variable nil nil [7765 7909])
            ("org-clock-persist-query-resume" variable (:default-value t) nil [7911 8060])
            ("org-clock-sound" variable nil nil [8062 8397])
            ("org-clock-mode-line-total" variable (:default-value (quote auto)) nil [8399 9144])
            ("defvaralias" code nil nil [9146 9211])
            ("org-clock-task-overrun-text" variable nil nil [9212 9718])
            ("org-show-notification-handler" variable nil nil [9720 10007])
            ("org-clocktable" customgroup (:user-visible-flag t) nil [10009 10135])
            ("org-clocktable-defaults" variable (:default-value (list :maxlevel 2 :lang (or (bound-and-true-p org-export-default-language) "en") :scope (quote file) :block nil :wstart 1 :mstart 1 :tstart nil :tend nil :step nil :stepskip0 nil :fileskip0 nil :tags nil :emphasize nil :link nil :narrow (quote 40!) :indent t :formula nil :timestamp nil :level nil :tcolumns nil :formatter nil)) nil [10137 10645])
            ("org-clock-clocktable-formatter" variable (:default-value (quote org-clocktable-write-default)) nil [10647 10887])
            ("org-clock-clocktable-language-setup" variable (:default-value (quote (("en" "File" "L" "Timestamp" "Headline" "Time" "ALL" "Total time" "File time" "Clock summary at") ("es" "Archivo" "N" "Fecha y hora" "Tarea" "Tiempo" "TODO" "Tiempo total" "Tiempo archivo" "Clock summary at") ("fr" "Fichier" "N" "Horodatage" "En-tête" "Durée" "TOUT" "Durée totale" "Durée fichier" "Horodatage sommaire à") ("nl" "Bestand" "N" "Tijdstip" "Hoofding" "Duur" "ALLES" "Totale duur" "Bestandstijd" "Clock summary at")))) nil [10950 11589])
            ("org-clock-clocktable-default-properties" variable (:default-value (quote (:maxlevel 2 :scope file))) nil [11591 11842])
            ("org-clock-idle-time" variable nil nil [11844 12060])
            ("org-clock-auto-clock-resolution" variable (:default-value (quote when-no-clock-is-running)) nil [12062 12360])
            ("org-clock-report-include-clocking-task" variable nil nil [12362 12546])
            ("org-clock-resolve-expert" variable nil nil [12548 12716])
            ("org-clock-continuously" variable nil nil [12718 12885])
            ("org-clock-total-time-cell-format" variable (:default-value "*%s*") nil [12887 13036])
            ("org-clock-file-time-cell-format" variable (:default-value "*%s*") nil [13038 13185])
            ("org-clock-clocked-in-display" variable (:default-value (quote mode-line)) nil [13187 13747])
            ("org-clock-frame-title-format" variable (:default-value (quote (t org-mode-line-string))) nil [13749 14221])
            ("org-clock-x11idle-program-name" variable (:default-value "x11idle") nil [14223 14596])
            ("org-clock-goto-before-context" variable (:default-value 2) nil [14598 14797])
            ("org-clock-display-default-range" variable (:default-value (quote thisyear)) nil [14799 15191])
            ("org-clock-in-prepare-hook" variable nil nil [15193 15413])
            ("org-clock-in-hook" variable nil nil [15414 15482])
            ("org-clock-out-hook" variable nil nil [15483 15560])
            ("org-clock-cancel-hook" variable nil nil [15562 15643])
            ("org-clock-goto-hook" variable nil nil [15644 15736])
            ("org-clock-has-been-used" variable nil nil [15737 15835])
            ("org-clock-stored-history" variable nil nil [15837 15923])
            ("org-clock-stored-resume-clock" variable nil nil [15924 16013])
            ("org-clock--oldest-date" variable
               (:constant-flag t
                :default-value (let* ((dichotomy (lambda (min max pred) (if (funcall pred min) min (cl-incf min) (while (> (- max min) 1) (let ((mean (+ (ash min -1) (ash max -1) (logand min max 1)))) (if (funcall pred mean) (setq max mean) (setq min mean))))) max)) (high (funcall dichotomy most-negative-fixnum 0 (lambda (m) (ignore-errors (decode-time (list m 0)))))) (low (funcall dichotomy most-negative-fixnum 0 (lambda (m) (ignore-errors (decode-time (list high m))))))) (list high low)))
                nil [16015 16654])
            ("org-mode-line-string" variable nil nil [16696 16728])
            ("put" code nil nil [16729 16780])
            ("org-clock-mode-line-timer" variable nil nil [16782 16820])
            ("org-clock-idle-timer" variable nil nil [16821 16854])
            ("org-clock-heading" variable nil nil [16855 16881])
            ("org-clock-start-time" variable nil nil [16902 16934])
            ("org-clock-leftover-time" variable nil nil [16936 17047])
            ("org-clock-effort" variable nil nil [17049 17129])
            ("org-clock-total-time" variable nil nil [17131 17293])
            ("org-clock-history" variable nil nil [17295 17378])
            ("org-clock-default-task" variable (:default-value (make-marker)) nil [17380 17574])
            ("org-clock-interrupted-task" variable (:default-value (make-marker)) nil [17576 17705])
            ("org-clock-mode-line-map" variable (:default-value (make-sparse-keymap)) nil [17707 17760])
            ("define-key" code nil nil [17761 17833])
            ("define-key" code nil nil [17834 17906])
            ("org-clock-menu" function nil nil [17908 18225])
            ("org-clock-history-push" function (:arguments ("pos" "buffer")) nil [18227 18956])
            ("org-clock-save-markers-for-cut-and-paste" function (:arguments ("beg" "end")) nil [18958 19380])
            ("org-clock-drawer-name" function nil nil [19382 19686])
            ("org-clocking-buffer" function nil nil [19688 19828])
            ("org-clocking-p" function nil nil [19830 19932])
            ("org-clock-before-select-task-hook" variable nil nil [19934 20046])
            ("org-clock-select-task" function
               (:user-visible-flag t
                :arguments ("prompt"))
                nil [20048 22020])
            ("org-clock-insert-selection-line" function (:arguments ("i" "marker")) nil [22022 22827])
            ("org-clock-task-overrun" variable nil nil [22829 22936])
            ("org-clock-update-period" variable (:default-value 60) nil [22937 23034])
            ("org-clock-get-clock-string" function nil nil [23036 24097])
            ("org-clock-get-last-clock-out-time" function nil nil [24099 24422])
            ("org-clock-update-mode-line" function nil nil [24424 25364])
            ("org-clock-get-clocked-time" function nil nil [25366 25711])
            ("org-clock-modify-effort-estimate" function
               (:user-visible-flag t
                :arguments ("value"))
                nil [25713 27300])
            ("org-clock-notification-was-shown" variable nil nil [27302 27396])
            ("org-clock-notify-once-if-expired" function nil nil [27398 28168])
            ("org-notify" function (:arguments ("notification" "play-sound")) nil [28170 28419])
            ("org-show-notification" function (:arguments ("notification")) nil [28421 29286])
            ("org-clock-play-sound" function (:arguments ("clock-sound")) nil [29288 29945])
            ("org-clock-mode-line-entry" variable nil nil [29947 30044])
            ("org-find-open-clocks" function (:arguments ("file")) nil [30046 30526])
            ("org-is-active-clock" function (:arguments ("clock")) nil [30528 30689])
            ("org-with-clock-position" function (:arguments ("clock" "forms")) nil [30691 30957])
            ("def-edebug-spec" code nil nil [30958 31011])
            ("put" code nil nil [31012 31066])
            ("org-with-clock" function (:arguments ("clock" "forms")) nil [31068 31546])
            ("def-edebug-spec" code nil nil [31547 31591])
            ("put" code nil nil [31592 31637])
            ("org-clock-clock-in" function (:arguments ("clock" "resume" "start-time")) nil [31639 31939])
            ("org-clock-clock-out" function (:arguments ("clock" "fail-quietly" "at-time")) nil [31941 32314])
            ("org-clock-clock-cancel" function (:arguments ("clock")) nil [32316 32611])
            ("org-clock-clocking-in" variable nil nil [32613 32647])
            ("org-clock-resolving-clocks" variable nil nil [32648 32687])
            ("org-clock-resolving-clocks-due-to-idleness" variable nil nil [32688 32743])
            ("org-clock-resolve-clock" function (:arguments ("clock" "resolve-to" "clock-out-time" "close-p" "restart-p" "fail-quietly")) nil [32745 33919])
            ("org-clock-jump-to-current-clock" function (:arguments ("effective-clock")) nil [33921 34854])
            ("org-clock-resolve" function (:arguments ("clock" "prompt-fn" "last-valid" "fail-quietly")) nil [34856 38875])
            ("org-resolve-clocks" function
               (:user-visible-flag t
                :arguments ("only-dangling-p" "prompt-fn" "last-valid"))
                nil [38892 39742])
            ("org-emacs-idle-seconds" function nil nil [39744 39941])
            ("org-mac-idle-seconds" function nil nil [39943 40166])
            ("org-x11idle-exists-p" variable (:default-value (and (eq window-system (quote x)) (eq 0 (call-process-shell-command (format "command -v %s" org-clock-x11idle-program-name))) (eq 0 (call-process-shell-command org-clock-x11idle-program-name)))) nil [40168 40574])
            ("org-x11-idle-seconds" function nil nil [40576 40743])
            ("org-user-idle-seconds" function nil nil [40745 41067])
            ("org-clock-user-idle-seconds" variable nil nil [41069 41105])
            ("org-resolve-clocks-if-idle" function nil nil [41107 42026])
            ("org-clock-current-task" variable nil nil [42028 42092])
            ("org-clock-out-time" variable nil nil [42093 42124])
            ("org--msg-extra" variable nil nil [42164 42187])
            ("org-clock-in" function
               (:user-visible-flag t
                :arguments ("select" "start-time"))
                nil [42204 49783])
            ("org-clock-in-last" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49800 51275])
            ("org-clock-mark-default-task" function (:user-visible-flag t) nil [51277 51466])
            ("org-clock-get-sum-start" function nil nil [51468 52825])
            ("org-clock-find-position" function (:arguments ("find-unclosed")) nil [52827 56315])
            ("org-clock-out" function
               (:user-visible-flag t
                :arguments ("switch-to-state" "fail-quietly" "at-time"))
                nil [56332 59983])
            ("add-hook" code nil nil [59985 60052])
            ("org-clock-remove-empty-clock-drawer" function nil nil [60054 60531])
            ("org-clock-timestamps-up" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [60533 60733])
            ("org-clock-timestamps-down" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [60735 60939])
            ("org-clock-timestamps-change" function (:arguments ("updown" "n")) nil [60941 62432])
            ("org-clock-cancel" function (:user-visible-flag t) nil [62449 63530])
            ("org-clock-goto" function
               (:user-visible-flag t
                :arguments ("select"))
                nil [63547 64570])
            ("defvar-local" code nil nil [64572 64694])
            ("org-clock-sum-today" function (:arguments ("headline-filter")) nil [64696 64939])
            ("org-clock-sum-custom" function (:arguments ("headline-filter" "range" "propname")) nil [64941 65437])
            ("org-clock-sum" function (:arguments ("tstart" "tend" "headline-filter" "propname")) nil [65454 68986])
            ("org-clock-sum-current-item" function (:arguments ("tstart")) nil [68988 69228])
            ("org-clock-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [69245 71262])
            ("defvar-local" code nil nil [71264 71301])
            ("org-clock-put-overlay" function (:arguments ("time")) nil [71303 72166])
            ("org-clock-remove-overlays" function
               (:user-visible-flag t
                :arguments ("_beg" "_end" "noremove"))
                nil [72183 72639])
            ("org-state" variable nil nil [72641 72659])
            ("org-clock-out-if-current" function nil nil [72701 73655])
            ("add-hook" code nil nil [73657 73730])
            ("org-clock-get-clocktable" function (:arguments ("props")) nil [73747 74449])
            ("org-clock-report" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [74466 75369])
            ("org-day-of-week" function (:arguments ("day" "month" "year")) nil [75371 75555])
            ("org-quarter-to-date" function (:arguments ("quarter" "year")) nil [75557 76721])
            ("org-clock-special-range" function (:arguments ("key" "time" "as-strings" "wstart" "mstart")) nil [76723 82809])
            ("org-count-quarter" function (:arguments ("n")) nil [82811 82925])
            ("org-clocktable-shift" function (:arguments ("dir" "n")) nil [82942 86234])
            ("org-dblock-write:clocktable" function (:arguments ("params")) nil [86251 88948])
            ("org-clocktable-write-default" function (:arguments ("ipos" "tables" "params")) nil [88950 98358])
            ("org-clocktable-indent-string" function (:arguments ("level")) nil [98360 98592])
            ("org-clocktable-steps" function (:arguments ("params")) nil [98594 100834])
            ("org-clock-get-table-data" function (:arguments ("file" "params")) nil [100836 105024])
            ("org-clock-time%" function (:arguments ("total" "strings")) nil [105026 105873])
            ("org-clock-loaded" variable nil nil [105908 105968])
            ("org-clock-update-time-maybe" function (:user-visible-flag t) nil [105985 107268])
            ("org-clock-save" function nil nil [107270 108750])
            ("org-clock-load" function nil nil [108752 109893])
            ("org-defkey" code nil nil [109917 109991])
            ("org-clock" package nil nil [109993 110013]))          
      :file "org-clock.el"
      :pointmax 110117
      :fsize 110123
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [3472 3486])
            ("sha1" include nil nil [3487 3502])
            ("declare-function" code nil nil [3504 3620])
            ("declare-function" code nil nil [3621 3670])
            ("declare-function" code nil nil [3671 3730])
            ("declare-function" code nil nil [3731 3790])
            ("declare-function" code nil nil [3791 3857])
            ("declare-function" code nil nil [3858 3914])
            ("declare-function" code nil nil [3916 3973])
            ("declare-function" code nil nil [3974 4057])
            ("declare-function" code nil nil [4058 4129])
            ("org-feed" customgroup (:user-visible-flag t) nil [4131 4245])
            ("org-feed-alist" variable nil nil [4247 8847])
            ("org-feed-drawer" variable (:default-value "FEEDSTATUS") nil [8849 9099])
            ("org-feed-default-template" variable (:default-value "
* %h
  %U
  %description
  %a
") nil [9101 9975])
            ("org-feed-save-after-adding" variable (:default-value t) nil [9977 10112])
            ("org-feed-retrieve-method" variable (:default-value (quote url-retrieve-synchronously)) nil [10114 10633])
            ("org-feed-before-adding-hook" variable nil nil [10635 10860])
            ("org-feed-after-adding-hook" variable nil nil [10862 11085])
            ("org-feed-buffer" variable (:default-value "*Org feed*") nil [11087 11164])
            ("org-feed-update-all" function (:user-visible-flag t) nil [11181 11584])
            ("org-feed-update" function
               (:user-visible-flag t
                :arguments ("feed" "retrieve-only"))
                nil [11601 16132])
            ("org-feed-goto-inbox" function
               (:user-visible-flag t
                :arguments ("feed"))
                nil [16149 16564])
            ("org-feed-show-raw-feed" function
               (:user-visible-flag t
                :arguments ("feed"))
                nil [16581 17022])
            ("org-feed-goto-inbox-internal" function (:arguments ("file" "heading")) nil [17024 17478])
            ("org-feed-read-previous-status" function (:arguments ("pos" "drawer")) nil [17480 17872])
            ("org-feed-write-status" function (:arguments ("pos" "drawer" "status")) nil [17874 18456])
            ("org-feed-add-items" function (:arguments ("pos" "entries")) nil [18458 18996])
            ("org-feed-format-entry" function (:arguments ("entry" "template" "formatter")) nil [18998 21675])
            ("org-feed-make-indented-block" function (:arguments ("s" "n")) nil [21677 21935])
            ("org-feed-skip-http-headers" function (:arguments ("buffer")) nil [21937 22218])
            ("org-feed-get-feed" function (:arguments ("url")) nil [22220 22885])
            ("org-feed-parse-rss-feed" function (:arguments ("buffer")) nil [22887 23702])
            ("org-feed-parse-rss-entry" function (:arguments ("entry")) nil [23704 24329])
            ("org-feed-parse-atom-feed" function (:arguments ("buffer")) nil [24331 24965])
            ("org-feed-parse-atom-entry" function (:arguments ("entry")) nil [24967 26304])
            ("org-feed" package nil nil [26306 26325]))          
      :file "org-feed.el"
      :pointmax 26428
      :fsize 26427
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-macs" include nil nil [1253 1272])
            ("org" include nil nil [1273 1287])
            ("org-mhe-search-all-folders" variable nil nil [1317 1751])
            ("declare-function" code nil nil [1797 1862])
            ("declare-function" code nil nil [1863 1908])
            ("declare-function" code nil nil [1909 1966])
            ("declare-function" code nil nil [1967 2033])
            ("declare-function" code nil nil [2034 2083])
            ("declare-function" code nil nil [2084 2142])
            ("declare-function" code nil nil [2143 2297])
            ("declare-function" code nil nil [2298 2411])
            ("declare-function" code nil nil [2412 2480])
            ("declare-function" code nil nil [2481 2552])
            ("declare-function" code nil nil [2553 2630])
            ("declare-function" code nil nil [2631 2686])
            ("declare-function" code nil nil [2687 2733])
            ("declare-function" code nil nil [2734 2779])
            ("declare-function" code nil nil [2780 2874])
            ("mh-progs" variable nil nil [2875 2892])
            ("mh-current-folder" variable nil nil [2893 2919])
            ("mh-show-folder-buffer" variable nil nil [2920 2950])
            ("mh-index-folder" variable nil nil [2951 2975])
            ("mh-searcher" variable nil nil [2976 2996])
            ("mh-search-regexp-builder" variable nil nil [2997 3030])
            ("org-link-set-parameters" code nil nil [3057 3139])
            ("org-mhe-store-link" function nil nil [3159 3920])
            ("org-mhe-open" function (:arguments ("path")) nil [3922 4237])
            ("org-mhe-get-message-real-folder" function nil nil [4282 5247])
            ("org-mhe-get-message-folder-from-index" function nil nil [5249 5498])
            ("org-mhe-get-message-folder" function nil nil [5500 5762])
            ("org-mhe-get-message-num" function nil nil [5764 6031])
            ("org-mhe-get-header" function (:arguments ("header")) nil [6033 6760])
            ("org-mhe-follow-link" function (:arguments ("folder" "article")) nil [6762 7882])
            ("org-mhe" package nil nil [7884 7902]))          
      :file "org-mhe.el"
      :pointmax 7929
      :fsize 7928
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [4237 4251])
            ("bibtex" include nil nil [4252 4269])
            ("cl-lib" include nil nil [4270 4287])
            ("org-compat" include nil nil [4288 4309])
            ("org-agenda-overriding-header" variable nil nil [4311 4348])
            ("org-agenda-search-view-always-boolean" variable nil nil [4349 4395])
            ("org-bibtex-description" variable nil nil [4396 4431])
            ("org-id-locations" variable nil nil [4465 4490])
            ("declare-function" code nil nil [4492 4548])
            ("declare-function" code nil nil [4549 4603])
            ("declare-function" code nil nil [4604 4670])
            ("declare-function" code nil nil [4671 4735])
            ("org-bibtex-types" variable (:default-value (quote ((:article (:description . "An article from a journal or magazine") (:required :author :title :journal :year) (:optional :volume :number :pages :month :note)) (:book (:description . "A book with an explicit publisher") (:required (:editor :author) :title :publisher :year) (:optional (:volume :number) :series :address :edition :month :note)) (:booklet (:description . "A work that is printed and bound, but without a named publisher or sponsoring institution.") (:required :title) (:optional :author :howpublished :address :month :year :note)) (:conference (:description . "") (:required :author :title :booktitle :year) (:optional :editor :pages :organization :publisher :address :month :note)) (:inbook (:description . "A part of a book, which may be a chapter (or section or whatever) and/or a range of pages.") (:required (:author :editor) :title (:chapter :pages) :publisher :year) (:optional :crossref (:volume :number) :series :type :address :edition :month :note)) (:incollection (:description . "A part of a book having its own title.") (:required :author :title :booktitle :publisher :year) (:optional :crossref :editor (:volume :number) :series :type :chapter :pages :address :edition :month :note)) (:inproceedings (:description . "An article in a conference proceedings") (:required :author :title :booktitle :year) (:optional :crossref :editor (:volume :number) :series :pages :address :month :organization :publisher :note)) (:manual (:description . "Technical documentation.") (:required :title) (:optional :author :organization :address :edition :month :year :note)) (:mastersthesis (:description . "A Master’s thesis.") (:required :author :title :school :year) (:optional :type :address :month :note)) (:misc (:description . "Use this type when nothing else fits.") (:required) (:optional :author :title :howpublished :month :year :note)) (:phdthesis (:description . "A PhD thesis.") (:required :author :title :school :year) (:optional :type :address :month :note)) (:proceedings (:description . "The proceedings of a conference.") (:required :title :year) (:optional :editor (:volume :number) :series :address :month :organization :publisher :note)) (:techreport (:description . "A report published by a school or other institution.") (:required :author :title :institution :year) (:optional :type :address :month :note)) (:unpublished (:description . "A document having an author and title, but not formally published.") (:required :author :title :note) (:optional :month :year))))) nil [4755 7609])
            ("org-bibtex-fields" variable (:default-value (quote ((:address . "Usually the address of the publisher or other type of institution.  For major publishing houses, van Leunen recommends omitting the information entirely.  For small publishers, on the other hand, you can help the reader by giving the complete address.") (:annote . "An annotation.  It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.") (:author . "The name(s) of the author(s), in the format described in the LaTeX book.  Remember, all names are separated with the and keyword, and not commas.") (:booktitle . "Title of a book, part of which is being cited.  See the LaTeX book for how to type titles.  For book entries, use the title field instead.") (:chapter . "A chapter (or section or whatever) number.") (:crossref . "The database key of the entry being cross referenced.") (:edition . "The edition of a book for example, 'Second'.  This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.") (:editor . "Name(s) of editor(s), typed as indicated in the LaTeX book.  If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.") (:howpublished . "How something strange has been published.  The first word should be capitalized.") (:institution . "The sponsoring institution of a technical report.") (:journal . "A journal name.") (:key . "Used for alphabetizing, cross-referencing, and creating a label when the author information is missing.  This field should not be confused with the key that appears in the \\cite command and at the beginning of the database entry.") (:month . "The month in which the work was published or, for an unpublished work, in which it was written.  You should use the standard three-letter abbreviation,") (:note . "Any additional information that can help the reader.  The first word should be capitalized.") (:number . "Any additional information that can help the reader.  The first word should be capitalized.") (:organization . "The organization that sponsors a conference or that publishes a manual.") (:pages . "One or more page numbers or range of numbers, such as 42-111 or 7,41,73-97 or 43+ (the ‘+’ in this last example indicates pages following that don’t form simple range). BibTEX requires double dashes for page ranges (--).") (:publisher . "The publisher’s name.") (:school . "The name of the school where a thesis was written.") (:series . "The name of a series or set of books.  When citing an entire book, the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.") (:title . "The work’s title, typed as explained in the LaTeX book.") (:type . "The type of a technical report for example, 'Research Note'.") (:volume . "The volume of a journal or multi-volume book.") (:year . "The year of publication or, for an unpublished work, the year it was written.  Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as '(about 1984)'")))) nil [7611 11120])
            ("org-bibtex-entries" variable nil nil [11122 11193])
            ("org-bibtex-autogen-keys" variable nil nil [11195 11367])
            ("org-bibtex-prefix" variable nil nil [11369 11614])
            ("org-bibtex-treat-headline-as-title" variable (:default-value t) nil [11616 11937])
            ("org-bibtex-export-arbitrary-fields" variable nil nil [11939 12296])
            ("org-bibtex-key-property" variable (:default-value "CUSTOM_ID") nil [12298 12649])
            ("org-bibtex-tags" variable nil nil [12651 12820])
            ("org-bibtex-tags-are-keywords" variable nil nil [12822 13513])
            ("org-bibtex-no-export-tags" variable nil nil [13515 13771])
            ("org-bibtex-inherit-tags" variable nil nil [13773 14145])
            ("org-bibtex-type-property-name" variable (:default-value "btype") nil [14147 14317])
            ("org-bibtex-get" function (:arguments ("property")) nil [14343 14732])
            ("org-bibtex-put" function (:arguments ("property" "value")) nil [14734 15045])
            ("org-bibtex-headline" function nil nil [15047 17383])
            ("org-bibtex-ask" function (:arguments ("field")) nil [17385 17950])
            ("org-bibtex-autokey" function nil nil [17952 18597])
            ("org-bibtex-fleshout" function (:arguments ("type" "optional")) nil [18599 19939])
            ("org-link-set-parameters" code nil nil [19969 20068])
            ("org-bibtex-open" function (:arguments ("path")) nil [20070 20318])
            ("org-bibtex-store-link" function nil nil [20320 22091])
            ("org-create-file-search-in-bibtex" function nil nil [22093 23072])
            ("org-execute-file-search-in-bibtex" function (:arguments ("s")) nil [23074 24032])
            ("add-hook" code nil nil [24093 24173])
            ("org-bibtex" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [24227 25310])
            ("org-bibtex-check" function
               (:user-visible-flag t
                :arguments ("optional"))
                nil [25312 25733])
            ("org-bibtex-check-all" function
               (:user-visible-flag t
                :arguments ("optional"))
                nil [25735 25966])
            ("org-bibtex-create" function
               (:user-visible-flag t
                :arguments ("arg" "nonew"))
                nil [25968 26957])
            ("org-bibtex-create-in-current-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [26959 27162])
            ("org-bibtex-read" function (:user-visible-flag t) nil [27164 28190])
            ("org-bibtex-read-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [28192 28732])
            ("org-bibtex-read-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [28734 28910])
            ("org-bibtex-write" function (:user-visible-flag t) nil [28912 30044])
            ("org-bibtex-yank" function (:user-visible-flag t) nil [30046 30338])
            ("org-bibtex-import-from-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [30340 30646])
            ("org-bibtex-export-to-kill-ring" function (:user-visible-flag t) nil [30648 30833])
            ("org-bibtex-search" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [30835 31267])
            ("org-bibtex" package nil nil [31269 31290]))          
      :file "org-bibtex.el"
      :pointmax 31320
      :fsize 31331
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [983 1000])
            ("ox" include nil nil [1001 1014])
            ("ox-publish" include nil nil [1015 1036])
            ("org-latex-default-packages-alist" variable nil nil [1038 1079])
            ("org-latex-packages-alist" variable nil nil [1080 1113])
            ("orgtbl-exp-regexp" variable nil nil [1114 1140])
            ("org-export-define-backend" code nil nil [1166 6688])
            ("org-latex-babel-language-alist" variable
               (:constant-flag t
                :default-value (quote (("af" . "afrikaans") ("bg" . "bulgarian") ("bt-br" . "brazilian") ("ca" . "catalan") ("cs" . "czech") ("cy" . "welsh") ("da" . "danish") ("de" . "germanb") ("de-at" . "naustrian") ("de-de" . "ngerman") ("el" . "greek") ("en" . "english") ("en-au" . "australian") ("en-ca" . "canadian") ("en-gb" . "british") ("en-ie" . "irish") ("en-nz" . "newzealand") ("en-us" . "american") ("es" . "spanish") ("et" . "estonian") ("eu" . "basque") ("fi" . "finnish") ("fr" . "frenchb") ("fr-ca" . "canadien") ("gl" . "galician") ("hr" . "croatian") ("hu" . "hungarian") ("id" . "indonesian") ("is" . "icelandic") ("it" . "italian") ("la" . "latin") ("ms" . "malay") ("nl" . "dutch") ("nb" . "norsk") ("nn" . "nynorsk") ("no" . "norsk") ("pl" . "polish") ("pt" . "portuguese") ("ro" . "romanian") ("ru" . "russian") ("sa" . "sanskrit") ("sb" . "uppersorbian") ("sk" . "slovak") ("sl" . "slovene") ("sq" . "albanian") ("sr" . "serbian") ("sv" . "swedish") ("ta" . "tamil") ("tr" . "turkish") ("uk" . "ukrainian"))))
                nil [6717 8019])
            ("org-latex-polyglossia-language-alist" variable
               (:constant-flag t
                :default-value (quote (("am" "amharic") ("ast" "asturian") ("ar" "arabic") ("bo" "tibetan") ("bn" "bengali") ("bg" "bulgarian") ("br" "breton") ("bt-br" "brazilian") ("ca" "catalan") ("cop" "coptic") ("cs" "czech") ("cy" "welsh") ("da" "danish") ("de" "german" "german") ("de-at" "german" "austrian") ("de-de" "german" "german") ("dv" "divehi") ("el" "greek") ("en" "english" "usmax") ("en-au" "english" "australian") ("en-gb" "english" "uk") ("en-nz" "english" "newzealand") ("en-us" "english" "usmax") ("eo" "esperanto") ("es" "spanish") ("et" "estonian") ("eu" "basque") ("fa" "farsi") ("fi" "finnish") ("fr" "french") ("fu" "friulan") ("ga" "irish") ("gd" "scottish") ("gl" "galician") ("he" "hebrew") ("hi" "hindi") ("hr" "croatian") ("hu" "magyar") ("hy" "armenian") ("id" "bahasai") ("ia" "interlingua") ("is" "icelandic") ("it" "italian") ("kn" "kannada") ("la" "latin" "modern") ("la-modern" "latin" "modern") ("la-classic" "latin" "classic") ("la-medieval" "latin" "medieval") ("lo" "lao") ("lt" "lithuanian") ("lv" "latvian") ("mr" "maranthi") ("ml" "malayalam") ("nl" "dutch") ("nb" "norsk") ("nn" "nynorsk") ("nko" "nko") ("no" "norsk") ("oc" "occitan") ("pl" "polish") ("pms" "piedmontese") ("pt" "portuges") ("rm" "romansh") ("ro" "romanian") ("ru" "russian") ("sa" "sanskrit") ("hsb" "usorbian") ("dsb" "lsorbian") ("sk" "slovak") ("sl" "slovenian") ("se" "samin") ("sq" "albanian") ("sr" "serbian") ("sv" "swedish") ("syr" "syriac") ("ta" "tamil") ("te" "telugu") ("th" "thai") ("tk" "turkmen") ("tr" "turkish") ("uk" "ukrainian") ("ur" "urdu") ("vi" "vietnamese"))))
                nil [8021 10029])
            ("org-latex-table-matrix-macros" variable
               (:constant-flag t
                :default-value (quote (("bordermatrix" . "\\cr") ("qbordermatrix" . "\\cr") ("kbordermatrix" . "\\\\"))))
                nil [10033 10224])
            ("org-latex-math-environments-re" variable
               (:constant-flag t
                :default-value (format "\\`[ 	]*\\\\begin{%s\\*?}" (regexp-opt (quote ("equation" "eqnarray" "math" "displaymath" "align" "gather" "multline" "flalign" "alignat" "xalignat" "xxalignat" "subequations" "dmath" "dseries" "dgroup" "darray" "empheq")))))
                nil [10226 10609])
            ("org-export-latex" customgroup (:user-visible-flag t) nil [10646 10775])
            ("org-latex-caption-above" variable (:default-value (quote (table))) nil [10791 11485])
            ("org-latex-prefer-user-labels" variable nil nil [11487 13480])
            ("org-latex-default-class" variable (:default-value "article") nil [13497 13635])
            ("org-latex-classes" variable (:default-value (quote (("article" "\\documentclass[11pt]{article}" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}") ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) ("report" "\\documentclass[11pt]{report}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")) ("book" "\\documentclass[11pt]{book}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))) nil [13637 18640])
            ("org-latex-inputenc-alist" variable nil nil [18642 19045])
            ("org-latex-title-command" variable (:default-value "\\maketitle") nil [19047 19686])
            ("org-latex-subtitle-format" variable (:default-value "\\\\\\medskip
\\large %s") nil [19688 20017])
            ("org-latex-subtitle-separate" variable nil nil [20019 20222])
            ("org-latex-toc-command" variable (:default-value "\\tableofcontents

") nil [20224 20523])
            ("org-latex-hyperref-template" variable (:default-value "\\hypersetup{
 pdfauthor={%a},
 pdftitle={%t},
 pdfkeywords={%k},
 pdfsubject={%d},
 pdfcreator={%c}, 
 pdflang={%L}}
") nil [20525 21425])
            ("org-latex-format-headline-function" variable (:default-value (quote org-latex-format-headline-default-function)) nil [21442 22073])
            ("org-latex-footnote-separator" variable (:default-value "\\textsuperscript{,}\\,") nil [22092 22238])
            ("org-latex-footnote-defined-format" variable (:default-value "\\textsuperscript{\\ref{%s}}") nil [22240 22729])
            ("org-latex-active-timestamp-format" variable (:default-value "\\textit{%s}") nil [22748 22914])
            ("org-latex-inactive-timestamp-format" variable (:default-value "\\textit{%s}") nil [22916 23086])
            ("org-latex-diary-timestamp-format" variable (:default-value "\\textit{%s}") nil [23088 23252])
            ("org-latex-images-centered" variable (:default-value t) nil [23267 23460])
            ("org-latex-image-default-option" variable nil nil [23462 23633])
            ("org-latex-image-default-width" variable (:default-value ".9\\linewidth") nil [23635 23870])
            ("org-latex-image-default-height" variable nil nil [23872 24173])
            ("org-latex-default-figure-position" variable (:default-value "htbp") nil [24175 24380])
            ("org-latex-inline-image-rules" variable (:default-value (quote (("file" . "\\.\\(pdf\\|jpeg\\|jpg\\|png\\|ps\\|eps\\|tikz\\|pgf\\|svg\\)\\'")))) nil [24382 25162])
            ("org-latex-link-with-unknown-path-format" variable (:default-value "\\texttt{%s}") nil [25164 25325])
            ("org-latex-default-table-environment" variable (:default-value "tabular") nil [25341 25539])
            ("org-latex-default-table-mode" variable (:default-value (quote table)) nil [25541 26574])
            ("org-latex-tables-centered" variable (:default-value t) nil [26576 26741])
            ("org-latex-tables-booktabs" variable nil nil [26743 27160])
            ("org-latex-table-scientific-notation" variable (:default-value "%s\\,(%s)") nil [27162 27582])
            ("org-latex-text-markup-alist" variable (:default-value (quote ((bold . "\\textbf{%s}") (code . protectedtexttt) (italic . "\\emph{%s}") (strike-through . "\\sout{%s}") (underline . "\\uline{%s}") (verbatim . protectedtexttt)))) nil [27602 28596])
            ("org-latex-format-drawer-function" variable (:default-value (lambda (_ contents) contents)) nil [28613 29082])
            ("org-latex-format-inlinetask-function" variable (:default-value (quote org-latex-format-inlinetask-default-function)) nil [29103 29804])
            ("org-latex-listings" variable nil nil [29822 31364])
            ("org-latex-listings-langs" variable (:default-value (quote ((emacs-lisp "Lisp") (lisp "Lisp") (clojure "Lisp") (c "C") (cc "C++") (fortran "fortran") (perl "Perl") (cperl "Perl") (python "Python") (ruby "Ruby") (html "HTML") (xml "XML") (tex "TeX") (latex "[LaTeX]TeX") (shell-script "bash") (gnuplot "Gnuplot") (ocaml "Caml") (caml "Caml") (sql "SQL") (sqlite "sql") (makefile "make") (R "r")))) nil [31366 32345])
            ("org-latex-listings-options" variable nil nil [32347 33265])
            ("org-latex-minted-langs" variable (:default-value (quote ((emacs-lisp "common-lisp") (cc "c++") (cperl "perl") (shell-script "bash") (caml "ocaml")))) nil [33267 34070])
            ("org-latex-minted-options" variable nil nil [34072 34970])
            ("org-latex-custom-lang-environments" variable nil nil [34972 36459])
            ("org-latex-compiler-file-string" variable (:default-value "%% Intended LaTeX compiler: %s
") nil [36480 36973])
            ("org-latex-compiler" variable (:default-value "pdflatex") nil [36975 37438])
            ("org-latex-compilers" variable
               (:constant-flag t
                :default-value (quote ("pdflatex" "xelatex" "lualatex")))
                nil [37440 37563])
            ("org-latex-bib-compiler" variable (:default-value "bibtex") nil [37565 37993])
            ("org-latex-pdf-process" variable (:default-value (quote ("%latex -interaction nonstopmode -output-directory %o %f" "%latex -interaction nonstopmode -output-directory %o %f" "%latex -interaction nonstopmode -output-directory %o %f"))) nil [37995 40276])
            ("org-latex-logfiles-extensions" variable (:default-value (quote ("aux" "bcf" "blg" "fdb_latexmk" "fls" "figlist" "idx" "log" "nav" "out" "ptc" "run.xml" "snm" "toc" "vrb" "xdv"))) nil [40278 40698])
            ("org-latex-remove-logfiles" variable (:default-value t) nil [40700 41033])
            ("org-latex-known-warnings" variable (:default-value (quote (("Reference.*?undefined" . "[undefined reference]") ("Runaway argument" . "[runaway argument]") ("Underfull \\hbox" . "[underfull hbox]") ("Overfull \\hbox" . "[overfull hbox]") ("Citation.*?undefined" . "[undefined citation]") ("Undefined control sequence" . "[undefined control sequence]")))) nil [41035 41775])
            ("org-latex--caption-above-p" function (:arguments ("element" "info")) nil [41804 42149])
            ("org-latex--label" function (:arguments ("datum" "info" "force" "full")) nil [42151 43368])
            ("org-latex--caption/label-string" function (:arguments ("element" "info")) nil [43370 44777])
            ("org-latex-guess-inputenc" function (:arguments ("header")) nil [44779 45482])
            ("org-latex-guess-babel-language" function (:arguments ("header" "info")) nil [45484 46900])
            ("org-latex-guess-polyglossia-language" function (:arguments ("header" "info")) nil [46902 48642])
            ("org-latex--remove-packages" function (:arguments ("pkg-alist" "info")) nil [48644 49361])
            ("org-latex--find-verb-separator" function (:arguments ("s")) nil [49363 49742])
            ("org-latex--make-option-string" function (:arguments ("options")) nil [49744 50161])
            ("org-latex--wrap-label" function (:arguments ("element" "output" "info")) nil [50163 50614])
            ("org-latex--protect-text" function (:arguments ("text")) nil [50616 50775])
            ("org-latex--text-markup" function (:arguments ("text" "markup" "info")) nil [50777 51923])
            ("org-latex--delayed-footnotes-definitions" function (:arguments ("element" "info")) nil [51925 53246])
            ("org-latex--translate" function (:arguments ("s" "info")) nil [53248 53429])
            ("org-latex--format-spec" function (:arguments ("info")) nil [53431 54290])
            ("org-latex--make-preamble" function (:arguments ("info")) nil [54292 55436])
            ("org-latex--insert-compiler" function (:arguments ("info")) nil [55438 55799])
            ("org-latex-template" function (:arguments ("contents" "info")) nil [55817 58714])
            ("org-latex-bold" function (:arguments ("_bold" "contents" "info")) nil [58755 58972])
            ("org-latex-center-block" function (:arguments ("center-block" "contents" "info")) nil [58994 59307])
            ("org-latex-clock" function (:arguments ("clock" "_contents" "info")) nil [59322 59801])
            ("org-latex-code" function (:arguments ("code" "_contents" "info")) nil [59815 60046])
            ("org-latex-drawer" function (:arguments ("drawer" "contents" "info")) nil [60062 60445])
            ("org-latex-dynamic-block" function (:arguments ("dynamic-block" "contents" "info")) nil [60468 60755])
            ("org-latex-entity" function (:arguments ("entity" "_contents" "_info")) nil [60771 60994])
            ("org-latex-example-block" function (:arguments ("example-block" "_contents" "info")) nil [61017 61602])
            ("org-latex-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [61624 61956])
            ("org-latex-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [61980 62282])
            ("org-latex-fixed-width" function (:arguments ("fixed-width" "_contents" "info")) nil [62303 62658])
            ("org-latex-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [62686 64612])
            ("org-latex-headline" function (:arguments ("headline" "contents" "info")) nil [64630 70048])
            ("org-latex-format-headline-default-function" function (:arguments ("todo" "_todo-type" "priority" "text" "tags" "info")) nil [70050 70501])
            ("org-latex-horizontal-rule" function (:arguments ("horizontal-rule" "_contents" "info")) nil [70526 71339])
            ("org-latex-inline-src-block" function (:arguments ("inline-src-block" "_contents" "info")) nil [71365 72831])
            ("org-latex-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [72851 73730])
            ("org-latex-format-inlinetask-default-function" function (:arguments ("todo" "_todo-type" "priority" "title" "tags" "contents" "info")) nil [73732 74518])
            ("org-latex-italic" function (:arguments ("_italic" "contents" "info")) nil [74534 74761])
            ("org-latex-item" function (:arguments ("item" "contents" "info")) nil [74775 76995])
            ("org-latex-keyword" function (:arguments ("keyword" "_contents" "info")) nil [77012 78376])
            ("org-latex-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [78403 79122])
            ("org-latex-latex-fragment" function (:arguments ("latex-fragment" "_contents" "_info")) nil [79146 79644])
            ("org-latex-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [79664 79852])
            ("org-latex--inline-image" function (:arguments ("link" "info")) nil [79866 85205])
            ("org-latex-link" function (:arguments ("link" "desc" "info")) nil [85207 88442])
            ("org-latex-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [88465 88837])
            ("org-latex-paragraph" function (:arguments ("_paragraph" "contents" "_info")) nil [88856 89083])
            ("org-latex-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [89103 89812])
            ("org-latex-plain-text" function (:arguments ("text" "info")) nil [89832 91272])
            ("org-latex-planning" function (:arguments ("planning" "_contents" "info")) nil [91290 92300])
            ("org-latex-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [92325 92642])
            ("org-latex--wrap-latex-matrices" function (:arguments ("data" "info")) nil [92823 94958])
            ("org-latex-matrices" function (:arguments ("matrices" "contents" "_info")) nil [94960 95311])
            ("org-latex-matrices-tree-filter" function (:arguments ("tree" "_backend" "info")) nil [95313 95417])
            ("org-latex--wrap-latex-math-block" function (:arguments ("data" "info")) nil [95535 97712])
            ("org-latex-math-block-tree-filter" function (:arguments ("tree" "_backend" "info")) nil [97714 97822])
            ("org-latex-math-block-options-filter" function (:arguments ("info" "_backend")) nil [97824 98026])
            ("org-latex-math-block" function (:arguments ("_math-block" "contents" "_info")) nil [98028 98290])
            ("org-latex-quote-block" function (:arguments ("quote-block" "contents" "info")) nil [98310 98610])
            ("org-latex-radio-target" function (:arguments ("radio-target" "text" "info")) nil [98632 98900])
            ("org-latex-section" function (:arguments ("_section" "contents" "_info")) nil [98917 99123])
            ("org-latex-special-block" function (:arguments ("special-block" "contents" "info")) nil [99146 99794])
            ("org-latex-src-block" function (:arguments ("src-block" "_contents" "info")) nil [99813 105958])
            ("org-latex-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [105985 106278])
            ("org-latex-strike-through" function (:arguments ("_strike-through" "contents" "info")) nil [106302 106569])
            ("org-latex--script-size" function (:arguments ("object" "info")) nil [106588 107849])
            ("org-latex-subscript" function (:arguments ("subscript" "_contents" "info")) nil [107851 108088])
            ("org-latex-superscript" function (:arguments ("superscript" "_contents" "info")) nil [108109 108354])
            ("org-latex-table" function (:arguments ("table" "contents" "info")) nil [108786 109923])
            ("org-latex--align-string" function (:arguments ("table" "info")) nil [109925 110878])
            ("org-latex--org-table" function (:arguments ("table" "contents" "info")) nil [110880 114930])
            ("org-latex--table.el-table" function (:arguments ("table" "info")) nil [114932 116471])
            ("org-latex--math-table" function (:arguments ("table" "info")) nil [116473 118092])
            ("org-latex-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [118112 118723])
            ("org-latex-table-row" function (:arguments ("table-row" "contents" "info")) nil [118742 120960])
            ("org-latex-target" function (:arguments ("target" "_contents" "info")) nil [120976 121195])
            ("org-latex-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [121214 121735])
            ("org-latex-underline" function (:arguments ("_underline" "contents" "info")) nil [121754 121996])
            ("org-latex-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [122014 122268])
            ("org-latex-verse-block" function (:arguments ("verse-block" "contents" "info")) nil [122289 123088])
            ("org-latex-export-as-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [123132 124338])
            ("org-latex-convert-region-to-latex" function (:user-visible-flag t) nil [124355 124672])
            ("org-latex-export-to-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [124689 125780])
            ("org-latex-export-to-pdf" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [125797 126979])
            ("org-latex-compile" function (:arguments ("texfile" "snippet")) nil [126981 129237])
            ("org-latex--collect-warnings" function (:arguments ("buffer")) nil [129239 129961])
            ("org-latex-publish-to-latex" function (:arguments ("plist" "filename" "pub-dir")) nil [129978 130305])
            ("org-latex-publish-to-pdf" function (:arguments ("plist" "filename" "pub-dir")) nil [130322 130890])
            ("ox-latex" package nil nil [130893 130912]))          
      :file "ox-latex.el"
      :pointmax 131015
      :fsize 131014
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1924 1941])
            ("org" include nil nil [1942 1956])
            ("org-macs" include nil nil [1957 1976])
            ("declare-function" code nil nil [1978 2103])
            ("declare-function" code nil nil [2104 2172])
            ("declare-function" code nil nil [2173 2251])
            ("declare-function" code nil nil [2252 2330])
            ("declare-function" code nil nil [2331 2409])
            ("declare-function" code nil nil [2410 2488])
            ("declare-function" code nil nil [2489 2567])
            ("declare-function" code nil nil [2568 2646])
            ("declare-function" code nil nil [2647 2715])
            ("declare-function" code nil nil [2716 2794])
            ("declare-function" code nil nil [2795 2873])
            ("declare-function" code nil nil [2874 2952])
            ("declare-function" code nil nil [2953 3021])
            ("declare-function" code nil nil [3022 3100])
            ("declare-function" code nil nil [3101 3179])
            ("declare-function" code nil nil [3180 3258])
            ("declare-function" code nil nil [3259 3325])
            ("declare-function" code nil nil [3327 3390])
            ("declare-function" code nil nil [3391 3492])
            ("declare-function" code nil nil [3493 3558])
            ("declare-function" code nil nil [3559 3637])
            ("declare-function" code nil nil [3638 3711])
            ("declare-function" code nil nil [3712 3799])
            ("declare-function" code nil nil [3800 3861])
            ("declare-function" code nil nil [3862 3929])
            ("declare-function" code nil nil [3930 4008])
            ("declare-function" code nil nil [4009 4063])
            ("declare-function" code nil nil [4064 4126])
            ("declare-function" code nil nil [4127 4193])
            ("calendar-mode-map" variable nil nil [4195 4221])
            ("org-clock-current-task" variable nil nil [4222 4253])
            ("org-current-tag-alist" variable nil nil [4254 4284])
            ("org-mobile-force-id-on-agenda-items" variable nil nil [4285 4329])
            ("org-habit-show-habits" variable nil nil [4330 4360])
            ("org-habit-show-habits-only-for-today" variable nil nil [4361 4406])
            ("org-habit-show-all-today" variable nil nil [4407 4440])
            ("org-agenda-buffer-name" variable (:default-value "*Org Agenda*") nil [4505 4551])
            ("org-agenda-overriding-header" variable nil nil [4552 4593])
            ("org-agenda-title-append" variable nil nil [4594 4630])
            ("with-no-warnings" code nil nil [4631 4664])
            ("with-no-warnings" code nil nil [4697 4729])
            ("original-date" variable nil nil [4763 4785])
            ("org-agenda-undo-list" variable nil nil [4837 4936])
            ("org-agenda-pending-undo-list" variable nil nil [4937 5054])
            ("org-agenda-confirm-kill" variable (:default-value 1) nil [5056 5454])
            ("org-agenda-compact-blocks" variable nil nil [5456 5698])
            ("org-agenda-block-separator" variable (:default-value 61) nil [5700 6171])
            ("org-agenda-export" customgroup (:user-visible-flag t) nil [6173 6312])
            ("org-agenda-with-colors" variable (:default-value t) nil [6314 6441])
            ("org-agenda-exporter-settings" variable nil nil [6443 6989])
            ("org-agenda-before-write-hook" variable (:default-value (quote (org-agenda-add-entry-text))) nil [6991 7286])
            ("org-agenda-add-entry-text-maxlines" variable nil nil [7288 7922])
            ("org-agenda-add-entry-text-descriptive-links" variable (:default-value t) nil [7924 8265])
            ("org-agenda-export-html-style" variable nil nil [8267 9625])
            ("org-agenda-persistent-filter" variable nil nil [9627 9770])
            ("org-agenda-custom-commands" customgroup (:user-visible-flag t) nil [9772 9919])
            ("org-sorting-choice" variable
               (:constant-flag t
                :default-value (quote (choice (const time-up) (const time-down) (const timestamp-up) (const timestamp-down) (const scheduled-up) (const scheduled-down) (const deadline-up) (const deadline-down) (const ts-up) (const ts-down) (const tsia-up) (const tsia-down) (const category-keep) (const category-up) (const category-down) (const tag-down) (const tag-up) (const priority-up) (const priority-down) (const todo-state-up) (const todo-state-down) (const effort-up) (const effort-down) (const habit-up) (const habit-down) (const alpha-up) (const alpha-down) (const user-defined-up) (const user-defined-down))))
                nil [9921 10612])
            ("defvaralias" code nil nil [10735 10804])
            ("defvaralias" code nil nil [10805 10860])
            ("org-agenda-entry-types" variable (:default-value (quote (:deadline :scheduled :timestamp :sexp))) nil [10862 12738])
            ("org-agenda-custom-commands-local-options" variable
               (:constant-flag t
                :default-value (\` (repeat :tag "Local settings for this command.  Remember to quote values" (choice :tag "Setting" (list :tag "Heading for this block" (const org-agenda-overriding-header) (string :tag "Headline")) (list :tag "Files to be searched" (const org-agenda-files) (list (const :format "" quote) (repeat (file)))) (list :tag "Sorting strategy" (const org-agenda-sorting-strategy) (list (const :format "" quote) (repeat (\, org-sorting-choice)))) (list :tag "Prefix format" (const org-agenda-prefix-format :value "  %-12:c%?-12t% s") (string)) (list :tag "Number of days in agenda" (const org-agenda-span) (choice (const :tag "Day" day) (const :tag "Week" week) (const :tag "Fortnight" fortnight) (const :tag "Month" month) (const :tag "Year" year) (integer :tag "Custom"))) (list :tag "Fixed starting date" (const org-agenda-start-day) (string :value "2007-11-01")) (list :tag "Start on day of week" (const org-agenda-start-on-weekday) (choice :value 1 (const :tag "Today" nil) (integer :tag "Weekday No."))) (list :tag "Include data from diary" (const org-agenda-include-diary) (boolean)) (list :tag "Deadline Warning days" (const org-deadline-warning-days) (integer :value 1)) (list :tag "Category filter preset" (const org-agenda-category-filter-preset) (list (const :format "" quote) (repeat (string :tag "+category or -category")))) (list :tag "Tags filter preset" (const org-agenda-tag-filter-preset) (list (const :format "" quote) (repeat (string :tag "+tag or -tag")))) (list :tag "Effort filter preset" (const org-agenda-effort-filter-preset) (list (const :format "" quote) (repeat (string :tag "+=10 or -=10 or +<10 or ->10")))) (list :tag "Regexp filter preset" (const org-agenda-regexp-filter-preset) (list (const :format "" quote) (repeat (string :tag "+regexp or -regexp")))) (list :tag "Set daily/weekly entry types" (const org-agenda-entry-types) (list (const :format "" quote) (set :greedy t :value (\, org-agenda-entry-types) (const :deadline) (const :scheduled) (const :deadline*) (const :scheduled*) (const :timestamp) (const :sexp)))) (list :tag "Standard skipping condition" :value (org-agenda-skip-function (quote (org-agenda-skip-entry-if))) (const org-agenda-skip-function) (list (const :format "" quote) (list (choice :tag "Skipping range" (const :tag "Skip entry" org-agenda-skip-entry-if) (const :tag "Skip subtree" org-agenda-skip-subtree-if)) (repeat :inline t :tag "Conditions for skipping" (choice :tag "Condition type" (list :tag "Regexp matches" :inline t (const :format "" (quote regexp)) (regexp)) (list :tag "Regexp does not match" :inline t (const :format "" (quote notregexp)) (regexp)) (list :tag "TODO state is" :inline t (const (quote todo)) (choice (const :tag "Any not-done state" (quote todo)) (const :tag "Any done state" (quote done)) (const :tag "Any state" (quote any)) (list :tag "Keyword list" (const :format "" quote) (repeat (string :tag "Keyword"))))) (list :tag "TODO state is not" :inline t (const (quote nottodo)) (choice (const :tag "Any not-done state" (quote todo)) (const :tag "Any done state" (quote done)) (const :tag "Any state" (quote any)) (list :tag "Keyword list" (const :format "" quote) (repeat (string :tag "Keyword"))))) (const :tag "scheduled" (quote scheduled)) (const :tag "not scheduled" (quote notscheduled)) (const :tag "deadline" (quote deadline)) (const :tag "no deadline" (quote notdeadline)) (const :tag "timestamp" (quote timestamp)) (const :tag "no timestamp" (quote nottimestamp))))))) (list :tag "Non-standard skipping condition" :value (org-agenda-skip-function) (const org-agenda-skip-function) (sexp :tag "Function or form (quoted!)")) (list :tag "Any variable" (variable :tag "Variable") (sexp :tag "Value (sexp)"))))))
                nil [12740 17209])
            ("org-agenda-custom-commands" variable (:default-value (quote (("n" "Agenda and all TODOs" ((agenda "") (alltodo "")))))) nil [17212 23333])
            ("org-agenda-query-register" variable (:default-value 111) nil [23335 23605])
            ("org-stuck-projects" variable (:default-value (quote ("+LEVEL=2/-DONE" ("TODO" "NEXT" "NEXTACTION") nil ""))) nil [23607 25559])
            ("org-agenda-skip" customgroup (:user-visible-flag t) nil [25561 25692])
            ("org-agenda-skip-function-global" variable nil nil [25694 26464])
            ("org-agenda-daily/weekly" customgroup (:user-visible-flag t) nil [26466 26606])
            ("org-agenda-todo-list" customgroup (:user-visible-flag t) nil [26607 26750])
            ("org-agenda-match-view" customgroup (:user-visible-flag t) nil [26751 26912])
            ("org-agenda-search-view" customgroup (:user-visible-flag t) nil [26913 27050])
            ("org-agenda-archives-mode" variable nil nil [27052 27387])
            ("org-agenda-restriction-lock-highlight-subtree" variable (:default-value t) nil [27389 27697])
            ("org-agenda-skip-comment-trees" variable (:default-value t) nil [27699 27910])
            ("org-agenda-todo-list-sublevels" variable (:default-value t) nil [27912 28214])
            ("org-agenda-todo-ignore-with-date" variable nil nil [28216 28777])
            ("org-agenda-todo-ignore-timestamp" variable nil nil [28779 30428])
            ("org-agenda-todo-ignore-scheduled" variable nil nil [30430 31796])
            ("org-agenda-todo-ignore-deadlines" variable nil nil [31798 33549])
            ("org-agenda-todo-ignore-time-comparison-use-seconds" variable nil nil [33551 34233])
            ("org-agenda-tags-todo-honor-ignore-options" variable nil nil [34235 34892])
            ("org-agenda-skip-scheduled-if-done" variable nil nil [34894 35317])
            ("org-agenda-skip-scheduled-if-deadline-is-shown" variable nil nil [35319 36287])
            ("org-agenda-skip-timestamp-if-deadline-is-shown" variable nil nil [36289 36911])
            ("org-agenda-skip-deadline-if-done" variable nil nil [36913 37384])
            ("org-agenda-skip-deadline-prewarning-if-scheduled" variable nil nil [37386 38525])
            ("org-agenda-skip-scheduled-delay-if-deadline" variable nil nil [38527 39312])
            ("org-agenda-skip-additional-timestamps-same-entry" variable nil nil [39314 39621])
            ("org-agenda-skip-timestamp-if-done" variable nil nil [39623 39823])
            ("org-agenda-dim-blocked-tasks" variable (:default-value t) nil [39825 40894])
            ("org-timeline-show-empty-dates" variable (:default-value 3) nil [40896 41399])
            ("org-agenda-startup" customgroup (:user-visible-flag t) nil [41401 41550])
            ("org-agenda-menu-show-matcher" variable (:default-value t) nil [41552 41997])
            ("org-agenda-menu-two-columns" variable nil nil [41999 42257])
            ("org-agenda-finalize-hook" variable nil nil [42259 42632])
            ("org-agenda-mouse-1-follows-link" variable nil nil [42634 42884])
            ("org-agenda-start-with-follow-mode" variable nil nil [42886 43052])
            ("org-agenda-follow-indirect" variable nil nil [43054 43257])
            ("org-agenda-show-outline-path" variable (:default-value t) nil [43259 43415])
            ("org-agenda-start-with-entry-text-mode" variable nil nil [43417 43591])
            ("org-agenda-entry-text-maxlines" variable (:default-value 5) nil [43593 43912])
            ("org-agenda-entry-text-exclude-regexps" variable nil nil [43914 44198])
            ("org-agenda-entry-text-leaders" variable (:default-value "    > ") nil [44200 44395])
            ("org-agenda-entry-text-cleanup-hook" variable nil nil [44397 44833])
            ("org-agenda-include-inactive-timestamps" variable nil nil [44835 44977])
            ("org-agenda-windows" customgroup (:user-visible-flag t) nil [44979 45128])
            ("org-agenda-window-setup" variable (:default-value (quote reorganize-frame)) nil [45130 45967])
            ("org-agenda-window-frame-fractions" variable (:default-value (quote (0.5 . 0.75))) nil [45969 46343])
            ("org-agenda-restore-windows-after-quit" variable nil nil [46345 46798])
            ("org-agenda-span" variable (:default-value (quote week)) nil [46800 47226])
            ("org-agenda-start-on-weekday" variable (:default-value 1) nil [47228 47594])
            ("org-agenda-show-all-dates" variable (:default-value t) nil [47596 47819])
            ("org-agenda-format-date" variable (:default-value (quote org-agenda-format-date-aligned)) nil [47821 48326])
            ("org-agenda-format-date-aligned" function (:arguments ("date")) nil [48328 49114])
            ("org-agenda-time-leading-zero" variable nil nil [49116 49352])
            ("org-agenda-timegrid-use-ampm" variable nil nil [49354 49513])
            ("org-agenda-time-of-day-to-ampm" function (:arguments ("time")) nil [49515 50074])
            ("org-agenda-time-of-day-to-ampm-maybe" function (:arguments ("time")) nil [50076 50304])
            ("org-agenda-weekend-days" variable (:default-value (quote (6 0))) nil [50306 50754])
            ("org-agenda-move-date-from-past-immediately-to-today" variable (:default-value t) nil [50756 51187])
            ("org-agenda-include-diary" variable nil nil [51189 51421])
            ("org-agenda-include-deadlines" variable (:default-value t) nil [51423 51666])
            ("org-agenda-repeating-timestamp-show-all" variable (:default-value t) nil [51668 52222])
            ("org-scheduled-past-days" variable (:default-value 10000) nil [52224 52544])
            ("org-agenda-log-mode-items" variable (:default-value (quote (closed clock))) nil [52546 53181])
            ("org-agenda-clock-consistency-checks" variable (:default-value (quote (:max-duration "10:00" :min-duration 0 :max-gap "0:05" :gap-ok-around ("4:00") :default-face ((:background "DarkRed") (:foreground "white")) :overlap-face nil :gap-face nil :no-end-time-face nil :long-face nil :short-face nil))) nil [53183 55234])
            ("org-agenda-log-mode-add-notes" variable (:default-value t) nil [55236 55561])
            ("org-agenda-start-with-log-mode" variable nil nil [55563 56247])
            ("org-agenda-start-with-clockreport-mode" variable nil nil [56249 56459])
            ("org-agenda-clockreport-parameter-plist" variable (:default-value (quote (:link t :maxlevel 2))) nil [56461 57024])
            ("org-agenda-search-view-always-boolean" variable nil nil [57026 58280])
            ("defvaralias" code nil nil [58282 58378])
            ("org-agenda-search-view-force-full-words" variable nil nil [58380 58616])
            ("org-agenda-search-view-max-outline-level" variable nil nil [58618 58985])
            ("org-agenda-time-grid" customgroup (:user-visible-flag t) nil [58987 59129])
            ("org-agenda-search-headline-for-time" variable (:default-value t) nil [59131 59651])
            ("org-agenda-use-time-grid" variable (:default-value t) nil [59653 60094])
            ("org-agenda-time-grid" variable (:default-value (quote ((daily today require-timed) "----------------" (800 1000 1200 1400 1600 1800 2000)))) nil [60096 61402])
            ("org-agenda-show-current-time-in-grid" variable (:default-value t) nil [61404 61578])
            ("org-agenda-current-time-string" variable (:default-value "now - - - - - - - - - - - - - - - - - - - - - - - - -") nil [61580 61803])
            ("org-agenda-sorting" customgroup (:user-visible-flag t) nil [61805 61937])
            ("org-agenda-sorting-strategy" variable (:default-value (quote ((agenda habit-down time-up priority-down category-keep) (todo priority-down category-keep) (tags priority-down category-keep) (search category-keep)))) nil [61939 65669])
            ("org-agenda-cmp-user-defined" variable nil nil [65671 66094])
            ("org-sort-agenda-notime-is-late" variable (:default-value t) nil [66096 66568])
            ("org-sort-agenda-noeffort-is-high" variable (:default-value t) nil [66570 66961])
            ("org-agenda-line-format" customgroup (:user-visible-flag t) nil [66963 67120])
            ("org-agenda-prefix-format" variable (:default-value (quote ((agenda . " %i %-12:c%?-12t% s") (timeline . "  % s") (todo . " %i %-12:c") (tags . " %i %-12:c") (search . " %i %-12:c")))) nil [67122 70245])
            ("org-prefix-format-compiled" variable nil nil [70247 70510])
            ("org-agenda-todo-keyword-format" variable (:default-value "%-1s") nil [70512 70773])
            ("org-agenda-diary-sexp-prefix" variable nil nil [70775 71144])
            ("org-agenda-timerange-leaders" variable (:default-value (quote ("" "(%d/%d): "))) nil [71146 71743])
            ("org-agenda-scheduled-leaders" variable (:default-value (quote ("Scheduled: " "Sched.%2dx: "))) nil [71745 72473])
            ("org-agenda-inactive-leader" variable (:default-value "[") nil [72475 72715])
            ("org-agenda-deadline-leaders" variable (:default-value (quote ("Deadline:  " "In %3d d.: " "%2d d. ago: "))) nil [72717 73347])
            ("org-agenda-remove-times-when-in-prefix" variable (:default-value t) nil [73349 74184])
            ("org-agenda-remove-timeranges-from-blocks" variable nil nil [74186 74405])
            ("org-agenda-default-appointment-duration" variable nil nil [74407 74771])
            ("org-agenda-show-inherited-tags" variable (:default-value t) nil [74773 75739])
            ("org-agenda-use-tag-inheritance" variable (:default-value (quote (todo search timeline agenda))) nil [75741 76715])
            ("org-agenda-hide-tags-regexp" variable nil nil [76717 77116])
            ("org-agenda-remove-tags" variable nil nil [77118 77500])
            ("defvaralias" code nil nil [77502 77580])
            ("org-agenda-tags-column" variable (:default-value -80) nil [77582 77913])
            ("defvaralias" code nil nil [77915 77985])
            ("org-agenda-fontify-priorities" variable (:default-value (quote cookies)) nil [77987 79071])
            ("org-agenda-day-face-function" variable nil nil [79073 79440])
            ("org-agenda-category-icon-alist" variable nil nil [79442 80739])
            ("org-agenda-column-view" customgroup (:user-visible-flag t) nil [80741 80881])
            ("org-agenda-view-columns-initially" variable nil nil [80883 81127])
            ("org-agenda-columns-show-summaries" variable (:default-value t) nil [81129 81301])
            ("org-agenda-columns-compute-summary-properties" variable (:default-value t) nil [81303 81826])
            ("org-agenda-columns-add-appointments-to-effort-sum" variable nil nil [81828 82325])
            ("org-agenda-auto-exclude-function" variable nil nil [82327 82976])
            ("org-agenda-bulk-custom-functions" variable nil nil [82978 83479])
            ("org-agenda-with-point-at-orig-entry" function (:arguments ("string" "body")) nil [83481 84032])
            ("def-edebug-spec" code nil nil [84033 84098])
            ("org-add-agenda-custom-command" function (:arguments ("entry")) nil [84100 84502])
            ("org-agenda-mode-map" variable (:default-value (make-sparse-keymap)) nil [84536 84619])
            ("defvaralias" code nil nil [84620 84673])
            ("org-agenda-menu" variable nil nil [84675 84699])
            ("org-agenda-restrict" variable nil nil [84730 84762])
            ("org-agenda-follow-mode" variable nil nil [84793 84828])
            ("org-agenda-entry-text-mode" variable nil nil [84829 84868])
            ("org-agenda-clockreport-mode" variable nil nil [84869 84909])
            ("org-agenda-show-log" variable nil nil [84910 84942])
            ("org-agenda-redo-command" variable nil nil [84943 84979])
            ("org-agenda-query-string" variable nil nil [84980 85016])
            ("org-agenda-mode-hook" variable nil nil [85017 85156])
            ("org-agenda-type" variable nil nil [85157 85185])
            ("org-agenda-force-single-file" variable nil nil [85186 85227])
            ("org-agenda-bulk-marked-entries" variable nil nil [85228 85335])
            ("org-agenda-current-date" variable nil nil [85336 85414])
            ("org-agenda-sticky" variable nil nil [85453 85728])
            ("org-toggle-sticky-agenda" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85747 86357])
            ("org-agenda-buffer" variable nil nil [86359 86434])
            ("org-agenda-last-prefix-arg" variable nil nil [86436 86475])
            ("org-agenda-this-buffer-name" variable nil nil [86476 86516])
            ("org-agenda-doing-sticky-redo" variable nil nil [86517 86558])
            ("org-agenda-this-buffer-is-sticky" variable nil nil [86559 86604])
            ("org-agenda-last-indirect-buffer" variable nil nil [86605 86713])
            ("org-agenda-local-vars" variable
               (:constant-flag t
                :default-value (quote (org-agenda-this-buffer-name org-agenda-undo-list org-agenda-pending-undo-list org-agenda-follow-mode org-agenda-entry-text-mode org-agenda-clockreport-mode org-agenda-show-log org-agenda-redo-command org-agenda-query-string org-agenda-type org-agenda-bulk-marked-entries org-agenda-undo-has-started-in org-agenda-info org-agenda-pre-window-conf org-agenda-columns-active org-agenda-tag-filter org-agenda-category-filter org-agenda-top-headline-filter org-agenda-regexp-filter org-agenda-effort-filter org-agenda-markers org-agenda-last-search-view-search-was-boolean org-agenda-last-indirect-buffer org-agenda-filtered-by-category org-agenda-filter-form org-agenda-cycle-counter org-agenda-last-prefix-arg)))
                nil [86715 87640])
            ("org-agenda-mode" function (:user-visible-flag t) nil [87642 90369])
            ("substitute-key-definition" code nil nil [90371 90458])
            ("org-defkey" code nil nil [90459 90519])
            ("org-defkey" code nil nil [90520 90580])
            ("org-defkey" code nil nil [90581 90646])
            ("org-defkey" code nil nil [90647 90707])
            ("org-defkey" code nil nil [90708 90770])
            ("org-defkey" code nil nil [90771 90847])
            ("org-defkey" code nil nil [90848 90923])
            ("org-defkey" code nil nil [90924 90989])
            ("org-defkey" code nil nil [90990 91057])
            ("org-defkey" code nil nil [91058 91127])
            ("org-defkey" code nil nil [91128 91199])
            ("org-defkey" code nil nil [91200 91273])
            ("org-defkey" code nil nil [91274 91346])
            ("org-defkey" code nil nil [91347 91414])
            ("org-defkey" code nil nil [91415 91486])
            ("org-defkey" code nil nil [91487 91554])
            ("org-defkey" code nil nil [91555 91618])
            ("org-defkey" code nil nil [91619 91688])
            ("org-defkey" code nil nil [91689 91745])
            ("org-defkey" code nil nil [91746 91821])
            ("org-defkey" code nil nil [91822 91900])
            ("org-defkey" code nil nil [91901 91987])
            ("org-defkey" code nil nil [91988 92055])
            ("org-defkey" code nil nil [92056 92123])
            ("org-defkey" code nil nil [92124 92187])
            ("org-defkey" code nil nil [92188 92253])
            ("org-defkey" code nil nil [92254 92328])
            ("org-defkey" code nil nil [92329 92402])
            ("org-defkey" code nil nil [92403 92469])
            ("org-defkey" code nil nil [92470 92551])
            ("org-defkey" code nil nil [92552 92637])
            ("org-defkey" code nil nil [92638 92718])
            ("org-defkey" code nil nil [92719 92784])
            ("org-defkey" code nil nil [92785 92849])
            ("org-defkey" code nil nil [92850 92910])
            ("org-defkey" code nil nil [92911 92971])
            ("org-defkey" code nil nil [92972 93061])
            ("org-defkey" code nil nil [93062 93126])
            ("org-defkey" code nil nil [93127 93191])
            ("org-defkey" code nil nil [93192 93258])
            ("org-defkey" code nil nil [93259 93324])
            ("org-defkey" code nil nil [93325 93389])
            ("org-defkey" code nil nil [93390 93455])
            ("org-defkey" code nil nil [93456 93521])
            ("org-defkey" code nil nil [93522 93586])
            ("org-defkey" code nil nil [93587 93651])
            ("org-defkey" code nil nil [93652 93726])
            ("org-defkey" code nil nil [93727 93802])
            ("org-defkey" code nil nil [93803 93883])
            ("org-defkey" code nil nil [93884 93965])
            ("org-defkey" code nil nil [93967 94027])
            ("org-defkey" code nil nil [94028 94092])
            ("org-defkey" code nil nil [94093 94157])
            ("let" code nil nil [94158 94286])
            ("org-defkey" code nil nil [94288 94348])
            ("org-defkey" code nil nil [94349 94414])
            ("org-defkey" code nil nil [94415 94479])
            ("org-defkey" code nil nil [94480 94537])
            ("org-defkey" code nil nil [94538 94605])
            ("org-defkey" code nil nil [94606 94667])
            ("org-defkey" code nil nil [94668 94733])
            ("org-defkey" code nil nil [94734 94799])
            ("org-defkey" code nil nil [94800 94853])
            ("org-defkey" code nil nil [94854 94936])
            ("org-defkey" code nil nil [94937 94996])
            ("org-defkey" code nil nil [94997 95064])
            ("org-defkey" code nil nil [95065 95151])
            ("org-defkey" code nil nil [95152 95221])
            ("org-defkey" code nil nil [95222 95275])
            ("org-defkey" code nil nil [95276 95329])
            ("org-defkey" code nil nil [95330 95383])
            ("org-defkey" code nil nil [95384 95445])
            ("org-defkey" code nil nil [95446 95515])
            ("org-defkey" code nil nil [95516 95578])
            ("org-defkey" code nil nil [95579 95637])
            ("org-defkey" code nil nil [95638 95696])
            ("org-defkey" code nil nil [95697 95759])
            ("org-defkey" code nil nil [95760 95818])
            ("org-defkey" code nil nil [95819 95881])
            ("substitute-key-definition" code nil nil [95882 95979])
            ("substitute-key-definition" code nil nil [95980 96085])
            ("org-defkey" code nil nil [96086 96141])
            ("org-defkey" code nil nil [96142 96212])
            ("org-defkey" code nil nil [96213 96287])
            ("org-defkey" code nil nil [96288 96349])
            ("org-defkey" code nil nil [96350 96407])
            ("org-defkey" code nil nil [96408 96468])
            ("org-defkey" code nil nil [96469 96531])
            ("org-defkey" code nil nil [96532 96593])
            ("org-defkey" code nil nil [96594 96657])
            ("org-defkey" code nil nil [96658 96721])
            ("org-defkey" code nil nil [96722 96779])
            ("org-defkey" code nil nil [96780 96837])
            ("org-defkey" code nil nil [96838 96906])
            ("org-defkey" code nil nil [96907 96964])
            ("org-defkey" code nil nil [96965 97034])
            ("org-defkey" code nil nil [97035 97093])
            ("org-defkey" code nil nil [97094 97166])
            ("org-defkey" code nil nil [97167 97228])
            ("org-defkey" code nil nil [97229 97292])
            ("org-defkey" code nil nil [97293 97352])
            ("org-defkey" code nil nil [97353 97413])
            ("org-defkey" code nil nil [97414 97476])
            ("org-defkey" code nil nil [97477 97546])
            ("org-defkey" code nil nil [97547 97620])
            ("org-defkey" code nil nil [97621 97696])
            ("org-defkey" code nil nil [97697 97776])
            ("org-defkey" code nil nil [97777 97831])
            ("org-defkey" code nil nil [97832 97888])
            ("org-defkey" code nil nil [97889 97956])
            ("org-defkey" code nil nil [97957 98037])
            ("org-defkey" code nil nil [98039 98108])
            ("org-defkey" code nil nil [98109 98183])
            ("org-defkey" code nil nil [98184 98256])
            ("org-defkey" code nil nil [98257 98334])
            ("org-defkey" code nil nil [98335 98397])
            ("org-defkey" code nil nil [98398 98463])
            ("org-defkey" code nil nil [98464 98529])
            ("org-defkey" code nil nil [98530 98596])
            ("org-defkey" code nil nil [98597 98665])
            ("org-defkey" code nil nil [98666 98733])
            ("org-defkey" code nil nil [98734 98805])
            ("org-defkey" code nil nil [98806 98863])
            ("define-key" code nil nil [98864 98935])
            ("org-defkey" code nil nil [98936 99004])
            ("org-defkey" code nil nil [99005 99073])
            ("org-defkey" code nil nil [99075 99140])
            ("org-defkey" code nil nil [99141 99206])
            ("define-key" code nil nil [99208 99292])
            ("define-key" code nil nil [99293 99379])
            ("when" code nil nil [99381 99480])
            ("easy-menu-define" code nil nil [99481 106737])
            ("org-agenda-allow-remote-undo" variable (:default-value t) nil [106756 106855])
            ("org-agenda-undo-has-started-in" variable nil nil [106856 106977])
            ("org-agenda-undo" function (:user-visible-flag t) nil [106979 108298])
            ("org-verify-change-for-undo" function (:arguments ("l1" "l2")) nil [108300 108544])
            ("org-agenda-restrict-begin" variable (:default-value (make-marker)) nil [108567 108615])
            ("org-agenda-restrict-end" variable (:default-value (make-marker)) nil [108616 108662])
            ("org-agenda-last-dispatch-buffer" variable nil nil [108663 108707])
            ("org-agenda-overriding-restriction" variable nil nil [108708 108754])
            ("org-agenda-custom-commands-contexts" variable nil nil [108756 110558])
            ("org-agenda-max-entries" variable nil nil [110560 111148])
            ("org-agenda-max-todos" variable nil nil [111150 111730])
            ("org-agenda-max-tags" variable nil nil [111732 112338])
            ("org-agenda-max-effort" variable nil nil [112340 112960])
            ("org-agenda-keep-restricted-file-list" variable nil nil [112962 113011])
            ("org-keys" variable nil nil [113012 113033])
            ("org-match" variable nil nil [113034 113056])
            ("org-agenda" function
               (:user-visible-flag t
                :arguments ("arg" "org-keys" "restriction"))
                nil [113072 121197])
            ("org-agenda-multi" variable nil nil [121199 121224])
            ("org-agenda-append-agenda" function (:user-visible-flag t) nil [121226 121708])
            ("org-agenda-normalize-custom-commands" function (:arguments ("cmds")) nil [121710 121999])
            ("org-agenda-get-restriction-and-command" function (:arguments ("prefix-descriptions")) nil [122001 128614])
            ("org-agenda-fit-window-to-buffer" function nil nil [128616 129114])
            ("org-cmd" variable nil nil [129116 129136])
            ("org-agenda-overriding-cmd" variable nil nil [129137 129175])
            ("org-agenda-overriding-arguments" variable nil nil [129176 129220])
            ("org-agenda-overriding-cmd-arguments" variable nil nil [129221 129269])
            ("org-agenda-run-series" function (:arguments ("name" "series")) nil [129270 131323])
            ("org-batch-agenda" function (:arguments ("cmd-key" "parameters")) nil [131340 132004])
            ("org-agenda-info" variable nil nil [132006 132034])
            ("org-batch-agenda-csv" function (:arguments ("cmd-key" "parameters")) nil [132051 134501])
            ("org-fix-agenda-info" function (:arguments ("props")) nil [134503 135947])
            ("org-agenda-export-csv-mapper" function (:arguments ("prop")) nil [135949 136199])
            ("org-store-agenda-views" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [136216 136351])
            ("org-batch-store-agenda-views" function (:arguments ("parameters")) nil [136368 137659])
            ("org-agenda-current-span" variable nil nil [137661 137743])
            ("org-agenda-mark-header-line" function (:arguments ("pos")) nil [137782 138157])
            ("org-mobile-creating-agendas" variable nil nil [138159 138195])
            ("org-agenda-write-buffer-name" variable (:default-value "Agenda View") nil [138223 138274])
            ("org-agenda-write" function
               (:user-visible-flag t
                :arguments ("file" "open" "nosettings" "agenda-bufname"))
                nil [138275 142161])
            ("org-agenda-remove-marked-text" function (:arguments ("property" "value")) nil [142163 142531])
            ("org-agenda-add-entry-text" function nil nil [142533 143286])
            ("org-agenda-get-some-entry-text" function (:arguments ("marker" "n-lines" "indent" "keep")) nil [143288 146365])
            ("org-check-for-org-mode" function nil nil [146367 146577])
            ("org-agenda-multi" variable nil nil [146612 146641])
            ("org-agenda-pre-window-conf" variable nil nil [146664 146703])
            ("org-agenda-columns-active" variable nil nil [146704 146742])
            ("org-agenda-name" variable nil nil [146743 146771])
            ("org-agenda-tag-filter" variable nil nil [146772 146806])
            ("org-agenda-category-filter" variable nil nil [146807 146846])
            ("org-agenda-regexp-filter" variable nil nil [146847 146884])
            ("org-agenda-effort-filter" variable nil nil [146885 146922])
            ("org-agenda-top-headline-filter" variable nil nil [146923 146966])
            ("org-agenda-tag-filter-preset" variable nil nil [146967 147531])
            ("org-agenda-category-filter-preset" variable nil nil [147533 148111])
            ("org-agenda-regexp-filter-preset" variable nil nil [148113 148685])
            ("org-agenda-effort-filter-preset" variable nil nil [148687 149262])
            ("org-agenda-use-sticky-p" function nil nil [149264 150005])
            ("org-agenda-prepare-window" function (:arguments ("abuf" "filter-alist")) nil [150007 151487])
            ("org-agenda-prepare" function (:arguments ("name")) nil [151489 154091])
            ("org-agenda-overriding-columns-format" variable nil nil [154093 154138])
            ("org-agenda-finalize" function nil nil [154162 157602])
            ("org-agenda-mark-clocking-task" function nil nil [157604 158482])
            ("org-agenda-unmark-clocking-task" function nil nil [158484 158707])
            ("org-agenda-fontify-priorities" function (:user-visible-flag t) nil [158709 159971])
            ("org-depend-tag-blocked" variable nil nil [159973 160004])
            ("org-agenda-dim-blocked-tasks" function
               (:user-visible-flag t
                :arguments ("invisible"))
                nil [160006 161652])
            ("org-agenda-skip-function" variable nil nil [161654 162386])
            ("org-agenda-skip" function nil nil [162388 163114])
            ("org-agenda-skip-eval" function (:arguments ("form")) nil [163116 163565])
            ("org-agenda-markers" variable nil nil [163567 163664])
            ("org-agenda-last-marker-time" variable (:default-value (float-time)) nil [163665 163759])
            ("org-agenda-new-marker" function (:arguments ("pos")) nil [163761 164205])
            ("org-agenda-reset-markers" function nil nil [164207 164361])
            ("org-agenda-save-markers-for-cut-and-paste" function (:arguments ("beg" "end")) nil [164363 164734])
            ("org-agenda-entry-text-show-here" function nil nil [164757 165410])
            ("org-agenda-entry-text-show" function (:user-visible-flag t) nil [165412 165715])
            ("org-agenda-entry-text-hide" function nil nil [165717 165978])
            ("org-agenda-get-day-face" function (:arguments ("date")) nil [165980 166341])
            ("org-agenda-only-exact-dates" variable nil nil [166364 166404])
            ("org-agenda-show-log-scoped" variable nil nil [166426 166461])
            ("org-timeline" function
               (:user-visible-flag t
                :arguments ("dotodo"))
                nil [166523 170129])
            ("org-get-all-dates" function (:arguments ("beg" "end" "no-ranges" "force-today" "inactive" "empty" "pre-re")) nil [170131 171968])
            ("org-agenda-start-day" variable nil nil [171995 172334])
            ("org-starting-day" variable nil nil [172335 172364])
            ("org-arg-loc" variable nil nil [172403 172427])
            ("org-agenda-buffer-tmp-name" variable nil nil [172446 172485])
            ("org-agenda-list" function
               (:user-visible-flag t
                :arguments ("arg" "start-day" "span" "with-hour"))
                nil [172501 180393])
            ("org-agenda-ndays-to-span" function (:arguments ("n")) nil [180395 180588])
            ("org-agenda-span-to-ndays" function (:arguments ("span" "start-day")) nil [180590 181124])
            ("org-agenda-span-name" function (:arguments ("span")) nil [181126 181300])
            ("org-agenda-search-history" variable nil nil [181326 181364])
            ("org-search-syntax-table" variable nil nil [181366 181584])
            ("org-mode-syntax-table" variable nil nil [181586 181616])
            ("org-search-syntax-table" function nil nil [181631 181917])
            ("org-agenda-last-search-view-search-was-boolean" variable nil nil [181919 181978])
            ("org-search-view" function
               (:user-visible-flag t
                :arguments ("todo-only" "string" "edit-at"))
                nil [181995 193382])
            ("org-agenda-propertize-selected-todo-keywords" function (:arguments ("keywords")) nil [193406 193783])
            ("org-select-this-todo-keyword" variable nil nil [193785 193826])
            ("org-last-arg" variable nil nil [193827 193852])
            ("org-todo-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193869 197219])
            ("org-tags-view" function
               (:user-visible-flag t
                :arguments ("todo-only" "match"))
                nil [197259 200837])
            ("org-agenda-skip-regexp" variable nil nil [200874 201111])
            ("org-agenda-overriding-header" variable nil nil [201113 201327])
            ("org-agenda-skip-entry-when-regexp-matches" function nil nil [201329 201860])
            ("org-agenda-skip-subtree-when-regexp-matches" function nil nil [201862 202358])
            ("org-agenda-skip-entry-when-regexp-matches-in-subtree" function nil nil [202360 203064])
            ("org-agenda-skip-entry-if" function (:arguments ("conditions")) nil [203066 203238])
            ("org-agenda-skip-subtree-if" function (:arguments ("conditions")) nil [203240 203414])
            ("org-agenda-skip-if" function (:arguments ("subtree" "conditions")) nil [203416 206376])
            ("org-agenda-skip-if-todo" function (:arguments ("args" "end")) nil [206378 207816])
            ("org-agenda-list-stuck-projects" function
               (:user-visible-flag t
                :arguments ("ignore"))
                nil [207833 209641])
            ("org-disable-agenda-to-diary" variable nil nil [209666 209706])
            ("diary-list-entries-hook" variable nil nil [209743 209775])
            ("diary-time-regexp" variable nil nil [209776 209802])
            ("org-get-entries-from-diary" function (:arguments ("date")) nil [209803 211717])
            ("org-agenda-cleanup-fancy-diary-hook" variable nil nil [211719 211823])
            ("org-agenda-cleanup-fancy-diary" function nil nil [211825 212699])
            ("eval-after-load" code nil nil [212769 213256])
            ("org-modify-diary-entry-string" function (:arguments ("string")) nil [213258 213648])
            ("org-diary-default-entry" function nil nil [213650 214048])
            ("org-add-to-diary-list" function (:arguments ("args")) nil [214050 214202])
            ("org-diary-last-run-time" variable nil nil [214204 214240])
            ("org-diary" function (:arguments ("args")) nil [214257 216619])
            ("org-agenda--timestamp-to-absolute" function (:arguments ("args")) nil [216647 217017])
            ("org-agenda-get-day-entries" function (:arguments ("file" "date" "args")) nil [217019 219606])
            ("org-em" function (:arguments ("x" "y" "list")) nil [219608 219703])
            ("org-heading-keyword-regexp-format" variable nil nil [219705 219747])
            ("org-agenda-sorting-strategy-selected" variable nil nil [219768 219817])
            ("org-agenda-entry-get-agenda-timestamp" function (:arguments ("pom")) nil [219819 221206])
            ("org-agenda-get-todos" function nil nil [221208 224046])
            ("org-agenda-todo-custom-ignore-p" function (:arguments ("time" "n")) nil [224048 224476])
            ("org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item" function (:arguments ("end")) nil [224493 227486])
            ("org-agenda-get-timestamps" function (:arguments ("deadlines")) nil [227488 232548])
            ("org-agenda-get-sexps" function nil nil [232550 234683])
            ("org-anniversary" function (:arguments ("year" "month" "day" "mark")) nil [234777 235009])
            ("org-cyclic" function (:arguments ("N" "year" "month" "day" "mark")) nil [235010 235231])
            ("org-block" function (:arguments ("Y1" "M1" "D1" "Y2" "M2" "D2" "mark")) nil [235232 235452])
            ("org-date" function (:arguments ("year" "month" "day" "mark")) nil [235453 235664])
            ("org-class" function (:arguments ("y1" "m1" "d1" "y2" "m2" "d2" "dayname" "skip-weeks")) nil [235701 236802])
            ("defalias" code nil nil [236804 236855])
            ("org-agenda-get-progress" function nil nil [236856 240989])
            ("org-agenda-show-clocking-issues" function (:user-visible-flag t) nil [240991 244190])
            ("org-agenda-check-clock-gap" function (:arguments ("t1" "t2" "ok-list")) nil [244192 245425])
            ("org-agenda-get-deadlines" function (:arguments ("with-hour")) nil [245427 251500])
            ("org-agenda-deadline-face" function (:arguments ("fraction")) nil [251502 251717])
            ("org-agenda-get-scheduled" function (:arguments ("deadlines" "with-hour")) nil [251719 259152])
            ("org-agenda-get-blocks" function nil nil [259154 262221])
            ("org-prefix-has-time" variable nil nil [262260 262406])
            ("org-prefix-has-tag" variable nil nil [262407 262552])
            ("org-prefix-has-effort" variable nil nil [262553 262701])
            ("org-prefix-has-breadcrumbs" variable nil nil [262702 262855])
            ("org-prefix-category-length" variable nil nil [262856 262973])
            ("org-prefix-category-max-length" variable nil nil [262974 263095])
            ("org-agenda-get-category-icon" function (:arguments ("category")) nil [263097 263434])
            ("org-agenda-format-item" function (:arguments ("extra" "txt" "level" "category" "tags" "dotime" "remove-re" "habitp")) nil [263436 270179])
            ("org-agenda-fix-displayed-tags" function (:arguments ("txt" "tags" "add-inherited" "hide-re")) nil [270181 271172])
            ("org-downcase-keep-props" function (:arguments ("s")) nil [271174 271331])
            ("org-agenda-sorting-strategy" variable nil nil [271333 271369])
            ("org-agenda-add-time-grid-maybe" function (:arguments ("list" "ndays" "todayp")) nil [271407 273105])
            ("org-compile-prefix-format" function (:arguments ("key")) nil [273107 275674])
            ("org-set-sorting-strategy" function (:arguments ("key")) nil [275676 276070])
            ("org-get-time-of-day" function (:arguments ("s" "string" "mod24")) nil [276072 277301])
            ("org-agenda-before-sorting-filter-function" variable nil nil [277303 278246])
            ("org-agenda-finalize-entries" function (:arguments ("list" "type")) nil [278248 279689])
            ("org-agenda-limit-entries" function (:arguments ("list" "prop" "limit" "fn")) nil [279691 280193])
            ("org-agenda-limit-interactively" function
               (:user-visible-flag t
                :arguments ("remove"))
                nil [280195 281235])
            ("org-agenda-highlight-todo" function (:arguments ("x")) nil [281237 283038])
            ("org-cmp-values" function (:arguments ("a" "b" "property")) nil [283040 283320])
            ("org-cmp-effort" function (:arguments ("a" "b")) nil [283322 283809])
            ("org-cmp-category" function (:arguments ("a" "b")) nil [283811 284115])
            ("org-cmp-todo-state" function (:arguments ("a" "b")) nil [284117 284998])
            ("org-cmp-alpha" function (:arguments ("a" "b")) nil [285000 285843])
            ("org-cmp-tag" function (:arguments ("a" "b")) nil [285845 286140])
            ("org-cmp-time" function (:arguments ("a" "b")) nil [286142 286437])
            ("org-cmp-ts" function (:arguments ("a" "b" "type")) nil [286439 287092])
            ("org-cmp-habit-p" function (:arguments ("a" "b")) nil [287094 287329])
            ("org-entries-lessp" function (:arguments ("a" "b")) nil [287331 290233])
            ("org-agenda-restriction-lock-overlay" variable (:default-value (make-overlay 1 1)) nil [290264 290401])
            ("overlay-put" code nil nil [290402 290492])
            ("overlay-put" code nil nil [290493 290608])
            ("delete-overlay" code nil nil [290609 290661])
            ("org-agenda-set-restriction-lock" function
               (:user-visible-flag t
                :arguments ("type"))
                nil [290678 292317])
            ("org-agenda-remove-restriction-lock" function
               (:user-visible-flag t
                :arguments ("noupdate"))
                nil [292319 292886])
            ("org-agenda-maybe-redo" function nil nil [292888 293386])
            ("org-agenda-check-type" function (:arguments ("error" "types")) nil [293409 293840])
            ("org-agenda-Quit" function (:user-visible-flag t) nil [293842 294039])
            ("org-agenda-quit" function (:user-visible-flag t) nil [294041 294399])
            ("org-agenda--quit" function (:arguments ("bury")) nil [294401 295671])
            ("org-agenda-exit" function (:user-visible-flag t) nil [295673 296133])
            ("org-agenda-kill-all-agenda-buffers" function (:user-visible-flag t) nil [296135 296451])
            ("org-agenda-execute" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [296453 296723])
            ("org-agenda-redo" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [296725 299808])
            ("org-global-tags-completion-table" variable nil nil [299810 299855])
            ("org-agenda-filter-form" variable nil nil [299856 299891])
            ("org-agenda-filtered-by-category" variable nil nil [299892 299936])
            ("org-agenda-filter-by-category" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [299938 300740])
            ("org-find-top-headline" function (:arguments ("pos")) nil [300742 301111])
            ("org-agenda-filtered-by-top-headline" variable nil nil [301113 301161])
            ("org-agenda-filter-by-top-headline" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [301162 301744])
            ("org-agenda-regexp-filter" variable nil nil [301746 301783])
            ("org-agenda-filter-by-regexp" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [301784 302522])
            ("org-agenda-effort-filter" variable nil nil [302524 302561])
            ("org-agenda-filter-by-effort" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [302562 303856])
            ("org-agenda-filter-remove-all" function (:user-visible-flag t) nil [303858 304361])
            ("org-agenda-filter-by-tag" function
               (:user-visible-flag t
                :arguments ("arg" "char" "exclude"))
                nil [304363 307437])
            ("org-agenda-get-represented-tags" function nil nil [307439 307788])
            ("org-agenda-filter-make-matcher" function (:arguments ("filter" "type" "expand")) nil [307791 309432])
            ("org-agenda-filter-make-matcher-tag-exp" function (:arguments ("tags" "op")) nil [309434 310207])
            ("org-agenda-filter-effort-form" function (:arguments ("e")) nil [310209 310643])
            ("org-agenda-compare-effort" function (:arguments ("op" "value")) nil [310645 310947])
            ("org-agenda-filter-expand-tags" function (:arguments ("filter" "no-operator")) nil [310949 311543])
            ("org-agenda-filter-apply" function (:arguments ("filter" "type" "expand")) nil [311545 312773])
            ("org-agenda-filter-top-headline-apply" function (:arguments ("hl" "negative")) nil [312775 313419])
            ("org-agenda-filter-hide-line" function (:arguments ("type")) nil [313421 313705])
            ("org-agenda-remove-filter" function (:arguments ("type")) nil [313707 314316])
            ("org-agenda-filter-show-all-tag" function nil nil [314318 314394])
            ("org-agenda-filter-show-all-re" function nil nil [314395 314473])
            ("org-agenda-filter-show-all-effort" function nil nil [314474 314556])
            ("org-agenda-filter-show-all-cat" function nil nil [314557 314638])
            ("org-agenda-filter-show-all-top-filter" function nil nil [314639 314731])
            ("org-agenda-manipulate-query-add" function (:user-visible-flag t) nil [314733 314978])
            ("org-agenda-manipulate-query-subtract" function (:user-visible-flag t) nil [314979 315229])
            ("org-agenda-manipulate-query-add-re" function (:user-visible-flag t) nil [315230 315477])
            ("org-agenda-manipulate-query-subtract-re" function (:user-visible-flag t) nil [315478 315730])
            ("org-agenda-manipulate-query" function (:arguments ("char")) nil [315731 316724])
            ("org-add-to-string" function (:arguments ("var" "string")) nil [316726 316811])
            ("org-agenda-goto-date" function
               (:user-visible-flag t
                :arguments ("span"))
                nil [316813 318076])
            ("org-agenda-goto-today" function (:user-visible-flag t) nil [318078 318738])
            ("org-agenda-find-same-or-today-or-agenda" function (:arguments ("cnt")) nil [318740 319164])
            ("org-agenda-backward-block" function (:user-visible-flag t) nil [319166 319296])
            ("org-agenda-forward-block" function
               (:user-visible-flag t
                :arguments ("backward"))
                nil [319298 320342])
            ("org-agenda-later" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [320344 321900])
            ("org-agenda-earlier" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [321902 322091])
            ("org-agenda-view-mode-dispatch" function (:user-visible-flag t) nil [322093 323652])
            ("org-agenda-reset-view" function (:user-visible-flag t) nil [323654 323789])
            ("org-agenda-day-view" function
               (:user-visible-flag t
                :arguments ("day-of-month"))
                nil [323791 324011])
            ("org-agenda-week-view" function
               (:user-visible-flag t
                :arguments ("iso-week"))
                nil [324013 324475])
            ("org-agenda-fortnight-view" function
               (:user-visible-flag t
                :arguments ("iso-week"))
                nil [324477 324954])
            ("org-agenda-month-view" function
               (:user-visible-flag t
                :arguments ("month"))
                nil [324956 325392])
            ("org-agenda-year-view" function
               (:user-visible-flag t
                :arguments ("year"))
                nil [325394 325847])
            ("org-agenda-change-time-span" function (:arguments ("span" "n")) nil [325849 326688])
            ("org-agenda-compute-starting-span" function (:arguments ("sd" "span" "n")) nil [326690 328035])
            ("org-agenda-next-date-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [328037 328531])
            ("org-agenda-previous-date-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [328533 328859])
            ("org-hl" variable (:default-value (make-overlay 1 1)) nil [328889 328923])
            ("overlay-put" code nil nil [328924 328961])
            ("org-highlight" function (:arguments ("begin" "end" "buffer")) nil [328963 329113])
            ("org-unhighlight" function nil nil [329115 329193])
            ("org-unhighlight-once" function nil nil [329195 329379])
            ("org-agenda-pre-follow-window-conf" variable nil nil [329381 329427])
            ("org-agenda-follow-mode" function (:user-visible-flag t) nil [329428 329931])
            ("org-agenda-entry-text-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [329933 330821])
            ("org-agenda-clockreport-mode" function (:user-visible-flag t) nil [330823 331241])
            ("org-agenda-log-mode" function
               (:user-visible-flag t
                :arguments ("special"))
                nil [331243 332020])
            ("org-agenda-archives-mode" function
               (:user-visible-flag t
                :arguments ("with-files"))
                nil [332022 332721])
            ("org-agenda-toggle-diary" function (:user-visible-flag t) nil [332723 333056])
            ("org-agenda-toggle-deadlines" function (:user-visible-flag t) nil [333058 333432])
            ("org-agenda-toggle-time-grid" function (:user-visible-flag t) nil [333434 333759])
            ("org-agenda-set-mode-name" function nil nil [333761 336427])
            ("org-agenda-update-agenda-type" function nil nil [336429 336665])
            ("org-agenda-next-line" function (:user-visible-flag t) nil [336667 336850])
            ("org-agenda-previous-line" function (:user-visible-flag t) nil [336852 337047])
            ("org-agenda-next-item" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [337049 337408])
            ("org-agenda-previous-item" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [337410 337763])
            ("org-agenda-do-context-action" function nil nil [337765 338188])
            ("org-agenda-show-tags" function (:user-visible-flag t) nil [338190 338475])
            ("org-agenda-goto" function
               (:user-visible-flag t
                :arguments ("highlight"))
                nil [338477 339219])
            ("org-agenda-after-show-hook" variable nil nil [339221 339376])
            ("org-agenda-kill" function (:user-visible-flag t) nil [339378 340726])
            ("org-archive-default-command" variable nil nil [340728 340764])
            ("org-agenda-archive-default" function (:user-visible-flag t) nil [340793 340999])
            ("org-agenda-archive-default-with-confirmation" function (:user-visible-flag t) nil [341001 341234])
            ("org-agenda-archive" function (:user-visible-flag t) nil [341236 341402])
            ("org-agenda-archive-to-archive-sibling" function (:user-visible-flag t) nil [341404 341571])
            ("org-agenda-archive-with" function
               (:user-visible-flag t
                :arguments ("cmd" "confirm"))
                nil [341573 342362])
            ("org-remove-subtree-entries-from-agenda" function (:arguments ("buf" "beg" "end")) nil [342364 343262])
            ("org-agenda-refile" function
               (:user-visible-flag t
                :arguments ("goto" "rfloc" "no-update"))
                nil [343264 344464])
            ("org-agenda-open-link" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [344466 345995])
            ("org-agenda-copy-local-variable" function (:arguments ("var")) nil [345997 346309])
            ("org-agenda-switch-to" function
               (:user-visible-flag t
                :arguments ("delete-other-windows"))
                nil [346311 347192])
            ("org-agenda-goto-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [347194 347358])
            ("org-agenda-show" function
               (:user-visible-flag t
                :arguments ("full-entry"))
                nil [347360 347702])
            ("org-agenda-show-window" variable nil nil [347704 347739])
            ("org-agenda-show-and-scroll-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [347740 348473])
            ("org-agenda-show-scroll-down" function (:user-visible-flag t) nil [348475 348767])
            ("org-agenda-show-1" function
               (:user-visible-flag t
                :arguments ("more"))
                nil [348769 350377])
            ("org-agenda-cycle-counter" variable nil nil [350379 350416])
            ("org-agenda-cycle-show" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [350417 351325])
            ("org-agenda-recenter" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [351327 351553])
            ("org-agenda-show-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [351555 351721])
            ("org-agenda-check-no-diary" function nil nil [351723 351888])
            ("org-agenda-error" function nil nil [351890 352031])
            ("org-agenda-tree-to-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [352033 353395])
            ("org-agenda-do-tree-to-indirect-buffer" function (:arguments ("arg")) nil [353397 353814])
            ("org-last-heading-marker" variable (:default-value (make-marker)) nil [353816 353968])
            ("org-agenda-todo-nextset" function (:user-visible-flag t) nil [353970 354089])
            ("org-agenda-todo-previousset" function (:user-visible-flag t) nil [354091 354222])
            ("org-agenda-todo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [354224 355846])
            ("org-agenda-add-note" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [355848 356331])
            ("org-agenda-change-all-lines" function (:arguments ("newhead" "hdmarker" "fixface" "just-this")) nil [356333 359112])
            ("org-agenda-align-tags" function (:arguments ("line")) nil [359114 360212])
            ("org-agenda-priority-up" function (:user-visible-flag t) nil [360214 360353])
            ("org-agenda-priority-down" function (:user-visible-flag t) nil [360355 360498])
            ("org-agenda-priority" function
               (:user-visible-flag t
                :arguments ("force-direction"))
                nil [360500 361607])
            ("org-agenda-set-tags" function
               (:user-visible-flag t
                :arguments ("tag" "onoff"))
                nil [361668 362455])
            ("org-agenda-set-property" function (:user-visible-flag t) nil [362457 362937])
            ("org-agenda-set-effort" function (:user-visible-flag t) nil [362939 363528])
            ("org-agenda-toggle-archive-tag" function (:user-visible-flag t) nil [363530 364173])
            ("org-agenda-do-date-later" function (:arguments ("arg")) nil [364175 364723])
            ("org-agenda-do-date-earlier" function (:arguments ("arg")) nil [364725 365285])
            ("org-agenda-date-later" function
               (:user-visible-flag t
                :arguments ("arg" "what"))
                nil [365287 366723])
            ("org-agenda-date-earlier" function
               (:user-visible-flag t
                :arguments ("arg" "what"))
                nil [366725 366892])
            ("org-agenda-date-later-minutes" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [366894 367136])
            ("org-agenda-date-earlier-minutes" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [367138 367384])
            ("org-agenda-date-later-hours" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [367386 367532])
            ("org-agenda-date-earlier-hours" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [367534 367684])
            ("org-agenda-show-new-time" function (:arguments ("marker" "stamp" "prefix")) nil [367686 368388])
            ("org-agenda-date-prompt" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [368390 369248])
            ("org-agenda-schedule" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [369250 369920])
            ("org-agenda-deadline" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [369922 370511])
            ("org-agenda-clock-in" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [370513 371264])
            ("org-agenda-clock-out" function (:user-visible-flag t) nil [371266 371921])
            ("org-agenda-clock-cancel" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [371923 372191])
            ("org-agenda-clock-goto" function (:user-visible-flag t) nil [372193 372895])
            ("org-agenda-diary-entry-in-org-file" function nil nil [372897 374810])
            ("org-agenda-insert-diary-strategy" variable (:default-value (quote date-tree)) nil [374812 375333])
            ("org-agenda-insert-diary-extract-time" variable nil nil [375335 375514])
            ("org-agenda-bulk-mark-char" variable (:default-value ">") nil [375516 375671])
            ("org-agenda-add-entry-to-org-agenda-diary-file" function (:arguments ("type" "text" "d1" "d2")) nil [375673 378628])
            ("org-agenda-insert-diary-as-top-level" function (:arguments ("text")) nil [378630 379074])
            ("org-agenda-insert-diary-make-new-entry" function (:arguments ("text")) nil [379076 379952])
            ("org-agenda-diary-entry" function (:user-visible-flag t) nil [379954 381848])
            ("org-agenda-execute-calendar-command" function (:arguments ("cmd")) nil [381850 382703])
            ("org-agenda-phases-of-moon" function (:user-visible-flag t) nil [382705 382896])
            ("org-agenda-holidays" function (:user-visible-flag t) nil [382898 383074])
            ("calendar-longitude" variable nil nil [383076 383103])
            ("calendar-latitude" variable nil nil [383134 383160])
            ("calendar-location-name" variable nil nil [383192 383223])
            ("org-agenda-sunrise-sunset" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [383251 383833])
            ("org-agenda-goto-calendar" function (:user-visible-flag t) nil [383835 384337])
            ("org-calendar-goto-agenda" function (:user-visible-flag t) nil [384354 384824])
            ("org-agenda-convert-date" function nil nil [384826 386200])
            ("org-agenda-bulk-marked-p" function nil nil [386221 386394])
            ("org-agenda-bulk-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [386396 387347])
            ("org-agenda-bulk-mark-all" function (:user-visible-flag t) nil [387349 387488])
            ("org-agenda-bulk-mark-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [387490 388209])
            ("org-agenda-bulk-unmark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [388211 388992])
            ("org-agenda-bulk-toggle-all" function (:user-visible-flag t) nil [388994 389262])
            ("org-agenda-bulk-toggle" function (:user-visible-flag t) nil [389264 389451])
            ("org-agenda-bulk-remove-overlays" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [389453 389927])
            ("org-agenda-bulk-unmark-all" function (:user-visible-flag t) nil [389929 390337])
            ("org-agenda-persistent-marks" variable nil nil [390339 390588])
            ("org-agenda-bulk-action" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [390590 396758])
            ("org-agenda-capture" function
               (:user-visible-flag t
                :arguments ("with-time"))
                nil [396760 397201])
            ("org-agenda-reapply-filters" function nil nil [397247 397808])
            ("org-agenda-drag-line-forward" function
               (:user-visible-flag t
                :arguments ("arg" "backward"))
                nil [397810 398641])
            ("org-agenda-drag-line-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [398643 398792])
            ("org-agenda-show-the-flagging-note" function (:user-visible-flag t) nil [398814 400043])
            ("org-agenda-remove-flag" function (:arguments ("marker")) nil [400045 400401])
            ("org-agenda-get-any-marker" function (:arguments ("pos")) nil [400403 400580])
            ("appt-time-msg-list" variable nil nil [400609 400636])
            ("org-agenda-to-appt" function
               (:user-visible-flag t
                :arguments ("refresh" "filter" "args"))
                nil [400674 404902])
            ("org-agenda-today-p" function (:arguments ("date")) nil [404904 405268])
            ("org-agenda-todo-yesterday" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [405270 405575])
            ("org-agenda" package nil nil [405577 405598]))          
      :file "org-agenda.el"
      :pointmax 405628
      :fsize 405631
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [3596 3610])
            ("cl-lib" include nil nil [3611 3628])
            ("declare-function" code nil nil [3675 3729])
            ("declare-function" code nil nil [3730 3792])
            ("declare-function" code nil nil [3793 3884])
            ("declare-function" code nil nil [3885 3944])
            ("declare-function" code nil nil [3945 4042])
            ("declare-function" code nil nil [4043 4105])
            ("declare-function" code nil nil [4106 4173])
            ("declare-function" code nil nil [4174 4229])
            ("declare-function" code nil nil [4230 4325])
            ("declare-function" code nil nil [4326 4386])
            ("declare-function" code nil nil [4387 4442])
            ("declare-function" code nil nil [4443 4509])
            ("declare-function" code nil nil [4510 4586])
            ("declare-function" code nil nil [4587 4671])
            ("declare-function" code nil nil [4717 4778])
            ("declare-function" code nil nil [4836 4899])
            ("declare-function" code nil nil [4901 4958])
            ("declare-function" code nil nil [4959 5014])
            ("with-no-warnings" code nil nil [5016 5048])
            ("org-bbdb-anniversaries" customgroup (:user-visible-flag t) nil [5100 5226])
            ("org-bbdb-default-anniversary-format" variable (:default-value "birthday") nil [5228 5384])
            ("org-bbdb-anniversary-format-alist" variable (:default-value (quote (("birthday" lambda (name years suffix) (concat "Birthday: [[bbdb:" name "][" name " (" (format "%s" years) suffix ")]]")) ("wedding" lambda (name years suffix) (concat "[[bbdb:" name "][" name "'s " (format "%s" years) suffix " wedding anniversary]]"))))) nil [5386 6599])
            ("org-bbdb-anniversary-field" variable (:default-value (quote anniversary)) nil [6601 7173])
            ("org-bbdb-extract-date-fun" variable (:default-value (quote org-bbdb-anniv-extract-date)) nil [7175 7513])
            ("org-link-set-parameters" code nil nil [7540 7702])
            ("org-bbdb-store-link" function nil nil [7722 8278])
            ("org-bbdb-export" function (:arguments ("path" "desc" "format")) nil [8280 8797])
            ("org-bbdb-open" function (:arguments ("name")) nil [8799 9019])
            ("org-bbdb-open-old" function (:arguments ("name")) nil [9021 9829])
            ("org-bbdb-open-new" function (:arguments ("name")) nil [9831 10677])
            ("org-bbdb-anniv-extract-date" function (:arguments ("time-str")) nil [10679 11094])
            ("org-bbdb-anniv-split" function (:arguments ("str")) nil [11096 11384])
            ("org-bbdb-anniv-hash" variable nil nil [11386 11512])
            ("org-bbdb-updated-p" variable (:default-value t) nil [11514 11618])
            ("org-bbdb-make-anniv-hash" function nil nil [11620 12886])
            ("org-bbdb-updated" function (:arguments ("_rec")) nil [12888 13058])
            ("add-hook" code nil nil [13060 13112])
            ("org-bbdb-anniversaries" function nil nil [13129 15091])
            ("org-bbdb-date-list" function (:arguments ("d" "n")) nil [15390 15664])
            ("org-bbdb-anniversaries-future" function (:arguments ("n")) nil [15681 17280])
            ("org-bbdb-complete-link" function nil nil [17282 17521])
            ("org-bbdb-anniv-export-ical" function nil nil [17523 17966])
            ("org-bbdb-format-vevent" function (:arguments ("key" "recs")) nil [17968 18548])
            ("org-bbdb" package nil nil [18550 18569]))          
      :file "org-bbdb.el"
      :pointmax 18672
      :fsize 18671
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob" include nil nil [1014 1027])
            ("org-babel-header-args:emacs-lisp" variable
               (:constant-flag t
                :default-value (quote ((lexical . :any))))
                nil [1029 1134])
            ("org-babel-default-header-args:emacs-lisp" variable (:default-value (quote ((:lexical . "no")))) nil [1136 1474])
            ("org-babel-expand-body:emacs-lisp" function (:arguments ("body" "params")) nil [1476 2083])
            ("org-babel-execute:emacs-lisp" function (:arguments ("body" "params")) nil [2085 3192])
            ("org-babel-make-language-alias" code nil nil [3194 3246])
            ("ob-emacs-lisp" package nil nil [3248 3272]))          
      :file "ob-emacs-lisp.el"
      :pointmax 3307
      :fsize 3306
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob" include nil nil [1027 1040])
            ("declare-function" code nil nil [1042 1090])
            ("declare-function" code nil nil [1091 1148])
            ("declare-function" code nil nil [1149 1216])
            ("declare-function" code nil nil [1217 1276])
            ("declare-function" code nil nil [1277 1350])
            ("org-babel-tangle-lang-exts" variable nil nil [1352 1387])
            ("add-to-list" code nil nil [1388 1448])
            ("org-babel-default-header-args:python" variable (:default-value (quote nil)) nil [1450 1499])
            ("org-babel-python-command" variable (:default-value "python") nil [1501 1685])
            ("org-babel-python-mode" variable (:default-value (if (featurep (quote python-mode)) (quote python-mode) (quote python))) nil [1687 1984])
            ("org-babel-python-hline-to" variable (:default-value "None") nil [1986 2194])
            ("org-babel-python-None-to" variable (:default-value (quote hline)) nil [2196 2391])
            ("org-babel-execute:python" function (:arguments ("body" "params")) nil [2393 3514])
            ("org-babel-prep-session:python" function (:arguments ("session" "params")) nil [3516 4018])
            ("org-babel-load-session:python" function (:arguments ("session" "body" "params")) nil [4020 4362])
            ("org-babel-variable-assignments:python" function (:arguments ("params")) nil [4385 4662])
            ("org-babel-python-var-to-python" function (:arguments ("var")) nil [4664 5164])
            ("org-babel-python-table-or-string" function (:arguments ("results")) nil [5166 5604])
            ("org-babel-python-buffers" variable (:default-value (quote ((:default . "*Python*")))) nil [5606 5666])
            ("org-babel-python-session-buffer" function (:arguments ("session")) nil [5668 5813])
            ("org-babel-python-with-earmuffs" function (:arguments ("session")) nil [5815 6073])
            ("org-babel-python-without-earmuffs" function (:arguments ("session")) nil [6075 6354])
            ("py-default-interpreter" variable nil nil [6356 6387])
            ("py-which-bufname" variable nil nil [6388 6413])
            ("python-shell-buffer-name" variable nil nil [6414 6447])
            ("org-babel-python-initiate-session-by-key" function (:arguments ("session")) nil [6448 8319])
            ("org-babel-python-initiate-session" function (:arguments ("session" "_params")) nil [8321 8576])
            ("org-babel-python-eoe-indicator" variable (:default-value "'org_babel_python_eoe'") nil [8578 8698])
            ("org-babel-python-wrapper-method" variable
               (:constant-flag t
                :default-value "
def main():
%s

open('%s', 'w').write( str(main()) )")
                nil [8699 8799])
            ("org-babel-python-pp-wrapper-method" variable
               (:constant-flag t
                :default-value "
import pprint
def main():
%s

open('%s', 'w').write( pprint.pformat(main()) )")
                nil [8800 8928])
            ("org-babel-python-evaluate" function (:arguments ("session" "body" "result-type" "result-params" "preamble")) nil [8930 9256])
            ("org-babel-python-evaluate-external-process" function (:arguments ("body" "result-type" "result-params" "preamble")) nil [9258 10426])
            ("org-babel-python-evaluate-session" function (:arguments ("session" "body" "result-type" "result-params")) nil [10428 12703])
            ("org-babel-python-read-string" function (:arguments ("string")) nil [12705 12909])
            ("ob-python" package nil nil [12911 12931]))          
      :file "ob-python.el"
      :pointmax 12962
      :fsize 12961
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [1714 1732])
            ("declare-function" code nil nil [1734 1791])
            ("org-babel-table-truncate-at-newline" function (:arguments ("string")) nil [1793 2169])
            ("org-sbe" function (:arguments ("source-block" "variables")) nil [2171 5327])
            ("ob-table" package nil nil [5329 5348]))          
      :file "ob-table.el"
      :pointmax 5378
      :fsize 5377
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1250 1264])
            ("declare-function" code nil nil [1310 1381])
            ("declare-function" code nil nil [1382 1444])
            ("declare-function" code nil nil [1445 1507])
            ("declare-function" code nil nil [1508 1580])
            ("declare-function" code nil nil [1581 1630])
            ("rmail-current-message" variable nil nil [1631 1661])
            ("rmail-header-style" variable nil nil [1679 1706])
            ("rmail-file-name" variable nil nil [1727 1751])
            ("org-link-set-parameters" code nil nil [1801 1889])
            ("org-rmail-store-link" function nil nil [1909 3033])
            ("org-rmail-open" function (:arguments ("path")) nil [3035 3360])
            ("org-rmail-follow-link" function (:arguments ("folder" "article")) nil [3362 4178])
            ("org-rmail" package nil nil [4180 4200]))          
      :file "org-rmail.el"
      :pointmax 4229
      :fsize 4228
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ox" include nil nil [1063 1076])
            ("ox-publish" include nil nil [1077 1098])
            ("cl-lib" include nil nil [1099 1116])
            ("declare-function" code nil nil [1118 1171])
            ("org-export-define-backend" code nil nil [1609 5905])
            ("org-export-ascii" customgroup (:user-visible-flag t) nil [5943 6072])
            ("org-ascii-text-width" variable (:default-value 72) nil [6074 6312])
            ("org-ascii-global-margin" variable nil nil [6314 6502])
            ("org-ascii-inner-margin" variable (:default-value 2) nil [6504 6739])
            ("org-ascii-quote-margin" variable (:default-value 6) nil [6741 6981])
            ("org-ascii-list-margin" variable nil nil [6983 7237])
            ("org-ascii-inlinetask-width" variable (:default-value 30) nil [7239 7460])
            ("org-ascii-headline-spacing" variable (:default-value (quote (1 . 2))) nil [7462 8164])
            ("org-ascii-indented-line-width" variable (:default-value (quote auto)) nil [8166 8739])
            ("org-ascii-paragraph-spacing" variable (:default-value (quote auto)) nil [8741 9204])
            ("org-ascii-charset" variable (:default-value (quote ascii)) nil [9206 9637])
            ("org-ascii-underline" variable (:default-value (quote ((ascii 61 126 45) (latin1 61 126 45) (utf-8 9552 9472 9548 9476 9480)))) nil [9639 10573])
            ("org-ascii-bullets" variable (:default-value (quote ((ascii 42 43 45) (latin1 167 182) (utf-8 9674)))) nil [10575 11531])
            ("org-ascii-links-to-notes" variable (:default-value t) nil [11533 11839])
            ("org-ascii-table-keep-all-vertical-lines" variable nil nil [11841 12137])
            ("org-ascii-table-widen-columns" variable (:default-value t) nil [12139 12437])
            ("org-ascii-table-use-ascii-art" variable nil nil [12439 12857])
            ("org-ascii-caption-above" variable nil nil [12859 13089])
            ("org-ascii-verbatim-format" variable (:default-value "`%s'") nil [13091 13288])
            ("org-ascii-format-drawer-function" variable (:default-value (lambda (_name contents _width) contents)) nil [13290 13847])
            ("org-ascii-format-inlinetask-function" variable (:default-value (quote org-ascii-format-inlinetask-default)) nil [13849 14668])
            ("org-ascii--fill-string" function (:arguments ("s" "text-width" "info" "justify")) nil [16308 17269])
            ("org-ascii--justify-lines" function (:arguments ("s" "text-width" "how")) nil [17271 17849])
            ("org-ascii--justify-element" function (:arguments ("contents" "element" "info")) nil [17851 19447])
            ("org-ascii--indent-string" function (:arguments ("s" "width")) nil [19449 19677])
            ("org-ascii--box-string" function (:arguments ("s" "info")) nil [19679 20097])
            ("org-ascii--current-text-width" function (:arguments ("element" "info")) nil [20099 23475])
            ("org-ascii--current-justification" function (:arguments ("element")) nil [23477 24092])
            ("org-ascii--build-title" function (:arguments ("element" "info" "text-width" "underline" "notags" "toc")) nil [24094 26512])
            ("org-ascii--has-caption-p" function (:arguments ("element" "_info")) nil [26514 26792])
            ("org-ascii--build-caption" function (:arguments ("element" "info")) nil [26794 27673])
            ("org-ascii--build-toc" function (:arguments ("info" "n" "keyword" "local")) nil [27675 29016])
            ("org-ascii--list-listings" function (:arguments ("keyword" "info")) nil [29018 30470])
            ("org-ascii--list-tables" function (:arguments ("keyword" "info")) nil [30472 31900])
            ("org-ascii--unique-links" function (:arguments ("element" "info")) nil [31902 33204])
            ("org-ascii--describe-datum" function (:arguments ("datum" "info")) nil [33206 34760])
            ("org-ascii--describe-links" function (:arguments ("links" "width" "info")) nil [34762 36260])
            ("org-ascii--checkbox" function (:arguments ("item" "info")) nil [36262 36615])
            ("org-ascii-template--document-title" function (:arguments ("info")) nil [36634 39954])
            ("org-ascii-inner-template" function (:arguments ("contents" "info")) nil [39956 41960])
            ("org-ascii-template" function (:arguments ("contents" "info")) nil [41962 42930])
            ("org-ascii--translate" function (:arguments ("s" "info")) nil [42932 43204])
            ("org-ascii-bold" function (:arguments ("_bold" "contents" "_info")) nil [43245 43443])
            ("org-ascii-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [43465 43781])
            ("org-ascii-clock" function (:arguments ("clock" "_contents" "info")) nil [43796 44265])
            ("org-ascii-code" function (:arguments ("code" "_contents" "info")) nil [44279 44522])
            ("org-ascii-drawer" function (:arguments ("drawer" "contents" "info")) nil [44538 44926])
            ("org-ascii-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [44949 45171])
            ("org-ascii-entity" function (:arguments ("entity" "_contents" "info")) nil [45187 45476])
            ("org-ascii-example-block" function (:arguments ("example-block" "_contents" "info")) nil [45499 45825])
            ("org-ascii-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [45849 46151])
            ("org-ascii-export-block" function (:arguments ("export-block" "_contents" "info")) nil [46173 46523])
            ("org-ascii-fixed-width" function (:arguments ("fixed-width" "_contents" "info")) nil [46544 46882])
            ("org-ascii-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [47056 47331])
            ("org-ascii-headline" function (:arguments ("headline" "contents" "info")) nil [47349 49538])
            ("org-ascii-horizontal-rule" function (:arguments ("horizontal-rule" "_contents" "info")) nil [49563 50156])
            ("org-ascii-inline-src-block" function (:arguments ("inline-src-block" "_contents" "info")) nil [50182 50502])
            ("org-ascii-format-inlinetask-default" function (:arguments ("_todo" "_type" "_priority" "_name" "_tags" "contents" "width" "inlinetask" "info")) nil [50522 51855])
            ("org-ascii-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [51857 52803])
            ("org-ascii-italic" function (:arguments ("_italic" "contents" "_info")) nil [52819 53025])
            ("org-ascii-item" function (:arguments ("item" "contents" "info")) nil [53039 54916])
            ("org-ascii-keyword" function (:arguments ("keyword" "_contents" "info")) nil [54933 55850])
            ("org-ascii-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [55877 56251])
            ("org-ascii-latex-fragment" function (:arguments ("latex-fragment" "_contents" "info")) nil [56275 56549])
            ("org-ascii-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [56569 56762])
            ("org-ascii-link" function (:arguments ("link" "desc" "info")) nil [56776 58738])
            ("org-ascii-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [58763 59135])
            ("org-ascii-paragraph" function (:arguments ("paragraph" "contents" "info")) nil [59154 59857])
            ("org-ascii-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [59877 60284])
            ("org-ascii-plain-text" function (:arguments ("text" "info")) nil [60304 60967])
            ("org-ascii-planning" function (:arguments ("planning" "_contents" "info")) nil [60985 61752])
            ("org-ascii-property-drawer" function (:arguments ("property-drawer" "contents" "info")) nil [61777 62094])
            ("org-ascii-quote-block" function (:arguments ("_quote-block" "contents" "info")) nil [62115 62394])
            ("org-ascii-radio-target" function (:arguments ("_radio-target" "contents" "_info")) nil [62416 62632])
            ("org-ascii-section" function (:arguments ("section" "contents" "info")) nil [62649 63563])
            ("org-ascii-special-block" function (:arguments ("_special-block" "contents" "_info")) nil [63586 63954])
            ("org-ascii-src-block" function (:arguments ("src-block" "_contents" "info")) nil [63973 64593])
            ("org-ascii-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [64620 64867])
            ("org-ascii-subscript" function (:arguments ("subscript" "contents" "_info")) nil [64886 65197])
            ("org-ascii-superscript" function (:arguments ("superscript" "contents" "_info")) nil [65218 65537])
            ("org-ascii-strike-through" function (:arguments ("_strike-through" "contents" "_info")) nil [65561 65795])
            ("org-ascii-table" function (:arguments ("table" "contents" "info")) nil [65810 66989])
            ("org-ascii--table-cell-width" function (:arguments ("table-cell" "info")) nil [67009 68470])
            ("org-ascii-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [68472 69711])
            ("org-ascii-table-row" function (:arguments ("table-row" "contents" "info")) nil [69730 71650])
            ("org-ascii-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [71669 71907])
            ("org-ascii-underline" function (:arguments ("_underline" "contents" "_info")) nil [71926 72144])
            ("org-ascii-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [72162 72421])
            ("org-ascii-verse-block" function (:arguments ("verse-block" "contents" "info")) nil [72442 72764])
            ("org-ascii-filter-headline-blank-lines" function (:arguments ("headline" "_backend" "info")) nil [72782 73431])
            ("org-ascii-filter-paragraph-spacing" function (:arguments ("tree" "_backend" "info")) nil [73433 74074])
            ("org-ascii-filter-comment-spacing" function (:arguments ("tree" "_backend" "info")) nil [74076 74544])
            ("org-ascii-export-as-ascii" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [74588 75768])
            ("org-ascii-export-to-ascii" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [75785 76873])
            ("org-ascii-publish-to-ascii" function (:arguments ("plist" "filename" "pub-dir")) nil [76890 77246])
            ("org-ascii-publish-to-latin1" function (:arguments ("plist" "filename" "pub-dir")) nil [77263 77623])
            ("org-ascii-publish-to-utf8" function (:arguments ("plist" "filename" "pub-dir")) nil [77640 77995])
            ("ox-ascii" package nil nil [77998 78017]))          
      :file "ox-ascii.el"
      :pointmax 78137
      :fsize 78236
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1029 1046])
            ("org-src" include nil nil [1047 1065])
            ("declare-function" code nil nil [1067 1132])
            ("declare-function" code nil nil [1133 1194])
            ("declare-function" code nil nil [1195 1262])
            ("declare-function" code nil nil [1263 1332])
            ("declare-function" code nil nil [1333 1387])
            ("declare-function" code nil nil [1388 1445])
            ("declare-function" code nil nil [1446 1502])
            ("declare-function" code nil nil [1503 1562])
            ("declare-function" code nil nil [1563 1622])
            ("declare-function" code nil nil [1623 1673])
            ("declare-function" code nil nil [1674 1752])
            ("declare-function" code nil nil [1753 1822])
            ("declare-function" code nil nil [1823 1908])
            ("declare-function" code nil nil [1909 1975])
            ("declare-function" code nil nil [1976 2021])
            ("declare-function" code nil nil [2022 2071])
            ("declare-function" code nil nil [2072 2129])
            ("declare-function" code nil nil [2130 2186])
            ("declare-function" code nil nil [2187 2249])
            ("org-link-types-re" variable nil nil [2251 2277])
            ("org-babel-tangle-lang-exts" variable (:default-value (quote (("emacs-lisp" . "el") ("elisp" . "el")))) nil [2279 2779])
            ("org-babel-tangle-use-relative-file-links" variable (:default-value t) nil [2781 2955])
            ("org-babel-post-tangle-hook" variable nil nil [2957 3109])
            ("org-babel-pre-tangle-hook" variable (:default-value (quote (save-buffer))) nil [3111 3268])
            ("org-babel-tangle-body-hook" variable nil nil [3270 3420])
            ("org-babel-tangle-comment-format-beg" variable (:default-value "[[%link][%source-name]]") nil [3422 4240])
            ("org-babel-tangle-comment-format-end" variable (:default-value "%source-name ends here") nil [4242 5059])
            ("org-babel-tangle-uncomment-comments" variable nil nil [5061 5366])
            ("org-babel-process-comment-text" variable (:default-value (quote org-remove-indentation)) nil [5368 5728])
            ("org-babel-find-file-noselect-refresh" function (:arguments ("file")) nil [5730 5974])
            ("org-babel-with-temp-filebuffer" function (:arguments ("file" "body")) nil [5976 6734])
            ("def-edebug-spec" code nil nil [6735 6795])
            ("org-babel-tangle-file" function
               (:user-visible-flag t
                :arguments ("file" "target-file" "lang"))
                nil [6812 7566])
            ("org-babel-tangle-publish" function (:arguments ("_" "filename" "pub-dir")) nil [7568 7822])
            ("org-babel-tangle" function
               (:user-visible-flag t
                :arguments ("arg" "target-file" "lang"))
                nil [7839 12540])
            ("org-babel-tangle-clean" function (:user-visible-flag t) nil [12542 13209])
            ("org-stored-links" variable nil nil [13211 13236])
            ("org-bracket-link-regexp" variable nil nil [13237 13269])
            ("org-babel-spec-to-string" function (:arguments ("spec")) nil [13270 14882])
            ("org-babel-tangle-collect-blocks" function (:arguments ("language" "tangle-file")) nil [14884 16422])
            ("org-babel-tangle-single-block" function (:arguments ("block-counter" "only-this-block")) nil [16424 19573])
            ("org-babel-tangle-comment-links" function (:arguments ("info")) nil [19575 20227])
            ("org-bracket-link-analytic-regexp" variable nil nil [20254 20295])
            ("org-babel-detangle" function
               (:user-visible-flag t
                :arguments ("source-code-file"))
                nil [20296 21185])
            ("org-babel-tangle-jump-to-org" function (:user-visible-flag t) nil [21187 23322])
            ("ob-tangle" package nil nil [23324 23344]))          
      :file "ob-tangle.el"
      :pointmax 23448
      :fsize 23447
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1606 1620])
            ("w3m-current-url" variable nil nil [1622 1646])
            ("w3m-current-title" variable nil nil [1647 1673])
            ("org-link-set-parameters" code nil nil [1675 1734])
            ("org-w3m-store-link" function nil nil [1735 1988])
            ("org-w3m-copy-for-org-mode" function (:user-visible-flag t) nil [1990 4789])
            ("org-w3m-get-anchor-start" function nil nil [4791 5047])
            ("org-w3m-get-anchor-end" function nil nil [5049 5273])
            ("org-w3m-get-next-link-start" function nil nil [5275 5711])
            ("org-w3m-get-prev-link-start" function nil nil [5713 6165])
            ("org-w3m-no-next-link-p" function nil nil [6167 6379])
            ("org-w3m-no-prev-link-p" function nil nil [6381 6601])
            ("w3m-mode-map" variable nil nil [6639 6660])
            ("w3m-minor-mode-map" variable nil nil [6661 6688])
            ("when" code nil nil [6689 6898])
            ("when" code nil nil [6899 7132])
            ("add-hook" code nil nil [7133 7314])
            ("add-hook" code nil nil [7315 7514])
            ("org-w3m" package nil nil [7516 7534]))          
      :file "org-w3m.el"
      :pointmax 7561
      :fsize 7560
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1450 1464])
            ("org-agenda" include nil nil [1465 1486])
            ("cl-lib" include nil nil [1487 1504])
            ("org-agenda-keep-restricted-file-list" variable nil nil [1506 1551])
            ("org-mobile" customgroup (:user-visible-flag t) nil [1564 1694])
            ("org-mobile-files" variable (:default-value (quote (org-agenda-files))) nil [1696 2543])
            ("org-mobile-files-exclude-regexp" variable nil nil [2545 2701])
            ("org-mobile-directory" variable nil nil [2703 2854])
            ("org-mobile-allpriorities" variable (:default-value "A B C") nil [2856 3045])
            ("org-mobile-use-encryption" variable nil nil [3047 3541])
            ("org-mobile-encryption-tempfile" variable (:default-value "~/orgtmpcrypt") nil [3543 3874])
            ("org-mobile-encryption-password" variable nil nil [3876 4817])
            ("org-mobile-encryption-password-session" variable nil nil [4819 4870])
            ("org-mobile-encryption-password" function nil nil [4872 5132])
            ("org-mobile-inbox-for-pull" variable (:default-value "~/org/from-mobile.org") nil [5134 5537])
            ("org-mobile-capture-file" variable
               (:constant-flag t
                :default-value "mobileorg.org")
                nil [5539 5725])
            ("org-mobile-index-file" variable (:default-value "index.org") nil [5727 5995])
            ("org-mobile-agendas" variable (:default-value (quote all)) nil [5997 6548])
            ("org-mobile-force-id-on-agenda-items" variable (:default-value t) nil [6550 6690])
            ("org-mobile-force-mobile-change" variable nil nil [6692 7364])
            ("org-mobile-checksum-binary" variable (:default-value (or (executable-find "shasum") (executable-find "sha1sum") (executable-find "md5sum") (executable-find "md5"))) nil [7366 7634])
            ("org-mobile-pre-push-hook" variable nil nil [7636 7955])
            ("org-mobile-post-push-hook" variable nil nil [7957 8295])
            ("org-mobile-pre-pull-hook" variable nil nil [8297 8623])
            ("org-mobile-post-pull-hook" variable nil nil [8625 8973])
            ("org-mobile-action-alist" variable
               (:constant-flag t
                :default-value (quote (("edit" . org-mobile-edit))))
                nil [8975 9710])
            ("org-mobile-last-flagged-files" variable nil nil [9712 9819])
            ("org-mobile-files-alist" variable nil nil [9821 9856])
            ("org-mobile-checksum-files" variable nil nil [9857 9895])
            ("org-mobile-prepare-file-lists" function nil nil [9897 10033])
            ("org-mobile-files-alist" function nil nil [10035 11758])
            ("org-mobile-push" function (:user-visible-flag t) nil [11775 13434])
            ("org-mobile-before-process-capture-hook" variable nil nil [13436 13668])
            ("org-mobile-pull" function (:user-visible-flag t) nil [13685 14711])
            ("org-mobile-check-setup" function nil nil [14713 16335])
            ("org-mobile-create-index-file" function nil nil [16337 18755])
            ("org-mobile-copy-agenda-files" function nil nil [18757 20256])
            ("org-mobile-write-checksums" function nil nil [20258 20754])
            ("org-mobile-sumo-agenda-command" function nil nil [20756 23572])
            ("org-mobile-creating-agendas" variable nil nil [23574 23614])
            ("org-mobile-write-agenda-for-mobile" function (:arguments ("file")) nil [23615 25751])
            ("org-mobile-get-outline-path-link" function (:arguments ("pom")) nil [25753 26081])
            ("org-mobile-escape-olp" function (:arguments ("s")) nil [26083 26174])
            ("org-mobile-create-sumo-agenda" function (:user-visible-flag t) nil [26176 26891])
            ("org-mobile-encrypt-and-move" function (:arguments ("infile" "outfile")) nil [26893 27308])
            ("org-mobile-encrypt-file" function (:arguments ("infile" "outfile")) nil [27310 27706])
            ("org-mobile-decrypt-file" function (:arguments ("infile" "outfile")) nil [27708 28107])
            ("org-mobile-cleanup-encryption-tempfile" function nil nil [28109 28362])
            ("org-mobile-move-capture" function (:user-visible-flag t) nil [28364 29882])
            ("org-mobile-update-checksum-for-capture-file" function (:arguments ("buffer-string")) nil [29884 30480])
            ("org-mobile-apply" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [30482 34627])
            ("org-mobile-timestamp-buffer" function (:arguments ("buf")) nil [34629 35183])
            ("org-mobile-smart-read" function nil nil [35185 36613])
            ("org-mobile-locate-entry" function (:arguments ("link")) nil [36615 37523])
            ("org-mobile-edit" function (:arguments ("what" "old" "new")) nil [37525 41789])
            ("org-mobile-tags-same-p" function (:arguments ("list1" "list2")) nil [41791 41946])
            ("org-mobile-bodies-same-p" function (:arguments ("a" "b")) nil [41948 42543])
            ("org-mobile" package nil nil [42545 42566]))          
      :file "org-mobile.el"
      :pointmax 42671
      :fsize 42670
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1618 1632])
            ("doc-view" include nil nil [1633 1652])
            ("declare-function" code nil nil [1654 1709])
            ("declare-function" code nil nil [1710 1789])
            ("org-link-set-parameters" code nil nil [1791 1926])
            ("org-docview-export" function (:arguments ("link" "description" "format")) nil [1928 2454])
            ("org-docview-open" function (:arguments ("link")) nil [2456 2834])
            ("org-docview-store-link" function nil nil [2836 3224])
            ("org-docview-complete-link" function nil nil [3226 3524])
            ("org-docview" package nil nil [3527 3549]))          
      :file "org-docview.el"
      :pointmax 3580
      :fsize 3580
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1114 1128])
            ("declare-function" code nil nil [1130 1189])
            ("declare-function" code nil nil [1190 1287])
            ("declare-function" code nil nil [1288 1358])
            ("org-archive-default-command" variable (:default-value (quote org-archive-subtree)) nil [1360 1599])
            ("org-archive-reversed-order" variable nil nil [1601 1781])
            ("org-archive-sibling-heading" variable (:default-value "Archive") nil [1783 2053])
            ("org-archive-mark-done" variable nil nil [2055 2420])
            ("org-archive-stamp-time" variable (:default-value t) nil [2422 2702])
            ("org-archive-file-header-format" variable (:default-value "
Archived entries from file %s

") nil [2704 3039])
            ("org-archive-subtree-add-inherited-tags" variable (:default-value (quote infile)) nil [3041 3345])
            ("org-archive-save-context-info" variable (:default-value (quote (time file olpath category todo itags))) nil [3347 4725])
            ("org-archive-hook" variable nil nil [4727 4995])
            ("org-get-local-archive-location" function nil nil [4997 5447])
            ("org-add-archive-files" function (:arguments ("files")) nil [5464 5852])
            ("org-all-archive-files" function nil nil [5854 6631])
            ("org-extract-archive-file" function (:arguments ("location")) nil [6633 7143])
            ("org-extract-archive-heading" function (:arguments ("location")) nil [7145 7545])
            ("org-archive-subtree" function
               (:user-visible-flag t
                :arguments ("find-done"))
                nil [7562 15650])
            ("org-archive-to-archive-sibling" function (:user-visible-flag t) nil [15667 18042])
            ("org-archive-all-done" function (:arguments ("tag")) nil [18044 18526])
            ("org-archive-all-old" function (:arguments ("tag")) nil [18528 19262])
            ("org-archive-all-matches" function (:arguments ("predicate" "tag")) nil [19264 21113])
            ("org-toggle-archive-tag" function
               (:user-visible-flag t
                :arguments ("find-done"))
                nil [21130 22065])
            ("org-archive-set-tag" function (:user-visible-flag t) nil [22067 22562])
            ("org-archive-subtree-default" function (:user-visible-flag t) nil [22579 22811])
            ("org-archive-subtree-default-with-confirmation" function (:user-visible-flag t) nil [22828 23154])
            ("org-archive" package nil nil [23156 23178]))          
      :file "org-archive.el"
      :pointmax 23284
      :fsize 23283
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [960 977])
            ("ob-core" include nil nil [978 996])
            ("ob-table" include nil nil [997 1016])
            ("declare-function" code nil nil [1018 1083])
            ("declare-function" code nil nil [1084 1140])
            ("declare-function" code nil nil [1141 1213])
            ("declare-function" code nil nil [1214 1286])
            ("declare-function" code nil nil [1287 1346])
            ("org-babel-library-of-babel" variable nil nil [1348 1542])
            ("org-babel-default-lob-header-args" variable (:default-value (quote ((:exports . "results")))) nil [1544 1910])
            ("org-babel-lob-ingest" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [1912 2591])
            ("org-babel-lob-execute-maybe" function (:user-visible-flag t) nil [2652 3006])
            ("org-babel-lob--src-info" function (:arguments ("name")) nil [3008 4276])
            ("org-babel-lob-get-info" function (:arguments ("datum")) nil [4293 5653])
            ("ob-lob" package nil nil [5655 5672]))          
      :file "ob-lob.el"
      :pointmax 5773
      :fsize 5772
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1554 1571])
            ("org" include nil nil [1572 1586])
            ("org-id" include nil nil [1587 1604])
            ("vc-git" include nil nil [1605 1622])
            ("org-attach" customgroup (:user-visible-flag t) nil [1624 1737])
            ("org-attach-directory" variable (:default-value "data/") nil [1739 1970])
            ("org-attach-commit" variable (:default-value t) nil [1972 2195])
            ("org-attach-git-annex-cutoff" variable (:default-value (* 32 1024)) nil [2197 2466])
            ("org-attach-auto-tag" variable (:default-value "ATTACH") nil [2468 2675])
            ("org-attach-file-list-property" variable (:default-value "Attachments") nil [2677 3083])
            ("org-attach-method" variable (:default-value (quote cp)) nil [3085 3664])
            ("org-attach-expert" variable nil nil [3666 3813])
            ("org-attach-allow-inheritance" variable (:default-value t) nil [3815 3956])
            ("org-attach-inherited" variable nil nil [3958 4067])
            ("org-attach-store-link-p" variable nil nil [4069 4367])
            ("org-attach-archive-delete" variable nil nil [4369 4744])
            ("org-attach-annex-auto-get" variable (:default-value (quote ask)) nil [4746 5164])
            ("org-attach" function (:user-visible-flag t) nil [5181 8272])
            ("org-attach-dir" function (:arguments ("create-if-not-exists-p")) nil [8274 10031])
            ("org-attach-check-absolute-path" function (:arguments ("dir")) nil [10033 10632])
            ("org-attach-set-directory" function (:user-visible-flag t) nil [10634 10973])
            ("org-attach-set-inherit" function (:user-visible-flag t) nil [10975 11383])
            ("org-attach-use-annex" function nil nil [11385 11707])
            ("org-attach-annex-get-maybe" function (:arguments ("path")) nil [11709 12571])
            ("org-attach-commit" function nil nil [12573 13721])
            ("org-attach-tag" function (:arguments ("off")) nil [13723 13950])
            ("org-attach-untag" function nil nil [13952 14029])
            ("org-attach-store-link" function (:arguments ("file")) nil [14031 14313])
            ("org-attach-attach" function
               (:user-visible-flag t
                :arguments ("file" "visit-dir" "method"))
                nil [14315 15573])
            ("org-attach-attach-cp" function (:user-visible-flag t) nil [15575 15729])
            ("org-attach-attach-mv" function (:user-visible-flag t) nil [15730 15894])
            ("org-attach-attach-ln" function (:user-visible-flag t) nil [15895 16200])
            ("org-attach-attach-lns" function (:user-visible-flag t) nil [16201 16517])
            ("org-attach-new" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [16519 17011])
            ("org-attach-delete-one" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [17013 17524])
            ("org-attach-delete-all" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [17526 18218])
            ("org-attach-sync" function (:user-visible-flag t) nil [18220 18887])
            ("org-attach-file-list" function (:arguments ("dir")) nil [18889 19131])
            ("org-attach-reveal" function
               (:user-visible-flag t
                :arguments ("if-exists"))
                nil [19133 19427])
            ("org-attach-reveal-in-emacs" function (:user-visible-flag t) nil [19429 19611])
            ("org-attach-open" function
               (:user-visible-flag t
                :arguments ("in-emacs"))
                nil [19613 20309])
            ("org-attach-open-in-emacs" function (:user-visible-flag t) nil [20311 20460])
            ("org-attach-expand" function (:arguments ("file")) nil [20462 20666])
            ("org-attach-expand-link" function (:arguments ("file")) nil [20668 20909])
            ("org-attach-archive-delete-maybe" function nil nil [20911 21273])
            ("add-hook" code nil nil [21275 21336])
            ("org-attach" package nil nil [21338 21359]))          
      :file "org-attach.el"
      :pointmax 21464
      :fsize 21463
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1454 1471])
            ("org-clock" include nil nil [1472 1492])
            ("declare-function" code nil nil [1494 1545])
            ("org-timer-start-time" variable nil nil [1547 1611])
            ("org-timer-pause-time" variable nil nil [1613 1682])
            ("org-timer-countdown-timer" variable nil nil [1684 1879])
            ("org-timer-countdown-timer-title" variable nil nil [1881 1989])
            ("org-timer-re" variable
               (:constant-flag t
                :default-value "\\([-+]?[0-9]+\\):\\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)")
                nil [1991 2123])
            ("org-timer-format" variable (:default-value "%s ") nil [2125 2340])
            ("org-timer-default-timer" variable (:default-value "0") nil [2342 2584])
            ("org-timer-display" variable (:default-value (quote mode-line)) nil [2586 3149])
            ("org-timer-start-hook" variable nil nil [3151 3230])
            ("org-timer-stop-hook" variable nil nil [3232 3324])
            ("org-timer-pause-hook" variable nil nil [3326 3418])
            ("org-timer-continue-hook" variable nil nil [3420 3517])
            ("org-timer-set-hook" variable nil nil [3519 3593])
            ("org-timer-done-hook" variable nil nil [3595 3676])
            ("org-timer-start" function
               (:user-visible-flag t
                :arguments ("offset"))
                nil [3693 5510])
            ("org-timer-pause-or-continue" function
               (:user-visible-flag t
                :arguments ("stop"))
                nil [5512 7018])
            ("org-timer-stop" function (:user-visible-flag t) nil [7020 7447])
            ("org-timer" function
               (:user-visible-flag t
                :arguments ("restart" "no-insert"))
                nil [7464 8270])
            ("org-timer-value-string" function nil nil [8272 8424])
            ("org-timer-seconds" function nil nil [8426 8845])
            ("org-timer-change-times-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "delta"))
                nil [8862 9753])
            ("org-timer-item" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9770 10732])
            ("org-timer-fix-incomplete" function (:arguments ("hms")) nil [10734 11229])
            ("org-timer-hms-to-secs" function (:arguments ("hms")) nil [11231 11780])
            ("org-timer-secs-to-hms" function (:arguments ("s")) nil [11782 12084])
            ("org-timer-mode-line-timer" variable nil nil [12086 12124])
            ("org-timer-mode-line-string" variable nil nil [12125 12164])
            ("org-timer-set-mode-line" function (:arguments ("value")) nil [12166 14391])
            ("org-timer-update-mode-line" function nil nil [14393 14642])
            ("org-timer-show-remaining-time" function (:user-visible-flag t) nil [14644 15099])
            ("org-timer-set-timer" function
               (:user-visible-flag t
                :arguments ("opt"))
                nil [15116 17605])
            ("org-timer--run-countdown-timer" function (:arguments ("secs" "title")) nil [17607 18059])
            ("org-timer--get-timer-title" function nil nil [18061 18730])
            ("org-timer" package nil nil [18732 18752]))          
      :file "org-timer.el"
      :pointmax 18856
      :fsize 18855
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1175 1192])
            ("ox-latex" include nil nil [1193 1212])
            ("unless" code nil nil [1261 1540])
            ("org-export-beamer" customgroup (:user-visible-flag t) nil [1578 1734])
            ("org-beamer-frame-level" variable (:default-value 1) nil [1736 2428])
            ("org-beamer-frame-default-options" variable nil nil [2430 2640])
            ("org-beamer-column-view-format" variable (:default-value "%45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)") nil [2642 3040])
            ("org-beamer-theme" variable (:default-value "default") nil [3042 3309])
            ("org-beamer-environments-extra" variable nil nil [3311 4339])
            ("org-beamer-outline-frame-title" variable (:default-value "Outline") nil [4341 4518])
            ("org-beamer-outline-frame-options" variable nil nil [4520 4757])
            ("org-beamer-subtitle-format" variable (:default-value "\\subtitle{%s}") nil [4760 5080])
            ("org-beamer-column-widths" variable
               (:constant-flag t
                :default-value "0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.0 :ETC")
                nil [5108 5265])
            ("org-beamer-environments-special" variable
               (:constant-flag t
                :default-value (quote (("againframe" "A") ("appendix" "x") ("column" "c") ("columns" "C") ("frame" "f") ("fullframe" "F") ("ignoreheading" "i") ("note" "n") ("noteNH" "N"))))
                nil [5267 5863])
            ("org-beamer-environments-default" variable
               (:constant-flag t
                :default-value (quote (("block" "b" "\\begin{block}%a{%h}" "\\end{block}") ("alertblock" "a" "\\begin{alertblock}%a{%h}" "\\end{alertblock}") ("verse" "v" "\\begin{verse}%a %% %h" "\\end{verse}") ("quotation" "q" "\\begin{quotation}%a %% %h" "\\end{quotation}") ("quote" "Q" "\\begin{quote}%a %% %h" "\\end{quote}") ("structureenv" "s" "\\begin{structureenv}%a %% %h" "\\end{structureenv}") ("theorem" "t" "\\begin{theorem}%a%U" "\\end{theorem}") ("definition" "d" "\\begin{definition}%a%U" "\\end{definition}") ("example" "e" "\\begin{example}%a%U" "\\end{example}") ("exampleblock" "E" "\\begin{exampleblock}%a{%h}" "\\end{exampleblock}") ("proof" "p" "\\begin{proof}%a%U" "\\end{proof}") ("beamercolorbox" "o" "\\begin{beamercolorbox}%o{%h}" "\\end{beamercolorbox}"))))
                nil [5865 6980])
            ("org-beamer-verbatim-elements" variable
               (:constant-flag t
                :default-value (quote (code example-block fixed-width inline-src-block src-block verbatim)))
                nil [6982 7240])
            ("org-beamer--normalize-argument" function (:arguments ("argument" "type")) nil [7269 8005])
            ("org-beamer--element-has-overlay-p" function (:arguments ("element")) nil [8007 8554])
            ("org-export-define-derived-backend" code nil nil [8580 10316])
            ("org-beamer-bold" function (:arguments ("bold" "contents" "_info")) nil [10357 10621])
            ("org-beamer-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [10643 10980])
            ("org-beamer-export-snippet" function (:arguments ("export-snippet" "_contents" "info")) nil [11004 11607])
            ("org-beamer--get-label" function (:arguments ("headline" "info")) nil [12112 12959])
            ("org-beamer--frame-level" function (:arguments ("headline" "info")) nil [12961 14104])
            ("org-beamer--format-section" function (:arguments ("headline" "contents" "info")) nil [14106 15348])
            ("org-beamer--format-frame" function (:arguments ("headline" "contents" "info")) nil [15350 18276])
            ("org-beamer--format-block" function (:arguments ("headline" "contents" "info")) nil [18278 22496])
            ("org-beamer-headline" function (:arguments ("headline" "contents" "info")) nil [22498 25583])
            ("org-beamer-item" function (:arguments ("item" "contents" "info")) nil [25597 26601])
            ("org-beamer-keyword" function (:arguments ("keyword" "contents" "info")) nil [26618 27523])
            ("org-beamer-link" function (:arguments ("link" "contents" "info")) nil [27537 28226])
            ("org-beamer-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [28329 29455])
            ("org-beamer-radio-target" function (:arguments ("radio-target" "text" "info")) nil [29477 29821])
            ("org-beamer-template" function (:arguments ("contents" "info")) nil [29964 33548])
            ("org-beamer-mode-map" variable (:default-value (make-sparse-keymap)) nil [33570 33657])
            ("define-key" code nil nil [33658 33732])
            ("define-minor-mode" code nil nil [33749 33873])
            ("when" code nil nil [33875 34028])
            ("org-beamer-tag" variable
               (:default-value (quote ((t (:box (:line-width 1 :color grey40)))))
                :type "face")
                nil [34030 34164])
            ("org-beamer-property-changed" function (:arguments ("property" "value")) nil [34166 34860])
            ("add-hook" code nil nil [34862 34933])
            ("org-beamer-allowed-property-values" function (:arguments ("property")) nil [34935 35606])
            ("add-hook" code nil nil [35608 35695])
            ("org-beamer-export-as-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [35729 36940])
            ("org-beamer-export-to-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [36957 38087])
            ("org-beamer-export-to-pdf" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [38104 39276])
            ("org-beamer-select-environment" function (:user-visible-flag t) nil [39293 41361])
            ("org-beamer-publish-to-latex" function (:arguments ("plist" "filename" "pub-dir")) nil [41378 41731])
            ("org-beamer-publish-to-pdf" function (:arguments ("plist" "filename" "pub-dir")) nil [41748 42342])
            ("ox-beamer" package nil nil [42345 42365]))          
      :file "ox-beamer.el"
      :pointmax 42469
      :fsize 42468
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1124 1141])
            ("org" include nil nil [1142 1156])
            ("org-table" include nil nil [1157 1177])
            ("declare-function" code nil nil [1179 1246])
            ("declare-function" code nil nil [1247 1295])
            ("declare-function" code nil nil [1296 1362])
            ("org-plot/gnuplot-default-options" variable (:default-value (quote ((:plot-type . 2d) (:with . lines) (:ind . 0)))) nil [1364 1522])
            ("org-plot-timestamp-fmt" variable nil nil [1524 1559])
            ("org-plot/add-options-to-plist" function (:arguments ("p" "options")) nil [1561 2707])
            ("org-plot/goto-nearest-table" function (:user-visible-flag t) nil [2709 3002])
            ("org-plot/collect-options" function
               (:user-visible-flag t
                :arguments ("params"))
                nil [3004 3407])
            ("org-plot-quote-timestamp-field" function (:arguments ("s")) nil [3409 3596])
            ("org-plot-quote-tsv-field" function (:arguments ("s")) nil [3598 3878])
            ("org-plot/gnuplot-to-data" function (:arguments ("table" "data-file" "params")) nil [3880 4345])
            ("org-plot/gnuplot-to-grid-data" function
               (:user-visible-flag t
                :arguments ("table" "data-file" "params"))
                nil [4347 6305])
            ("org-plot/gnuplot-script" function (:arguments ("data-file" "num-cols" "params" "preface")) nil [6307 9638])
            ("org-plot/gnuplot" function
               (:user-visible-flag t
                :arguments ("params"))
                nil [9755 12814])
            ("org-plot" package nil nil [12816 12835]))          
      :file "org-plot.el"
      :pointmax 12938
      :fsize 12937
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1241 1255])
            ("declare-function" code nil nil [1302 1416])
            ("Info-current-file" variable nil nil [1417 1443])
            ("Info-current-node" variable nil nil [1444 1470])
            ("org-link-set-parameters" code nil nil [1497 1620])
            ("org-info-store-link" function nil nil [1640 2080])
            ("org-info-open" function (:arguments ("path")) nil [2082 2197])
            ("org-info-follow-link" function (:arguments ("name")) nil [2200 2904])
            ("org-info-emacs-documents" variable
               (:constant-flag t
                :default-value (quote ("ada-mode" "auth" "autotype" "bovine" "calc" "ccmode" "cl" "dbus" "dired-x" "ebrowse" "ede" "ediff" "edt" "efaq-w32" "efaq" "eieio" "eintr" "elisp" "emacs-gnutls" "emacs-mime" "emacs" "epa" "erc" "ert" "eshell" "eudc" "eww" "flymake" "forms" "gnus" "htmlfontify" "idlwave" "ido" "info" "mairix-el" "message" "mh-e" "newsticker" "nxml-mode" "octave-mode" "org" "pcl-cvs" "pgg" "rcirc" "reftex" "remember" "sasl" "sc" "semantic" "ses" "sieve" "smtpmail" "speedbar" "srecode" "todo-mode" "tramp" "url" "vip" "viper" "widget" "wisent" "woman")))
                nil [2906 3618])
            ("org-info-other-documents" variable
               (:constant-flag t
                :default-value (quote (("libc" . "http://www.gnu.org/software/libc/manual/html_mono/libc.html") ("make" . "http://www.gnu.org/software/make/manual/make.html"))))
                nil [3620 3956])
            ("org-info-map-html-url" function (:arguments ("filename")) nil [3958 4567])
            ("org-info-export" function (:arguments ("path" "desc" "format")) nil [4569 5055])
            ("org-info" package nil nil [5057 5076]))          
      :file "org-info.el"
      :pointmax 5104
      :fsize 5103
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1001 1018])
            ("ox" include nil nil [1019 1032])
            ("orgtbl-exp-regexp" variable nil nil [1034 1060])
            ("org-export-define-backend" code nil nil [1086 5144])
            ("org-export-texinfo" customgroup (:user-visible-flag t) nil [5182 5369])
            ("org-texinfo-coding-system" variable nil nil [5386 5585])
            ("org-texinfo-default-class" variable (:default-value "info") nil [5587 5730])
            ("org-texinfo-classes" variable (:default-value (quote (("info" "@documentencoding AUTO
@documentlanguage AUTO" ("@chapter %s" . "@unnumbered %s") ("@section %s" . "@unnumberedsec %s") ("@subsection %s" . "@unnumberedsubsec %s") ("@subsubsection %s" . "@unnumberedsubsubsec %s"))))) nil [5732 7862])
            ("org-texinfo-format-headline-function" variable (:default-value (quote org-texinfo-format-headline-default-function)) nil [7879 8490])
            ("org-texinfo-node-description-column" variable (:default-value 32) nil [8518 8785])
            ("org-texinfo-active-timestamp-format" variable (:default-value "@emph{%s}") nil [8804 8971])
            ("org-texinfo-inactive-timestamp-format" variable (:default-value "@emph{%s}") nil [8973 9144])
            ("org-texinfo-diary-timestamp-format" variable (:default-value "@emph{%s}") nil [9146 9311])
            ("org-texinfo-link-with-unknown-path-format" variable (:default-value "@indicateurl{%s}") nil [9325 9494])
            ("org-texinfo-tables-verbatim" variable nil nil [9509 9646])
            ("org-texinfo-table-scientific-notation" variable (:default-value "%s\\,(%s)") nil [9648 10019])
            ("org-texinfo-def-table-markup" variable (:default-value "@samp") nil [10021 10159])
            ("org-texinfo-text-markup-alist" variable (:default-value (quote ((bold . "@strong{%s}") (code . code) (italic . "@emph{%s}") (verbatim . verb)))) nil [10179 11024])
            ("org-texinfo-format-drawer-function" variable (:default-value (lambda (_name contents) contents)) nil [11040 11519])
            ("org-texinfo-format-inlinetask-function" variable (:default-value (quote org-texinfo-format-inlinetask-default-function)) nil [11539 12159])
            ("org-texinfo-info-process" variable (:default-value (quote ("makeinfo %f"))) nil [12179 12734])
            ("org-texinfo-logfiles-extensions" variable (:default-value (quote ("aux" "toc" "cp" "fn" "ky" "pg" "tp" "vr"))) nil [12736 13037])
            ("org-texinfo-remove-logfiles" variable (:default-value t) nil [13039 13375])
            ("org-texinfo-max-toc-depth" variable
               (:constant-flag t
                :default-value 4)
                nil [13392 13620])
            ("org-texinfo-supported-coding-systems" variable
               (:constant-flag t
                :default-value (quote ("US-ASCII" "UTF-8" "ISO-8859-15" "ISO-8859-1" "ISO-8859-2" "koi8-r" "koi8-u")))
                nil [13622 14001])
            ("org-texinfo-inline-image-rules" variable
               (:constant-flag t
                :default-value (list (cons "file" (regexp-opt (quote ("eps" "pdf" "png" "jpg" "jpeg" "gif" "svg"))))))
                nil [14003 14191])
            ("org-texinfo--filter-section-blank-lines" function (:arguments ("headline" "_backend" "_info")) nil [14219 14424])
            ("org-texinfo--normalize-headlines" function (:arguments ("tree" "_backend" "info")) nil [14426 15235])
            ("org-texinfo--find-verb-separator" function (:arguments ("s")) nil [15237 15618])
            ("org-texinfo--text-markup" function (:arguments ("text" "markup" "_info")) nil [15620 16213])
            ("org-texinfo--get-node" function (:arguments ("blob" "info")) nil [16215 16904])
            ("org-texinfo--sanitize-node" function (:arguments ("title")) nil [16906 17305])
            ("org-texinfo--sanitize-content" function (:arguments ("text")) nil [17307 17476])
            ("org-texinfo--wrap-float" function (:arguments ("value" "info" "type" "label" "caption" "short")) nil [17478 18874])
            ("org-texinfo-template" function (:arguments ("contents" "info")) nil [18890 23465])
            ("org-texinfo-bold" function (:arguments ("_bold" "contents" "info")) nil [23506 23729])
            ("org-texinfo-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [23750 23974])
            ("org-texinfo-clock" function (:arguments ("clock" "_contents" "info")) nil [23988 24469])
            ("org-texinfo-code" function (:arguments ("code" "_contents" "info")) nil [24482 24719])
            ("org-texinfo-drawer" function (:arguments ("drawer" "contents" "info")) nil [24734 25087])
            ("org-texinfo-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [25109 25335])
            ("org-texinfo-entity" function (:arguments ("entity" "_contents" "_info")) nil [25350 25673])
            ("org-texinfo-example-block" function (:arguments ("example-block" "_contents" "info")) nil [25695 25980])
            ("org-texinfo-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [26000 26330])
            ("org-texinfo-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [26352 26660])
            ("org-texinfo-fixed-width" function (:arguments ("fixed-width" "_contents" "_info")) nil [26680 27015])
            ("org-texinfo-footnote-reference" function (:arguments ("footnote" "_contents" "info")) nil [27042 27395])
            ("org-texinfo-headline" function (:arguments ("headline" "contents" "info")) nil [27412 30936])
            ("org-texinfo-format-headline-default-function" function (:arguments ("todo" "_todo-type" "priority" "text" "tags")) nil [30938 31303])
            ("org-texinfo-inline-src-block" function (:arguments ("inline-src-block" "_contents" "_info")) nil [31328 31722])
            ("org-texinfo-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [31741 32556])
            ("org-texinfo-format-inlinetask-default-function" function (:arguments ("todo" "_todo-type" "priority" "title" "tags" "contents")) nil [32558 33011])
            ("org-texinfo-italic" function (:arguments ("_italic" "contents" "info")) nil [33026 33259])
            ("org-texinfo-item" function (:arguments ("item" "contents" "info")) nil [33272 33610])
            ("org-texinfo-keyword" function (:arguments ("keyword" "_contents" "info")) nil [33626 34585])
            ("org-texinfo-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [34604 34794])
            ("org-texinfo-link" function (:arguments ("link" "desc" "info")) nil [34807 38099])
            ("org-texinfo--inline-image" function (:arguments ("link" "info")) nil [38101 39275])
            ("org-texinfo-make-menu" function (:arguments ("scope" "info" "master")) nil [39289 40169])
            ("org-texinfo--build-menu" function (:arguments ("scope" "info" "level")) nil [40171 40992])
            ("org-texinfo--format-entries" function (:arguments ("entries" "info")) nil [40994 41684])
            ("org-texinfo--menu-entries" function (:arguments ("scope" "info")) nil [41686 42485])
            ("org-texinfo-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [42507 42883])
            ("org-texinfo-paragraph" function (:arguments ("_paragraph" "contents" "_info")) nil [42901 43132])
            ("org-texinfo-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [43151 43915])
            ("org-texinfo-plain-text" function (:arguments ("text" "info")) nil [43934 45132])
            ("org-texinfo-planning" function (:arguments ("planning" "_contents" "info")) nil [45149 46163])
            ("org-texinfo-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [46187 46498])
            ("org-texinfo-quote-block" function (:arguments ("quote-block" "contents" "_info")) nil [46518 46928])
            ("org-texinfo-radio-target" function (:arguments ("radio-target" "text" "info")) nil [46949 47227])
            ("org-texinfo-section" function (:arguments ("section" "contents" "info")) nil [47243 47600])
            ("org-texinfo-special-block" function (:arguments ("special-block" "contents" "_info")) nil [47622 48078])
            ("org-texinfo-src-block" function (:arguments ("src-block" "_contents" "info")) nil [48096 48920])
            ("org-texinfo-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [48946 49197])
            ("org-texinfo-strike-through" function (:arguments ("_strike-through" "contents" "info")) nil [49221 49494])
            ("org-texinfo-subscript" function (:arguments ("_subscript" "contents" "_info")) nil [49512 49745])
            ("org-texinfo-superscript" function (:arguments ("_superscript" "contents" "_info")) nil [49765 50004])
            ("org-texinfo-table" function (:arguments ("table" "contents" "info")) nil [50018 51011])
            ("org-texinfo-table-column-widths" function (:arguments ("table" "info")) nil [51013 51947])
            ("org-texinfo-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [51966 52591])
            ("org-texinfo-table-row" function (:arguments ("table-row" "contents" "info")) nil [52609 53225])
            ("org-texinfo-target" function (:arguments ("target" "_contents" "info")) nil [53240 53471])
            ("org-texinfo-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [53489 54096])
            ("org-texinfo-underline" function (:arguments ("_underline" "contents" "info")) nil [54114 54362])
            ("org-texinfo-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [54379 54639])
            ("org-texinfo-verse-block" function (:arguments ("_verse-block" "contents" "_info")) nil [54659 54906])
            ("org-texinfo-export-to-texinfo" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [54937 56119])
            ("org-texinfo-export-to-info" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [56121 57445])
            ("org-texinfo-publish-to-texinfo" function (:arguments ("plist" "filename" "pub-dir")) nil [57462 57798])
            ("org-texinfo-convert-region-to-texinfo" function (:user-visible-flag t) nil [57815 58142])
            ("org-texinfo-compile" function (:arguments ("file")) nil [58144 59013])
            ("ox-texinfo" package nil nil [59016 59037]))          
      :file "ox-texinfo.el"
      :pointmax 59142
      :fsize 59141
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [983 1000])
            ("format-spec" include nil nil [1001 1023])
            ("ox" include nil nil [1024 1037])
            ("org-compat" include nil nil [1038 1059])
            ("table" include nil nil [1060 1089])
            ("org-export-define-backend" code nil nil [1112 4501])
            ("declare-function" code nil nil [4593 4648])
            ("declare-function" code nil nil [4649 4710])
            ("declare-function" code nil nil [4711 4775])
            ("declare-function" code nil nil [4776 4859])
            ("declare-function" code nil nil [4860 4918])
            ("nxml-auto-insert-xml-declaration-flag" variable nil nil [4920 4966])
            ("archive-zip-extract" variable nil nil [4982 5010])
            ("hfy-end-span-handler" variable nil nil [5033 5062])
            ("hfy-begin-span-handler" variable nil nil [5088 5119])
            ("hfy-face-to-css" variable nil nil [5145 5169])
            ("hfy-html-quote-map" variable nil nil [5195 5222])
            ("hfy-html-quote-regex" variable nil nil [5248 5277])
            ("org-odt-lib-dir" variable
               (:constant-flag t
                :default-value (file-name-directory (or load-file-name (buffer-file-name))))
                nil [5330 5524])
            ("org-odt-data-dir" variable (:default-value (expand-file-name "../../etc/" org-odt-lib-dir)) nil [5526 5713])
            ("org-odt-special-string-regexps" variable
               (:constant-flag t
                :default-value (quote (("\\\\-" . "&#x00ad;\\1") ("---\\([^-]\\)" . "&#x2014;\\1") ("--\\([^-]\\)" . "&#x2013;\\1") ("\\.\\.\\." . "&#x2026;"))))
                nil [5715 5981])
            ("org-odt-schema-dir-list" variable
               (:constant-flag t
                :default-value (list (and org-odt-data-dir (expand-file-name "./schema/" org-odt-data-dir)) (eval-when-compile (and (boundp (quote org-odt-data-dir)) org-odt-data-dir (expand-file-name "./schema/" org-odt-data-dir)))))
                nil [5983 6508])
            ("org-odt-styles-dir-list" variable
               (:constant-flag t
                :default-value (list (and org-odt-data-dir (expand-file-name "./styles/" org-odt-data-dir)) (eval-when-compile (and (boundp (quote org-odt-data-dir)) org-odt-data-dir (expand-file-name "./styles/" org-odt-data-dir))) (expand-file-name "../etc/styles/" org-odt-lib-dir) (expand-file-name "./etc/styles/" org-odt-lib-dir) (expand-file-name "./org/" data-directory)))
                nil [6510 7186])
            ("org-odt-styles-dir" variable
               (:constant-flag t
                :default-value (let ((styles-dir (cl-find-if (lambda (dir) (and dir (file-readable-p (expand-file-name "OrgOdtContentTemplate.xml" dir)) (file-readable-p (expand-file-name "OrgOdtStyles.xml" dir)))) org-odt-styles-dir-list))) (unless styles-dir (error "Error (ox-odt): Cannot find factory styles files, aborting")) styles-dir))
                nil [7188 8108])
            ("org-odt-bookmark-prefix" variable
               (:constant-flag t
                :default-value "OrgXref.")
                nil [8110 8155])
            ("org-odt-manifest-file-entry-tag" variable
               (:constant-flag t
                :default-value "
<manifest:file-entry manifest:media-type=\"%s\" manifest:full-path=\"%s\"%s/>")
                nil [8157 8283])
            ("org-odt-file-extensions" variable
               (:constant-flag t
                :default-value (quote (("odt" . "OpenDocument Text") ("ott" . "OpenDocument Text Template") ("odm" . "OpenDocument Master Document") ("ods" . "OpenDocument Spreadsheet") ("ots" . "OpenDocument Spreadsheet Template") ("odg" . "OpenDocument Drawing (Graphics)") ("otg" . "OpenDocument Drawing Template") ("odp" . "OpenDocument Presentation") ("otp" . "OpenDocument Presentation Template") ("odi" . "OpenDocument Image") ("odf" . "OpenDocument Formula") ("odc" . "OpenDocument Chart"))))
                nil [8285 8827])
            ("org-odt-table-style-format" variable
               (:constant-flag t
                :default-value "
<style:style style:name=\"%s\" style:family=\"table\">
  <style:table-properties style:rel-width=\"%s%%\" fo:margin-top=\"0cm\" fo:margin-bottom=\"0.20cm\" table:align=\"center\"/>
</style:style>
")
                nil [8829 9114])
            ("org-odt-automatic-styles" variable (:default-value (quote nil)) nil [9116 9703])
            ("org-odt-object-counters" variable nil nil [9705 9877])
            ("org-odt-src-block-paragraph-format" variable (:default-value "<style:style style:name=\"OrgSrcBlock\" style:family=\"paragraph\" style:parent-style-name=\"Preformatted_20_Text\">
   <style:paragraph-properties fo:background-color=\"%s\" fo:padding=\"0.049cm\" fo:border=\"0.51pt solid #000000\" style:shadow=\"none\">
    <style:background-image/>
   </style:paragraph-properties>
   <style:text-properties fo:color=\"%s\"/>
  </style:style>") nil [9879 10556])
            ("hfy-optimizations" variable nil nil [10558 10584])
            ("org-odt-embedded-formulas-count" variable nil nil [10585 10627])
            ("org-odt-embedded-images-count" variable nil nil [10628 10668])
            ("org-odt-image-size-probe-method" variable (:default-value (append (and (executable-find "identify") (quote (imagemagick))) (quote (emacs fixed)))) nil [10669 10861])
            ("org-odt-default-image-sizes-alist" variable (:default-value (quote (("as-char" 5 . 0.4) ("paragraph" 5 . 5)))) nil [10863 11031])
            ("org-odt-max-image-size" variable (:default-value (quote (17.0 . 20.0))) nil [11184 11277])
            ("org-odt-label-styles" variable
               (:constant-flag t
                :default-value (quote (("math-formula" "%c" "text" "(%n)") ("math-label" "(%n)" "text" "(%n)") ("category-and-value" "%e %n: %c" "category-and-value" "%e %n") ("value" "%e %n: %c" "value" "%n"))))
                nil [11279 12278])
            ("org-odt-category-map-alist" variable (:default-value (quote (("__Table__" "Table" "value" "Table" org-odt--enumerable-p) ("__Figure__" "Illustration" "value" "Figure" org-odt--enumerable-image-p) ("__MathFormula__" "Text" "math-formula" "Equation" org-odt--enumerable-formula-p) ("__DvipngImage__" "Equation" "value" "Equation" org-odt--enumerable-latex-image-p) ("__Listing__" "Listing" "value" "Listing" org-odt--enumerable-p)))) nil [12280 13443])
            ("org-odt-manifest-file-entries" variable nil nil [13445 13487])
            ("hfy-user-sheet-assoc" variable nil nil [13488 13517])
            ("org-odt-zip-dir" variable nil nil [13519 13603])
            ("org-export-odt" customgroup (:user-visible-flag t) nil [13642 13765])
            ("org-odt-prettify-xml" variable nil nil [13784 14137])
            ("rng-loc" include nil nil [14162 14180])
            ("org-odt-schema-dir" variable (:default-value (cl-find-if (lambda (dir) (and dir (file-expand-wildcards (expand-file-name "od-manifest-schema*.rnc" dir)) (file-expand-wildcards (expand-file-name "od-schema*.rnc" dir)) (file-readable-p (expand-file-name "schemas.xml" dir)))) org-odt-schema-dir-list)) nil [14181 16043])
            ("org-odt-content-template-file" variable nil nil [16068 16414])
            ("org-odt-styles-file" variable nil nil [16416 17961])
            ("org-odt-display-outline-level" variable (:default-value 2) nil [17963 18166])
            ("org-odt-convert-processes" variable (:default-value (quote (("LibreOffice" "soffice --headless --convert-to %f%x --outdir %d %i") ("unoconv" "unoconv -f %f -o %d %i")))) nil [18194 19255])
            ("org-odt-convert-process" variable (:default-value "LibreOffice") nil [19257 19788])
            ("org-odt-convert-capabilities" variable (:default-value (quote (("Text" ("odt" "ott" "doc" "rtf" "docx") (("pdf" "pdf") ("odt" "odt") ("rtf" "rtf") ("ott" "ott") ("doc" "doc" ":\"MS Word 97\"") ("docx" "docx") ("html" "html"))) ("Web" ("html") (("pdf" "pdf") ("odt" "odt") ("html" "html"))) ("Spreadsheet" ("ods" "ots" "xls" "csv" "xlsx") (("pdf" "pdf") ("ots" "ots") ("html" "html") ("csv" "csv") ("ods" "ods") ("xls" "xls") ("xlsx" "xlsx"))) ("Presentation" ("odp" "otp" "ppt" "pptx") (("pdf" "pdf") ("swf" "swf") ("odp" "odp") ("otp" "otp") ("ppt" "ppt") ("pptx" "pptx") ("odg" "odg")))))) nil [19790 22389])
            ("org-odt-preferred-output-format" variable nil nil [22391 23203])
            ("put" code nil nil [23219 23287])
            ("org-odt-format-drawer-function" variable (:default-value (lambda (_name contents) contents)) nil [23304 23768])
            ("org-odt-format-headline-function" variable (:default-value (quote org-odt-format-headline-default-function)) nil [23786 24373])
            ("org-odt-format-inlinetask-function" variable (:default-value (quote org-odt-format-inlinetask-default-function)) nil [24394 25041])
            ("org-odt-with-latex" variable (:default-value org-export-with-latex) nil [25056 26154])
            ("org-odt-inline-formula-rules" variable (:default-value (quote (("file" . "\\.\\(mathml\\|mml\\|odf\\)\\'")))) nil [26169 26629])
            ("org-odt-inline-image-rules" variable (:default-value (quote (("file" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'")))) nil [26631 27097])
            ("org-odt-pixels-per-inch" variable (:default-value 96.0) nil [27099 27396])
            ("org-odt-create-custom-styles-for-srcblocks" variable (:default-value t) nil [27415 28151])
            ("org-odt-fontify-srcblocks" variable (:default-value t) nil [28153 28504])
            ("org-odt-table-styles" variable (:default-value (quote (("OrgEquation" "OrgEquation" ((use-first-column-styles . t) (use-last-column-styles . t))) ("TableWithHeaderRowAndColumn" "Custom" ((use-first-row-styles . t) (use-first-column-styles . t))) ("TableWithFirstRowandLastRow" "Custom" ((use-first-row-styles . t) (use-last-row-styles . t))) ("GriddedTable" "Custom" nil)))) nil [28519 32502])
            ("org-odt-use-date-fields" variable nil nil [32521 33820])
            ("org-odt--format-timestamp" function (:arguments ("timestamp" "end" "iso-date-p")) nil [33860 35968])
            ("org-odt--frame" function (:arguments ("text" "width" "height" "style" "extra" "anchor-type" "title-and-desc")) nil [35982 36809])
            ("org-odt--zip-extract" function (:arguments ("archive" "members" "target")) nil [36835 37705])
            ("org-odt--target" function (:arguments ("text" "id")) nil [37720 37983])
            ("org-odt--textbox" function (:arguments ("text" "width" "height" "style" "extra" "anchor-type")) nil [37999 38344])
            ("org-odt--format-toc" function (:arguments ("title" "entries" "depth")) nil [38372 39761])
            ("cl-defun" code nil nil [39763 40803])
            ("org-odt-toc" function (:arguments ("depth" "info" "scope")) nil [40805 42436])
            ("org-odt-add-automatic-style" function (:arguments ("object-type" "object-props")) nil [42461 43562])
            ("org-odt--checkbox" function (:arguments ("item")) nil [43579 43922])
            ("org-odt--build-date-styles" function (:arguments ("fmt" "style")) nil [43938 47674])
            ("org-odt-template" function (:arguments ("contents" "info")) nil [47676 58681])
            ("org-odt-bold" function (:arguments ("_bold" "contents" "_info")) nil [58722 58970])
            ("org-odt-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [58992 59214])
            ("org-odt-clock" function (:arguments ("clock" "contents" "info")) nil [59229 59892])
            ("org-odt-code" function (:arguments ("code" "_contents" "_info")) nil [59906 60207])
            ("org-odt-drawer" function (:arguments ("drawer" "contents" "info")) nil [60223 60564])
            ("org-odt-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [60587 60829])
            ("org-odt-entity" function (:arguments ("entity" "_contents" "_info")) nil [60845 61064])
            ("org-odt-example-block" function (:arguments ("example-block" "_contents" "info")) nil [61087 61311])
            ("org-odt-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [61335 61631])
            ("org-odt-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [61653 61971])
            ("org-odt-fixed-width" function (:arguments ("fixed-width" "_contents" "info")) nil [61992 62241])
            ("org-odt-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [62334 64691])
            ("org-odt-format-headline--wrap" function (:arguments ("headline" "backend" "info" "format-function" "extra-keys")) nil [64709 66345])
            ("org-odt-headline" function (:arguments ("headline" "contents" "info")) nil [66347 68918])
            ("org-odt-format-headline-default-function" function (:arguments ("todo" "todo-type" "priority" "text" "tags")) nil [68920 69797])
            ("org-odt-horizontal-rule" function (:arguments ("_horizontal-rule" "_contents" "_info")) nil [69822 70097])
            ("org-odt--find-verb-separator" function (:arguments ("s")) nil [70184 70561])
            ("org-odt-inline-src-block" function (:arguments ("_inline-src-block" "_contents" "_info")) nil [70563 70798])
            ("org-odt-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [70818 71632])
            ("org-odt-format-inlinetask-default-function" function (:arguments ("todo" "todo-type" "priority" "name" "tags" "contents")) nil [71634 72198])
            ("org-odt-italic" function (:arguments ("_italic" "contents" "_info")) nil [72213 72473])
            ("org-odt-item" function (:arguments ("item" "contents" "info")) nil [72487 73060])
            ("org-odt-keyword" function (:arguments ("keyword" "_contents" "info")) nil [73076 73888])
            ("org-odt-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [74295 74638])
            ("org-odt-latex-fragment" function (:arguments ("latex-fragment" "_contents" "_info")) nil [74829 75202])
            ("org-odt-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [75222 75418])
            ("org-odt--enumerate" function (:arguments ("element" "info" "predicate" "n")) nil [75464 76671])
            ("org-odt-format-label" function (:arguments ("element" "info" "op")) nil [76673 79928])
            ("org-odt--copy-image-file" function (:arguments ("path")) nil [79960 80670])
            ("org-odt--image-size" function (:arguments ("file" "info" "user-width" "user-height" "scale" "dpi" "embed-as")) nil [80672 83033])
            ("org-odt-link--inline-image" function (:arguments ("element" "info")) nil [83035 86106])
            ("org-odt-link--inline-formula" function (:arguments ("element" "info")) nil [86137 88025])
            ("org-odt--copy-formula-file" function (:arguments ("src-file")) nil [88027 89191])
            ("org-odt--render-image/formula" function (:arguments ("cfg-key" "href" "width" "height" "captions" "user-frame-params" "title-and-desc")) nil [89207 93313])
            ("org-odt--enumerable-p" function (:arguments ("element" "_info")) nil [93315 93495])
            ("org-odt--enumerable-image-p" function (:arguments ("element" "info")) nil [93497 94081])
            ("org-odt--enumerable-latex-image-p" function (:arguments ("element" "info")) nil [94083 94664])
            ("org-odt--enumerable-formula-p" function (:arguments ("element" "info")) nil [94666 95098])
            ("org-odt--standalone-link-p" function (:arguments ("element" "_info" "paragraph-predicate" "link-predicate")) nil [95100 96426])
            ("org-odt-link--infer-description" function (:arguments ("destination" "info")) nil [96428 100351])
            ("org-odt-link" function (:arguments ("link" "desc" "info")) nil [100353 105247])
            ("org-odt-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [105270 105652])
            ("org-odt--paragraph-style" function (:arguments ("paragraph")) nil [105670 106060])
            ("org-odt--format-paragraph" function (:arguments ("paragraph" "contents" "info" "default" "center" "quote")) nil [106062 107024])
            ("org-odt-paragraph" function (:arguments ("paragraph" "contents" "info")) nil [107026 107387])
            ("org-odt-plain-list" function (:arguments ("plain-list" "contents" "_info")) nil [107407 108189])
            ("org-odt--encode-tabs-and-spaces" function (:arguments ("line")) nil [108208 108532])
            ("org-odt--encode-plain-text" function (:arguments ("text" "no-whitespace-filling")) nil [108534 108825])
            ("org-odt-plain-text" function (:arguments ("text" "info")) nil [108827 109784])
            ("org-odt-planning" function (:arguments ("planning" "contents" "info")) nil [109802 110813])
            ("org-odt-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [110838 111181])
            ("org-odt-quote-block" function (:arguments ("_quote-block" "contents" "_info")) nil [111202 111414])
            ("org-odt-format-section" function (:arguments ("text" "style" "name")) nil [111431 111716])
            ("org-odt-section" function (:arguments ("_section" "contents" "_info")) nil [111719 111929])
            ("org-odt-radio-target" function (:arguments ("radio-target" "text" "info")) nil [111950 112207])
            ("org-odt-special-block" function (:arguments ("special-block" "contents" "info")) nil [112230 113662])
            ("org-odt-hfy-face-to-css" function (:arguments ("fn")) nil [113681 115063])
            ("org-odt-htmlfontify-string" function (:arguments ("line")) nil [115065 115769])
            ("org-odt-do-format-code" function (:arguments ("code" "info" "lang" "refs" "retain-labels" "num-start")) nil [115771 117632])
            ("org-odt-format-code" function (:arguments ("element" "info")) nil [117634 118124])
            ("org-odt-src-block" function (:arguments ("src-block" "_contents" "info")) nil [118126 118820])
            ("org-odt-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [118847 119205])
            ("org-odt-strike-through" function (:arguments ("_strike-through" "contents" "_info")) nil [119229 119526])
            ("org-odt-subscript" function (:arguments ("_subscript" "contents" "_info")) nil [119545 119826])
            ("org-odt-superscript" function (:arguments ("_superscript" "contents" "_info")) nil [119847 120136])
            ("org-odt-table-style-spec" function (:arguments ("element" "info")) nil [120156 120436])
            ("org-odt-get-table-cell-styles" function (:arguments ("table-cell" "info")) nil [120438 123202])
            ("org-odt-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [123204 125682])
            ("org-odt-table-row" function (:arguments ("table-row" "contents" "info")) nil [125701 126944])
            ("org-odt-table-first-row-data-cells" function (:arguments ("table" "info")) nil [126959 127353])
            ("org-odt--table" function (:arguments ("table" "contents" "info")) nil [127355 129298])
            ("org-odt-table" function (:arguments ("table" "contents" "info")) nil [129300 135024])
            ("org-odt-target" function (:arguments ("target" "_contents" "info")) nil [135040 135261])
            ("org-odt-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [135280 136953])
            ("org-odt-underline" function (:arguments ("_underline" "contents" "_info")) nil [136972 137245])
            ("org-odt-verbatim" function (:arguments ("verbatim" "_contents" "_info")) nil [137263 137580])
            ("org-odt-verse-block" function (:arguments ("_verse-block" "contents" "_info")) nil [137601 138170])
            ("org-odt--translate-latex-fragments" function (:arguments ("tree" "_backend" "info")) nil [138210 141824])
            ("org-odt--translate-description-lists" function (:arguments ("tree" "_backend" "info")) nil [141968 143683])
            ("org-odt--translate-list-tables" function (:arguments ("tree" "_backend" "info")) nil [144896 146489])
            ("org-odt-create-manifest-file-entry" function (:arguments ("args")) nil [146520 146619])
            ("org-odt-write-manifest-file" function nil nil [146621 147425])
            ("org-odt--export-wrap" function (:arguments ("out-file" "body")) nil [147427 151766])
            ("org-odt-export-as-odf" function
               (:user-visible-flag t
                :arguments ("latex-frag" "odf-file"))
                nil [151821 153786])
            ("org-odt-export-as-odf-and-open" function (:user-visible-flag t) nil [153803 154087])
            ("org-odt-export-to-odt" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "ext-plist"))
                nil [154139 156618])
            ("org-odt-reachable-p" function (:arguments ("in-fmt" "out-fmt")) nil [156674 157017])
            ("org-odt-do-convert" function (:arguments ("in-file" "out-fmt" "open")) nil [157019 158540])
            ("org-odt-do-reachable-formats" function (:arguments ("in-fmt")) nil [158542 159368])
            ("org-odt-reachable-formats" function (:arguments ("in-fmt")) nil [159370 159660])
            ("org-odt-convert-read-params" function nil nil [159662 160309])
            ("org-odt-convert" function
               (:user-visible-flag t
                :arguments ("in-file" "out-fmt" "open"))
                nil [160326 160842])
            ("dolist" code nil nil [160873 161067])
            ("ox-odt" package nil nil [161069 161086]))          
      :file "ox-odt.el"
      :pointmax 161187
      :fsize 161186
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ox" include nil nil [911 924])
            ("declare-function" code nil nil [925 991])
            ("htmlize-output-type" variable nil nil [992 1020])
            ("org-export-org" customgroup (:user-visible-flag t) nil [1022 1197])
            ("org-org-htmlized-css-url" variable nil nil [1199 1933])
            ("org-export-define-backend" code nil nil [1935 4017])
            ("org-org-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [4019 4279])
            ("org-org-identity" function (:arguments ("blob" "contents" "_info")) nil [4281 4609])
            ("org-org-headline" function (:arguments ("headline" "contents" "info")) nil [4611 5303])
            ("org-org-keyword" function (:arguments ("keyword" "_contents" "_info")) nil [5305 5632])
            ("org-org-link" function (:arguments ("link" "contents" "_info")) nil [5634 5947])
            ("org-org-template" function (:arguments ("contents" "info")) nil [5949 7318])
            ("org-org-section" function (:arguments ("section" "contents" "info")) nil [7320 8379])
            ("org-org-export-as-org" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [8396 9555])
            ("org-org-export-to-org" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [9572 10648])
            ("org-org-publish-to-org" function (:arguments ("plist" "filename" "pub-dir")) nil [10665 12110])
            ("ox-org" package nil nil [12113 12130]))          
      :file "ox-org.el"
      :pointmax 12231
      :fsize 12230
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-macs" include nil nil [1474 1493])
            ("org-compat" include nil nil [1494 1515])
            ("org" include nil nil [1516 1530])
            ("cl-lib" include nil nil [1532 1549])
            ("declare-function" code nil nil [1551 1619])
            ("declare-function" code nil nil [1620 1683])
            ("declare-function" code nil nil [1684 1746])
            ("org-inlinetask-show-first-star" variable nil nil [1747 1786])
            ("org-indent" customgroup (:user-visible-flag t) nil [1788 1907])
            ("org-indent-inlinetask-first-star" variable (:default-value (org-add-props "*" (quote (face org-warning)))) nil [1909 2041])
            ("org-indent-agent-timer" variable nil nil [2042 2117])
            ("org-indent-agentized-buffers" variable nil nil [2118 2212])
            ("org-indent-agent-resume-timer" variable nil nil [2213 2326])
            ("org-indent-agent-active-delay" variable (:default-value (quote (0 2 0))) nil [2327 2491])
            ("org-indent-agent-passive-delay" variable (:default-value (quote (0 0 400000))) nil [2492 2665])
            ("org-indent-agent-resume-delay" variable (:default-value (quote (0 0 100000))) nil [2666 2792])
            ("org-indent--initial-marker" variable nil nil [2793 2936])
            ("org-hide-leading-stars-before-indent-mode" variable nil nil [2937 3009])
            ("org-indent-modified-headline-flag" variable nil nil [3010 3173])
            ("org-indent-boundary-char" variable (:default-value 32) nil [3176 3525])
            ("org-indent-mode-turns-off-org-adapt-indentation" variable (:default-value t) nil [3527 3777])
            ("org-indent-mode-turns-on-hiding-stars" variable (:default-value t) nil [3779 3966])
            ("org-indent-indentation-per-level" variable (:default-value 2) nil [3968 4103])
            ("org-indent" variable
               (:default-value (quote ((t (:inherit org-hide))))
                :type "face")
                nil [4105 4321])
            ("org-indent-remove-properties" function (:arguments ("beg" "end")) nil [4323 4522])
            ("define-minor-mode" code nil nil [4539 7217])
            ("org-indent-indent-buffer" function (:user-visible-flag t) nil [7219 7643])
            ("org-indent-remove-properties-from-string" function (:arguments ("string")) nil [7645 7850])
            ("org-indent-initialize-agent" function nil nil [7852 8813])
            ("org-indent-initialize-buffer" function (:arguments ("buffer" "delay")) nil [8815 9660])
            ("org-indent-set-line-properties" function (:arguments ("level" "indentation" "heading")) nil [9662 11023])
            ("org-indent-add-properties" function (:arguments ("beg" "end" "delay")) nil [11025 13178])
            ("org-indent-notify-modified-headline" function (:arguments ("beg" "end")) nil [13180 13804])
            ("org-indent-refresh-maybe" function (:arguments ("beg" "end" "_")) nil [13806 14773])
            ("org-indent" package nil nil [14775 14796]))          
      :file "org-indent.el"
      :pointmax 14901
      :fsize 14900
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-release" function nil nil [84 247])
            ("org-git-version" function nil nil [263 439])
            ("org-odt-data-dir" variable (:default-value "/usr/share/emacs/etc/org") nil [455 539])
            ("org-version" package nil nil [542 564]))          
      :file "org-version.el"
      :pointmax 689
      :fsize 688
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1210 1227])
            ("ox-ascii" include nil nil [1228 1247])
            ("declare-function" code nil nil [1248 1308])
            ("org-export-icalendar" customgroup (:user-visible-flag t) nil [1346 1484])
            ("org-icalendar-combined-agenda-file" variable (:default-value "~/org.ics") nil [1486 1812])
            ("org-icalendar-alarm-time" variable nil nil [1814 2242])
            ("org-icalendar-combined-name" variable (:default-value "OrgMode") nil [2244 2416])
            ("org-icalendar-combined-description" variable nil nil [2418 2586])
            ("org-icalendar-exclude-tags" variable nil nil [2588 2879])
            ("org-icalendar-use-deadline" variable (:default-value (quote (event-if-not-todo todo-due))) nil [2881 3617])
            ("org-icalendar-use-scheduled" variable (:default-value (quote (todo-start))) nil [3619 4512])
            ("org-icalendar-categories" variable (:default-value (quote (local-tags category))) nil [4514 5175])
            ("org-icalendar-with-timestamps" variable (:default-value (quote active)) nil [5177 5785])
            ("org-icalendar-include-todo" variable nil nil [5787 6381])
            ("org-icalendar-include-bbdb-anniversaries" variable nil nil [6383 6613])
            ("org-icalendar-include-sexps" variable (:default-value t) nil [6615 6846])
            ("org-icalendar-include-body" variable (:default-value t) nil [6848 7289])
            ("org-icalendar-store-UID" variable nil nil [7291 8015])
            ("org-icalendar-timezone" variable (:default-value (getenv "TZ")) nil [8017 8291])
            ("org-icalendar-date-time-format" variable (:default-value ":%Y%m%dT%H%M%S") nil [8293 8978])
            ("org-icalendar-after-save-hook" variable nil nil [8980 9228])
            ("org-export-define-derived-backend" code nil nil [9254 10911])
            ("org-icalendar-create-uid" function (:arguments ("file" "bell")) nil [10940 11503])
            ("org-icalendar-blocked-headline-p" function (:arguments ("headline" "info")) nil [11505 12704])
            ("org-icalendar-use-UTC-date-time-p" function nil nil [12706 12924])
            ("org-agenda-default-appointment-duration" variable nil nil [12926 12974])
            ("org-icalendar-convert-timestamp" function (:arguments ("timestamp" "keyword" "end" "utc")) nil [12997 15408])
            ("org-icalendar-dtstamp" function nil nil [15410 15538])
            ("org-icalendar-get-categories" function (:arguments ("entry" "info")) nil [15540 16322])
            ("org-icalendar-transcode-diary-sexp" function (:arguments ("sexp" "uid" "summary")) nil [16324 16917])
            ("org-icalendar-cleanup-string" function (:arguments ("s")) nil [16919 17230])
            ("org-icalendar-fold-string" function (:arguments ("s")) nil [17232 18058])
            ("org-icalendar-clear-blank-lines" function (:arguments ("headline" "_back-end" "_info")) nil [18076 18335])
            ("org-icalendar-entry" function (:arguments ("entry" "contents" "info")) nil [18768 23925])
            ("org-icalendar--vevent" function (:arguments ("entry" "timestamp" "uid" "summary" "location" "description" "categories")) nil [23927 25549])
            ("org-icalendar--vtodo" function (:arguments ("entry" "uid" "summary" "location" "description" "categories")) nil [25551 27505])
            ("org-icalendar--valarm" function (:arguments ("entry" "timestamp" "summary")) nil [27507 28526])
            ("org-icalendar-template" function (:arguments ("contents" "info")) nil [28544 29273])
            ("org-icalendar--vcalendar" function (:arguments ("name" "owner" "tz" "description" "contents")) nil [29275 29926])
            ("org-icalendar-export-to-ics" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only"))
                nil [29973 31347])
            ("org-icalendar-export-agenda-files" function
               (:user-visible-flag t
                :arguments ("async"))
                nil [31364 32492])
            ("org-icalendar-combine-agenda-files" function
               (:user-visible-flag t
                :arguments ("async"))
                nil [32509 33257])
            ("org-icalendar-export-current-agenda" function (:arguments ("file")) nil [33259 34435])
            ("org-icalendar--combine-files" function (:arguments ("files")) nil [34437 35781])
            ("ox-icalendar" package nil nil [35784 35807]))          
      :file "ox-icalendar.el"
      :pointmax 35914
      :fsize 35913
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4157 4174])
            ("org-element" include nil nil [4175 4197])
            ("org-macro" include nil nil [4198 4218])
            ("ox" include nil nil [4219 4232])
            ("ob" include nil nil [4233 4246])
            ("cl-defstruct" code nil nil [4264 4403])
            ("org-lint-missing-checker-name" function (:arguments ("_")) nil [4425 4553])
            ("org-lint--checkers" variable
               (:constant-flag t
                :default-value (list (make-org-lint-checker :name (quote duplicate-custom-id) :description "Report duplicates CUSTOM_ID properties" :categories (quote (link))) (make-org-lint-checker :name (quote duplicate-name) :description "Report duplicate NAME values" :categories (quote (babel link))) (make-org-lint-checker :name (quote duplicate-target) :description "Report duplicate targets" :categories (quote (link))) (make-org-lint-checker :name (quote duplicate-footnote-definition) :description "Report duplicate footnote definitions" :categories (quote (footnote))) (make-org-lint-checker :name (quote orphaned-affiliated-keywords) :description "Report orphaned affiliated keywords" :trust (quote low)) (make-org-lint-checker :name (quote obsolete-affiliated-keywords) :description "Report obsolete affiliated keywords" :categories (quote (obsolete))) (make-org-lint-checker :name (quote deprecated-export-blocks) :description "Report deprecated export block syntax" :categories (quote (obsolete export)) :trust (quote low)) (make-org-lint-checker :name (quote deprecated-header-syntax) :description "Report deprecated Babel header syntax" :categories (quote (obsolete babel)) :trust (quote low)) (make-org-lint-checker :name (quote missing-language-in-src-block) :description "Report missing language in src blocks" :categories (quote (babel))) (make-org-lint-checker :name (quote missing-backend-in-export-block) :description "Report missing back-end in export blocks" :categories (quote (export))) (make-org-lint-checker :name (quote invalid-babel-call-block) :description "Report invalid Babel call blocks" :categories (quote (babel))) (make-org-lint-checker :name (quote colon-in-name) :description "Report NAME values with a colon" :categories (quote (babel))) (make-org-lint-checker :name (quote wrong-header-argument) :description "Report wrong babel headers" :categories (quote (babel))) (make-org-lint-checker :name (quote wrong-header-value) :description "Report invalid value in babel headers" :categories (quote (babel)) :trust (quote low)) (make-org-lint-checker :name (quote deprecated-category-setup) :description "Report misuse of CATEGORY keyword" :categories (quote (obsolete))) (make-org-lint-checker :name (quote invalid-coderef-link) :description "Report \"coderef\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote invalid-custom-id-link) :description "Report \"custom-id\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote invalid-fuzzy-link) :description "Report \"fuzzy\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote invalid-id-link) :description "Report \"id\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote link-to-local-file) :description "Report links to non-existent local files" :categories (quote (link)) :trust (quote low)) (make-org-lint-checker :name (quote non-existent-setupfile-parameter) :description "Report SETUPFILE keywords with non-existent file parameter" :trust (quote low)) (make-org-lint-checker :name (quote wrong-include-link-parameter) :description "Report INCLUDE keywords with misleading link parameter" :categories (quote (export)) :trust (quote low)) (make-org-lint-checker :name (quote obsolete-include-markup) :description "Report obsolete markup in INCLUDE keyword" :categories (quote (obsolete export)) :trust (quote low)) (make-org-lint-checker :name (quote unknown-options-item) :description "Report unknown items in OPTIONS keyword" :categories (quote (export)) :trust (quote low)) (make-org-lint-checker :name (quote invalid-macro-argument-and-template) :description "Report spurious macro arguments or invalid macro templates" :categories (quote (export)) :trust (quote low)) (make-org-lint-checker :name (quote special-property-in-properties-drawer) :description "Report special properties in properties drawers" :categories (quote (properties))) (make-org-lint-checker :name (quote obsolete-properties-drawer) :description "Report obsolete syntax for properties drawers" :categories (quote (obsolete properties))) (make-org-lint-checker :name (quote undefined-footnote-reference) :description "Report missing definition for footnote references" :categories (quote (footnote))) (make-org-lint-checker :name (quote unreferenced-footnote-definition) :description "Report missing reference for footnote definitions" :categories (quote (footnote))) (make-org-lint-checker :name (quote extraneous-element-in-footnote-section) :description "Report non-footnote definitions in footnote section" :categories (quote (footnote))) (make-org-lint-checker :name (quote invalid-keyword-syntax) :description "Report probable invalid keywords" :trust (quote low)) (make-org-lint-checker :name (quote invalid-block) :description "Report invalid blocks" :trust (quote low)) (make-org-lint-checker :name (quote misplaced-planning-info) :description "Report misplaced planning info line" :trust (quote low)) (make-org-lint-checker :name (quote incomplete-drawer) :description "Report probable incomplete drawers" :trust (quote low)) (make-org-lint-checker :name (quote indented-diary-sexp) :description "Report probable indented diary-sexps" :trust (quote low)) (make-org-lint-checker :name (quote quote-section) :description "Report obsolete QUOTE section" :categories (quote (obsolete)) :trust (quote low)) (make-org-lint-checker :name (quote file-application) :description "Report obsolete \"file+application\" link" :categories (quote (link obsolete)))))
                nil [4555 10212])
            ("org-lint--collect-duplicates" function (:arguments ("ast" "type" "extract-key" "extract-position" "build-message")) nil [10214 11307])
            ("org-lint-duplicate-custom-id" function (:arguments ("ast")) nil [11309 11737])
            ("org-lint-duplicate-name" function (:arguments ("ast")) nil [11739 12148])
            ("org-lint-duplicate-target" function (:arguments ("ast")) nil [12150 12466])
            ("org-lint-duplicate-footnote-definition" function (:arguments ("ast")) nil [12468 12799])
            ("org-lint-orphaned-affiliated-keywords" function (:arguments ("ast")) nil [12801 13426])
            ("org-lint-obsolete-affiliated-keywords" function (:arguments ("_")) nil [13428 14075])
            ("org-lint-deprecated-export-blocks" function (:arguments ("ast")) nil [14077 14555])
            ("org-lint-deprecated-header-syntax" function (:arguments ("ast")) nil [14557 15526])
            ("org-lint-missing-language-in-src-block" function (:arguments ("ast")) nil [15528 15774])
            ("org-lint-missing-backend-in-export-block" function (:arguments ("ast")) nil [15776 16023])
            ("org-lint-invalid-babel-call-block" function (:arguments ("ast")) nil [16025 16499])
            ("org-lint-deprecated-category-setup" function (:arguments ("ast")) nil [16501 16867])
            ("org-lint-invalid-coderef-link" function (:arguments ("ast")) nil [16869 17279])
            ("org-lint-invalid-custom-id-link" function (:arguments ("ast")) nil [17281 17677])
            ("org-lint-invalid-fuzzy-link" function (:arguments ("ast")) nil [17679 18169])
            ("org-lint-invalid-id-link" function (:arguments ("ast")) nil [18171 18480])
            ("org-lint-special-property-in-properties-drawer" function (:arguments ("ast")) nil [18482 18833])
            ("org-lint-obsolete-properties-drawer" function (:arguments ("ast")) nil [18835 19436])
            ("org-lint-link-to-local-file" function (:arguments ("ast")) nil [19438 19955])
            ("org-lint-non-existent-setupfile-parameter" function (:arguments ("ast")) nil [19957 20392])
            ("org-lint-wrong-include-link-parameter" function (:arguments ("ast")) nil [20394 21855])
            ("org-lint-obsolete-include-markup" function (:arguments ("ast")) nil [21857 22537])
            ("org-lint-unknown-options-item" function (:arguments ("ast")) nil [22539 23354])
            ("org-lint-invalid-macro-argument-and-template" function (:arguments ("ast")) nil [23356 25709])
            ("org-lint-undefined-footnote-reference" function (:arguments ("ast")) nil [25711 26169])
            ("org-lint-unreferenced-footnote-definition" function (:arguments ("ast")) nil [26171 26645])
            ("org-lint-colon-in-name" function (:arguments ("ast")) nil [26647 27126])
            ("org-lint-misplaced-planning-info" function (:arguments ("_")) nil [27128 27523])
            ("org-lint-incomplete-drawer" function (:arguments ("_")) nil [27525 28096])
            ("org-lint-indented-diary-sexp" function (:arguments ("_")) nil [28098 28461])
            ("org-lint-invalid-block" function (:arguments ("_")) nil [28463 29300])
            ("org-lint-invalid-keyword-syntax" function (:arguments ("_")) nil [29302 29953])
            ("org-lint-extraneous-element-in-footnote-section" function (:arguments ("ast")) nil [29955 30598])
            ("org-lint-quote-section" function (:arguments ("ast")) nil [30600 30945])
            ("org-lint-file-application" function (:arguments ("ast")) nil [30947 31200])
            ("org-lint-wrong-header-argument" function (:arguments ("ast")) nil [31202 33833])
            ("org-lint-wrong-header-value" function (:arguments ("ast")) nil [33835 36167])
            ("org-lint--report-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map (kbd "RET") (quote org-lint--jump-to-source)) (define-key map (kbd "TAB") (quote org-lint--show-source)) (define-key map (kbd "C-j") (quote org-lint--show-source)) (define-key map (kbd "h") (quote org-lint--hide-checker)) (define-key map (kbd "i") (quote org-lint--ignore-checker)) map)) nil [36187 36655])
            ("define-derived-mode" code nil nil [36657 37060])
            ("org-lint--generate-reports" function (:arguments ("buffer" "checkers")) nil [37062 38344])
            ("defvar-local" code nil nil [38346 38443])
            ("defvar-local" code nil nil [38445 38539])
            ("org-lint--refresh-reports" function nil nil [38541 38721])
            ("org-lint--current-line" function nil nil [38723 38858])
            ("org-lint--current-checker" function (:arguments ("entry")) nil [38860 39089])
            ("org-lint--display-reports" function (:arguments ("source" "checkers")) nil [39091 39603])
            ("org-lint--jump-to-source" function (:user-visible-flag t) nil [39605 39889])
            ("org-lint--show-source" function (:user-visible-flag t) nil [39891 40106])
            ("org-lint--hide-checker" function (:user-visible-flag t) nil [40108 40428])
            ("org-lint--ignore-checker" function (:user-visible-flag t) nil [40430 40733])
            ("org-lint" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [40773 42357])
            ("org-lint" package nil nil [42360 42379]))          
      :file "org-lint.el"
      :pointmax 42406
      :fsize 42405
      :lastmodtime '(22659 33033 0 0)
      :unmatched-syntax nil))
  :file "!Users!bing!.emacs.d!elpa!org-20161224!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
