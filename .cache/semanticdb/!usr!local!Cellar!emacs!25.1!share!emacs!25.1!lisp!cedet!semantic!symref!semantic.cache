;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cedet-global" include nil nil [924 947])
            ("semantic/symref" include nil nil [948 974])
            ("semantic-symref-tool-global" type
               (:superclasses "semantic-symref-tool-baseclass"
                :type "class")
                nil [1001 1350])
            ("cl-defmethod" code nil nil [1352 1695])
            ("semantic-symref-global--line-re" variable
               (:constant-flag t
                :default-value "^\\([^ ]+\\) +\\([0-9]+\\) \\([^ ]+\\) ")
                nil [1697 1783])
            ("cl-defmethod" code nil nil [1785 2614])
            ("semantic/symref/global" package nil nil [2616 2649]))          
      :file "global.el.gz"
      :pointmax 2823
      :fsize 1223
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cedet-cscope" include nil nil [912 935])
            ("semantic/symref" include nil nil [936 962])
            ("ede-minor-mode" variable nil nil [964 987])
            ("declare-function" code nil nil [988 1030])
            ("declare-function" code nil nil [1031 1088])
            ("semantic-symref-tool-cscope" type
               (:superclasses "semantic-symref-tool-baseclass"
                :type "class")
                nil [1115 1452])
            ("cl-defmethod" code nil nil [1454 2040])
            ("semantic-symref-cscope--line-re" variable
               (:constant-flag t
                :default-value "^\\([^ ]+\\) [^ ]+ \\([0-9]+\\) ")
                nil [2042 2121])
            ("cl-defmethod" code nil nil [2123 3359])
            ("semantic/symref/cscope" package nil nil [3361 3394]))          
      :file "cscope.el.gz"
      :pointmax 3568
      :fsize 1474
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/symref" include nil nil [1150 1176])
            ("grep" include nil nil [1177 1192])
            ("semantic-symref-tool-grep" type
               (:superclasses "semantic-symref-tool-baseclass"
                :type "class")
                nil [1229 1499])
            ("semantic-symref-filepattern-alist" variable (:default-value (quote ((c-mode "*.[ch]") (c++-mode "*.[chCH]" "*.[ch]pp" "*.cc" "*.hh") (html-mode "*.s?html" "*.php") (ruby-mode "*.r[bu]" "*.rake" "*.gemspec" "*.erb" "*.haml" "Rakefile" "Thorfile" "Capfile" "Guardfile" "Vagrantfile") (perl-mode "*.pl" "*.PL") (cperl-mode "*.pl" "*.PL") (lisp-interaction-mode "*.el" "*.ede" ".emacs" "_emacs")))) nil [1501 2004])
            ("semantic-symref-derive-find-filepatterns" function (:arguments ("mode")) nil [2006 3288])
            ("grepflags" variable nil nil [3290 3308])
            ("greppattern" variable nil nil [3309 3329])
            ("semantic-symref-grep-expand-keywords" variable (:default-value (condition-case nil (let* ((kw (copy-alist grep-expand-keywords)) (C (assoc "<C>" kw)) (R (assoc "<R>" kw))) (setcdr C (quote grepflags)) (setcdr R (quote greppattern)) kw) (error nil))) nil [3331 3642])
            ("semantic-symref-grep-use-template" function (:arguments ("rootdir" "filepattern" "flags" "pattern")) nil [3644 5059])
            ("semantic-symref-grep-shell" variable (:default-value shell-file-name) nil [5061 5252])
            ("cl-defmethod" code nil nil [5254 7506])
            ("semantic-symref-grep--line-re" variable
               (:constant-flag t
                :default-value "^\\(\\(?:[a-zA-Z]:\\)?[^:
]+\\):\\([0-9]+\\):")
                nil [7508 7599])
            ("cl-defmethod" code nil nil [7601 8368])
            ("semantic/symref/grep" package nil nil [8370 8401]))          
      :file "grep.el.gz"
      :pointmax 8571
      :fsize 3262
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cedet-idutils" include nil nil [924 948])
            ("semantic/symref" include nil nil [949 975])
            ("semantic-symref-tool-idutils" type
               (:superclasses "semantic-symref-tool-baseclass"
                :type "class")
                nil [1002 1348])
            ("cl-defmethod" code nil nil [1350 1676])
            ("semantic-symref-idutils--line-re" variable
               (:constant-flag t
                :default-value "^\\(\\(?:[a-zA-Z]:\\)?[^:
]+\\):\\([0-9]+\\):")
                nil [1678 1772])
            ("cl-defmethod" code nil nil [1774 2758])
            ("semantic/symref/idutils" package nil nil [2760 2794]))          
      :file "idutils.el.gz"
      :pointmax 2970
      :fsize 1265
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/symref" include nil nil [1256 1282])
            ("semantic/complete" include nil nil [1283 1311])
            ("semantic/senator" include nil nil [1312 1339])
            ("pulse" include nil nil [1340 1356])
            ("semantic-symref" function (:user-visible-flag t) nil [1384 2293])
            ("semantic-symref-symbol" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [2310 2960])
            ("semantic-symref-regexp" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [2977 3890])
            ("semantic-symref-results-mode" customgroup (:user-visible-flag t) nil [3912 4000])
            ("semantic-symref-results-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (suppress-keymap km) (define-key km "	" (quote forward-button)) (define-key km "\303-i" (quote backward-button)) (define-key km " " (quote push-button)) (define-key km "-" (quote semantic-symref-list-toggle-showing)) (define-key km "=" (quote semantic-symref-list-toggle-showing)) (define-key km "+" (quote semantic-symref-list-toggle-showing)) (define-key km "n" (quote semantic-symref-list-next-line)) (define-key km "p" (quote semantic-symref-list-prev-line)) (define-key km "q" (quote semantic-symref-hide-buffer)) (define-key km "" (quote semantic-symref-list-expand-all)) (define-key km "" (quote semantic-symref-list-contract-all)) (define-key km "R" (quote semantic-symref-list-rename-open-hits)) (define-key km "(" (quote semantic-symref-list-create-macro-on-open-hit)) (define-key km "E" (quote semantic-symref-list-call-macro-on-open-hits)) km)) nil [4002 4970])
            ("semantic-symref-list-menu-entries" variable (:default-value (list "Symref" (semantic-menu-item ["Toggle Line Open" semantic-symref-list-toggle-showing :active t :help "Toggle the current line open or closed."]) (semantic-menu-item ["Expand All Entries" semantic-symref-list-expand-all :active t :help "Expand every expandable entry."]) (semantic-menu-item ["Contract All Entries" semantic-symref-list-contract-all :active t :help "Close every expandable entry."]) (semantic-menu-item ["Rename Symbol in Open hits" semantic-symref-list-rename-open-hits :active t :help "Rename the searched for symbol in all hits that are currently open."]))) nil [4972 5768])
            ("semantic-symref-list-menu" variable nil nil [5770 5867])
            ("easy-menu-define" code nil nil [5869 6005])
            ("semantic-symref-auto-expand-results" variable nil nil [6007 6132])
            ("semantic-symref-results-mode-hook" variable nil nil [6134 6254])
            ("semantic-symref-current-results" variable nil nil [6256 6350])
            ("semantic-symref-produce-list-on-results" function (:arguments ("res" "str")) nil [6352 6929])
            ("define-derived-mode" code nil nil [6931 7209])
            ("semantic-symref-hide-buffer" function (:user-visible-flag t) nil [7211 7327])
            ("semantic-symref-results-summary-function" variable (:default-value (quote semantic-format-tag-prototype)) nil [7329 7570])
            ("semantic-symref-results-dump" function (:arguments ("results")) nil [7572 8671])
            ("semantic-symref-list-toggle-showing" function (:user-visible-flag t) nil [8717 8956])
            ("semantic-symref-rb-toggle-expand-tag" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [8958 10443])
            ("semantic-symref-rb-goto-file" function (:arguments ("button")) nil [10445 10858])
            ("semantic-symref-rb-goto-tag" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [10861 11321])
            ("semantic-symref-rb-goto-match" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [11323 11848])
            ("semantic-symref-list-next-line" function (:user-visible-flag t) nil [11850 11999])
            ("semantic-symref-list-prev-line" function (:user-visible-flag t) nil [12001 12151])
            ("semantic-symref-list-expand-all" function (:user-visible-flag t) nil [12153 12491])
            ("semantic-symref-list-contract-all" function (:user-visible-flag t) nil [12493 12833])
            ("semantic-symref-list-on-hit-p" function nil nil [12903 13260])
            ("semantic-symref-list-create-macro-on-open-hit" function (:user-visible-flag t) nil [13371 14688])
            ("semantic-symref-list-call-macro-on-open-hits" function (:user-visible-flag t) nil [14690 15253])
            ("semantic-symref-list-rename-open-hits" function
               (:user-visible-flag t
                :arguments ("newname"))
                nil [15348 15883])
            ("semantic-symref-list-map-open-hits" function (:arguments ("function")) nil [15998 17343])
            ("semantic-symref-list-update-open-hits" function nil nil [17345 17844])
            ("semantic/symref/list" package nil nil [17846 17877]))          
      :file "list.el.gz"
      :pointmax 18047
      :fsize 4939
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs!25.1!share!emacs!25.1!lisp!cedet!semantic!symref!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
