;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1508 1527])
            ("semantic/ctxt" include nil nil [1528 1552])
            ("semantic/format" include nil nil [1553 1579])
            ("semantic/tag" include nil nil [1580 1603])
            ("timer" include nil nil [1604 1620])
            ("semantic/find" include nil nil [1707 1731])
            ("eldoc-last-message" variable nil nil [1734 1761])
            ("declare-function" code nil nil [1762 1802])
            ("declare-function" code nil nil [1803 1873])
            ("declare-function" code nil nil [1874 1945])
            ("declare-function" code nil nil [1946 2022])
            ("declare-function" code nil nil [2023 2094])
            ("declare-function" code nil nil [2095 2155])
            ("declare-function" code nil nil [2156 2238])
            ("declare-function" code nil nil [2239 2330])
            ("declare-function" code nil nil [2331 2390])
            ("declare-function" code nil nil [2391 2451])
            ("declare-function" code nil nil [2452 2526])
            ("semantic-idle-scheduler-timer" variable nil nil [2570 2659])
            ("semantic-idle-scheduler-work-timer" variable nil nil [2661 2777])
            ("semantic-idle-scheduler-verbose-flag" variable nil nil [2779 2983])
            ("semantic-idle-scheduler-idle-time" variable (:default-value 1) nil [2985 3492])
            ("semantic-idle-scheduler-work-idle-time" variable (:default-value 60) nil [3494 4040])
            ("semantic-idle-scheduler-setup-timers" function nil nil [4042 4652])
            ("semantic-idle-scheduler-kill-timer" function nil nil [4654 4875])
            ("semantic-idle-scheduler-mode-hook" variable nil nil [5025 5179])
            ("semantic-idle-scheduler-mode" variable nil nil [5181 5347])
            ("make-variable-buffer-local" code nil nil [5348 5406])
            ("semantic-idle-scheduler-max-buffer-size" variable (:user-visible-flag t) nil [5408 5676])
            ("semantic-idle-scheduler-enabled-p" function nil nil [5678 6516])
            ("define-minor-mode" code nil nil [6533 7526])
            ("semantic-add-minor-mode" code nil nil [7528 7614])
            ("semantic-idle-scheduler-queue" variable nil nil [7695 7977])
            ("semantic-idle-scheduler-add" function (:arguments ("function")) nil [7979 8130])
            ("semantic-idle-scheduler-remove" function (:arguments ("function")) nil [8132 8320])
            ("semantic-idle-core-handler" function nil nil [8343 11162])
            ("semantic-debug-idle-function" function (:user-visible-flag t) nil [11164 11347])
            ("semantic-idle-scheduler-function" function nil nil [11349 11710])
            ("semantic-idle-work-parse-neighboring-files-flag" variable (:user-visible-flag t) nil [11840 12071])
            ("semantic-idle-work-update-headers-flag" variable (:user-visible-flag t) nil [12073 12340])
            ("semantic-idle-work-for-one-buffer" function (:arguments ("buffer")) nil [12342 13370])
            ("semantic-idle-work-core-handler" function nil nil [13372 15458])
            ("semantic-debug-idle-work-function" function (:user-visible-flag t) nil [15460 15658])
            ("semantic-idle-scheduler-work-function" function nil nil [15660 16216])
            ("semantic-idle-scheduler-work-parse-neighboring-files" function nil nil [16218 17244])
            ("semantic-before-idle-scheduler-reparse-hook" variable nil nil [17387 17629])
            ("semantic-after-idle-scheduler-reparse-hook" variable nil nil [17631 17867])
            ("semantic-varalias-obsolete" code nil nil [17869 18002])
            ("semantic-varalias-obsolete" code nil nil [18003 18134])
            ("semantic-idle-scheduler-refresh-tags" function nil nil [18136 20984])
            ("define-semantic-idle-service" function (:arguments ("name" "doc" "forms")) nil [21363 23455])
            ("put" code nil nil [23456 23515])
            ("add-hook" code nil nil [23516 23658])
            ("semantic-idle-truncate-long-summaries" variable (:default-value t) nil [23723 23928])
            ("semantic-idle-summary-function" variable (:default-value (quote semantic-format-tag-summarize-with-file)) nil [23930 24306])
            ("semantic-idle-summary-find-current-symbol-tag" function (:arguments ("sym")) nil [24308 24759])
            ("semantic-idle-summary-current-symbol-info-brutish" function nil nil [24761 25140])
            ("semantic-idle-summary-current-symbol-keyword" function nil nil [25142 25468])
            ("semantic-idle-summary-current-symbol-info-context" function nil nil [25470 25863])
            ("semantic-idle-summary-current-symbol-info-default" function nil nil [25865 26363])
            ("semantic-idle-summary-out-of-context-faces" variable (:default-value (quote (font-lock-comment-face font-lock-string-face font-lock-doc-string-face font-lock-doc-face))) nil [26365 27205])
            ("semantic-idle-summary-useful-context-p" function nil nil [27207 27589])
            ("semantic-idle-summary-current-symbol-info" function (:overloadable t) nil [27591 27726])
            ("make-obsolete-overload" code nil nil [27728 27886])
            ("semantic-idle-summary-mode-hook" variable nil nil [27888 28020])
            ("semantic-idle-summary-idle-function" function nil nil [28022 29230])
            ("define-minor-mode" code nil nil [29232 30193])
            ("semantic-idle-summary-refresh-echo-area" function nil nil [30195 30566])
            ("semantic-add-minor-mode" code nil nil [30568 30624])
            ("define-minor-mode" code nil nil [30626 31098])
            ("semantic-idle-symbol-highlight" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [31313 31449])
            ("semantic-idle-symbol-highlight-face" variable (:default-value (quote semantic-idle-symbol-highlight)) nil [31450 31572])
            ("make-obsolete-variable" code nil nil [31573 31712])
            ("semantic-idle-symbol-maybe-highlight" function (:arguments ("tag")) nil [31714 33610])
            ("define-semantic-idle-service" code nil nil [33612 34923])
            ("define-minor-mode" code nil nil [34942 35690])
            ("semantic-idle-completions-end-of-symbol-p" function nil nil [35937 36173])
            ("semantic-idle-completion-list-default" function nil nil [36175 36877])
            ("define-semantic-idle-service" code nil nil [36879 37768])
            ("semantic-idle-breadcrumbs-display-function" variable (:default-value (function semantic-idle-breadcrumbs--display-in-header-line)) nil [37935 38652])
            ("semantic-idle-breadcrumbs-format-tag-list-function" variable (:default-value (function semantic-idle-breadcrumbs--format-linear)) nil [38654 39597])
            ("semantic-idle-breadcrumbs-format-tag-function" variable (:default-value (function semantic-format-tag-abbreviate)) nil [39599 39969])
            ("semantic-idle-breadcrumbs-separator" variable (:default-value (quote mode-specific)) nil [39971 40369])
            ("semantic-idle-breadcrumbs-header-line-prefix" variable (:default-value semantic-stickyfunc-indent-string) nil [40371 40641])
            ("semantic-idle-breadcrumbs-popup-menu" variable nil nil [40643 40775])
            ("semantic-idle-breadcrumbs--popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [40777 41197])
            ("semantic-idle-breadcrumbs--tag-function" function (:arguments ("function")) nil [41199 41742])
            ("semantic-idle-breadcrumbs-popup-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line mouse-1] (semantic-idle-breadcrumbs--tag-function semantic-go-to-tag)) (define-key map [header-line mouse-3] (quote semantic-idle-breadcrumbs--popup-menu)) map)) nil [41787 42223])
            ("easy-menu-define" code nil nil [42225 44144])
            ("define-semantic-idle-service" code nil nil [44146 44688])
            ("semantic-idle-breadcrumbs--display-in-header-line" function (:arguments ("tag-list")) nil [44690 45546])
            ("semantic-idle-breadcrumbs--display-in-mode-line" function (:arguments ("tag-list")) nil [45548 46089])
            ("semantic-idle-breadcrumbs--format-tag-list" function (:arguments ("tag-list" "max-length")) nil [46091 46806])
            ("semantic-idle-breadcrumbs--format-linear" function (:arguments ("tag-list" "max-length")) nil [46808 47584])
            ("semantic-idle-breadcrumbs--format-innermost-first" function (:arguments ("tag-list" "max-length")) nil [47586 48879])
            ("semantic-idle-breadcrumbs--format-tag" function (:arguments ("tag" "format-function")) nil [48881 49609])
            ("semantic/idle" package nil nil [49612 49636]))          
      :file "idle.el.gz"
      :pointmax 49789
      :fsize 13539
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1731 . 1732) (symbol 1689 . 1706) (open-paren 1688 . 1689)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1155 1174])
            ("semantic-modes" customgroup (:user-visible-flag t) nil [1219 1326])
            ("semantic-update-mode-line" variable (:default-value t) nil [1370 1806])
            ("semantic-mode-line-prefix" variable (:default-value (propertize "S" (quote face) (quote bold))) nil [1808 2044])
            ("semantic-minor-modes-format" variable nil nil [2046 2197])
            ("put" code nil nil [2198 2256])
            ("semantic-minor-mode-alist" variable nil nil [2258 2398])
            ("semantic-mode-line-update" function nil nil [2400 4476])
            ("semantic-desktop-ignore-this-minor-mode" function (:arguments ("buffer")) nil [4478 4665])
            ("semantic-add-minor-mode" function (:arguments ("toggle" "name")) nil [4667 5733])
            ("semantic-toggle-minor-mode-globally" function (:arguments ("mode" "arg")) nil [5735 6883])
            ("define-minor-mode" code nil nil [6966 7326])
            ("semantic-highlight-edits-mode-hook" variable nil nil [7328 7480])
            ("semantic-highlight-edits-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [7482 7813])
            ("semantic-highlight-edits-new-change-hook-fcn" function (:arguments ("overlay")) nil [7815 8121])
            ("semantic-highlight-edits-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [8123 8251])
            ("define-minor-mode" code nil nil [8268 9437])
            ("semantic-add-minor-mode" code nil nil [9439 9524])
            ("define-minor-mode" code nil nil [9603 10071])
            ("semantic-show-unmatched-syntax-mode-hook" variable nil nil [10073 10237])
            ("semantic-unmatched-syntax-face" variable
               (:default-value (quote ((((class color) (background dark)) (:underline "red")) (((class color) (background light)) (:underline "red"))))
                :type "face")
                nil [10239 10536])
            ("semantic-unmatched-syntax-overlay-p" function (:arguments ("overlay")) nil [10538 10711])
            ("semantic-showing-unmatched-syntax-p" function nil nil [10713 11042])
            ("semantic-show-unmatched-lex-tokens-fetch" function nil nil [11044 11586])
            ("semantic-clean-unmatched-syntax-in-region" function (:arguments ("beg" "end")) nil [11588 11891])
            ("semantic-clean-unmatched-syntax-in-buffer" function nil nil [11893 12087])
            ("semantic-clean-token-of-unmatched-syntax" function (:arguments ("token")) nil [12089 12314])
            ("semantic-show-unmatched-syntax" function (:arguments ("syntax")) nil [12316 13255])
            ("semantic-next-unmatched-syntax" function (:arguments ("point" "bound")) nil [13257 13955])
            ("semantic-show-unmatched-syntax-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km ",`" (quote semantic-show-unmatched-syntax-next)) km)) nil [13957 14176])
            ("define-minor-mode" code nil nil [14193 16051])
            ("semantic-add-minor-mode" code nil nil [16053 16144])
            ("semantic-show-unmatched-syntax-next" function (:user-visible-flag t) nil [16146 16375])
            ("define-minor-mode" code nil nil [16466 16895])
            ("semantic-show-parser-state-mode-hook" variable nil nil [16897 17053])
            ("semantic-show-parser-state-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [17055 17187])
            ("define-minor-mode" code nil nil [17204 20914])
            ("semantic-add-minor-mode" code nil nil [20916 21002])
            ("semantic-show-parser-state-string" variable nil nil [21004 21156])
            ("make-variable-buffer-local" code nil nil [21157 21220])
            ("semantic-show-parser-state-marker" function (:arguments ("ignore")) nil [21222 22042])
            ("semantic-show-parser-state-auto-marker" function nil nil [22044 22362])
            ("define-minor-mode" code nil nil [22439 22860])
            ("semantic-stickyfunc-mode-hook" variable nil nil [22862 23004])
            ("semantic-stickyfunc-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km [header-line down-mouse-1] (quote semantic-stickyfunc-menu)) km)) nil [23006 23199])
            ("semantic-stickyfunc-popup-menu" variable nil nil [23201 23321])
            ("easy-menu-define" code nil nil [23323 24470])
            ("semantic-stickyfunc-indent-string" variable (:default-value (if (and window-system (not (featurep (quote xemacs)))) (concat (condition-case nil (let ((charwidth (frame-char-width)) (scrollpos (frame-parameter (selected-frame) (quote vertical-scroll-bars)))) (if (or (eq scrollpos (quote left)) (eq scrollpos t)) (let ((w (when (boundp (quote scroll-bar-width)) (symbol-value (quote scroll-bar-width))))) (if (not w) (setq w (frame-parameter (selected-frame) (quote scroll-bar-width)))) (if (not w) (setq w (+ (get (quote scroll-bar-width) (quote x-frame-parameter)) 1))) (if (not w) "  " (setq w (+ 2 w)) (make-string (/ w charwidth) 32))) "")) (error "")) (condition-case nil (let* ((f (window-fringes)) (fw (car f)) (numspace (/ fw (frame-char-width)))) (make-string numspace 32)) (error (condition-case nil (if (get (quote fringe) (quote face)) " " "") (error ""))))) "")) nil [24472 26623])
            ("semantic-stickyfunc-old-hlf" variable nil nil [26625 26725])
            ("semantic-stickyfunc-header-line-format" variable
               (:constant-flag t
                :default-value (cond ((featurep (quote xemacs)) nil) (t (quote (:eval (list (propertize " " (quote display) (quote ((space :align-to 0)))) (semantic-stickyfunc-fetch-stickyline)))))))
                nil [26727 27022])
            ("define-minor-mode" code nil nil [27039 29031])
            ("semantic-stickyfunc-sticky-classes" variable (:default-value (quote (function type))) nil [29033 29169])
            ("make-variable-buffer-local" code nil nil [29170 29234])
            ("semantic-stickyfunc-show-only-functions-p" variable nil nil [29236 29514])
            ("semantic-stickyfunc-tag-to-stick" function nil nil [29516 29883])
            ("semantic-stickyfunc-fetch-stickyline" function nil nil [29885 31704])
            ("semantic-stickyfunc-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [31706 32176])
            ("semantic-add-minor-mode" code nil nil [32179 32258])
            ("define-minor-mode" code nil nil [32512 32952])
            ("semantic-highlight-func-mode-hook" variable nil nil [32954 33104])
            ("semantic-highlight-func-mode-map" variable (:default-value (let ((km (make-sparse-keymap)) (m3 (if (featurep (quote xemacs)) [button3] [mouse-3]))) (define-key km m3 (quote semantic-highlight-func-menu)) km)) nil [33106 33342])
            ("semantic-highlight-func-popup-menu" variable nil nil [33344 33483])
            ("easy-menu-define" code nil nil [33485 34540])
            ("semantic-highlight-func-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [34542 35058])
            ("semantic-highlight-func-ct-overlay" variable nil nil [35060 35163])
            ("make-variable-buffer-local" code nil nil [35164 35228])
            ("semantic-highlight-func-current-tag-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [35230 35552])
            ("define-minor-mode" code nil nil [35569 36922])
            ("semantic-highlight-func-highlight-current-tag" function (:arguments ("disable")) nil [36924 38589])
            ("semantic-add-minor-mode" code nil nil [38591 38674])
            ("semantic/util-modes" package nil nil [38721 38751]))          
      :file "util-modes.el.gz"
      :pointmax 38916
      :fsize 9255
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [924 946])
            ("declare-function" code nil nil [948 1020])
            ("semanticdb-hooks" variable (:default-value (quote ((semanticdb-semantic-init-hook-fcn semantic-init-db-hook) (semanticdb-synchronize-table semantic-after-toplevel-cache-change-hook) (semanticdb-partial-synchronize-table semantic-after-partial-cache-change-hook) (semanticdb-revert-hook before-revert-hook) (semanticdb-kill-hook kill-buffer-hook) (semanticdb-kill-hook change-major-mode-hook) (semanticdb-kill-emacs-hook kill-emacs-hook)))) nil [1053 1621])
            ("semanticdb-minor-mode-p" function nil nil [1661 1845])
            ("define-minor-mode" code nil nil [1862 2369])
            ("defvaralias" code nil nil [2371 2441])
            ("defvaralias" code nil nil [2442 2509])
            ("semantic-varalias-obsolete" code nil nil [2510 2610])
            ("semanticdb-toggle-global-mode" function (:user-visible-flag t) nil [2613 2975])
            ("semanticdb-semantic-init-hook-fcn" function nil nil [3060 4973])
            ("semanticdb-revert-hook" function nil nil [4975 5354])
            ("semanticdb-kill-hook" function nil nil [5356 6786])
            ("semanticdb-kill-emacs-hook" function nil nil [6788 6918])
            ("semanticdb-synchronize-table" function (:arguments ("new-table")) nil [6949 7172])
            ("semanticdb-partial-synchronize-table" function (:arguments ("new-table")) nil [7174 7413])
            ("semantic/db-mode" package nil nil [7416 7443]))          
      :file "db-mode.el.gz"
      :pointmax 7602
      :fsize 2794
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1577 1590])
            ("semantic" include nil nil [1592 1611])
            ("eieio-base" include nil nil [1612 1633])
            ("ring" include nil nil [1634 1649])
            ("declare-function" code nil nil [1651 1704])
            ("declare-function" code nil nil [1705 1772])
            ("declare-function" code nil nil [1773 1844])
            ("declare-function" code nil nil [1845 1904])
            ("semantic-bookmark" type
               (:superclasses "eieio-named"
                :members 
                  ( ("tag" variable
                       (:documentation "The TAG this bookmark belongs to."
                        :type "semantic-tag")
                        nil nil)
                    ("parent" variable
                       (:documentation "The tag that is the parent of :tag."
                        :type "(or semantic-tag null)")
                        nil nil)
                    ("offset" variable
                       (:documentation "The offset from `tag' start that is
somehow interesting."
                        :type "number")
                        nil nil)
                    ("filename" variable
                       (:documentation "String the tag belongs to.
Set this when the tag gets unlinked from the buffer it belongs to."
                        :type "string")
                        nil nil)
                    ("frequency" variable
                       (:documentation "Track the frequency this tag is visited."
                        :default-value "0"
                        :type "number")
                        nil nil)
                    ("reason" variable
                       (:documentation "The reason this tag is interesting.
Nice values are 'edit, 'read, 'jump, and 'mark.
 edit - created because the tag text was edited.
 read - created because point lingered in tag text.
 jump - jumped to another tag from this tag.
 mark - created a regular mark in this tag."
                        :default-value "t"
                        :type "symbol")
                        nil nil))                  
                :type "class")
                nil [1977 2937])
            ("cl-defmethod" code nil nil [2939 3319])
            ("cl-defmethod" code nil nil [3321 4001])
            ("cl-defmethod" code nil nil [4003 4481])
            ("cl-defmethod" code nil nil [4483 5052])
            ("semantic-bookmark-ring" type
               (:members 
                  ( ("ring" variable
                       (:documentation "List of `semantic-bookmark' objects.
This list is maintained as a list with the first item
being the current location, and the rest being a list of
items that were recently visited."
                        :type "ring")
                        nil nil)
                    ("current-index" variable
                       (:documentation "The current index into RING for some operation.
User commands use this to move through the ring, or reset."
                        :default-value "0"
                        :type "number")
                        nil nil))                  
                :type "class")
                nil [5054 5688])
            ("semantic-mru-bookmark-ring" variable (:default-value (semantic-bookmark-ring "Ring" :ring (make-ring 20))) nil [5690 5879])
            ("semantic-mrub-find-nearby-tag" function (:arguments ("point")) nil [5881 6408])
            ("cl-defmethod" code nil nil [6410 7235])
            ("semantic-mrub-cache-flush-fcn" function nil nil [7237 7590])
            ("add-hook" code nil nil [7592 7679])
            ("semantic-mrub-last-overlay" variable nil nil [7701 7812])
            ("semantic-mru-bookmark-change-hook-fcn" function (:arguments ("overlay")) nil [7814 8219])
            ("global-semantic-mru-bookmark-mode" variable nil nil [8264 8733])
            ("define-minor-mode" code nil nil [8750 9179])
            ("semantic-mru-bookmark-mode-hook" variable (:user-visible-flag t) nil [9181 9328])
            ("semantic-mru-bookmark-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "B" (quote semantic-mrub-switch-tags)) km)) nil [9330 9507])
            ("define-minor-mode" code nil nil [9509 10900])
            ("semantic-add-minor-mode" code nil nil [10902 10984])
            ("semantic-mrub-read-history" function nil nil [11049 11135])
            ("semantic-mrub-ring-to-assoc-list" function (:arguments ("ring")) nil [11137 11463])
            ("semantic-mrub-completing-read" function (:arguments ("prompt")) nil [11465 12992])
            ("semantic-mrub-switch-tags" function
               (:user-visible-flag t
                :arguments ("tagmark"))
                nil [12994 13438])
            ("semantic-adebug-mrub" function (:user-visible-flag t) nil [13457 13766])
            ("semantic/mru-bookmark" package nil nil [13769 13801]))          
      :file "mru-bookmark.el.gz"
      :pointmax 13970
      :fsize 4844
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1590 . 1591) (symbol 1559 . 1576) (open-paren 1558 . 1559)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio-base" include nil nil [1025 1046])
            ("semantic" include nil nil [1047 1066])
            ("semantic/find" include nil nil [1089 1113])
            ("declare-function" code nil nil [1116 1181])
            ("semanticdb-refresh-references" function (:prototype-flag t) nil [1245 1352])
            ("semanticdb" customgroup (:user-visible-flag t) nil [1369 1465])
            ("semanticdb-database-list" variable nil nil [1467 1538])
            ("semanticdb-new-database-class" variable (:default-value (quote semanticdb-project-database-file)) nil [1540 1813])
            ("make-variable-buffer-local" code nil nil [1814 1873])
            ("semanticdb-default-find-index-class" variable (:default-value (quote semanticdb-find-search-index)) nil [1875 2080])
            ("make-variable-buffer-local" code nil nil [2081 2146])
            ("semanticdb-current-database" variable nil nil [2163 2266])
            ("make-variable-buffer-local" code nil nil [2267 2324])
            ("semanticdb-current-table" variable nil nil [2341 2447])
            ("make-variable-buffer-local" code nil nil [2448 2502])
            ("semanticdb-abstract-table" type
               (:members 
                  ( ("parent-db" variable (:documentation "Database Object containing this table.") nil nil)
                    ("major-mode" variable
                       (:documentation "Major mode this table belongs to.
Sometimes it is important for a program to know if a given table has the
same major mode as the current buffer."
                        :default-value "nil")
                        nil nil)
                    ("tags" variable (:documentation "The tags belonging to this table.") nil nil)
                    ("db-refs" variable
                       (:documentation "List of `semanticdb-table' objects refering to this one.
These aren't saved, but are instead recalculated after load.
See the file semanticdb-ref.el for how this slot is used."
                        :default-value "nil")
                        nil nil)
                    ("index" variable
                       (:documentation "The search index.
Used by semanticdb-find to store additional information about
this table for searching purposes.

Note: This index will not be saved in a persistent file."
                        :type "semanticdb-abstract-search-index")
                        nil nil)
                    ("cache" variable
                       (:documentation "List of cache information for tools.
Any particular tool can cache data to a database at runtime
with `semanticdb-cache-get'.

Using a semanticdb cache does not save any information to a file,
so your cache will need to be recalculated at runtime.  Caches can be
referenced even when the file is not in a buffer.

Note: This index will not be saved in a persistent file."
                        :default-value "nil"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [2528 4192])
            ("cl-defmethod" code nil nil [4194 4336])
            ("cl-defmethod" code nil nil [4338 4522])
            ("cl-defmethod" code nil nil [4707 5116])
            ("cl-defmethod" code nil nil [5118 5306])
            ("cl-defmethod" code nil nil [5308 5417])
            ("cl-defmethod" code nil nil [5419 5669])
            ("cl-defmethod" code nil nil [5671 6044])
            ("cl-defmethod" code nil nil [6046 6494])
            ("cl-defmethod" code nil nil [6496 7008])
            ("semanticdb-abstract-search-index" type
               (:members 
                  ( ("table" variable
                       (:documentation "XRef to the table this belongs to."
                        :type "semanticdb-abstract-table")
                        nil nil))                  
                :type "class")
                nil [7029 7419])
            ("cl-defmethod" code nil nil [7421 7854])
            ("cl-defmethod" code nil nil [7856 8054])
            ("cl-defmethod" code nil nil [8056 8271])
            ("semanticdb-search-results-table" type
               (:superclasses "semanticdb-abstract-table"
                :type "class")
                nil [8403 8677])
            ("cl-defmethod" code nil nil [8679 8907])
            ("semanticdb-table" type
               (:superclasses "semanticdb-abstract-table"
                :members 
                  ( ("file" variable (:documentation "File name relative to the parent database.
This is for the file whose tags are stored in this TABLE object.") nil nil)
                    ("buffer" variable
                       (:documentation "The buffer associated with this table.
If nil, the table's buffer is no in Emacs.  If it has a value, then
it is in Emacs."
                        :default-value "nil")
                        nil nil)
                    ("dirty" variable
                       (:documentation "Non nil if this table needs to be `Saved'."
                        :default-value "nil")
                        nil nil)
                    ("db-refs" variable
                       (:documentation "List of `semanticdb-table' objects referring to this one.
These aren't saved, but are instead recalculated after load.
See the file semantic/db-ref.el for how this slot is used."
                        :default-value "nil")
                        nil nil)
                    ("pointmax" variable
                       (:documentation "Size of buffer when written to disk.
Checked on retrieval to make sure the file is the same."
                        :default-value "nil")
                        nil nil)
                    ("fsize" variable
                       (:documentation "Size of the file when it was last referenced.
Checked when deciding if a loaded table needs updating from changes
outside of Semantic's control."
                        :default-value "nil")
                        nil nil)
                    ("lastmodtime" variable
                       (:documentation "Last modification time of the file referenced.
Checked when deciding if a loaded table needs updating from changes outside of
Semantic's control."
                        :default-value "nil")
                        nil nil)
                    ("unmatched-syntax" variable (:documentation "List of vectors specifying unmatched syntax.") nil nil)
                    ("lexical-table" variable
                       (:documentation "Table that might be needed by the lexical analyzer.
For C/C++, the C preprocessor macros can be saved here."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [8939 10790])
            ("cl-defmethod" code nil nil [10792 11042])
            ("cl-defmethod" code nil nil [11044 11445])
            ("cl-defmethod" code nil nil [11447 11654])
            ("cl-defmethod" code nil nil [11656 11859])
            ("cl-defmethod" code nil nil [11861 11974])
            ("cl-defmethod" code nil nil [11976 12099])
            ("cl-defmethod" code nil nil [12101 12439])
            ("unless" code nil nil [12468 12610])
            ("semanticdb-project-database" type
               (:superclasses "eieio-instance-tracker"
                :members 
                  ( ("tracking-symbol" variable (:default-value "semanticdb-database-list") nil nil)
                    ("reference-directory" variable
                       (:documentation "Directory this database refers to.
When a cache directory is specified, then this refers to the directory
this database contains symbols for."
                        :type "string")
                        nil nil)
                    ("new-table-class" variable
                       (:documentation "New tables created for this database are of this class."
                        :default-value "semanticdb-table"
                        :type "class")
                        nil nil)
                    ("cache" variable
                       (:documentation "List of cache information for tools.
Any particular tool can cache data to a database at runtime
with `semanticdb-cache-get'.

Using a semanticdb cache does not save any information to a file,
so your cache will need to be recalculated at runtime.

Note: This index will not be saved in a persistent file."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("tables" variable
                       (:documentation "List of `semantic-db-table' objects."
                        :protection ":protected"
                        :type "semanticdb-abstract-table-list")
                        nil nil))                  
                :type "class")
                nil [12612 13779])
            ("cl-defmethod" code nil nil [13781 13971])
            ("cl-defmethod" code nil nil [13973 14379])
            ("cl-defmethod" code nil nil [14381 14792])
            ("cl-defmethod" code nil nil [14794 15456])
            ("cl-defmethod" code nil nil [15458 15603])
            ("cl-defmethod" code nil nil [15605 16288])
            ("cl-defmethod" code nil nil [16290 16558])
            ("semanticdb-get-database" function (:arguments ("filename")) nil [16582 16775])
            ("semanticdb-directory-loaded-p" function (:arguments ("path")) nil [16777 16972])
            ("semanticdb-create-table-for-file" function (:arguments ("filename")) nil [16974 17554])
            ("semanticdb-abstract-cache" type
               (:members 
                  ( ("table" variable
                       (:documentation "Cross reference to the table this belongs to."
                        :type "semanticdb-abstract-table")
                        nil nil))                  
                :type "class")
                nil [17576 18149])
            ("cl-defmethod" code nil nil [18151 18907])
            ("cl-defmethod" code nil nil [18909 19090])
            ("cl-defmethod" code nil nil [19092 19272])
            ("cl-defmethod" code nil nil [19274 19471])
            ("semanticdb-abstract-db-cache" type
               (:members 
                  ( ("db" variable
                       (:documentation "Cross reference to the database this belongs to."
                        :type "semanticdb-project-database")
                        nil nil))                  
                :type "class")
                nil [19473 20060])
            ("cl-defmethod" code nil nil [20062 20802])
            ("cl-defmethod" code nil nil [20804 20981])
            ("cl-defmethod" code nil nil [20984 21167])
            ("cl-defmethod" code nil nil [21169 21369])
            ("cl-defmethod" code nil nil [21384 22414])
            ("cl-defmethod" code nil nil [22416 23408])
            ("cl-defmethod" code nil nil [23435 24440])
            ("cl-defmethod" code nil nil [24442 25509])
            ("cl-defmethod" code nil nil [25528 25814])
            ("semanticdb-save-current-db" function (:user-visible-flag t) nil [25816 26107])
            ("semanticdb--inhibit-create-file-directory" variable nil nil [26233 26283])
            ("semanticdb-save-all-db" function (:user-visible-flag t) nil [26285 26625])
            ("semanticdb-save-all-db-idle" function nil nil [26627 27047])
            ("semanticdb-project-predicate-functions" variable nil nil [27082 27545])
            ("cl-defmethod" code nil nil [27547 27750])
            ("semanticdb-current-database" function nil nil [27894 28146])
            ("semanticdb-match-any-mode" variable nil nil [28148 28427])
            ("semanticdb-with-match-any-mode" function (:arguments ("body")) nil [28429 28686])
            ("put" code nil nil [28687 28748])
            ("cl-defmethod" code nil nil [28750 29217])
            ("cl-defmethod" code nil nil [29219 29467])
            ("cl-defmethod" code nil nil [29469 30158])
            ("semanticdb-project-roots" variable (:user-visible-flag t) nil [30277 30639])
            ("semanticdb-project-root-functions" variable nil nil [30641 31096])
            ("semanticdb-project-system-databases" variable nil nil [31098 31409])
            ("make-variable-buffer-local" code nil nil [31410 31475])
            ("semanticdb-search-system-databases" variable (:default-value t) nil [31477 31587])
            ("semanticdb-current-database-list" function (:arguments ("dir")) nil [31589 33604])
            ("semanticdb-file-table-hash" variable (:default-value (make-hash-table :test (quote equal))) nil [33743 33863])
            ("semanticdb-file-table-object-from-hash" function (:arguments ("file")) nil [33865 34048])
            ("semanticdb-file-table-object-put-hash" function (:arguments ("file" "dbtable")) nil [34050 34213])
            ("semanticdb-file-table-object" function (:arguments ("file" "dontload")) nil [34230 38174])
            ("semanticdb-out-of-buffer-create-table-fcn" variable nil nil [38176 38334])
            ("make-variable-buffer-local" code nil nil [38335 38406])
            ("semanticdb-create-table-for-file-not-in-buffer" function (:arguments ("filename")) nil [38408 39795])
            ("semanticdb-file-stream" function (:arguments ("file")) nil [39797 40125])
            ("semantic/db" package nil nil [40127 40149]))          
      :file "db.el.gz"
      :pointmax 40298
      :fsize 11055
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1113 . 1114) (symbol 1069 . 1086) (open-paren 1068 . 1069)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/fw" include nil nil [7518 7540])
            ("semantic-lex-map-symbols" function (:arguments ("fun" "table" "property")) nil [7590 8001])
            ("semantic-flex-keywords-obarray" variable nil nil [8180 8357])
            ("make-variable-buffer-local" code nil nil [8358 8418])
            ("semantic-lex-keyword-invalid" function (:arguments ("name")) nil [8420 8580])
            ("semantic-lex-keyword-symbol" function (:arguments ("name")) nil [8582 8811])
            ("semantic-lex-keyword-p" function (:arguments ("name")) nil [8813 9028])
            ("semantic-lex-keyword-set" function (:arguments ("name" "value")) nil [9030 9199])
            ("semantic-lex-keyword-value" function (:arguments ("name")) nil [9201 9484])
            ("semantic-lex-keyword-put" function (:arguments ("name" "property" "value")) nil [9486 9748])
            ("semantic-lex-keyword-get" function (:arguments ("name" "property")) nil [9750 10000])
            ("semantic-lex-make-keyword-table" function (:arguments ("specs" "propspecs")) nil [10002 10937])
            ("semantic-lex-map-keywords" function (:arguments ("fun" "property")) nil [10939 11260])
            ("semantic-lex-keywords" function (:arguments ("property")) nil [11262 11574])
            ("semantic-lex-unterminated-syntax-end-function" variable nil nil [11599 11653])
            ("semantic-lex-analysis-bounds" variable nil nil [11654 11691])
            ("semantic-lex-end-point" variable nil nil [11692 11723])
            ("semantic-lex-token-bounds" function (:arguments ("token")) nil [11725 11945])
            ("semantic-lex-token-start" function (:arguments ("token")) nil [11947 12133])
            ("semantic-lex-token-end" function (:arguments ("token")) nil [12135 12317])
            ("semantic-lex-unterminated-syntax-detected" function (:arguments ("syntax")) nil [12319 12848])
            ("semantic-lex-types-obarray" variable nil nil [13104 13200])
            ("make-variable-buffer-local" code nil nil [13201 13257])
            ("semantic-lex-type-invalid" function (:arguments ("type")) nil [13259 13418])
            ("semantic-lex-type-symbol" function (:arguments ("type")) nil [13420 13630])
            ("semantic-lex-type-p" function (:arguments ("type")) nil [13632 13802])
            ("semantic-lex-type-set" function (:arguments ("type" "value")) nil [13804 13970])
            ("semantic-lex-type-value" function (:arguments ("type" "noerror")) nil [13972 14348])
            ("semantic-lex-type-put" function (:arguments ("type" "property" "value" "add")) nil [14350 14836])
            ("semantic-lex-type-get" function (:arguments ("type" "property" "noerror")) nil [14838 15236])
            ("semantic-lex-preset-default-types" function nil nil [15238 16105])
            ("semantic-lex-make-type-table" function (:arguments ("specs" "propspecs")) nil [16107 17873])
            ("semantic-lex-map-types" function (:arguments ("fun" "property")) nil [17875 18186])
            ("semantic-lex-types" function (:arguments ("property")) nil [18188 18488])
            ("semantic-lex-analyzer" variable (:default-value (quote semantic-flex)) nil [18535 18736])
            ("make-variable-buffer-local" code nil nil [18737 18788])
            ("semantic-lex-tokens" variable (:default-value (quote ((bol) (charquote) (close-paren) (comment) (newline) (open-paren) (punctuation) (semantic-list) (string) (symbol) (whitespace)))) nil [18790 22131])
            ("semantic-lex-syntax-modifications" variable nil nil [22133 22504])
            ("make-variable-buffer-local" code nil nil [22505 22568])
            ("semantic-lex-syntax-table" variable nil nil [22570 22697])
            ("make-variable-buffer-local" code nil nil [22698 22753])
            ("semantic-lex-comment-regex" variable nil nil [22755 22997])
            ("make-variable-buffer-local" code nil nil [22998 23054])
            ("semantic-lex-number-expression" variable (:default-value (eval-when-compile (concat "\\(" "\\<[0-9]+[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[.][eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<[0-9]+[.][fFdD]\\>" "\\|" "\\<[0-9]+[.]" "\\|" "[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<0[xX][0-9a-fA-F]+[lL]?\\>" "\\|" "\\<[0-9]+[lLfFdD]?\\>" "\\)"))) nil [23056 24330])
            ("make-variable-buffer-local" code nil nil [24331 24391])
            ("semantic-lex-depth" variable nil nil [24393 24499])
            ("make-variable-buffer-local" code nil nil [24500 24548])
            ("semantic-lex-unterminated-syntax-end-function" variable (:default-value (lambda (syntax syntax-start lex-end) lex-end)) nil [24550 25122])
            ("declare-function" code nil nil [25158 25209])
            ("semantic-lex-test" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25211 25747])
            ("semantic-lex-debug" variable nil nil [25749 25832])
            ("semantic-lex-debug" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25834 26313])
            ("semantic-lex-highlight-token" function (:arguments ("token")) nil [26315 26628])
            ("semantic-lex-one-token" function (:arguments ("analyzers")) nil [27016 27272])
            ("semantic-lex-end-point" variable nil nil [27274 27365])
            ("semantic-lex-current-depth" variable nil nil [27367 27466])
            ("semantic-lex-maximum-depth" variable nil nil [27468 27582])
            ("semantic-lex-token-stream" variable nil nil [27584 27670])
            ("semantic-lex-analysis-bounds" variable nil nil [27672 27753])
            ("semantic-lex-block-streams" variable nil nil [27755 27985])
            ("define-obsolete-variable-alias" code nil nil [27987 28084])
            ("semantic-lex-reset-functions" variable nil nil [28085 28333])
            ("semantic-lex-block-stack" variable nil nil [28362 28399])
            ("semantic-lex-debug-break" function (:arguments ("token")) nil [28489 28887])
            ("define-lex" function (:arguments ("name" "doc" "analyzers")) nil [28889 32364])
            ("semantic-lex-token" function (:arguments ("symbol" "start" "end" "str")) nil [32564 33314])
            ("semantic-lex-token-p" function (:arguments ("thing")) nil [33316 33662])
            ("semantic-lex-token-with-text-p" function (:arguments ("thing")) nil [33664 33976])
            ("semantic-lex-token-without-text-p" function (:arguments ("thing")) nil [33978 34262])
            ("semantic-lex-expand-block-specs" function (:arguments ("specs")) nil [34283 35475])
            ("semantic-lex-push-token" function (:arguments ("token" "blockspecs")) nil [35479 36313])
            ("semantic-lex-token-class" function (:arguments ("token")) nil [36315 36464])
            ("semantic-lex-token-text" function (:arguments ("token")) nil [36466 36784])
            ("semantic-lex-init" function nil nil [36786 37273])
            ("semantic-lex" function
               (:overloadable t
                :arguments ("start" "end" "depth" "length"))
                nil [37290 38125])
            ("semantic-lex-buffer" function (:arguments ("depth")) nil [38127 38307])
            ("semantic-lex-list" function (:arguments ("semlist" "depth")) nil [38309 38516])
            ("semantic-lex-start-block" function (:arguments ("syntax")) nil [38574 38957])
            ("semantic-lex-end-block" function (:arguments ("syntax")) nil [38959 41312])
            ("semantic-lex-debug-analyzers" variable nil nil [41597 41790])
            ("semantic-lex-unterminated-syntax-protection" function (:arguments ("syntax" "forms")) nil [41792 42519])
            ("put" code nil nil [42520 42599])
            ("define-lex-analyzer" function (:arguments ("name" "doc" "condition" "forms")) nil [42601 44769])
            ("define-lex-regex-analyzer" function (:arguments ("name" "doc" "regexp" "forms")) nil [44771 45092])
            ("define-lex-simple-regex-analyzer" function (:arguments ("name" "doc" "regexp" "toksym" "index" "forms")) nil [45094 45872])
            ("define-lex-block-analyzer" function (:arguments ("name" "doc" "spec1" "specs")) nil [45874 48108])
            ("define-lex-analyzer" code nil nil [48164 48371])
            ("define-lex-analyzer" code nil nil [48373 48913])
            ("define-lex-simple-regex-analyzer" code nil nil [48915 49045])
            ("define-lex-regex-analyzer" code nil nil [49047 49835])
            ("define-lex-regex-analyzer" code nil nil [49837 50105])
            ("define-lex-regex-analyzer" code nil nil [50107 50845])
            ("define-lex-regex-analyzer" code nil nil [50847 51109])
            ("define-lex-simple-regex-analyzer" code nil nil [51111 51333])
            ("define-lex-regex-analyzer" code nil nil [51335 51614])
            ("define-lex-simple-regex-analyzer" code nil nil [51616 51789])
            ("define-lex-simple-regex-analyzer" code nil nil [51791 51934])
            ("define-lex-analyzer" code nil nil [51936 53184])
            ("define-lex-regex-analyzer" code nil nil [53186 53880])
            ("define-lex-simple-regex-analyzer" code nil nil [53882 54079])
            ("define-lex-simple-regex-analyzer" code nil nil [54081 54279])
            ("define-lex-regex-analyzer" code nil nil [54281 54600])
            ("define-lex-regex-analyzer" code nil nil [54602 55256])
            ("define-lex-regex-analyzer" code nil nil [55258 55944])
            ("define-lex-regex-analyzer" code nil nil [55946 56622])
            ("semantic-comment-lexer" function (:lexical-analyzer-flag t) nil [56725 57075])
            ("semantic-simple-lexer" function (:lexical-analyzer-flag t) nil [57095 57598])
            ("define-lex-keyword-type-analyzer" function (:arguments ("name" "doc" "syntax")) nil [57760 58296])
            ("define-lex-sexp-type-analyzer" function (:arguments ("name" "doc" "syntax" "token")) nil [58298 58818])
            ("define-lex-regex-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches" "default")) nil [58820 60076])
            ("define-lex-string-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches" "default")) nil [60078 61655])
            ("define-lex-block-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches")) nil [61657 65453])
            ("semantic-lex-catch-errors" function (:arguments ("symbol" "forms")) nil [65693 67309])
            ("put" code nil nil [67310 67366])
            ("add-hook" code nil nil [67401 68061])
            ("semantic-alias-obsolete" code nil nil [68155 68234])
            ("semantic-alias-obsolete" code nil nil [68235 68310])
            ("semantic-alias-obsolete" code nil nil [68311 68388])
            ("semantic-alias-obsolete" code nil nil [68389 68488])
            ("semantic-alias-obsolete" code nil nil [68489 68570])
            ("semantic-alias-obsolete" code nil nil [68571 68656])
            ("semantic-alias-obsolete" code nil nil [68657 68742])
            ("semantic-alias-obsolete" code nil nil [68743 68830])
            ("semantic-alias-obsolete" code nil nil [68831 68910])
            ("semantic-alias-obsolete" code nil nil [68911 68986])
            ("semantic-alias-obsolete" code nil nil [68987 69058])
            ("semantic-flex-tokens" variable (:default-value semantic-lex-tokens) nil [69281 69404])
            ("semantic-flex-unterminated-syntax-end-function" variable (:default-value (lambda (syntax syntax-start flex-end) flex-end)) nil [69406 69982])
            ("semantic-flex-extensions" variable nil nil [69984 70399])
            ("make-variable-buffer-local" code nil nil [70400 70454])
            ("semantic-flex-syntax-modifications" variable nil nil [70456 70828])
            ("make-variable-buffer-local" code nil nil [70829 70893])
            ("semantic-ignore-comments" variable (:default-value t) nil [70895 71066])
            ("make-variable-buffer-local" code nil nil [71067 71121])
            ("semantic-flex-enable-newlines" variable nil nil [71123 71340])
            ("make-variable-buffer-local" code nil nil [71341 71400])
            ("semantic-flex-enable-whitespace" variable nil nil [71402 71617])
            ("make-variable-buffer-local" code nil nil [71618 71679])
            ("semantic-flex-enable-bol" variable nil nil [71681 71900])
            ("make-variable-buffer-local" code nil nil [71901 71955])
            ("semantic-number-expression" variable (:default-value semantic-lex-number-expression) nil [71957 72074])
            ("make-variable-buffer-local" code nil nil [72075 72131])
            ("semantic-flex-depth" variable nil nil [72133 72241])
            ("make-variable-buffer-local" code nil nil [72242 72291])
            ("semantic-flex" function (:arguments ("start" "end" "depth" "length")) nil [72293 81515])
            ("semantic/lex" package nil nil [81517 81540]))          
      :file "lex.el.gz"
      :pointmax 81691
      :fsize 19918
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 35476 . 35477) (symbol 34265 . 34281) (open-paren 34264 . 34265)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1155 1174])
            ("semantic/format" include nil nil [1175 1201])
            ("sgml-mode" include nil nil [1202 1222])
            ("semantic-command-separation-character" variable nil nil [1224 1270])
            ("semantic-html-super-regex" variable (:default-value "<\\(h[1-9]\\|title\\|script\\|body\\|a +href\\)\\>") nil [1272 1431])
            ("semantic-html-section-list" variable (:default-value (quote (("title" 1) ("script" 1) ("body" 1) ("a" 11) ("h1" 2) ("h2" 3) ("h3" 4) ("h4" 5) ("h5" 6) ("h6" 7) ("h7" 8) ("h8" 9) ("h9" 10)))) nil [1433 1712])
            ("semantic-parse-region" function
               (:parent "html-mode"
                :override-function-flag t
                :arguments ("&rest" "ignore"))
                nil [1714 2065])
            ("semantic-parse-changes" function
               (:parent "html-mode"
                :override-function-flag t)
                nil [2067 2227])
            ("semantic-html-expand-tag" function (:arguments ("tag")) nil [2229 2494])
            ("semantic-html-components" function (:arguments ("tag")) nil [2496 2618])
            ("semantic-html-parse-headings" function nil nil [2620 3401])
            ("semantic-html-set-endpoint" function (:arguments ("metataglist" "pnt")) nil [3403 3927])
            ("semantic-html-new-section-tag" function (:arguments ("name" "members" "level" "start" "end")) nil [3929 4439])
            ("semantic-html-extract-section-name" function nil nil [4441 5116])
            ("semantic-html-recursive-combobulate-list" function (:arguments ("sectionlist" "level")) nil [5118 7068])
            ("semantic-sb-tag-children-to-expand" function
               (:parent "html-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [7070 7217])
            ("semantic-imenu-expandable-tag-classes" variable nil nil [7263 7309])
            ("semantic-imenu-bucketize-file" variable nil nil [7310 7348])
            ("semantic-imenu-bucketize-type-members" variable nil nil [7349 7395])
            ("semantic-default-html-setup" function nil nil [7412 8196])
            ("define-child-mode" code nil nil [8198 8315])
            ("semantic/html" package nil nil [8317 8341]))          
      :file "html.el.gz"
      :pointmax 8494
      :fsize 3306
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [2180 2199])
            ("semantic-after-partial-cache-change-hook" variable nil nil [2211 2663])
            ("define-obsolete-variable-alias" code nil nil [2665 2756])
            ("semantic-change-functions" variable (:default-value (quote (semantic-edits-change-function-handle-changes))) nil [2757 3009])
            ("semantic-reparse-needed-change-hook" variable nil nil [3011 3257])
            ("semantic-no-reparse-needed-change-hook" variable nil nil [3259 3580])
            ("define-obsolete-variable-alias" code nil nil [3582 3693])
            ("semantic-edits-new-change-functions" variable nil nil [3694 3865])
            ("define-obsolete-variable-alias" code nil nil [3867 3984])
            ("semantic-edits-delete-change-functions" variable nil nil [3985 4222])
            ("semantic-edits-move-change-hook" variable nil nil [4224 4479])
            ("define-obsolete-variable-alias" code nil nil [4481 4600])
            ("semantic-edits-reparse-change-functions" variable nil nil [4601 4799])
            ("semantic-edits-incremental-reparse-failed-hook" variable nil nil [4801 4976])
            ("semantic-varalias-obsolete" code nil nil [4978 5117])
            ("semantic-edits-verbose-flag" variable nil nil [5119 5321])
            ("semantic-change-function" function (:arguments ("start" "end" "length")) nil [5460 5828])
            ("semantic-changes-in-region" function (:arguments ("start" "end" "buffer")) nil [5830 6427])
            ("semantic-edits-change-function-handle-changes" function (:arguments ("start" "end" "length")) nil [6429 8293])
            ("semantic-edits-flush-change" function (:arguments ("change")) nil [8295 8525])
            ("semantic-edits-flush-changes" function nil nil [8527 8792])
            ("semantic-edits-change-in-one-tag-p" function (:arguments ("change" "hits")) nil [8794 9440])
            ("semantic-edits-os" function (:arguments ("change")) nil [9770 9964])
            ("semantic-edits-oe" function (:arguments ("change")) nil [9966 10155])
            ("semantic-edits-change-leaf-tag" function (:arguments ("change")) nil [10157 11549])
            ("semantic-edits-change-between-tags" function (:arguments ("change")) nil [11551 13757])
            ("semantic-edits-change-over-tags" function (:arguments ("change")) nil [13759 18412])
            ("semantic-parse-changes-failed" function (:arguments ("args")) nil [18523 18925])
            ("semantic-edits-incremental-fail" function nil nil [18927 19278])
            ("semantic-edits-incremental-parser" function nil nil [19295 20329])
            ("semantic-edits-assert-valid-region" function nil nil [20331 20608])
            ("semantic-edits-incremental-parser-1" function nil nil [20610 33921])
            ("defalias" code nil nil [33976 34055])
            ("semantic-edits-splice-remove" function (:arguments ("oldtags" "parent" "cachelist")) nil [34518 36778])
            ("semantic-edits-splice-insert" function (:arguments ("newtags" "parent" "cachelist")) nil [36780 38112])
            ("semantic-edits-splice-replace" function (:arguments ("oldtag" "newtag")) nil [38114 39363])
            ("add-hook" code nil nil [39365 39459])
            ("semantic/edit" package nil nil [39461 39485]))          
      :file "edit.el.gz"
      :pointmax 39638
      :fsize 11072
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/fw" include nil nil [1789 1811])
            ("semantic/lex" include nil nil [1812 1835])
            ("declare-function" code nil nil [1837 1906])
            ("declare-function" code nil nil [1907 1956])
            ("declare-function" code nil nil [1957 2016])
            ("declare-function" code nil nil [2017 2076])
            ("semantic-tag-version" variable
               (:constant-flag t
                :default-value "2.0")
                nil [2078 2172])
            ("semantic-tag-incompatible-version" variable
               (:constant-flag t
                :default-value "1.0")
                nil [2174 2418])
            ("semantic-tag-name" function (:arguments ("tag")) nil [3179 3493])
            ("semantic-tag-class" function (:arguments ("tag")) nil [3495 4241])
            ("semantic-tag-attributes" function (:arguments ("tag")) nil [4243 4417])
            ("semantic-tag-properties" function (:arguments ("tag")) nil [4419 4592])
            ("semantic-tag-overlay" function (:arguments ("tag")) nil [4594 4871])
            ("semantic--tag-overlay-cdr" function (:arguments ("tag")) nil [4873 5035])
            ("semantic--tag-set-overlay" function (:arguments ("tag" "overlay")) nil [5037 5224])
            ("semantic-tag-start" function (:arguments ("tag")) nil [5226 5424])
            ("semantic-tag-end" function (:arguments ("tag")) nil [5426 5618])
            ("semantic-tag-bounds" function (:arguments ("tag")) nil [5620 5780])
            ("semantic-tag-set-bounds" function (:arguments ("tag" "start" "end")) nil [5782 6068])
            ("semantic-tag-in-buffer-p" function (:arguments ("tag")) nil [6070 6425])
            ("semantic--tag-get-property" function (:arguments ("tag" "property")) nil [6427 6697])
            ("semantic-tag-buffer" function (:arguments ("tag")) nil [6699 7280])
            ("semantic-tag-mode" function (:arguments ("tag")) nil [7282 8190])
            ("semantic--tag-attributes-cdr" function (:arguments ("tag")) nil [8192 8360])
            ("semantic-tag-put-attribute" function (:arguments ("tag" "attribute" "value")) nil [8362 8886])
            ("semantic-tag-put-attribute-no-side-effect" function (:arguments ("tag" "attribute" "value")) nil [8888 9518])
            ("semantic-tag-get-attribute" function (:arguments ("tag" "attribute")) nil [9520 9809])
            ("semantic--tag-properties-cdr" function (:arguments ("tag")) nil [9857 10025])
            ("semantic--tag-put-property" function (:arguments ("tag" "property" "value")) nil [10027 10501])
            ("semantic--tag-put-property-no-side-effect" function (:arguments ("tag" "property" "value")) nil [10503 11167])
            ("semantic-tag-file-name" function (:arguments ("tag")) nil [11169 11601])
            ("semantic-tag-p" function (:arguments ("tag")) nil [11635 12056])
            ("semantic-tag-of-class-p" function (:arguments ("tag" "class")) nil [12058 12187])
            ("semantic-tag-type-members" function (:arguments ("tag")) nil [12189 12377])
            ("semantic-tag-type" function (:arguments ("tag")) nil [12379 12704])
            ("semantic-tag-with-position-p" function (:arguments ("tag")) nil [12706 12969])
            ("semantic-equivalent-tag-p" function (:arguments ("tag1" "tag2")) nil [12971 13654])
            ("semantic-tag-similar-with-subtags-p" function (:arguments ("tag1" "tag2" "ignorable-attributes")) nil [13657 14054])
            ("semantic-tag-of-type-p" function (:arguments ("tag" "type")) nil [14056 15384])
            ("semantic-tag-type-compound-p" function (:arguments ("tag")) nil [15386 15833])
            ("semantic-tag-faux-p" function (:arguments ("tag")) nil [15835 16200])
            ("semantic-tag-make-plist" function (:arguments ("args")) nil [16261 16987])
            ("semantic-tag" function (:arguments ("name" "class" "attributes")) nil [16989 17360])
            ("semantic-tag-new-variable" function (:arguments ("name" "type" "default-value" "attributes")) nil [17362 17877])
            ("semantic-tag-new-function" function (:arguments ("name" "type" "arg-list" "attributes")) nil [17879 18377])
            ("semantic-tag-new-type" function (:arguments ("name" "type" "members" "parents" "attributes")) nil [18379 19450])
            ("semantic-tag-new-include" function (:arguments ("name" "system-flag" "attributes")) nil [19452 19904])
            ("semantic-tag-new-package" function (:arguments ("name" "detail" "attributes")) nil [19906 20293])
            ("semantic-tag-new-code" function (:arguments ("name" "detail" "attributes")) nil [20295 20623])
            ("semantic-tag-set-faux" function (:arguments ("tag")) nil [20625 20861])
            ("semantic-tag-set-name" function (:arguments ("tag" "name")) nil [20863 20952])
            ("semantic-create-tag-proxy" function (:arguments ("function" "data")) nil [21369 21917])
            ("semantic-tag-set-proxy" function (:arguments ("tag" "proxy" "filename")) nil [21919 22379])
            ("semantic-tag-resolve-proxy" function (:arguments ("tag")) nil [22381 22779])
            ("semantic-tag-clone" function (:arguments ("tag" "name")) nil [22814 23230])
            ("semantic-tag-copy" function (:arguments ("tag" "name" "keep-file")) nil [23232 24735])
            ("semantic--tag-copy-properties" function (:arguments ("tag1" "tag2")) nil [24993 25320])
            ("semantic-tag-deep-copy-one-tag" function (:arguments ("tag" "filter")) nil [25341 26261])
            ("semantic--tag-deep-copy-attributes" function (:arguments ("attrs" "filter")) nil [26263 26859])
            ("semantic--tag-deep-copy-value" function (:arguments ("value" "filter")) nil [26861 27467])
            ("semantic--tag-deep-copy-tag-list" function (:arguments ("tags" "filter")) nil [27469 28071])
            ("semantic-tag-modifiers" function (:arguments ("tag")) nil [28117 28269])
            ("semantic-tag-docstring" function (:arguments ("tag" "buffer")) nil [28271 29063])
            ("semantic-tag-named-parent" function (:arguments ("tag")) nil [29114 29415])
            ("semantic-tag-type-superclasses" function (:arguments ("tag")) nil [29443 30072])
            ("semantic--tag-find-parent-by-name" function (:arguments ("name" "supers")) nil [30074 30680])
            ("semantic-tag-type-superclass-protection" function (:arguments ("tag" "parentstring")) nil [30682 31791])
            ("semantic-tag-type-interfaces" function (:arguments ("tag")) nil [31793 31998])
            ("semantic-tag-function-arguments" function (:arguments ("tag")) nil [32032 32236])
            ("semantic-tag-function-throws" function (:arguments ("tag")) nil [32238 32441])
            ("semantic-tag-function-parent" function (:arguments ("tag")) nil [32443 32745])
            ("semantic-tag-function-destructor-p" function (:arguments ("tag")) nil [32747 32964])
            ("semantic-tag-function-constructor-p" function (:arguments ("tag")) nil [32966 33187])
            ("semantic-tag-variable-default" function (:arguments ("tag")) nil [33221 33435])
            ("semantic-tag-variable-constant-p" function (:arguments ("tag")) nil [33437 33658])
            ("semantic-tag-include-system-p" function (:arguments ("tag")) nil [33691 33910])
            ("semantic-tag-include-filename" function
               (:overloadable t
                :arguments ("tag"))
                nil [33912 34344])
            ("semantic-tag-include-filename-default" function (:arguments ("tag")) nil [34346 34497])
            ("semantic-tag-code-detail" function (:arguments ("tag")) nil [34527 34717])
            ("semantic-tag-new-alias" function (:arguments ("name" "meta-tag-class" "value" "attributes")) nil [34748 35181])
            ("semantic-tag-alias-class" function (:arguments ("tag")) nil [35183 35316])
            ("semantic-tag-alias-definition" function
               (:overloadable t
                :arguments ("tag"))
                nil [35318 35737])
            ("semantic-tag-components" function
               (:overloadable t
                :arguments ("tag"))
                nil [35803 36089])
            ("semantic-tag-components-default" function (:arguments ("tag")) nil [36091 36407])
            ("semantic-tag-components-with-overlays" function
               (:overloadable t
                :arguments ("tag"))
                nil [36409 36940])
            ("semantic-tag-components-with-overlays-default" function (:arguments ("tag")) nil [36942 38138])
            ("semantic-tag-children-compatibility" function (:arguments ("tag" "positiononly")) nil [38140 38536])
            ("semantic-narrow-to-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [38631 38903])
            ("semantic-with-buffer-narrowed-to-current-tag" function (:arguments ("body")) nil [38905 39122])
            ("put" code nil nil [39123 39198])
            ("add-hook" code nil nil [39199 39329])
            ("semantic-with-buffer-narrowed-to-tag" function (:arguments ("tag" "body")) nil [39331 39501])
            ("put" code nil nil [39502 39569])
            ("add-hook" code nil nil [39570 39692])
            ("semantic--tag-hook-value" variable nil nil [40041 40074])
            ("semantic-tag-add-hook" function (:arguments ("tag" "hook" "function" "append")) nil [40076 40690])
            ("semantic-tag-remove-hook" function (:arguments ("tag" "hook" "function")) nil [40692 41265])
            ("semantic--tag-run-hooks" function (:arguments ("tag" "hook" "args")) nil [41267 41822])
            ("semantic--tag-unlink-list-from-buffer" function (:arguments ("tags")) nil [41979 42190])
            ("semantic--tag-unlink-from-buffer" function (:arguments ("tag")) nil [42192 42853])
            ("semantic--tag-link-list-to-buffer" function (:arguments ("tags")) nil [42855 43056])
            ("semantic--tag-link-to-buffer" function (:arguments ("tag")) nil [43058 43857])
            ("semantic--tag-unlink-cache-from-buffer" function nil nil [43859 44137])
            ("semantic--buffer-cache" variable nil nil [44139 44170])
            ("semantic--tag-link-cache-to-buffer" function nil nil [44172 44736])
            ("semantic--tag-expanded-p" function (:arguments ("tag")) nil [44952 45408])
            ("semantic-tag-expand-function" variable nil nil [45410 45922])
            ("make-variable-buffer-local" code nil nil [45923 45981])
            ("semantic--tag-expand" function (:arguments ("tag")) nil [45983 47716])
            ("semantic-foreign-tag-invalid" function (:arguments ("tag")) nil [47738 47894])
            ("semantic-foreign-tag-p" function (:arguments ("tag")) nil [47896 48179])
            ("semantic-foreign-tag-check" function (:arguments ("tag")) nil [48181 48368])
            ("semantic-foreign-tag" function (:arguments ("tag")) nil [48370 49185])
            ("semantic-obtain-foreign-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [49237 49477])
            ("semantic-insert-foreign-tag-default" function (:arguments ("foreign-tag")) nil [49479 49852])
            ("semantic-insert-foreign-tag" function
               (:overloadable t
                :arguments ("foreign-tag"))
                nil [49854 50213])
            ("semantic-insert-foreign-tag" function
               (:parent "log-edit-mode"
                :override-function-flag t
                :arguments ("foreign-tag"))
                nil [50242 50441])
            ("semantic-insert-foreign-tag" function
               (:parent "change-log-mode"
                :override-function-flag t
                :arguments ("foreign-tag"))
                nil [50443 50644])
            ("semantic-token-version" variable
               (:constant-flag t
                :default-value semantic-tag-version)
                nil [50668 50724])
            ("semantic-token-incompatible-version" variable
               (:constant-flag t
                :default-value semantic-tag-incompatible-version)
                nil [50725 50807])
            ("semantic-token-type-parent" function (:arguments ("tag")) nil [50809 51242])
            ("make-obsolete" code nil nil [51244 51386])
            ("semantic-alias-obsolete" code nil nil [51388 51500])
            ("semantic-varalias-obsolete" code nil nil [51502 51624])
            ("semantic/tag" package nil nil [51626 51649]))          
      :file "tag.el.gz"
      :pointmax 51800
      :fsize 13440
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1097 1116])
            ("pulse" include nil nil [1117 1133])
            ("semantic-highlight-tag" function (:arguments ("tag" "face")) nil [1170 1547])
            ("semantic-unhighlight-tag" function (:arguments ("tag")) nil [1549 1839])
            ("semantic-momentary-highlight-one-tag-line" function (:arguments ("tag" "face")) nil [1879 2216])
            ("semantic-momentary-highlight-tag" function (:arguments ("tag" "face")) nil [2257 2873])
            ("semantic-set-tag-face" function (:arguments ("tag" "face")) nil [2875 3028])
            ("semantic-set-tag-invisible" function (:arguments ("tag" "visible")) nil [3030 3263])
            ("semantic-tag-invisible-p" function (:arguments ("tag")) nil [3265 3406])
            ("semantic-overlay-signal-read-only" function (:arguments ("overlay" "after" "start" "end" "len")) nil [3408 3872])
            ("semantic-set-tag-read-only" function (:arguments ("tag" "writable")) nil [3874 4493])
            ("semantic-tag-read-only-p" function (:arguments ("tag")) nil [4495 4869])
            ("semantic-tag-secondary-overlays" function (:arguments ("tag")) nil [5162 5317])
            ("semantic-tag-create-secondary-overlay" function (:arguments ("tag" "link-hook")) nil [5319 6498])
            ("semantic-tag-get-secondary-overlay" function (:arguments ("tag" "property")) nil [6500 6909])
            ("semantic-tag-delete-secondary-overlay" function (:arguments ("tag" "overlay-or-property")) nil [6911 7680])
            ("semantic--tag-unlink-copy-secondary-overlays" function (:arguments ("tag")) nil [7682 8485])
            ("semantic--tag-unlink-secondary-overlays" function (:arguments ("tag")) nil [8487 9495])
            ("semantic--tag-link-secondary-overlays" function (:arguments ("tag")) nil [9497 9865])
            ("semantic-set-tag-folded" function (:arguments ("tag" "folded")) nil [9958 11084])
            ("declare-function" code nil nil [11086 11141])
            ("semantic-set-tag-folded-isearch" function (:arguments ("overlay")) nil [11143 11348])
            ("semantic-tag-folded-p" function (:arguments ("tag")) nil [11350 11488])
            ("semantic/decorate" package nil nil [11490 11518]))          
      :file "decorate.el.gz"
      :pointmax 11555
      :fsize 3372
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [2732 2745])
            ("semantic" include nil nil [2747 2766])
            ("semantic/format" include nil nil [2767 2793])
            ("semantic/ctxt" include nil nil [2794 2818])
            ("semantic/scope" include nil nil [2819 2844])
            ("semantic/sort" include nil nil [2845 2869])
            ("semantic/analyze/fcn" include nil nil [2870 2901])
            ("semantic/find" include nil nil [2922 2946])
            ("declare-function" code nil nil [2949 3002])
            ("declare-function" code nil nil [3003 3070])
            ("semantic-analyze-error-stack" variable nil nil [3082 3176])
            ("semantic-analyze-push-error" function (:arguments ("err")) nil [3178 3328])
            ("semantic-analyze-context" type
               (:members 
                  ( ("bounds" variable
                       (:documentation "The bounds of this context.
Usually bound to the dimension of a single symbol or command."
                        :type "list")
                        nil nil)
                    ("prefix" variable
                       (:documentation "List of tags defining local text.
This can be nil, or a list where the last element can be a string
representing text that may be incomplete.  Preceding elements
must be semantic tags representing variables or functions
called in a dereference sequence."
                        :type "list")
                        nil nil)
                    ("prefixclass" variable
                       (:documentation "Tag classes expected at this context.
These are classes for tags, such as 'function, or 'variable."
                        :type "list")
                        nil nil)
                    ("prefixtypes" variable
                       (:documentation "List of tags defining types for :prefix.
This list is one shorter than :prefix.  Each element is a semantic
tag representing a type matching the semantic tag in the same
position in PREFIX."
                        :type "list")
                        nil nil)
                    ("scope" variable
                       (:documentation "List of tags available in scopetype.
See `semantic-analyze-scoped-tags' for details."
                        :type "(or null semantic-scope-cache)")
                        nil nil)
                    ("buffer" variable
                       (:documentation "The buffer this context is derived from."
                        :type "buffer")
                        nil nil)
                    ("errors" variable (:documentation "Any errors thrown an caught during analysis.") nil nil))                  
                :type "class")
                nil [3508 4875])
            ("semantic-analyze-context-assignment" type
               (:superclasses "semantic-analyze-context"
                :members 
                  ( ("assignee" variable
                       (:documentation "A sequence of tags for an assignee.
This is a variable into which some value is being placed.  The last
item in the list is the variable accepting the value.  Earlier
tags represent the variables being dereferenced to get to the
assignee."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [4877 5312])
            ("semantic-analyze-context-functionarg" type
               (:superclasses "semantic-analyze-context"
                :members 
                  ( ("function" variable
                       (:documentation "A sequence of tags for a function.
This is a function being called.  The cursor will be in the position
of an argument.
The last tag in :function is the function being called.  Earlier
tags represent the variables being dereferenced to get to the
function."
                        :type "list")
                        nil nil)
                    ("index" variable
                       (:documentation "The index of the argument for this context.
If a function takes 4 arguments, this value should be bound to
the values 1 through 4."
                        :type "integer")
                        nil nil)
                    ("argument" variable
                       (:documentation "A sequence of tags for the :index argument.
The argument can accept a value of some type, and this contains the
tag for that definition.  It should be a tag, but might
be just a string in some circumstances."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [5314 6254])
            ("semantic-analyze-context-return" type
               (:superclasses "semantic-analyze-context"
                :type "class")
                nil [6256 6474])
            ("cl-defmethod" code nil nil [6541 7368])
            ("cl-defmethod" code nil nil [7370 7594])
            ("cl-defmethod" code nil nil [7596 7829])
            ("cl-defmethod" code nil nil [7831 8258])
            ("cl-defmethod" code nil nil [8260 8495])
            ("cl-defmethod" code nil nil [8497 8731])
            ("semantic-analyze-find-tag-sequence" function
               (:overloadable t
                :arguments ("sequence" "scope" "typereturn" "throwsym" "flags"))
                nil [8950 9767])
            ("semantic-analyze-find-tag-sequence-default" function (:arguments ("sequence" "scope" "typereturn" "throwsym" "flags")) nil [9769 13703])
            ("semantic-analyze-find-tag" function (:arguments ("name" "tagclass" "scope")) nil [13705 15858])
            ("semantic-analyze-current-symbol" function
               (:overloadable t
                :arguments ("analyzehookfcn" "position"))
                nil [15943 16995])
            ("semantic-analyze-current-symbol-default" function (:arguments ("analyzehookfcn" "position")) nil [16997 18391])
            ("semantic-analyze-current-context" function
               (:overloadable t
                :user-visible-flag t
                :arguments ("position"))
                nil [18470 20005])
            ("semantic-analyze-current-context-default" function (:arguments ("position")) nil [20007 25329])
            ("semantic-analyze-dereference-alias" function (:arguments ("taglist")) nil [25331 25874])
            ("semantic-adebug-analyze" function
               (:user-visible-flag t
                :arguments ("ctxt"))
                nil [25877 26547])
            ("declare-function" code nil nil [26616 26675])
            ("cl-defmethod" code nil nil [26677 26986])
            ("semantic-analyze-summary-function" variable (:default-value (quote semantic-format-tag-prototype)) nil [26988 27241])
            ("semantic-analyze-princ-sequence" function (:arguments ("sequence" "prefix" "buff")) nil [27243 28062])
            ("cl-defmethod" code nil nil [28064 28841])
            ("cl-defmethod" code nil nil [28843 29082])
            ("cl-defmethod" code nil nil [29084 29472])
            ("semantic-analyze-pop-to-context" function (:arguments ("context")) nil [29474 30029])
            ("semantic/analyze" package nil nil [30031 30058]))          
      :file "analyze.el.gz"
      :pointmax 30217
      :fsize 8906
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 2946 . 2947) (symbol 2904 . 2921) (open-paren 2903 . 2904) (close-paren 2745 . 2746) (symbol 2714 . 2731) (open-paren 2713 . 2714)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cedet-global" include nil nil [1015 1038])
            ("semantic/db-find" include nil nil [1039 1066])
            ("semantic/symref/global" include nil nil [1067 1100])
            ("eieio-opt" include nil nil [1179 1199])
            ("eieio" include nil nil [1160 1176])
            ("semanticdb-enable-gnu-global-databases" function
               (:user-visible-flag t
                :arguments ("mode" "noerror"))
                nil [1231 2473])
            ("semanticdb-enable-gnu-global-hook" function nil nil [2475 2678])
            ("semanticdb-project-database-global" type
               (:interfaces ("eieio-instance-tracker")
                :superclasses "semanticdb-project-database"
                :type "class")
                nil [2680 2924])
            ("semanticdb-enable-gnu-global-in-buffer" function
               (:user-visible-flag t
                :arguments ("dont-err-if-not-available"))
                nil [2926 3768])
            ("semanticdb-table-global" type
               (:superclasses "semanticdb-search-results-table"
                :members 
                  ( ("major-mode" variable (:default-value "nil") nil nil))                  
                :type "class")
                nil [3783 3944])
            ("cl-defmethod" code nil nil [3946 4200])
            ("cl-defmethod" code nil nil [4202 4481])
            ("cl-defmethod" code nil nil [4513 5114])
            ("cl-defmethod" code nil nil [5116 5382])
            ("cl-defmethod" code nil nil [5482 6057])
            ("cl-defmethod" code nil nil [6059 6519])
            ("cl-defmethod" code nil nil [6521 7210])
            ("cl-defmethod" code nil nil [7382 7694])
            ("cl-defmethod" code nil nil [7696 8039])
            ("cl-defmethod" code nil nil [8041 8400])
            ("semantic/db-global" package nil nil [8402 8431]))          
      :file "db-global.el.gz"
      :pointmax 8594
      :fsize 2993
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1202 . 1203) (symbol 1103 . 1120) (open-paren 1102 . 1103)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1315 1334])
            ("semantic/find" include nil nil [1335 1359])
            ("semantic-tag-similar-ignorable-attributes" variable (:default-value (quote (:prototype-flag))) nil [1780 1918])
            ("semantic--tag-similar-names-p" function
               (:overloadable t
                :arguments ("tag1" "tag2" "blankok"))
                nil [1920 2257])
            ("semantic--tag-similar-names-p-default" function (:arguments ("tag1" "tag2" "blankok")) nil [2259 2749])
            ("semantic--tag-similar-types-p" function
               (:overloadable t
                :arguments ("tag1" "tag2"))
                nil [2751 3161])
            ("semantic--tag-similar-types-p-default" function (:arguments ("tag1" "tag2")) nil [3163 3417])
            ("semantic--tag-attribute-similar-p" function
               (:overloadable t
                :arguments ("attr" "value1" "value2" "ignorable-attributes"))
                nil [3419 4037])
            ("semantic--tag-attribute-similar-p-default" function (:arguments ("attr" "value1" "value2" "ignorable-attributes")) nil [4039 4811])
            ("semantic-tag-similar-p" function
               (:overloadable t
                :arguments ("tag1" "tag2" "ignorable-attributes"))
                nil [4813 5518])
            ("semantic-tag-similar-p-default" function (:arguments ("tag1" "tag2" "ignorable-attributes")) nil [5607 7197])
            ("semantic-tag-full-package" function
               (:overloadable t
                :arguments ("tag" "stream-or-buffer"))
                nil [7418 8301])
            ("semantic-tag-full-package-default" function (:arguments ("tag" "stream")) nil [8303 8629])
            ("semantic-tag-full-name" function
               (:overloadable t
                :arguments ("tag" "stream-or-buffer"))
                nil [8631 9785])
            ("make-obsolete-overload" code nil nil [9787 9898])
            ("semantic-tag-full-name-default" function (:arguments ("tag" "stream")) nil [9900 10239])
            ("semantic-tag-calculate-parent" function
               (:overloadable t
                :arguments ("tag"))
                nil [10438 10743])
            ("semantic-tag-calculate-parent-default" function (:arguments ("tag")) nil [10745 11031])
            ("semantic-tag-protection" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [11033 11902])
            ("make-obsolete-overload" code nil nil [11904 12017])
            ("semantic-tag-protection-default" function (:arguments ("tag" "parent")) nil [12019 12675])
            ("semantic-tag-package-protected-p" function (:arguments ("tag" "parent" "currentpackage")) nil [12677 13749])
            ("semantic-tag-protected-p" function (:arguments ("tag" "protection" "parent")) nil [13751 14527])
            ("semantic-tag-abstract-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [14529 14952])
            ("make-obsolete-overload" code nil nil [14954 15065])
            ("semantic-tag-abstract-p-default" function (:arguments ("tag" "parent")) nil [15067 15479])
            ("semantic-tag-leaf-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [15481 15812])
            ("make-obsolete-overload" code nil nil [15814 15917])
            ("semantic-tag-leaf-p-default" function (:arguments ("tag" "parent")) nil [15919 16353])
            ("semantic-tag-static-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [16355 16687])
            ("semantic-tag-static-p-default" function (:arguments ("tag" "parent")) nil [16689 17066])
            ("semantic-tag-prototype-p" function
               (:overloadable t
                :arguments ("tag"))
                nil [17083 17289])
            ("semantic-tag-prototype-p-default" function (:arguments ("tag")) nil [17291 17700])
            ("semantic/tag-ls" package nil nil [17702 17728]))          
      :file "tag-ls.el.gz"
      :pointmax 17885
      :fsize 5291
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [2521 2540])
            ("ede-minor-mode" variable nil nil [2542 2565])
            ("declare-function" code nil nil [2566 2619])
            ("declare-function" code nil nil [2620 2687])
            ("declare-function" code nil nil [2688 2730])
            ("declare-function" code nil nil [2731 2788])
            ("declare-function" code nil nil [2789 2836])
            ("semantic-symref-tool" variable
               (:user-visible-flag t
                :default-value (quote detect))
                nil [2848 3041])
            ("make-variable-buffer-local" code nil nil [3042 3092])
            ("semantic-symref-tool-alist" variable (:default-value (quote (((lambda (rootdir) (file-exists-p (expand-file-name "GPATH" rootdir))) . global) ((lambda (rootdir) (file-exists-p (expand-file-name "ID" rootdir))) . idutils) ((lambda (rootdir) (file-exists-p (expand-file-name "cscope.out" rootdir))) . cscope)))) nil [3112 3738])
            ("semantic-symref-calculate-rootdir" function nil nil [3740 4254])
            ("semantic-symref-detect-symref-tool" function nil nil [4256 4885])
            ("semantic-symref-instantiate" function (:arguments ("args")) nil [4887 5344])
            ("semantic-symref-last-result" variable nil nil [5346 5425])
            ("semantic-symref-data-debug-last-result" function (:user-visible-flag t) nil [5427 5771])
            ("semantic-symref-find-references-by-name" function
               (:user-visible-flag t
                :arguments ("name" "scope" "tool-return"))
                nil [5809 6733])
            ("semantic-symref-find-tags-by-name" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [6750 7461])
            ("semantic-symref-find-tags-by-regexp" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [7478 8199])
            ("semantic-symref-find-tags-by-completion" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [8216 8946])
            ("semantic-symref-find-file-references-by-name" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [8963 9690])
            ("semantic-symref-find-text" function
               (:user-visible-flag t
                :arguments ("text" "scope"))
                nil [9707 10479])
            ("semantic-symref-result" type
               (:members 
                  ( ("created-by" variable
                       (:documentation "Back-pointer to the symref tool creating these results."
                        :type "semantic-symref-tool-baseclass")
                        nil nil)
                    ("hit-files" variable
                       (:documentation "The list of files hit."
                        :type "list")
                        nil nil)
                    ("hit-text" variable
                       (:documentation "If the result doesn't provide full lines, then fill in hit-text.
GNU Global does completion search this way."
                        :type "list")
                        nil nil)
                    ("hit-lines" variable
                       (:documentation "The list of line hits.
Each element is a cons cell of the form (LINE . FILENAME)."
                        :type "list")
                        nil nil)
                    ("hit-tags" variable
                       (:documentation "The list of tags with hits in them.
Use the  `semantic-symref-hit-tags' method to get this list."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [10566 11463])
            ("cl-defmethod" code nil nil [11465 12132])
            ("semantic-symref-recently-opened-buffers" variable nil nil [12134 12251])
            ("semantic-symref-cleanup-recent-buffers-fcn" function nil nil [12253 12976])
            ("cl-defmethod" code nil nil [12978 14576])
            ("semantic-symref-hit-to-tag-via-db" function (:arguments ("hit" "searchtxt" "searchtype")) nil [14578 15977])
            ("semantic-symref-hit-to-tag-via-buffer" function (:arguments ("hit" "searchtxt" "searchtype" "open-buffers")) nil [15979 18704])
            ("semantic-symref-tool-baseclass" type
               (:members 
                  ( ("searchfor" variable
                       (:documentation "The thing to search for."
                        :type "string")
                        nil nil)
                    ("searchtype" variable
                       (:documentation "The type of search to do.
Values could be 'symbol, 'regexp, 'tagname, or 'completion."
                        :type "symbol")
                        nil nil)
                    ("searchscope" variable
                       (:documentation "The scope to search for.
Can be 'project, 'target, or 'file."
                        :type "symbol")
                        nil nil)
                    ("resulttype" variable
                       (:documentation "The kind of search results desired.
Can be 'line, 'file, or 'tag.
The type of result can be converted from 'line to 'file, or 'line to 'tag,
but not from 'file to 'line or 'tag."
                        :type "symbol")
                        nil nil))                  
                :type "class")
                nil [18828 19864])
            ("cl-defmethod" code nil nil [19866 20393])
            ("cl-defmethod" code nil nil [20395 20616])
            ("cl-defmethod" code nil nil [20618 21118])
            ("cl-defmethod" code nil nil [21120 21357])
            ("semantic/symref" package nil nil [21359 21385]))          
      :file "symref.el.gz"
      :pointmax 21542
      :fsize 6218
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [961 983])
            ("cedet-files" include nil nil [984 1006])
            ("data-debug" include nil nil [1007 1028])
            ("semanticdb-file-version" variable (:default-value semantic-version) nil [1030 1140])
            ("semanticdb-file-incompatible-version" variable (:default-value "1.4") nil [1141 1254])
            ("semanticdb-default-file-name" variable (:default-value "semantic.cache") nil [1272 1407])
            ("semanticdb-default-save-directory" variable (:default-value (locate-user-emacs-file "semanticdb" ".semanticdb")) nil [1409 2070])
            ("semanticdb-persistent-path" variable (:default-value (quote (always))) nil [2072 2886])
            ("define-obsolete-variable-alias" code nil nil [2888 2997])
            ("semanticdb-save-database-functions" variable nil nil [2998 3230])
            ("semanticdb-dir-sep-char" variable (:default-value (if (boundp (quote directory-sep-char)) (symbol-value (quote directory-sep-char)) 47)) nil [3232 3501])
            ("semanticdb-fix-pathname" function (:arguments ("dir")) nil [3503 3718])
            ("semanticdb-project-database-file" type
               (:interfaces ("eieio-persistent")
                :superclasses "semanticdb-project-database"
                :members 
                  ( ("file-header-line" variable (:default-value ";; SEMANTICDB Tags save file") nil nil)
                    ("do-backups" variable (:default-value "nil") nil nil)
                    ("semantic-tag-version" variable
                       (:documentation "The version of the tags saved.
The default value is 1.4.  In semantic 1.4 there was no versioning, so
when those files are loaded, this becomes the version number.
To save the version number, we must hand-set this version string."
                        :default-value "1.4")
                        nil nil)
                    ("semanticdb-version" variable
                       (:documentation "The version of the object system saved.
The default value is 1.4.  In semantic 1.4, there was no versioning,
so when those files are loaded, this becomes the version number.
To save the version number, we must hand-set this version string."
                        :default-value "1.4")
                        nil nil))                  
                :type "class")
                nil [4032 4957])
            ("cl-defmethod" code nil nil [4972 6108])
            ("declare-function" code nil nil [6123 6168])
            ("semanticdb-load-database" function (:arguments ("filename")) nil [6170 7518])
            ("semanticdb-file-loaded-p" function (:arguments ("filename")) nil [7520 7707])
            ("cl-defmethod" code nil nil [7709 8506])
            ("cl-defmethod" code nil nil [8508 9911])
            ("cl-defmethod" code nil nil [9913 10207])
            ("cl-defmethod" code nil nil [10209 10537])
            ("semanticdb-data-debug-on-write-error" variable nil nil [10539 10729])
            ("declare-function" code nil nil [10731 10786])
            ("cl-defmethod" code nil nil [10788 12436])
            ("cl-defmethod" code nil nil [12459 13781])
            ("cl-defmethod" code nil nil [13812 14150])
            ("cl-defmethod" code nil nil [14152 14372])
            ("cl-defmethod" code nil nil [14374 14919])
            ("cl-defmethod" code nil nil [14921 15401])
            ("cl-defmethod" code nil nil [15403 15549])
            ("semanticdb-cleanup-cache-files" function
               (:user-visible-flag t
                :arguments ("noerror"))
                nil [15574 17053])
            ("semantic/db-file" package nil nil [17055 17082]))          
      :file "db-file.el.gz"
      :pointmax 17241
      :fsize 5733
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1633 1652])
            ("semantic/tag" include nil nil [1653 1676])
            ("declare-function" code nil nil [1678 1739])
            ("declare-function" code nil nil [1740 1809])
            ("semantic-find-tag-by-overlay" function (:arguments ("positionormarker" "buffer")) nil [2000 3093])
            ("semantic-find-tag-by-overlay-in-region" function (:arguments ("start" "end" "buffer")) nil [3110 3762])
            ("semantic-find-tag-by-overlay-next" function (:arguments ("start" "buffer")) nil [3779 4779])
            ("semantic-find-tag-by-overlay-prev" function (:arguments ("start" "buffer")) nil [4796 5856])
            ("semantic-find-tag-parent-by-overlay" function (:arguments ("tag")) nil [5873 6322])
            ("semantic-current-tag" function nil nil [6339 6581])
            ("semantic-current-tag-parent" function nil nil [6598 6868])
            ("semantic-current-tag-of-class" function (:arguments ("class")) nil [6870 7290])
            ("semantic--find-tags-by-function" function (:arguments ("predicate" "table")) nil [8362 8996])
            ("semantic--find-tags-by-macro" function (:arguments ("form" "table")) nil [9198 9604])
            ("semantic-find-first-tag-by-name" function (:arguments ("name" "table")) nil [9647 9956])
            ("semantic-find-tags-by-name" function (:arguments ("name" "table")) nil [9958 10287])
            ("semantic-find-tags-for-completion" function (:arguments ("prefix" "table")) nil [10289 10861])
            ("semantic-find-tags-by-name-regexp" function (:arguments ("regexp" "table")) nil [10863 11350])
            ("semantic-find-tags-by-class" function (:arguments ("class" "table")) nil [11352 11701])
            ("semantic-filter-tags-by-class" function (:arguments ("class" "table")) nil [11703 12087])
            ("semantic-find-tags-by-type" function (:arguments ("type" "table")) nil [12089 12528])
            ("semantic-find-tags-of-compound-type" function (:arguments ("table")) nil [12530 12868])
            ("semantic-find-tags-by-scope-protection" function
               (:overloadable t
                :arguments ("scopeprotection" "parent" "table"))
                nil [12885 13651])
            ("semantic-find-tags-by-scope-protection-default" function (:arguments ("scopeprotection" "parent" "table")) nil [13653 14538])
            ("semantic-find-tags-included" function
               (:overloadable t
                :arguments ("table"))
                nil [14555 14753])
            ("semantic-find-tags-included-default" function (:arguments ("table")) nil [14755 15038])
            ("semantic-deep-find-tags-by-name" function (:arguments ("name" "table")) nil [15059 15414])
            ("semantic-deep-find-tags-for-completion" function (:arguments ("prefix" "table")) nil [15416 15798])
            ("semantic-deep-find-tags-by-name-regexp" function (:arguments ("regexp" "table")) nil [15800 16327])
            ("semantic-find-tags-external-children-of-type" function (:arguments ("type" "table")) nil [16353 16727])
            ("semantic-find-tags-subclasses-of-type" function (:arguments ("type" "table")) nil [16729 17219])
            ("semantic-brute-find-first-tag-by-name" function (:arguments ("name" "streamorbuffer" "search-parts" "search-include")) nil [17663 18554])
            ("semantic-brute-find-tag-by-class" function (:arguments ("class" "streamorbuffer" "search-parts" "search-includes")) nil [18556 19106])
            ("semantic-brute-find-tag-standard" function (:arguments ("streamorbuffer" "search-parts" "search-includes")) nil [19108 19584])
            ("semantic-brute-find-tag-by-type" function (:arguments ("type" "streamorbuffer" "search-parts" "search-includes")) nil [19586 20244])
            ("semantic-brute-find-tag-by-type-regexp" function (:arguments ("regexp" "streamorbuffer" "search-parts" "search-includes")) nil [20246 20956])
            ("semantic-brute-find-tag-by-name-regexp" function (:arguments ("regex" "streamorbuffer" "search-parts" "search-includes")) nil [20958 21386])
            ("semantic-brute-find-tag-by-property" function (:arguments ("property" "value" "streamorbuffer" "search-parts" "search-includes")) nil [21388 21838])
            ("semantic-brute-find-tag-by-attribute" function (:arguments ("attr" "streamorbuffer" "search-parts" "search-includes")) nil [21840 22299])
            ("semantic-brute-find-tag-by-attribute-value" function (:arguments ("attr" "value" "streamorbuffer" "search-parts" "search-includes")) nil [22301 22844])
            ("semantic-brute-find-tag-by-function" function (:arguments ("function" "streamorbuffer" "search-parts" "search-includes")) nil [22846 24265])
            ("semantic-brute-find-first-tag-by-function" function (:arguments ("function" "streamorbuffer" "search-parts" "search-includes")) nil [24267 25098])
            ("semantic-brute-find-tag-by-position" function (:arguments ("position" "streamorbuffer" "nomedian")) nil [25164 26305])
            ("semantic-brute-find-innermost-tag-by-position" function (:arguments ("position" "streamorbuffer" "nomedian")) nil [26307 27385])
            ("semantic/find" package nil nil [27387 27411]))          
      :file "find.el.gz"
      :pointmax 27564
      :fsize 6611
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1169 1188])
            ("semantic-command-separation-character" variable (:default-value ";") nil [1200 1350])
            ("make-variable-buffer-local" code nil nil [1351 1418])
            ("semantic-function-argument-separation-character" variable (:default-value ",") nil [1420 1577])
            ("make-variable-buffer-local" code nil nil [1578 1655])
            ("declare-function" code nil nil [1755 1819])
            ("semantic-up-context" function
               (:overloadable t
                :arguments ("point" "bounds-type"))
                nil [1821 2663])
            ("semantic-up-context-default" function nil nil [2665 2982])
            ("semantic-beginning-of-context" function
               (:overloadable t
                :arguments ("point"))
                nil [2984 3212])
            ("semantic-beginning-of-context-default" function (:arguments ("point")) nil [3214 3491])
            ("semantic-end-of-context" function
               (:overloadable t
                :arguments ("point"))
                nil [3493 3749])
            ("semantic-end-of-context-default" function (:arguments ("point")) nil [3751 4540])
            ("semantic-narrow-to-context" function nil nil [4542 4867])
            ("semantic-with-buffer-narrowed-to-context" function (:arguments ("body")) nil [4869 5067])
            ("put" code nil nil [5068 5139])
            ("add-hook" code nil nil [5140 5266])
            ("semantic-get-local-variables" function
               (:overloadable t
                :arguments ("point"))
                nil [5294 5738])
            ("semantic-get-local-variables-default" function nil nil [5740 7748])
            ("semantic-get-local-arguments" function
               (:overloadable t
                :arguments ("point"))
                nil [7750 9129])
            ("semantic-get-local-arguments-default" function nil nil [9131 9437])
            ("semantic-get-all-local-variables" function
               (:overloadable t
                :arguments ("point"))
                nil [9439 9777])
            ("semantic-get-all-local-variables-default" function (:arguments ("point")) nil [9779 10345])
            ("semantic-end-of-command" function (:overloadable t) nil [10860 11019])
            ("semantic-end-of-command-default" function nil nil [11021 11593])
            ("semantic-beginning-of-command" function (:overloadable t) nil [11595 11766])
            ("semantic-beginning-of-command-default" function nil nil [11768 12447])
            ("semantic-point-at-beginning-of-command" function nil nil [12450 12623])
            ("semantic-point-at-end-of-command" function nil nil [12625 12786])
            ("semantic-narrow-to-command" function nil nil [12788 12985])
            ("semantic-with-buffer-narrowed-to-command" function (:arguments ("body")) nil [12987 13185])
            ("put" code nil nil [13186 13257])
            ("add-hook" code nil nil [13258 13384])
            ("semantic-ctxt-end-of-symbol" function
               (:overloadable t
                :arguments ("point"))
                nil [13386 13700])
            ("semantic-ctxt-end-of-symbol-default" function (:arguments ("point")) nil [13702 15883])
            ("semantic-ctxt-current-symbol" function
               (:overloadable t
                :arguments ("point"))
                nil [15885 16345])
            ("semantic-ctxt-current-symbol-default" function (:arguments ("point")) nil [16347 18616])
            ("semantic-ctxt-current-symbol-and-bounds" function
               (:overloadable t
                :arguments ("point"))
                nil [18619 18883])
            ("semantic-ctxt-current-symbol-and-bounds-default" function (:arguments ("point")) nil [18885 19805])
            ("semantic-ctxt-current-assignment" function
               (:overloadable t
                :arguments ("point"))
                nil [19807 20042])
            ("semantic-ctxt-current-assignment-default" function (:arguments ("point")) nil [20044 20793])
            ("semantic-ctxt-current-function" function
               (:overloadable t
                :arguments ("point"))
                nil [20795 21121])
            ("semantic-ctxt-current-function-default" function (:arguments ("point")) nil [21123 21572])
            ("semantic-ctxt-current-argument" function
               (:overloadable t
                :arguments ("point"))
                nil [21574 21726])
            ("semantic-ctxt-current-argument-default" function (:arguments ("point")) nil [21728 22384])
            ("semantic-ctxt-current-thing" function nil nil [22386 22839])
            ("semantic-ctxt-current-class-list" function
               (:overloadable t
                :arguments ("point"))
                nil [22841 23195])
            ("semantic-ctxt-current-class-list-default" function (:arguments ("point")) nil [23197 23698])
            ("semantic-ctxt-current-mode" function
               (:overloadable t
                :arguments ("point"))
                nil [23715 23994])
            ("semantic-ctxt-current-mode-default" function (:arguments ("point")) nil [23996 24228])
            ("semantic-ctxt-scoped-types" function
               (:overloadable t
                :arguments ("point"))
                nil [24400 24698])
            ("semantic-ctxt-scoped-types-default" function (:arguments ("point")) nil [24700 24924])
            ("semantic-ctxt-imported-packages" function
               (:overloadable t
                :arguments ("point"))
                nil [24926 25318])
            ("semantic/ctxt" package nil nil [25320 25344]))          
      :file "ctxt.el.gz"
      :pointmax 25497
      :fsize 6830
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1069 1088])
            ("semantic/db" include nil nil [1089 1111])
            ("semantic/db-find" include nil nil [1112 1139])
            ("semantic/analyze/fcn" include nil nil [1140 1171])
            ("semantic/find" include nil nil [1230 1254])
            ("declare-function" code nil nil [1257 1312])
            ("declare-function" code nil nil [1313 1366])
            ("declare-function" code nil nil [1367 1449])
            ("declare-function" code nil nil [1450 1521])
            ("semanticdb-typecache" type
               (:members 
                  ( ("filestream" variable
                       (:documentation "Fully sorted/merged list of tags within this buffer."
                        :default-value "nil")
                        nil nil)
                    ("includestream" variable
                       (:documentation "Fully sorted/merged list of tags from this file's includes list."
                        :default-value "nil")
                        nil nil)
                    ("stream" variable
                       (:documentation "The searchable tag stream for this cache.
NOTE: Can I get rid of this?  Use a hashtable instead?"
                        :default-value "nil")
                        nil nil)
                    ("dependants" variable
                       (:documentation "Any other object that is dependent on typecache results.
Said object must support `semantic-reset' methods."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [1571 2383])
            ("cl-defmethod" code nil nil [2385 2626])
            ("cl-defmethod" code nil nil [2628 2866])
            ("cl-defmethod" code nil nil [2868 3388])
            ("semanticdb-typecache-add-dependant" function (:arguments ("dep")) nil [3390 3670])
            ("semanticdb-typecache-length" function (:arguments ("thing")) nil [3672 4006])
            ("cl-defmethod" code nil nil [4009 4570])
            ("cl-defmethod" code nil nil [4572 4804])
            ("semanticdb-database-typecache" type
               (:superclasses "semanticdb-abstract-db-cache"
                :members 
                  ( ("stream" variable
                       (:documentation "The searchable tag stream for this cache."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [5024 5236])
            ("cl-defmethod" code nil nil [5238 5356])
            ("cl-defmethod" code nil nil [5358 5498])
            ("cl-defmethod" code nil nil [5500 5657])
            ("cl-defmethod" code nil nil [5659 5903])
            ("semanticdb-typecache-apply-filename" function (:arguments ("file" "stream")) nil [6058 6445])
            ("semanticdb-typecache-safe-tag-members" function (:arguments ("tag")) nil [6448 6752])
            ("semanticdb-typecache-safe-tag-list" function (:arguments ("tags" "table")) nil [6754 6999])
            ("semanticdb-typecache-faux-namespace" function (:arguments ("name" "members")) nil [7001 7346])
            ("semanticdb-typecache-merge-streams" function (:arguments ("cache1" "cache2")) nil [7348 10159])
            ("semanticdb-expand-nested-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [10236 10436])
            ("cl-defmethod" code nil nil [10438 10575])
            ("cl-defmethod" code nil nil [10577 11355])
            ("cl-defmethod" code nil nil [11357 11497])
            ("cl-defmethod" code nil nil [11499 13062])
            ("semanticdb-typecache-find" function
               (:overloadable t
                :arguments ("type" "path" "find-file-match"))
                nil [13179 13580])
            ("semanticdb-typecache-find-default" function (:arguments ("type" "path" "find-file-match")) nil [13582 14125])
            ("semanticdb-typecache-find-by-name-helper" function (:arguments ("name" "table")) nil [14127 14553])
            ("cl-defmethod" code nil nil [14555 18645])
            ("cl-defmethod" code nil nil [18850 19427])
            ("semanticdb-typecache-refresh-for-buffer" function (:arguments ("buffer")) nil [19429 19780])
            ("semanticdb-typecache-complete-flush" function (:user-visible-flag t) nil [19797 20186])
            ("semanticdb-typecache-dump" function (:user-visible-flag t) nil [20188 20626])
            ("semanticdb-db-typecache-dump" function (:user-visible-flag t) nil [20628 21197])
            ("semantic/db-typecache" package nil nil [21199 21231]))          
      :file "db-typecache.el.gz"
      :pointmax 21400
      :fsize 6695
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1254 . 1255) (symbol 1212 . 1229) (open-paren 1211 . 1212)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [2259 2278])
            ("semantic/lex" include nil nil [2279 2302])
            ("declare-function" code nil nil [2304 2366])
            ("semantic-lex-spp-macro-symbol-obarray" variable nil nil [2378 2591])
            ("make-variable-buffer-local" code nil nil [2592 2659])
            ("semantic-lex-spp-project-macro-symbol-obarray" variable nil nil [2661 2865])
            ("make-variable-buffer-local" code nil nil [2866 2941])
            ("semantic-lex-spp-dynamic-macro-symbol-obarray" variable nil nil [2943 3228])
            ("make-variable-buffer-local" code nil nil [3229 3304])
            ("semantic-lex-spp-dynamic-macro-symbol-obarray-stack" variable nil nil [3306 3431])
            ("make-variable-buffer-local" code nil nil [3432 3513])
            ("semantic-lex-spp-expanded-macro-stack" variable nil nil [3515 3619])
            ("semantic-lex-with-macro-used" function (:arguments ("name" "body")) nil [3896 4314])
            ("put" code nil nil [4315 4374])
            ("add-hook" code nil nil [4376 4515])
            ("semantic-lex-spp-symbol" function (:arguments ("name")) nil [4742 5577])
            ("semantic-lex-spp-symbol-p" function (:arguments ("name")) nil [5579 5739])
            ("semantic-lex-spp-dynamic-map" function nil nil [5741 5976])
            ("semantic-lex-spp-dynamic-map-stack" function nil nil [5978 6231])
            ("semantic-lex-spp-value-valid-p" function (:arguments ("value")) nil [6233 6474])
            ("semantic-lex-spp-debug-symbol" variable nil nil [6476 6573])
            ("semantic-lex-spp-enable-debug-symbol" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [6575 6845])
            ("semantic-lex-spp-validate-value" function (:arguments ("name" "value")) nil [6847 7228])
            ("semantic-lex-spp-symbol-set" function (:arguments ("name" "value" "obarray-in")) nil [7230 7646])
            ("semantic-lex-spp-symbol-remove" function (:arguments ("name" "obarray")) nil [7648 7902])
            ("semantic-lex-spp-symbol-push" function (:arguments ("name" "value")) nil [7904 8603])
            ("semantic-lex-spp-symbol-pop" function (:arguments ("name")) nil [8605 9227])
            ("semantic-lex-spp-symbol-stream" function (:arguments ("name")) nil [9229 9414])
            ("semantic-lex-make-spp-table" function (:arguments ("specs")) nil [9416 10079])
            ("semantic-lex-spp-save-table" function nil nil [10081 10513])
            ("semantic-lex-spp-macros" function nil nil [10515 11268])
            ("semantic-lex-spp-set-dynamic-table" function (:arguments ("new-entries")) nil [11270 11551])
            ("semantic-lex-spp-reset-hook" function (:arguments ("start" "end")) nil [11553 11997])
            ("semantic-lex-spp-extract-regex-and-compare" function (:arguments ("analyzer" "value")) nil [12194 12549])
            ("semantic-lex-spp-simple-macro-to-macro-stream" function (:arguments ("val" "beg" "end" "argvalues")) nil [12551 14241])
            ("semantic-lex-spp-one-token-to-txt" function (:arguments ("tok" "blocktok")) nil [14763 16177])
            ("semantic-lex-spp-macro-with-args" function (:arguments ("val")) nil [16179 16410])
            ("semantic-lex-spp-token-macro-to-macro-stream" function (:arguments ("val" "beg" "end" "argvalues")) nil [16412 24632])
            ("semantic-lex-spp-symbol-merge" function (:arguments ("txt")) nil [24634 25292])
            ("semantic-lex-spp-find-closing-macro" function nil nil [25294 26153])
            ("semantic-lex-spp-get-overlay" function (:arguments ("point")) nil [26155 26464])
            ("semantic-lex-spp-merge-streams" function (:arguments ("raw-stream")) nil [26612 27558])
            ("semantic-lex-spp-macro-to-macro-stream" function (:arguments ("val" "beg" "end" "argvalues")) nil [27731 28703])
            ("semantic-lex-spp-analyzer-do-replace" function (:arguments ("sym" "val" "beg" "end")) nil [28899 30166])
            ("define-obsolete-function-alias" code nil nil [30167 30285])
            ("semantic-lex-spp-replacements-enabled" variable (:default-value t) nil [30287 30449])
            ("semantic-lex-spp-analyzer-push-tokens-for-symbol" function (:arguments ("str" "beg" "end")) nil [30451 32017])
            ("define-lex-regex-analyzer" code nil nil [32019 32483])
            ("define-lex-regex-analyzer" code nil nil [32485 33735])
            ("semantic-lex-spp-first-token-arg-list" function (:arguments ("token")) nil [33986 34396])
            ("semantic-lex-spp-one-token-and-move-for-macro" function (:arguments ("max")) nil [34398 34841])
            ("semantic-lex-spp-stream-for-arglist" function (:arguments ("token")) nil [34843 36252])
            ("semantic-lex-spp-hack-depth" variable nil nil [36254 36368])
            ("semantic-lex-spp-lex-text-string" function (:arguments ("text")) nil [36370 38741])
            ("semantic-lex-spp-stream-for-macro" function (:arguments ("eos")) nil [40482 41149])
            ("define-lex-spp-macro-declaration-analyzer" function (:arguments ("name" "doc" "regexp" "tokidx" "valform")) nil [41151 42609])
            ("define-lex-spp-macro-undeclaration-analyzer" function (:arguments ("name" "doc" "regexp" "tokidx")) nil [42611 43438])
            ("semantic-lex-spp-use-headers-flag" variable (:user-visible-flag t) nil [43788 44127])
            ("semantic-lex-spp-merge-header" function (:arguments ("name")) nil [44129 44447])
            ("define-lex-spp-include-analyzer" function (:arguments ("name" "doc" "regexp" "tokidx" "valform")) nil [44449 46160])
            ("semantic-lex-spp-macro-max-length-to-save" variable
               (:user-visible-flag t
                :default-value 200)
                nil [46327 46447])
            ("semantic-lex-spp-table-write-slot-value" function (:arguments ("value")) nil [46464 47514])
            ("semantic-lex-spp-describe" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [47541 48111])
            ("add-hook" code nil nil [48136 48534])
            ("semantic/lex-spp" package nil nil [48536 48563]))          
      :file "lex-spp.el.gz"
      :pointmax 48722
      :fsize 13833
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock" include nil nil [1322 1342])
            ("semantic" include nil nil [1344 1363])
            ("semantic/tag-ls" include nil nil [1364 1390])
            ("ezimage" include nil nil [1391 1409])
            ("semantic/find" include nil nil [1430 1454])
            ("semantic-format-tag-functions" variable (:default-value (quote (semantic-format-tag-name semantic-format-tag-canonical-name semantic-format-tag-abbreviate semantic-format-tag-summarize semantic-format-tag-summarize-with-file semantic-format-tag-short-doc semantic-format-tag-prototype semantic-format-tag-concise-prototype semantic-format-tag-uml-abbreviate semantic-format-tag-uml-prototype semantic-format-tag-uml-concise-prototype semantic-format-tag-prin1))) nil [1547 2407])
            ("semantic-format-tag-custom-list" variable (:default-value (append (quote (radio)) (mapcar (lambda (f) (list (quote const) f)) semantic-format-tag-functions) (quote (function)))) nil [2409 2700])
            ("semantic-format-use-images-flag" variable (:default-value ezimage-use-images) nil [2702 2923])
            ("semantic-function-argument-separator" variable (:default-value ",") nil [2925 3040])
            ("make-variable-buffer-local" code nil nil [3041 3107])
            ("semantic-format-parent-separator" variable (:default-value "::") nil [3109 3234])
            ("make-variable-buffer-local" code nil nil [3235 3297])
            ("semantic-format-face-alist" variable (:default-value (\` ((function . font-lock-function-name-face) (variable . font-lock-variable-name-face) (type . font-lock-type-face) (include \, (if (featurep (quote xemacs)) (quote font-lock-preprocessor-face) (quote font-lock-constant-face))) (package \, (if (featurep (quote xemacs)) (quote font-lock-preprocessor-face) (quote font-lock-constant-face))) (label . font-lock-string-face) (comment . font-lock-comment-face) (keyword . font-lock-keyword-face) (abstract . italic) (static . underline) (documentation . font-lock-doc-face)))) nil [3299 4455])
            ("semantic--format-colorize-text" function (:arguments ("text" "face-class")) nil [4485 4922])
            ("semantic--format-colorize-merge-text" function (:arguments ("precoloredtext" "face-class")) nil [4924 5782])
            ("semantic--format-tag-arguments" function (:arguments ("args" "formatter" "color")) nil [5810 6430])
            ("semantic-format-tag-type" function
               (:overloadable t
                :arguments ("tag" "color"))
                nil [6446 6638])
            ("semantic-format-tag-type-default" function (:arguments ("tag" "color")) nil [6640 7363])
            ("semantic-format-tag-prin1" function (:arguments ("tag" "parent" "color")) nil [7405 7577])
            ("semantic-format-tag-name-from-anything" function (:arguments ("anything" "parent" "color" "colorhint")) nil [7579 8770])
            ("semantic-format-tag-name" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [8787 9105])
            ("semantic-format-tag-name-default" function (:arguments ("tag" "parent" "color")) nil [9107 9673])
            ("declare-function" code nil nil [9675 9732])
            ("semantic--format-tag-parent-tree" function (:arguments ("tag" "parent")) nil [9734 10850])
            ("semantic-format-tag-canonical-name" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [10852 11208])
            ("semantic-format-tag-canonical-name-default" function (:arguments ("tag" "parent" "color")) nil [11210 12323])
            ("semantic-format-tag-abbreviate" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [12325 12710])
            ("semantic-format-tag-abbreviate-default" function (:arguments ("tag" "parent" "color")) nil [12712 13648])
            ("semantic-format-tag-summarize" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [13665 13934])
            ("semantic-format-tag-summarize-default" function (:arguments ("tag" "parent" "color")) nil [13936 14591])
            ("semantic-format-tag-summarize-with-file" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [14593 14899])
            ("semantic-format-tag-summarize-with-file-default" function (:arguments ("tag" "parent" "color")) nil [14901 15748])
            ("semantic-format-tag-short-doc" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [15750 16055])
            ("declare-function" code nil nil [16057 16121])
            ("semantic-format-tag-short-doc-default" function (:arguments ("tag" "parent" "color")) nil [16123 17370])
            ("semantic-format-tag-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [17415 17818])
            ("semantic-format-tag-prototype-default" function (:arguments ("tag" "parent" "color")) nil [17820 19607])
            ("semantic-format-tag-concise-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [19624 19902])
            ("semantic-format-tag-concise-prototype-default" function (:arguments ("tag" "parent" "color")) nil [19904 20989])
            ("semantic-uml-colon-string" variable
               (:user-visible-flag t
                :default-value " : ")
                nil [21017 21268])
            ("semantic-uml-no-protection-string" variable (:user-visible-flag t) nil [21270 21471])
            ("semantic--format-uml-post-colorize" function (:arguments ("text" "tag" "parent")) nil [21473 21877])
            ("semantic-uml-attribute-string" function (:arguments ("tag" "parent")) nil [21879 22188])
            ("semantic-format-tag-protection-image-alist" variable (:default-value (quote (("+" . ezimage-unlock) ("#" . ezimage-key) ("-" . ezimage-lock)))) nil [22190 22381])
            ("semantic-format-tag-protection-symbol-to-string-assoc-list" variable (:default-value (quote ((public . "+") (protected . "#") (private . "-")))) nil [22383 22662])
            ("semantic-format-tag-uml-protection-to-string" function
               (:overloadable t
                :arguments ("protection-symbol" "color"))
                nil [22664 23142])
            ("semantic-format-tag-uml-protection-to-string-default" function (:arguments ("protection-symbol" "color")) nil [23144 23898])
            ("semantic-format-tag-uml-protection" function (:arguments ("tag" "parent" "color")) nil [23900 24195])
            ("semantic--format-tag-uml-type" function (:arguments ("tag" "color")) nil [24197 24462])
            ("semantic-format-tag-uml-abbreviate" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [24464 24744])
            ("semantic-format-tag-uml-abbreviate-default" function (:arguments ("tag" "parent" "color")) nil [24746 25378])
            ("semantic-format-tag-uml-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [25380 25656])
            ("semantic-format-tag-uml-prototype-default" function (:arguments ("tag" "parent" "color")) nil [25658 26517])
            ("semantic-format-tag-uml-concise-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [26519 26811])
            ("semantic-format-tag-uml-concise-prototype-default" function (:arguments ("tag" "parent" "color")) nil [26813 27421])
            ("semantic/format" package nil nil [27423 27449]))          
      :file "format.el.gz"
      :pointmax 27606
      :fsize 6796
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1454 . 1455) (symbol 1412 . 1429) (open-paren 1411 . 1412) (close-paren 1342 . 1343) (symbol 1304 . 1321) (open-paren 1303 . 1304)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mode-local" include nil nil [1137 1158])
            ("eieio" include nil nil [1159 1175])
            ("load" code nil nil [1176 1217])
            ("defalias" code nil nil [5277 5340])
            ("defalias" code nil nil [5117 5221])
            ("defalias" code nil nil [4906 5014])
            ("defalias" code nil nil [4801 4902])
            ("if" code nil nil [1260 4796])
            ("semantic-delete-overlay-maybe" function (:arguments ("overlay")) nil [5346 5535])
            ("semantic-menu-item" function (:arguments ("item")) nil [5568 6069])
            ("semantic-cache-data-overlays" variable nil nil [6100 6189])
            ("semantic-cache-data-to-buffer" function (:arguments ("buffer" "start" "end" "value" "name" "lifespan")) nil [6191 7483])
            ("semantic-cache-data-post-command-hook" function nil nil [7485 8477])
            ("semantic-get-cache-data" function (:arguments ("name" "point")) nil [8479 8928])
            ("semantic-test-data-cache" function (:user-visible-flag t) nil [8930 9485])
            ("semantic-overload-symbol-from-function" function (:arguments ("name")) nil [9535 9799])
            ("semantic-alias-obsolete" function (:arguments ("oldfnalias" "newfn" "when")) nil [9801 10611])
            ("semantic-varalias-obsolete" function (:arguments ("oldvaralias" "newvar" "when")) nil [10613 11235])
            ("semantic-safe" function (:arguments ("format" "body")) nil [11260 12029])
            ("semantic-new-buffer-fcn-was-run" variable nil nil [12054 12161])
            ("make-variable-buffer-local" code nil nil [12162 12223])
            ("semantic-active-p" function nil nil [12225 12355])
            ("semantic-map-buffers" function (:arguments ("function")) nil [12357 12633])
            ("defalias" code nil nil [12635 12701])
            ("semantic-alias-obsolete" code nil nil [12703 12825])
            ("semantic-install-function-overrides" function (:arguments ("overrides" "transient" "mode")) nil [12827 13878])
            ("semantic-current-input-throw-symbol" variable nil nil [13912 14019])
            ("semantic--on-input-start-marker" variable nil nil [14020 14124])
            ("semantic-exit-on-input" function (:arguments ("symbol" "forms")) nil [14126 14678])
            ("semantic-throw-on-input" function (:arguments ("from")) nil [14680 15539])
            ("semantic-find-file-noselect" function (:arguments ("file" "nowarn" "rawfile" "wildcards")) nil [15580 17433])
            ("semanticdb-without-unloaded-file-searches" function (:arguments ("forms")) nil [17472 17785])
            ("semantic/fw" package nil nil [20035 20057]))          
      :file "fw.el.gz"
      :pointmax 20088
      :fsize 6484
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 5343 . 5344) (symbol 1241 . 1257) (open-paren 1240 . 1241)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1269 1288])
            ("declare-function" code nil nil [1290 1377])
            ("declare-function" code nil nil [1378 1459])
            ("declare-function" code nil nil [1460 1516])
            ("semantic-bovinate-nonterminal-check-obarray" variable nil nil [1535 1708])
            ("make-variable-buffer-local" code nil nil [1709 1782])
            ("semantic-lambda" function (:arguments ("return-val")) nil [1952 2209])
            ("semantic-bovinate-symbol-nonterminal-p" function (:arguments ("sym" "table")) nil [2441 2649])
            ("semantic-bovinate-nonterminal-db-nt" function nil nil [2651 2919])
            ("semantic-bovinate-nonterminal-check" function (:arguments ("stream" "nonterminal")) nil [2921 3790])
            ("semantic-bovinate-stream" function (:arguments ("stream" "nonterminal")) nil [3807 12394])
            ("defalias" code nil nil [12441 12508])
            ("semantic/bovine" package nil nil [12510 12536]))          
      :file "bovine.el.gz"
      :pointmax 12693
      :fsize 3786
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [4572 4594])
            ("semantic/db-ref" include nil nil [4595 4621])
            ("semantic/find" include nil nil [4643 4667])
            ("data-debug-thing-alist" variable nil nil [4681 4712])
            ("declare-function" code nil nil [4713 4773])
            ("declare-function" code nil nil [4774 4827])
            ("declare-function" code nil nil [4886 4948])
            ("declare-function" code nil nil [4949 5025])
            ("declare-function" code nil nil [5026 5070])
            ("semanticdb-find-throttle-custom-list" variable (:default-value (quote (set (const local) (const project) (const unloaded) (const system) (const recursive) (const omniscience)))) nil [5072 5330])
            ("semanticdb-find-default-throttle" variable (:default-value (quote (local project unloaded system recursive))) nil [5347 6896])
            ("make-variable-buffer-local" code nil nil [6898 6960])
            ("semanticdb-find-throttle-active-p" function (:arguments ("access-type")) nil [6962 7256])
            ("semanticdb-find-search-index" type
               (:superclasses "semanticdb-abstract-search-index"
                :members 
                  ( ("include-path" variable
                       (:documentation "List of semanticdb tables from the include path."
                        :default-value "nil")
                        nil nil)
                    ("type-cache" variable
                       (:documentation "Cache of all the data types accessible from this file.
Includes all types from all included files, merged namespaces, and
expunge duplicates."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [7454 7951])
            ("cl-defmethod" code nil nil [7953 8329])
            ("cl-defmethod" code nil nil [8331 8705])
            ("cl-defmethod" code nil nil [8707 9762])
            ("semanticdb-find-translate-path" function
               (:overloadable t
                :arguments ("path" "brutish"))
                nil [9986 11792])
            ("semanticdb-find-translate-path-default" function (:arguments ("path" "brutish")) nil [11794 12275])
            ("semanticdb-find-table-for-include" function
               (:overloadable t
                :arguments ("includetag" "table"))
                nil [12292 12657])
            ("semanticdb-find-translate-path-brutish-default" function (:arguments ("path")) nil [12659 13933])
            ("semanticdb-find-incomplete-cache-entries-p" function (:arguments ("cache")) nil [13935 14214])
            ("semanticdb-find-need-cache-update-p" function (:arguments ("table")) nil [14216 14909])
            ("semanticdb-find-translate-path-includes-default" function (:arguments ("path")) nil [14911 16258])
            ("semanticdb-find-lost-includes" variable nil nil [16260 16369])
            ("make-variable-buffer-local" code nil nil [16370 16429])
            ("semanticdb-find-scanned-include-tags" variable nil nil [16431 16686])
            ("make-variable-buffer-local" code nil nil [16687 16753])
            ("semanticdb-implied-include-tags" variable nil nil [16755 17106])
            ("semanticdb-find-translate-path-includes--internal" function (:arguments ("path")) nil [17108 22105])
            ("semanticdb-find-load-unloaded" function
               (:overloadable t
                :arguments ("filename"))
                nil [22107 22494])
            ("semanticdb-find-load-unloaded-default" function (:arguments ("filename")) nil [22496 22669])
            ("semanticdb-find-table-for-include-default" function (:arguments ("includetag" "table")) nil [22717 27028])
            ("semanticdb-find-test-translate-path" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27111 27752])
            ("semanticdb-find-test-translate-path-no-loading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27754 28550])
            ("semanticdb-find-adebug-lost-includes" function (:user-visible-flag t) nil [28567 29074])
            ("semanticdb-find-adebug-insert-scanned-tag-cons" function (:arguments ("consdata" "prefix" "prebuttontext")) nil [29076 30315])
            ("semanticdb-find-adebug-scanned-includes" function (:user-visible-flag t) nil [30317 31113])
            ("semanticdb-strip-find-results" function (:arguments ("results" "find-file-match")) nil [31260 33173])
            ("semanticdb-fast-strip-find-results" function (:arguments ("results")) nil [33175 33504])
            ("semanticdb-find-results-p" function (:arguments ("resultp")) nil [33506 33952])
            ("semanticdb-find-result-prin1-to-string" function (:arguments ("result")) nil [33954 34508])
            ("semanticdb-find-result-with-nil-p" function (:arguments ("resultp")) nil [34510 35219])
            ("semanticdb-find-result-length" function (:arguments ("result")) nil [35236 35440])
            ("semanticdb-find-result-nth" function (:arguments ("result" "n")) nil [35457 36316])
            ("semanticdb-find-result-test" function (:arguments ("result")) nil [36318 36767])
            ("semanticdb-find-result-nth-in-buffer" function (:arguments ("result" "n")) nil [36784 37803])
            ("semanticdb-find-result-mapc" function (:arguments ("fcn" "result")) nil [37805 38178])
            ("semanticdb-find-log-flag" variable nil nil [38262 38346])
            ("semanticdb-find-log-buffer-name" variable (:default-value "*SemanticDB Find Log*") nil [38348 38448])
            ("semanticdb-find-toggle-logging" function (:user-visible-flag t) nil [38450 38698])
            ("semanticdb-reset-log" function (:user-visible-flag t) nil [38700 38913])
            ("semanticdb-find-log-move-to-end" function nil nil [38915 39337])
            ("semanticdb-find-log-new-search" function (:arguments ("forwhat")) nil [39339 39627])
            ("semanticdb-find-log-activity" function (:arguments ("table" "result")) nil [39629 39993])
            ("semanticdb-find-tags-collector" function (:arguments ("function" "path" "find-file-match" "brutish")) nil [40093 43068])
            ("semanticdb-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [43085 43531])
            ("semanticdb-find-tags-by-name-regexp" function (:arguments ("regexp" "path" "find-file-match")) nil [43548 44014])
            ("semanticdb-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [44031 44497])
            ("semanticdb-find-tags-by-class" function (:arguments ("class" "path" "find-file-match")) nil [44514 44959])
            ("semanticdb-deep-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [44979 45491])
            ("semanticdb-deep-find-tags-by-name-regexp" function (:arguments ("regexp" "path" "find-file-match")) nil [45493 46025])
            ("semanticdb-deep-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [46027 46559])
            ("semanticdb-brute-deep-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [46592 47150])
            ("semanticdb-brute-deep-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [47152 47730])
            ("semanticdb-brute-find-tags-by-class" function (:arguments ("class" "path" "find-file-match")) nil [47732 48280])
            ("semanticdb-find-tags-external-children-of-type" function (:arguments ("type" "path" "find-file-match")) nil [48312 48820])
            ("semanticdb-find-tags-subclasses-of-type" function (:arguments ("type" "path" "find-file-match")) nil [48822 49313])
            ("cl-defmethod" code nil nil [49487 49811])
            ("cl-defmethod" code nil nil [49813 50161])
            ("cl-defmethod" code nil nil [50163 50511])
            ("cl-defmethod" code nil nil [50513 51090])
            ("cl-defmethod" code nil nil [51092 51508])
            ("cl-defmethod" code nil nil [51510 51912])
            ("cl-defmethod" code nil nil [51932 52366])
            ("cl-defmethod" code nil nil [52368 52826])
            ("cl-defmethod" code nil nil [52828 53286])
            ("semantic/db-find" package nil nil [53288 53315]))          
      :file "db-find.el.gz"
      :pointmax 53474
      :fsize 13745
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 4667 . 4668) (symbol 4623 . 4640) (open-paren 4622 . 4623)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio" include nil nil [1437 1453])
            ("cl-generic" include nil nil [1454 1475])
            ("semantic" include nil nil [1476 1495])
            ("semantic/db" include nil nil [1496 1518])
            ("semantic/tag" include nil nil [1519 1542])
            ("semantic/find" include nil nil [1615 1639])
            ("cl-defmethod" code nil nil [1642 2485])
            ("cl-defmethod" code nil nil [2487 2729])
            ("cl-defmethod" code nil nil [2731 2926])
            ("cl-defmethod" code nil nil [2929 3820])
            ("cl-defmethod" code nil nil [3822 4015])
            ("cl-defmethod" code nil nil [4017 4345])
            ("cl-defmethod" code nil nil [4347 4707])
            ("semanticdb-ref-adebug" type
               (:members 
                  ( ("i-depend-on" variable nil nil nil)
                    ("local-table" variable nil nil nil)
                    ("i-include" variable nil nil nil))                  
                :type "class")
                nil [4722 4925])
            ("declare-function" code nil nil [4927 4980])
            ("declare-function" code nil nil [4981 5048])
            ("semanticdb-ref-test" function
               (:user-visible-flag t
                :arguments ("refresh"))
                nil [5050 5789])
            ("semantic/db-ref" package nil nil [5791 5817]))          
      :file "db-ref.el.gz"
      :pointmax 5852
      :fsize 2272
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1639 . 1640) (symbol 1597 . 1614) (open-paren 1596 . 1597)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1219 1238])
            ("semantic/find" include nil nil [1260 1284])
            ("declare-function" code nil nil [1287 1375])
            ("semantic-string-lessp-ci" function (:arguments ("s1" "s2")) nil [1504 1869])
            ("semantic-sort-tag-type" function (:arguments ("tag")) nil [1871 2086])
            ("semantic-tag-lessp-name-then-type" function (:arguments ("A" "B")) nil [2088 2910])
            ("semantic-sort-tags-by-name-increasing" function (:arguments ("tags")) nil [2912 3153])
            ("semantic-sort-tags-by-name-decreasing" function (:arguments ("tags")) nil [3155 3396])
            ("semantic-sort-tags-by-type-increasing" function (:arguments ("tags")) nil [3398 3649])
            ("semantic-sort-tags-by-type-decreasing" function (:arguments ("tags")) nil [3651 3902])
            ("semantic-sort-tags-by-name-increasing-ci" function (:arguments ("tags")) nil [3904 4158])
            ("semantic-sort-tags-by-name-decreasing-ci" function (:arguments ("tags")) nil [4160 4414])
            ("semantic-sort-tags-by-type-increasing-ci" function (:arguments ("tags")) nil [4416 4680])
            ("semantic-sort-tags-by-type-decreasing-ci" function (:arguments ("tags")) nil [4682 4946])
            ("semantic-sort-tags-by-name-then-type-increasing" function (:arguments ("tags")) nil [4948 5175])
            ("semantic-sort-tags-by-name-then-type-decreasing" function (:arguments ("tags")) nil [5177 5404])
            ("semantic-unique-tag-table-by-name" function (:arguments ("tags")) nil [5630 6249])
            ("semantic-unique-tag-table" function (:arguments ("tags")) nil [6251 7109])
            ("semantic-flatten-tags-table" function (:arguments ("table")) nil [7453 8313])
            ("semantic-bucketize-tag-class" variable (:default-value (lambda (tok) (semantic-tag-class tok))) nil [8533 9116])
            ("semantic-bucketize" function (:arguments ("tags" "parent" "filter")) nil [9118 10820])
            ("semantic-orphaned-member-metaparent-type" variable (:default-value "class") nil [11060 11305])
            ("make-variable-buffer-local" code nil nil [11306 11376])
            ("semantic-mark-external-member-function" variable nil nil [11378 11947])
            ("semantic-adopt-external-members" function (:arguments ("tags")) nil [11949 15983])
            ("semantic-tag-external-member-parent" function
               (:overloadable t
                :arguments ("tag"))
                nil [16125 16657])
            ("semantic-tag-external-member-parent-default" function (:arguments ("tag")) nil [16659 16988])
            ("semantic-tag-external-member-p" function
               (:overloadable t
                :arguments ("parent" "tag"))
                nil [16990 17528])
            ("semantic-tag-external-member-p-default" function (:arguments ("parent" "tag")) nil [17530 17868])
            ("semantic-tag-external-member-children" function
               (:overloadable t
                :arguments ("tag" "usedb"))
                nil [17870 18745])
            ("semantic-tag-external-member-children-default" function (:arguments ("tag" "usedb")) nil [18747 19474])
            ("semantic-tag-external-class" function
               (:overloadable t
                :arguments ("tag"))
                nil [19476 19997])
            ("semantic-tag-external-class-default" function (:arguments ("tag")) nil [19999 20517])
            ("semantic/sort" package nil nil [20519 20543]))          
      :file "sort.el.gz"
      :pointmax 20696
      :fsize 6266
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1284 . 1285) (symbol 1240 . 1257) (open-paren 1239 . 1240)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [955 974])
            ("semantic/find" include nil nil [1141 1165])
            ("semantic/db-find" include nil nil [997 1024])
            ("declare-function" code nil nil [1168 1228])
            ("declare-function" code nil nil [1229 1284])
            ("declare-function" code nil nil [1285 1359])
            ("semantic-type-relation-separator-character" variable (:default-value (quote ("."))) nil [1372 1836])
            ("make-variable-buffer-local" code nil nil [1837 1909])
            ("semantic-equivalent-major-modes" variable nil nil [1911 2142])
            ("make-variable-buffer-local" code nil nil [2143 2204])
            ("semantic-file-tag-table" function (:arguments ("file")) nil [2384 3134])
            ("semantic-alias-obsolete" code nil nil [3136 3225])
            ("semantic-something-to-tag-table" function (:arguments ("something")) nil [3227 4914])
            ("semantic-alias-obsolete" code nil nil [4916 5015])
            ("semantic-read-symbol-history" variable nil nil [5127 5199])
            ("semantic-read-symbol" function (:arguments ("prompt" "default" "stream" "filter")) nil [5201 6112])
            ("semantic-read-variable" function (:arguments ("prompt" "default" "stream")) nil [6114 6580])
            ("semantic-read-function" function (:arguments ("prompt" "default" "stream")) nil [6582 7046])
            ("semantic-read-type" function (:arguments ("prompt" "default" "stream")) nil [7048 7496])
            ("semantic-describe-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [7533 7812])
            ("semantic-add-label" function
               (:user-visible-flag t
                :arguments ("label" "value" "tag"))
                nil [7845 8225])
            ("semantic-show-label" function
               (:user-visible-flag t
                :arguments ("label" "tag"))
                nil [8227 8550])
            ("semantic-describe-buffer-var-helper" function (:arguments ("varsym" "buffer")) nil [8613 9219])
            ("semantic-describe-buffer" function (:user-visible-flag t) nil [9221 10726])
            ("semantic-assert-valid-token" function (:arguments ("tok")) nil [10728 11236])
            ("semantic-sanity-check" function
               (:user-visible-flag t
                :arguments ("cache" "over" "notfirst"))
                nil [11238 12569])
            ("semantic-find-tag-for-completion" function (:arguments ("prefix")) nil [12898 13625])
            ("semantic-complete-symbol" function
               (:user-visible-flag t
                :arguments ("predicate"))
                nil [13627 15634])
            ("semantic/util" package nil nil [15636 15660])
            ("semantic/util-modes" include nil nil [15681 15711]))          
      :file "util.el.gz"
      :pointmax 15744
      :fsize 5021
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1165 . 1166) (symbol 977 . 994) (open-paren 976 . 977)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/tag" include nil nil [1440 1463])
            ("semantic-dependency-include-path" variable nil nil [1476 2144])
            ("make-variable-buffer-local" code nil nil [2145 2207])
            ("semantic-dependency-system-include-path" variable nil nil [2209 2774])
            ("make-variable-buffer-local" code nil nil [2775 2844])
            ("defcustom-mode-local-semantic-dependency-system-include-path" function (:arguments ("mode" "name" "value" "docstring")) nil [2846 4342])
            ("semantic-add-system-include" function
               (:user-visible-flag t
                :arguments ("dir" "mode"))
                nil [4428 4996])
            ("semantic-remove-system-include" function
               (:user-visible-flag t
                :arguments ("dir" "mode"))
                nil [5013 5678])
            ("semantic-reset-system-include" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [5695 6021])
            ("semantic-customize-system-include-path" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [6038 6583])
            ("semantic--dependency-find-file-on-path" function (:arguments ("file" "path")) nil [6653 6980])
            ("ede-minor-mode" variable nil nil [6982 7005])
            ("ede-object" variable nil nil [7006 7025])
            ("declare-function" code nil nil [7026 7074])
            ("semantic-dependency-find-file-on-path" function (:arguments ("file" "systemp" "mode")) nil [7076 8163])
            ("semantic/dep" package nil nil [8166 8189]))          
      :file "dep.el.gz"
      :pointmax 8340
      :fsize 2853
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [1635 1657])
            ("semantic/analyze/fcn" include nil nil [1658 1689])
            ("semantic/ctxt" include nil nil [1690 1714])
            ("semantic/find" include nil nil [1735 1759])
            ("declare-function" code nil nil [1762 1814])
            ("declare-function" code nil nil [1815 1878])
            ("declare-function" code nil nil [1879 1948])
            ("declare-function" code nil nil [1949 2026])
            ("declare-function" code nil nil [2027 2104])
            ("declare-function" code nil nil [2105 2164])
            ("semantic-scope-cache" type
               (:superclasses "semanticdb-abstract-cache"
                :members 
                  ( ("tag" variable
                       (:documentation "The tag this scope was calculated for."
                        :default-value "nil")
                        nil nil)
                    ("scopetypes" variable
                       (:documentation "The list of types currently in scope.
For C++, this would contain anonymous namespaces known, and
anything labeled by a `using' statement."
                        :default-value "nil")
                        nil nil)
                    ("parents" variable
                       (:documentation "List of parents in scope w/in the body of this function.
Presumably, the members of these parent classes are available for access
based on private:, or public: style statements."
                        :default-value "nil")
                        nil nil)
                    ("parentinheritance" variable
                       (:documentation "Alist of parents by inheritance.
Each entry is ( PARENT . PROTECTION ), where PARENT is a type, and
PROTECTION is a symbol representing the level of inheritance, such as 'private, or 'protected."
                        :default-value "nil")
                        nil nil)
                    ("scope" variable
                       (:documentation "Items in scope due to the scopetypes or parents."
                        :default-value "nil")
                        nil nil)
                    ("fullscope" variable
                       (:documentation "All the other stuff on one master list you can search."
                        :default-value "nil")
                        nil nil)
                    ("localargs" variable
                       (:documentation "The arguments to the function tag."
                        :default-value "nil")
                        nil nil)
                    ("localvar" variable
                       (:documentation "The local variables."
                        :default-value "nil")
                        nil nil)
                    ("typescope" variable
                       (:documentation "Slot to save intermediate scope while metatypes are dereferenced."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [2177 3654])
            ("cl-defmethod" code nil nil [3738 4081])
            ("cl-defmethod" code nil nil [4083 4236])
            ("cl-defmethod" code nil nil [4239 4638])
            ("semantic-scope-reset-cache" function nil nil [4640 4880])
            ("cl-defmethod" code nil nil [4882 5409])
            ("semantic-scope-tag-clone-with-scope" function (:arguments ("tag" "scopetags")) nil [5689 5988])
            ("semantic-scope-tag-get-scope" function (:arguments ("tag")) nil [5990 6139])
            ("semantic-analyze-scoped-types" function
               (:overloadable t
                :arguments ("position"))
                nil [6215 6427])
            ("semantic-analyze-scoped-types-default" function (:arguments ("position")) nil [6429 7826])
            ("semantic-analyze-scope-nested-tags" function
               (:overloadable t
                :arguments ("position" "scopedtypes"))
                nil [7891 8253])
            ("semantic-analyze-scope-nested-tags-default" function (:arguments ("position" "scopetypes")) nil [8255 12531])
            ("semantic-analyze-scope-lineage-tags" function
               (:overloadable t
                :arguments ("parents" "scopedtypes"))
                nil [12533 12902])
            ("semantic-analyze-scope-lineage-tags-default" function (:arguments ("parents" "scopetypes")) nil [12904 13897])
            ("semantic-analyze-scoped-tags" function
               (:overloadable t
                :arguments ("typelist" "parentlist"))
                nil [13964 14325])
            ("semantic-analyze-scoped-tags-default" function (:arguments ("typelist" "halfscope")) nil [14327 16482])
            ("semantic-analyze-scope-calculate-access" function
               (:overloadable t
                :arguments ("type" "scope"))
                nil [16547 16915])
            ("semantic-analyze-scope-calculate-access-default" function (:arguments ("type" "scope")) nil [16917 18356])
            ("semantic-completable-tags-from-type" function (:arguments ("type")) nil [18358 19971])
            ("semantic-analyze-scoped-type-parts" function (:arguments ("type" "scope" "noinherit" "protection")) nil [19973 21757])
            ("semantic-analyze-scoped-inherited-tags" function (:arguments ("type" "scope" "access")) nil [21759 22898])
            ("semantic-analyze-scoped-inherited-tag-map" function (:arguments ("type" "fcn" "scope")) nil [22900 25451])
            ("semantic-calculate-scope" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [25542 28427])
            ("semantic-scope-find" function (:arguments ("name" "class" "scope-in")) nil [28429 30595])
            ("cl-defmethod" code nil nil [30609 31234])
            ("semantic/scope" package nil nil [31236 31261]))          
      :file "scope.el.gz"
      :pointmax 31416
      :fsize 9277
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1759 . 1760) (symbol 1717 . 1734) (open-paren 1716 . 1717)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [4338 4351])
            ("semantic" include nil nil [4353 4372])
            ("eieio-opt" include nil nil [4373 4393])
            ("semantic/analyze" include nil nil [4394 4421])
            ("semantic/ctxt" include nil nil [4422 4446])
            ("semantic/decorate" include nil nil [4447 4475])
            ("semantic/format" include nil nil [4476 4502])
            ("semantic/idle" include nil nil [4503 4527])
            ("semantic/find" include nil nil [4604 4628])
            ("semantic/db-find" include nil nil [4630 4657])
            ("semantic-complete-inline-overlay" variable nil nil [4722 4825])
            ("semantic-completion-inline-active-p" function nil nil [4827 5182])
            ("semantic-completion-text" function nil nil [5283 5622])
            ("semantic-completion-delete-text" function nil nil [5624 5903])
            ("semantic-completion-message" function (:arguments ("fmt" "args")) nil [5905 6166])
            ("semantic-completion-collector-engine" variable nil nil [6279 6470])
            ("semantic-completion-display-engine" variable nil nil [6472 6612])
            ("semantic-complete-key-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km " " (quote semantic-complete-complete-space)) (define-key km "	" (quote semantic-complete-complete-tab)) (define-key km "" (quote semantic-complete-done)) (define-key km "" (quote abort-recursive-edit)) (define-key km "\356" (quote next-history-element)) (define-key km "\360" (quote previous-history-element)) (define-key km "" (quote next-history-element)) (define-key km "" (quote previous-history-element)) km)) nil [6614 7196])
            ("semantic-completion-default-history" variable nil nil [7198 7338])
            ("semantic-complete-active-default" variable nil nil [7340 7381])
            ("semantic-complete-current-matched-tag" variable nil nil [7382 7428])
            ("semantic-complete-read-tag-engine" function (:arguments ("collector" "displayor" "prompt" "default-tag" "initial-input" "history")) nil [7430 9654])
            ("semantic-complete-active-default" variable nil nil [9700 9801])
            ("semantic-complete-default-to-tag" function (:arguments ("default")) nil [9803 11361])
            ("semantic-complete-current-matched-tag" variable nil nil [11713 11827])
            ("declare-function" code nil nil [11964 12052])
            ("semantic-complete-current-match" function nil nil [12054 14763])
            ("semantic-complete-done" function (:user-visible-flag t) nil [14870 15102])
            ("semantic-complete-complete-space" function (:user-visible-flag t) nil [15104 15251])
            ("semantic-complete-complete-tab" function (:user-visible-flag t) nil [15253 15415])
            ("semantic-complete-hack-word-boundaries" function (:arguments ("original" "new")) nil [15520 16207])
            ("semantic-complete-try-completion" function (:arguments ("partial")) nil [16209 17990])
            ("semantic-complete-do-completion" function (:arguments ("partial" "inline")) nil [17992 19909])
            ("semantic-complete-inline-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "	" (quote semantic-complete-inline-TAB)) (define-key km "\360" (quote semantic-complete-inline-up)) (define-key km "\356" (quote semantic-complete-inline-down)) (define-key km "" (quote semantic-complete-inline-done)) (define-key km "\203" (quote semantic-complete-inline-exit)) (define-key km "" (quote semantic-complete-inline-quit)) (define-key km "?" (lambda nil (interactive) (describe-variable (quote semantic-complete-inline-map)))) km)) nil [20266 20862])
            ("semantic-complete-inline-face" variable
               (:user-visible-flag t
                :default-value (quote ((((class color) (background dark)) (:underline "yellow")) (((class color) (background light)) (:underline "brown"))))
                :type "face")
                nil [20864 21180])
            ("semantic-complete-inline-text" function nil nil [21182 21540])
            ("semantic-complete-inline-delete-text" function nil nil [21542 21796])
            ("semantic-complete-inline-done" function (:user-visible-flag t) nil [21798 22530])
            ("semantic-complete-inline-quit" function (:user-visible-flag t) nil [22532 22665])
            ("semantic-complete-inline-exit" function (:user-visible-flag t) nil [22667 23963])
            ("semantic-complete-pre-command-hook" function nil nil [23965 24549])
            ("semantic-complete-post-command-hook" function nil nil [24551 26409])
            ("semantic-complete-inline-force-display" function nil nil [26411 27170])
            ("semantic-complete-inline-tag-engine" function (:arguments ("collector" "displayor" "buffer" "start" "end")) nil [27172 28752])
            ("semantic-complete-inline-TAB" function (:user-visible-flag t) nil [28796 29094])
            ("semantic-complete-inline-down" function (:user-visible-flag t) nil [29096 29353])
            ("semantic-complete-inline-up" function (:user-visible-flag t) nil [29355 29614])
            ("semantic-complete-next-action" function (:arguments ("partial")) nil [29857 31331])
            ("semantic-collector-per-buffer-list" variable nil nil [31887 31980])
            ("make-variable-buffer-local" code nil nil [31981 32045])
            ("semantic-collector-list" variable nil nil [32047 32134])
            ("semantic-collector-abstract" type
               (:members 
                  ( ("buffer" variable
                       (:documentation "Originating buffer for this collector.
Some collectors use a given buffer as a starting place while looking up
tags."
                        :type "buffer")
                        nil nil)
                    ("cache" variable
                       (:documentation "Cache of tags.
These tags are re-used during a completion session.
Sometimes these tags are cached between completion sessions."
                        :default-value "nil"
                        :type "(or null semanticdb-find-result-with-nil)")
                        nil nil)
                    ("last-all-completions" variable
                       (:documentation "Last result of `all-completions'.
This result can be used for refined completions as `last-prefix' gets
closer to a specific result."
                        :type "semanticdb-find-result-with-nil")
                        nil nil)
                    ("last-prefix" variable
                       (:documentation "The last queried prefix.
This prefix can be used to cache intermediate completion offers.
making the action of homing in on a token faster."
                        :protection ":protected"
                        :type "string")
                        nil nil)
                    ("last-completion" variable
                       (:documentation "The last calculated completion.
This completion is calculated and saved for future use."
                        :type "(or null string)")
                        nil nil)
                    ("last-whitespace-completion" variable
                       (:documentation "The last whitespace completion.
For partial completion, SPC will disambiguate over whitespace type
characters.  This is the last calculated version."
                        :type "(or null string)")
                        nil nil)
                    ("current-exact-match" variable
                       (:documentation "The list of matched tags.
When tokens are matched, they are added to this list."
                        :protection ":protected"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [32136 33786])
            ("semantic-collector-analyze-completions" type
               (:superclasses "semantic-collector-abstract"
                :members 
                  ( ("context" variable
                       (:documentation "An analysis context.
Specifies some context location from whence completion lists will be drawn."
                        :type "semantic-analyze-context")
                        nil nil)
                    ("first-pass-completions" variable
                       (:documentation "List of valid completion tags.
This list of tags is generated when completion starts.  All searches
derive from this list."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [33819 34463])
            ("cl-defmethod" code nil nil [34465 35159])
            ("cl-defmethod" code nil nil [35161 35291])
            ("cl-defmethod" code nil nil [35293 36274])
            ("cl-defmethod" code nil nil [36276 36521])
            ("cl-defmethod" code nil nil [36523 36759])
            ("cl-defmethod" code nil nil [36761 37489])
            ("cl-defmethod" code nil nil [37491 40256])
            ("cl-defmethod" code nil nil [40258 41591])
            ("cl-defmethod" code nil nil [41594 41979])
            ("cl-defmethod" code nil nil [41981 42228])
            ("cl-defmethod" code nil nil [42230 42646])
            ("cl-defmethod" code nil nil [42648 42952])
            ("cl-defmethod" code nil nil [42954 43348])
            ("cl-defmethod" code nil nil [43350 43490])
            ("cl-defmethod" code nil nil [43492 43837])
            ("semantic-collector-buffer-abstract" type
               (:superclasses "semantic-collector-abstract"
                :type "class")
                nil [43857 44058])
            ("cl-defmethod" code nil nil [44060 44664])
            ("semantic-collector-buffer-flush" function (:arguments ("newcache")) nil [44720 45033])
            ("add-hook" code nil nil [45035 45124])
            ("semantic-collector-buffer-deep" type
               (:superclasses "semantic-collector-buffer-abstract"
                :type "class")
                nil [45165 45409])
            ("cl-defmethod" code nil nil [45411 45779])
            ("semantic-collector-project-abstract" type
               (:superclasses "semantic-collector-abstract"
                :members 
                  ( ("path" variable
                       (:documentation "List of database tables to search.
At creation time, it can be anything accepted by
`semanticdb-find-translate-path' as a PATH argument."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [45816 46223])
            ("semantic-collector-project" type
               (:superclasses "semantic-collector-project-abstract"
                :type "class")
                nil [46244 46369])
            ("cl-defmethod" code nil nil [46372 46615])
            ("semantic-collector-project-brutish" type
               (:superclasses "semantic-collector-project-abstract"
                :type "class")
                nil [46644 46777])
            ("declare-function" code nil nil [46779 46867])
            ("cl-defmethod" code nil nil [46869 47161])
            ("semantic-collector-local-members" type
               (:superclasses "semantic-collector-project-abstract"
                :members 
                  ( ("scope" variable
                       (:documentation "The scope the local members are being completed from."
                        :default-value "nil"
                        :type "(or null semantic-scope-cache)")
                        nil nil))                  
                :type "class")
                nil [47199 47468])
            ("cl-defmethod" code nil nil [47470 47890])
            ("semantic-displayor-abstract" type
               (:members 
                  ( ("table" variable
                       (:documentation "List of tags this displayor is showing."
                        :protection ":protected"
                        :default-value "nil"
                        :type "(or null semanticdb-find-result-with-nil)")
                        nil nil)
                    ("last-prefix" variable
                       (:documentation "Prefix associated with slot `table'"
                        :protection ":protected"
                        :type "string")
                        nil nil))                  
                :type "class")
                nil [48862 49395])
            ("cl-defmethod" code nil nil [49397 49527])
            ("cl-defmethod" code nil nil [49529 49915])
            ("cl-defmethod" code nil nil [49917 50140])
            ("cl-defmethod" code nil nil [50142 50279])
            ("cl-defmethod" code nil nil [50281 50437])
            ("cl-defmethod" code nil nil [50439 50625])
            ("cl-defmethod" code nil nil [50627 50765])
            ("cl-defmethod" code nil nil [50767 50897])
            ("cl-defmethod" code nil nil [50899 51102])
            ("semantic-completion-displayor-format-tag-function" variable
               (:user-visible-flag t
                :default-value (function semantic-format-tag-name))
                nil [51129 51338])
            ("semantic-displayor-traditional" type
               (:superclasses "semantic-displayor-abstract"
                :type "class")
                nil [51340 51638])
            ("cl-defmethod" code nil nil [51640 52048])
            ("semantic-displayor-focus-abstract" type
               (:superclasses "semantic-displayor-abstract"
                :members 
                  ( ("focus" variable
                       (:documentation "A tag index from `table' which has focus.
Multiple calls to the display function can choose to focus on a
given tag, by highlighting its location."
                        :protection ":protected"
                        :type "number")
                        nil nil)
                    ("find-file-focus" variable
                       (:documentation "Non-nil if focusing requires a tag's buffer be in memory."
                        :static-flag t
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [52112 52751])
            ("cl-defmethod" code nil nil [52753 53315])
            ("cl-defmethod" code nil nil [53317 53545])
            ("cl-defmethod" code nil nil [53547 53990])
            ("cl-defmethod" code nil nil [53992 54443])
            ("cl-defmethod" code nil nil [54445 54719])
            ("cl-defmethod" code nil nil [54721 55488])
            ("semantic-displayor-traditional-with-focus-highlight" type
               (:interfaces ("semantic-displayor-traditional")
                :superclasses "semantic-displayor-focus-abstract"
                :members 
                  ( ("find-file-focus" variable (:default-value "t") nil nil))                  
                :type "class")
                nil [55597 56084])
            ("cl-defmethod" code nil nil [56086 58243])
            ("semantic-displayor-tooltip-mode" variable (:default-value (quote standard)) nil [58496 59254])
            ("semantic-displayor-tooltip-initial-max-tags" variable (:default-value 5) nil [59271 59501])
            ("semantic-displayor-tooltip-max-tags" variable (:default-value 25) nil [59503 60177])
            ("semantic-displayor-tooltip" type
               (:superclasses "semantic-displayor-traditional"
                :members 
                  ( ("mode" variable
                       (:documentation "See `semantic-displayor-tooltip-mode'."
                        :default-value "(symbol-value (quote semantic-displayor-tooltip-mode))")
                        nil nil)
                    ("max-tags-initial" variable
                       (:documentation "See `semantic-displayor-tooltip-initial-max-tags'."
                        :default-value "(symbol-value (quote semantic-displayor-tooltip-initial-max-tags))")
                        nil nil)
                    ("typing-count" variable
                       (:documentation "Counter holding how many times the user types space or tab continuously before showing tags."
                        :default-value "0"
                        :type "integer")
                        nil nil)
                    ("shown" variable
                       (:documentation "Flag representing whether tooltip has been shown yet."
                        :default-value "nil"
                        :type "boolean")
                        nil nil))                  
                :type "class")
                nil [60180 61019])
            ("cl-defmethod" code nil nil [61021 61216])
            ("tooltip-mode" variable nil nil [61218 61239])
            ("cl-defmethod" code nil nil [61241 64170])
            ("semantic-displayor-point-position" function nil nil [64194 64921])
            ("tooltip-frame-parameters" variable nil nil [64924 64957])
            ("declare-function" code nil nil [64958 65030])
            ("semantic-displayor-tooltip-show" function (:arguments ("text")) nil [65032 65481])
            ("cl-defmethod" code nil nil [65483 65754])
            ("semantic-displayor-ghost" type
               (:superclasses "semantic-displayor-focus-abstract"
                :members 
                  ( ("ghostoverlay" variable
                       (:documentation "The overlay the ghost text is displayed in."
                        :type "overlay")
                        nil nil)
                    ("first-show" variable
                       (:documentation "Non nil if we have not seen our first show request."
                        :default-value "t")
                        nil nil))                  
                :type "class")
                nil [65845 66348])
            ("cl-defmethod" code nil nil [66350 66726])
            ("cl-defmethod" code nil nil [66728 66947])
            ("cl-defmethod" code nil nil [66949 67175])
            ("cl-defmethod" code nil nil [67178 67640])
            ("cl-defmethod" code nil nil [67642 69031])
            ("semantic-complete-inline-custom-type" variable (:default-value (append (quote (radio)) (mapcar (lambda (class) (let* ((C (intern (car class))) (doc (documentation-property C (quote variable-documentation))) (doc1 (car (split-string doc "
")))) (list (quote const) :tag doc1 C))) (eieio-build-class-alist (quote semantic-displayor-abstract) t)))) nil [69124 69578])
            ("semantic-complete-inline-analyzer-displayor-class" variable
               (:user-visible-flag t
                :default-value (quote semantic-displayor-traditional))
                nil [69580 69798])
            ("semantic-complete-read-tag-buffer-deep" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [69800 70662])
            ("semantic-complete-read-tag-local-members" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [70664 71504])
            ("semantic-complete-read-tag-project" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [71506 72376])
            ("semantic-complete-inline-tag-project" function nil nil [72378 74199])
            ("semantic-complete-read-tag-analyzer" function (:arguments ("prompt" "context" "history")) nil [74201 75550])
            ("semantic-complete-inline-analyzer" function (:arguments ("context")) nil [75552 77536])
            ("semantic-complete-inline-analyzer-idle-displayor-class" variable
               (:user-visible-flag t
                :default-value (quote semantic-displayor-ghost))
                nil [77538 77768])
            ("semantic-complete-inline-analyzer-idle" function (:arguments ("context")) nil [77770 78451])
            ("semantic-complete-jump-local" function (:user-visible-flag t) nil [78470 78899])
            ("semantic-complete-jump" function (:user-visible-flag t) nil [78916 79360])
            ("semantic-complete-jump-local-members" function (:user-visible-flag t) nil [79377 79937])
            ("semantic-complete-analyze-and-replace" function (:user-visible-flag t) nil [79954 80640])
            ("semantic-complete-analyze-inline" function (:user-visible-flag t) nil [80657 81610])
            ("semantic-complete-analyze-inline-idle" function (:user-visible-flag t) nil [81627 82448])
            ("semantic-complete-self-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82465 83449])
            ("semantic-complete-inline-project" function (:user-visible-flag t) nil [83466 84129])
            ("semantic/complete" package nil nil [84131 84159]))          
      :file "complete.el.gz"
      :pointmax 84320
      :fsize 21135
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 4628 . 4629) (symbol 4530 . 4547) (open-paren 4529 . 4530) (close-paren 4351 . 4352) (symbol 4320 . 4337) (open-paren 4319 . 4320)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1219 1238])
            ("semantic/format" include nil nil [1239 1265])
            ("semantic/db" include nil nil [1266 1288])
            ("semantic/db-file" include nil nil [1289 1316])
            ("semantic/sort" include nil nil [1317 1341])
            ("imenu" include nil nil [1342 1358])
            ("declare-function" code nil nil [1360 1440])
            ("declare-function" code nil nil [1441 1503])
            ("if" code nil nil [1616 1736])
            ("semantic-imenu" customgroup (:user-visible-flag t) nil [1738 1838])
            ("semantic-imenu-summary-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-abbreviate))
                nil [1855 2114])
            ("make-variable-buffer-local" code nil nil [2115 2176])
            ("semantic-imenu-bucketize-file" variable
               (:user-visible-flag t
                :default-value t)
                nil [2193 2341])
            ("make-variable-buffer-local" code nil nil [2342 2401])
            ("semantic-imenu-adopt-external-members" variable
               (:user-visible-flag t
                :default-value t)
                nil [2403 2649])
            ("semantic-imenu-buckets-to-submenu" variable
               (:user-visible-flag t
                :default-value t)
                nil [2651 2870])
            ("make-variable-buffer-local" code nil nil [2871 2934])
            ("semantic-imenu-expand-type-members" variable
               (:user-visible-flag t
                :default-value t)
                nil [2951 3106])
            ("make-variable-buffer-local" code nil nil [3107 3171])
            ("semantic-varalias-obsolete" code nil nil [3172 3305])
            ("semantic-imenu-bucketize-type-members" variable
               (:user-visible-flag t
                :default-value t)
                nil [3307 3577])
            ("make-variable-buffer-local" code nil nil [3578 3645])
            ("semantic-varalias-obsolete" code nil nil [3646 3785])
            ("semantic-imenu-sort-bucket-function" variable (:user-visible-flag t) nil [3787 4471])
            ("make-variable-buffer-local" code nil nil [4472 4537])
            ("semantic-imenu-index-directory" variable (:user-visible-flag t) nil [4539 4866])
            ("semantic-imenu-auto-rebuild-directory-indexes" variable (:user-visible-flag t) nil [4868 5158])
            ("semantic-imenu-directory-current-file" variable nil nil [5160 5287])
            ("semantic-imenu-auto-rebuild-running" variable nil nil [5289 5407])
            ("semantic-imenu-expandable-tag-classes" variable (:default-value (quote (type))) nil [5424 5680])
            ("make-variable-buffer-local" code nil nil [5681 5748])
            ("semantic-varalias-obsolete" code nil nil [5749 5884])
            ("semantic-imenu-tag-overlay" function (:arguments ("tag")) nil [5896 6324])
            ("semantic-imenu-goto-function" function (:arguments ("name" "position" "rest")) nil [6327 8250])
            ("semantic-imenu-flush-fcn" function (:arguments ("ignore")) nil [8252 8771])
            ("semantic-create-imenu-index" function (:arguments ("stream")) nil [8788 9782])
            ("semantic-create-imenu-directory-index" function (:arguments ("stream")) nil [9784 11674])
            ("semantic-create-imenu-index-1" function (:arguments ("stream" "parent")) nil [11676 13763])
            ("semantic-create-imenu-subindex" function (:arguments ("tags")) nil [13765 16118])
            ("semantic-imenu-rebuild-directory-indexes" function (:arguments ("db")) nil [16155 17124])
            ("semantic-imenu-semanticdb-hook" function nil nil [17126 17576])
            ("add-hook" code nil nil [17578 17642])
            ("semantic-imenu-toggle-bucketize-file" function (:user-visible-flag t) nil [17673 17926])
            ("semantic-imenu-toggle-buckets-to-submenu" function (:user-visible-flag t) nil [17928 18193])
            ("semantic-imenu-toggle-bucketize-type-parts" function (:user-visible-flag t) nil [18195 18470])
            ("advice" include nil nil [18809 18826])
            ("semantic-which-function" variable (:default-value (quote semantic-default-which-function)) nil [18828 18959])
            ("semantic-which-function-use-color" variable (:user-visible-flag t) nil [18961 19127])
            ("semantic-default-which-function" function (:arguments ("taglist")) nil [19129 19958])
            ("semantic/imenu" package nil nil [20295 20320]))          
      :file "imenu.el.gz"
      :pointmax 20475
      :fsize 5753
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [1229 1251])
            ("eieio-opt" include nil nil [1252 1272])
            ("declare-function" code nil nil [1274 1340])
            ("declare-function" code nil nil [1341 1400])
            ("semanticdb-table-emacs-lisp" type
               (:superclasses "semanticdb-abstract-table"
                :members 
                  ( ("major-mode" variable (:default-value "emacs-lisp-mode") nil nil))                  
                :type "class")
                nil [1426 1592])
            ("cl-defmethod" code nil nil [1594 1757])
            ("cl-defmethod" code nil nil [1759 1883])
            ("cl-defmethod" code nil nil [1885 2147])
            ("semanticdb-project-database-emacs-lisp" type
               (:interfaces ("eieio-singleton")
                :superclasses "semanticdb-project-database"
                :members 
                  ( ("new-table-class" variable
                       (:documentation "New tables created for this database are of this class."
                        :default-value "semanticdb-table-emacs-lisp"
                        :type "class")
                        nil nil))                  
                :type "class")
                nil [2149 2451])
            ("cl-defmethod" code nil nil [2453 2838])
            ("semanticdb-project-system-databases" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (list (semanticdb-project-database-emacs-lisp "Emacs")))
                nil [2920 3087])
            ("semanticdb-find-default-throttle" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote (project omniscience)))
                nil [3089 3340])
            ("cl-defmethod" code nil nil [3372 3976])
            ("cl-defmethod" code nil nil [3978 4220])
            ("cl-defmethod" code nil nil [4222 4411])
            ("cl-defmethod" code nil nil [4413 4753])
            ("cl-defmethod" code nil nil [4755 4927])
            ("cl-defmethod" code nil nil [4947 5333])
            ("cl-defmethod" code nil nil [5335 7145])
            ("help-function-arglist" function (:prototype-flag t) nil [7147 7191])
            ("defalias" code nil nil [7192 7264])
            ("make-obsolete" code nil nil [7265 7362])
            ("semanticdb-elisp-sym->tag" function (:arguments ("sym" "toktype")) nil [7364 8964])
            ("semanticdb-elisp-mapatom-collector" variable nil nil [8990 9085])
            ("cl-defmethod" code nil nil [9087 9873])
            ("cl-defmethod" code nil nil [9875 10280])
            ("cl-defmethod" code nil nil [10282 10677])
            ("cl-defmethod" code nil nil [10679 11031])
            ("cl-defmethod" code nil nil [11115 11435])
            ("cl-defmethod" code nil nil [11437 11788])
            ("cl-defmethod" code nil nil [11790 12157])
            ("cl-defmethod" code nil nil [12184 12846])
            ("semantic/db-el" package nil nil [12848 12873]))          
      :file "db-el.el.gz"
      :pointmax 12907
      :fsize 4085
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1253 1272])
            ("semantic-tag-write-one-tag" function (:arguments ("tag" "indent")) nil [1284 2856])
            ("semantic-tag-write-tag-list" function (:arguments ("tlist" "indent" "dontaddnewline")) nil [2858 3842])
            ("semantic-tag-write-one-attribute" function (:arguments ("attrs" "indent")) nil [3874 4305])
            ("semantic-tag-write-one-value" function (:arguments ("value" "indent")) nil [4307 5006])
            ("semantic-tag-write-list-slot-value" function (:arguments ("value")) nil [5038 5277])
            ("semantic/tag-write" package nil nil [5279 5308]))          
      :file "tag-write.el.gz"
      :pointmax 5471
      :fsize 2142
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/tag" include nil nil [999 1022])
            ("ede-minor-mode" variable nil nil [1024 1047])
            ("declare-function" code nil nil [1048 1109])
            ("declare-function" code nil nil [1110 1164])
            ("declare-function" code nil nil [1165 1236])
            ("declare-function" code nil nil [1237 1279])
            ("semantic-go-to-tag" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [1340 4054])
            ("make-obsolete-overload" code nil nil [4056 4158])
            ("semantic-dependency-tag-file" function
               (:overloadable t
                :arguments ("tag"))
                nil [4354 6897])
            ("make-obsolete-overload" code nil nil [6899 7010])
            ("semantic-prototype-file" function
               (:overloadable t
                :arguments ("buffer"))
                nil [7277 7937])
            ("semantic-alias-obsolete" code nil nil [7939 8043])
            ("semantic-alias-obsolete" code nil nil [8045 8158])
            ("semantic/tag-file" package nil nil [8161 8189]))          
      :file "tag-file.el.gz"
      :pointmax 8350
      :fsize 2966
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1593 1606])
            ("semantic" include nil nil [1608 1627])
            ("eieio" include nil nil [1628 1644])
            ("cl-generic" include nil nil [1645 1666])
            ("semantic/find" include nil nil [1686 1710])
            ("semantic-debug-parser-source" variable nil nil [1739 1935])
            ("make-variable-buffer-local" code nil nil [1951 2009])
            ("semantic-debug-parser-class" variable nil nil [2026 2123])
            ("make-variable-buffer-local" code nil nil [2139 2196])
            ("semantic-debug-parser-debugger-source" variable nil nil [2213 2303])
            ("make-variable-buffer-local" code nil nil [2319 2377])
            ("semantic-debug-enabled" variable nil nil [2379 2451])
            ("semantic-debug-current-interface" variable nil nil [2496 2602])
            ("semantic-debug-current-parser" variable nil nil [2604 2693])
            ("semantic-debug-interface" type
               (:members 
                  ( ("parser-buffer" variable
                       (:documentation "The buffer containing the parser we are debugging."
                        :type "buffer")
                        nil nil)
                    ("parser-local-map" variable
                       (:documentation "The local keymap originally in the PARSER buffer."
                        :type "keymap")
                        nil nil)
                    ("parser-location" variable
                       (:documentation "A marker representing where we are in the parser buffer."
                        :type "marker")
                        nil nil)
                    ("source-buffer" variable
                       (:documentation "The buffer containing the source we are parsing.
The :parser-buffer defines a parser that can parse the text in the
:source-buffer."
                        :type "buffer")
                        nil nil)
                    ("source-local-map" variable
                       (:documentation "The local keymap originally in the SOURCE buffer."
                        :type "keymap")
                        nil nil)
                    ("source-location" variable
                       (:documentation "A marker representing where we are in the parser buffer."
                        :type "marker")
                        nil nil)
                    ("data-buffer" variable
                       (:documentation "Buffer being used to display some useful data.
These buffers are brought into view when layout occurs."
                        :type "buffer")
                        nil nil)
                    ("current-frame" variable
                       (:documentation "The currently displayed frame."
                        :type "semantic-debug-frame")
                        nil nil)
                    ("overlays" variable
                       (:documentation "Any active overlays being used to show the debug position."
                        :default-value "nil"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [2725 4143])
            ("cl-defmethod" code nil nil [4156 4377])
            ("cl-defmethod" code nil nil [4379 4719])
            ("cl-defmethod" code nil nil [4721 5061])
            ("cl-defmethod" code nil nil [5063 6048])
            ("cl-defmethod" code nil nil [6050 6434])
            ("cl-defmethod" code nil nil [6436 8124])
            ("cl-defmethod" code nil nil [8126 8321])
            ("semantic-debug-user-command" variable nil nil [8363 8443])
            ("semantic-debug-break" function (:arguments ("frame")) nil [8445 9472])
            ("semantic-debug-frame" type (:type "class") nil [9540 9613])
            ("cl-defmethod" code nil nil [9615 9727])
            ("cl-defmethod" code nil nil [9729 9850])
            ("semantic-debug-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "n" (quote semantic-debug-next)) (define-key km " " (quote semantic-debug-next)) (define-key km "s" (quote semantic-debug-step)) (define-key km "u" (quote semantic-debug-up)) (define-key km "d" (quote semantic-debug-down)) (define-key km "f" (quote semantic-debug-fail-match)) (define-key km "h" (quote semantic-debug-print-state)) (define-key km "s" (quote semantic-debug-jump-to-source)) (define-key km "p" (quote semantic-debug-jump-to-parser)) (define-key km "q" (quote semantic-debug-quit)) (define-key km "a" (quote semantic-debug-abort)) (define-key km "g" (quote semantic-debug-go)) (define-key km "b" (quote semantic-debug-set-breakpoint)) (define-key km "e" (quote eval-expression)) km)) nil [9870 10686])
            ("semantic-debug-mode" function (:arguments ("onoff")) nil [10688 11863])
            ("semantic-debug" function (:user-visible-flag t) nil [11880 13154])
            ("semantic-debug-find-parser-source" function nil nil [13156 13633])
            ("semantic-debug-next" function (:user-visible-flag t) nil [13660 13983])
            ("semantic-debug-step" function (:user-visible-flag t) nil [13985 14188])
            ("semantic-debug-up" function (:user-visible-flag t) nil [14190 14323])
            ("semantic-debug-down" function (:user-visible-flag t) nil [14325 14462])
            ("semantic-debug-fail-match" function (:user-visible-flag t) nil [14464 14680])
            ("semantic-debug-print-state" function (:user-visible-flag t) nil [14682 14874])
            ("semantic-debug-jump-to-source" function (:user-visible-flag t) nil [14876 15347])
            ("semantic-debug-jump-to-parser" function (:user-visible-flag t) nil [15349 15788])
            ("semantic-debug-quit" function (:user-visible-flag t) nil [15790 16074])
            ("semantic-debug-abort" function (:user-visible-flag t) nil [16076 16301])
            ("semantic-debug-go" function (:user-visible-flag t) nil [16303 16516])
            ("semantic-debug-set-breakpoint" function (:user-visible-flag t) nil [16518 16855])
            ("semantic-debug-parser" type (:type "class") nil [16885 17200])
            ("cl-defmethod" code nil nil [17202 17356])
            ("cl-defmethod" code nil nil [17358 17514])
            ("cl-defmethod" code nil nil [17516 17697])
            ("cl-defmethod" code nil nil [17699 17884])
            ("cl-defmethod" code nil nil [17886 18071])
            ("cl-defmethod" code nil nil [18073 18260])
            ("cl-defmethod" code nil nil [18262 18546])
            ("cl-defmethod" code nil nil [18548 18664])
            ("cl-defmethod" code nil nil [18681 18909])
            ("semantic/debug" package nil nil [18912 18937]))          
      :file "debug.el.gz"
      :pointmax 19092
      :fsize 5186
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1710 . 1711) (symbol 1668 . 1685) (open-paren 1667 . 1668) (close-paren 1606 . 1607) (symbol 1575 . 1592) (open-paren 1574 . 1575)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/analyze" include nil nil [1209 1236])
            ("semantic/format" include nil nil [1237 1263])
            ("pulse" include nil nil [1264 1280])
            ("semantic/senator" include nil nil [1281 1308])
            ("semantic/analyze/refs" include nil nil [1309 1341])
            ("semantic/find" include nil nil [1393 1417])
            ("semantic/analyze" include nil nil [1363 1390])
            ("declare-function" code nil nil [1420 1464])
            ("semantic-ia-completion-format-tag-function" variable (:default-value (quote semantic-format-tag-prototype)) nil [1571 1783])
            ("semantic-ia-insert-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [2142 2261])
            ("semantic-ia-insert-tag-default" function (:arguments ("tag")) nil [2263 2501])
            ("defalias" code nil nil [2503 2682])
            ("semantic-ia-get-completions-deprecated" function (:arguments ("context" "point")) nil [2684 3020])
            ("semantic-ia-complete-symbol" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [3037 5248])
            ("semantic-ia-completion-menu-format-tag-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-uml-concise-prototype))
                nil [5250 5480])
            ("semantic-ia-complete-symbol-menu" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [5497 6878])
            ("semantic-ia-complete-tip" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [7045 7797])
            ("semantic-ia-show-summary" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [7914 8428])
            ("semantic-ia-show-variants" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [8511 9908])
            ("semantic-ia--fast-jump-helper" function (:arguments ("dest")) nil [10100 11410])
            ("declare-function" code nil nil [11412 11492])
            ("semantic-ia-fast-jump" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [11509 13922])
            ("semantic-ia-fast-mouse-jump" function
               (:user-visible-flag t
                :arguments ("evt"))
                nil [13939 14264])
            ("semantic-ia-show-doc" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [14437 15819])
            ("semantic-ia-describe-class" function
               (:user-visible-flag t
                :arguments ("typename"))
                nil [15836 17377])
            ("semantic/ia" package nil nil [17379 17401]))          
      :file "ia.el.gz"
      :pointmax 17550
      :fsize 5961
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1417 . 1418) (symbol 1343 . 1360) (open-paren 1342 . 1343)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/analyze" include nil nil [963 990])
            ("speedbar" include nil nil [991 1010])
            ("semantic-ia-sb-key-map" variable nil nil [1022 1113])
            ("if" code nil nil [1115 1379])
            ("semantic-ia-sb-easymenu-definition" variable (:default-value (quote ("---" ["Tag Information" semantic-ia-sb-show-tag-info t] ["Jump to Tag" speedbar-edit-line t] ["Complete" speedbar-edit-line t]))) nil [1381 1713])
            ("speedbar-add-expansion-list" code nil nil [1770 1921])
            ("speedbar-add-mode-functions-list" code nil nil [1923 2094])
            ("semantic-speedbar-analysis" function (:user-visible-flag t) nil [2111 2486])
            ("semantic-ia-speedbar" function (:arguments ("directory" "zero")) nil [2488 4409])
            ("cl-defmethod" code nil nil [4411 4812])
            ("semantic-ia-sb-show-scope" function (:arguments ("scope")) nil [4814 5156])
            ("cl-defmethod" code nil nil [5158 5497])
            ("cl-defmethod" code nil nil [5499 5878])
            ("cl-defmethod" code nil nil [5880 6811])
            ("semantic-ia-sb-string-list" function (:arguments ("list" "face" "function" "idx" "idxface")) nil [6813 7804])
            ("semantic-ia-sb-completion-list" function (:arguments ("list" "face" "function")) nil [7806 8483])
            ("semantic-ia-sb-show-tag-info" function (:user-visible-flag t) nil [8485 8861])
            ("semantic-ia-sb-tag-info" function (:arguments ("text" "tag" "indent")) nil [8863 10464])
            ("semantic-ia-sb-line-path" function (:arguments ("depth")) nil [10466 10752])
            ("semantic-ia-sb-complete" function (:arguments ("text" "tag" "indent")) nil [10754 11785])
            ("semantic/ia-sb" package nil nil [11787 11812]))          
      :file "ia-sb.el.gz"
      :pointmax 11967
      :fsize 3855
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/tag" include nil nil [1193 1216])
            ("semantic-documentation-for-tag" function
               (:overloadable t
                :arguments ("tag" "nosnarf"))
                nil [1244 2471])
            ("semantic-documentation-comment-preceding-tag" function (:arguments ("tag" "nosnarf")) nil [2473 3358])
            ("define-obsolete-function-alias" code nil nil [3359 3497])
            ("semantic-doc-snarf-comment-for-tag" function (:arguments ("nosnarf")) nil [3499 5208])
            ("semantic/doc" package nil nil [5210 5233]))          
      :file "doc.el.gz"
      :pointmax 5384
      :fsize 2112
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [1160 1175])
            ("semantic" include nil nil [1176 1195])
            ("semantic/ctxt" include nil nil [1196 1220])
            ("semantic/decorate" include nil nil [1221 1249])
            ("semantic/format" include nil nil [1250 1276])
            ("semantic/find" include nil nil [1297 1321])
            ("declare-function" code nil nil [1370 1444])
            ("declare-function" code nil nil [1445 1514])
            ("declare-function" code nil nil [1515 1578])
            ("declare-function" code nil nil [1579 1646])
            ("declare-function" code nil nil [1647 1709])
            ("declare-function" code nil nil [1710 1754])
            ("senator" customgroup (:user-visible-flag t) nil [1774 1839])
            ("senator-step-at-tag-classes" variable nil nil [1856 2184])
            ("make-variable-buffer-local" code nil nil [2200 2257])
            ("senator-step-at-start-end-tag-classes" variable nil nil [2274 2967])
            ("make-variable-buffer-local" code nil nil [2983 3050])
            ("senator-highlight-found" variable nil nil [3052 3193])
            ("make-variable-buffer-local" code nil nil [3194 3247])
            ("senator-momentary-highlight-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray30")) (((class color) (background light)) (:background "gray70"))))
                :type "face")
                nil [3259 3509])
            ("senator-momentary-highlight-tag" function (:arguments ("tag")) nil [3533 3779])
            ("senator-step-at-start-end-p" function (:arguments ("tag")) nil [3781 4046])
            ("senator-skip-p" function (:arguments ("tag")) nil [4048 4251])
            ("senator-middle-of-tag-p" function (:arguments ("pos" "tag")) nil [4253 4434])
            ("senator-step-at-parent" function (:arguments ("tag")) nil [4436 5009])
            ("senator-previous-tag-or-parent" function (:arguments ("pos")) nil [5011 5818])
            ("senator-search-tag-name" function (:arguments ("tag")) nil [5842 6887])
            ("senator-search-ignore-tag-classes" variable (:default-value (quote (code block))) nil [6889 7089])
            ("senator-search-default-tag-filter" function (:arguments ("tag")) nil [7091 7336])
            ("senator-search-tag-filter-functions" variable (:default-value (quote (senator-search-default-tag-filter))) nil [7338 7578])
            ("senator-search" function (:arguments ("searcher" "text" "bound" "noerror" "count")) nil [7580 9322])
            ("senator-next-tag" function (:user-visible-flag t) nil [9364 10705])
            ("senator-previous-tag" function (:user-visible-flag t) nil [10722 12067])
            ("senator-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [12090 12471])
            ("senator-re-search-forward" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "noerror" "count"))
                nil [12473 12889])
            ("senator-word-search-forward" function
               (:user-visible-flag t
                :arguments ("word" "bound" "noerror" "count"))
                nil [12891 13286])
            ("senator-search-backward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [13288 13688])
            ("senator-re-search-backward" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "noerror" "count"))
                nil [13690 14125])
            ("senator-word-search-backward" function
               (:user-visible-flag t
                :arguments ("word" "bound" "noerror" "count"))
                nil [14127 14541])
            ("senator-last-search-type" variable nil nil [14595 14688])
            ("senator-nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [14690 15122])
            ("senator-nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [15124 15560])
            ("senator-nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [15562 15893])
            ("senator-nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [15895 16238])
            ("senator-nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [16240 16608])
            ("senator-nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [16610 16990])
            ("senator--search-filter" variable nil nil [16992 17027])
            ("senator-search-set-tag-class-filter" function
               (:user-visible-flag t
                :arguments ("classes"))
                nil [17029 18228])
            ("senator-fold-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [18375 18519])
            ("senator-unfold-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [18521 18669])
            ("senator-fold-tag-toggle" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [18671 18907])
            ("semantic-up-reference" function
               (:overloadable t
                :arguments ("tag"))
                nil [18959 19326])
            ("senator-go-to-up-reference" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [19343 20403])
            ("semantic-up-reference-default" function (:arguments ("tag")) nil [20405 22380])
            ("senator-isearch-semantic-mode" variable nil nil [22382 22502])
            ("make-variable-buffer-local" code nil nil [22503 22562])
            ("senator-beginning-of-defun" function (:arguments ("arg")) nil [22564 23150])
            ("senator-end-of-defun" function (:arguments ("arg")) nil [23152 23784])
            ("senator-narrow-to-defun" function (:user-visible-flag t) nil [23786 24161])
            ("senator-mark-defun" function (:user-visible-flag t) nil [24163 24709])
            ("senator-tag-ring" variable (:default-value (make-ring 20)) nil [25033 25118])
            ("senator-copy-tag" function (:user-visible-flag t) nil [25135 25574])
            ("senator-kill-tag" function (:user-visible-flag t) nil [25591 26103])
            ("senator-yank-tag" function (:user-visible-flag t) nil [26120 26615])
            ("senator-copy-tag-to-register" function
               (:user-visible-flag t
                :arguments ("register" "kill-flag"))
                nil [26632 27598])
            ("senator-transpose-tags-up" function (:user-visible-flag t) nil [27615 28825])
            ("senator-transpose-tags-down" function (:user-visible-flag t) nil [28842 29440])
            ("senator-lazy-highlight-update" function nil nil [29485 29682])
            ("senator-isearch-search-fun" function nil nil [29839 30310])
            ("senator-isearch-toggle-semantic-mode" function (:user-visible-flag t) nil [30312 30717])
            ("senator-old-isearch-search-fun" variable nil nil [30719 30820])
            ("senator-isearch-mode-hook" function nil nil [30822 31888])
            ("semantic/senator" package nil nil [32183 32210]))          
      :file "senator.el.gz"
      :pointmax 32369
      :fsize 7804
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1321 . 1322) (symbol 1279 . 1296) (open-paren 1278 . 1279)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/db-find" include nil nil [1103 1130])
            ("semantic/format" include nil nil [1131 1157])
            ("semantic/ctxt" include nil nil [1158 1182])
            ("texinfo" include nil nil [1183 1201])
            ("ede-minor-mode" variable nil nil [1203 1226])
            ("declare-function" code nil nil [1227 1274])
            ("declare-function" code nil nil [1275 1319])
            ("semantic-texi-super-regex" variable (:default-value "^@\\(top\\|chapter\\|\\(sub\\)*section\\|unnumbered\\(\\(sub\\)*sec\\)?\\|\\(chap\\|\\(sub\\)+\\|major\\)?heading\\|appendix\\(\\(sub\\)*sec\\)?\\|centerchap\\|def\\(var\\|un\\|fn\\|opt\\)x?\\)") nil [1321 1629])
            ("semantic-texi-name-field-list" variable (:default-value (quote (("defvar" . 1) ("defvarx" . 1) ("defun" . 1) ("defunx" . 1) ("defopt" . 1) ("deffn" . 2) ("deffnx" . 2)))) nil [1631 1959])
            ("semantic-texi-parse-region" function (:arguments ("ignore")) nil [1971 2413])
            ("semantic-texi-parse-changes" function nil nil [2415 2630])
            ("semantic-texi-expand-tag" function (:arguments ("tag")) nil [2632 2899])
            ("semantic-texi-parse-headings" function nil nil [2901 3687])
            ("semantic-texi-new-section-tag" function (:arguments ("name" "members" "start" "end")) nil [3689 4068])
            ("semantic-texi-new-def-tag" function (:arguments ("name" "start" "end")) nil [4070 4327])
            ("semantic-texi-set-endpoint" function (:arguments ("metataglist" "pnt")) nil [4329 4856])
            ("semantic-texi-recursive-combobulate-list" function (:arguments ("sectionlist" "level")) nil [4858 7884])
            ("semantic-texi-forward-deffn" function nil nil [7886 8172])
            ("semantic-tag-components" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [8174 8331])
            ("semantic-texi-environment-regexp" variable (:default-value (if (string-match texinfo-environment-regexp "@menu") texinfo-environment-regexp (when (string-match "cartouche" texinfo-environment-regexp) (concat (substring texinfo-environment-regexp 0 (match-beginning 0)) "menu\\|" (substring texinfo-environment-regexp (match-beginning 0)))))) nil [8408 9020])
            ("semantic-up-context" function
               (:parent "texinfo-mode"
                :override-function-flag t)
                nil [9022 10156])
            ("semantic-beginning-of-context" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [10158 10698])
            ("semantic-ctxt-current-class-list" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [10700 11173])
            ("semantic-format-tag-abbreviate" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [11259 11619])
            ("semantic-format-tag-prototype" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [11621 11807])
            ("semantic-tag-texi-section-text-bounds" function (:arguments ("tag")) nil [11839 12450])
            ("semantic-texi-current-environment" function (:arguments ("point")) nil [12452 12909])
            ("semantic/analyze" include nil nil [12950 12977])
            ("semantic-analyze-current-context" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("point"))
                nil [12980 13603])
            ("semantic-texi-command-completion-list" variable (:default-value (append (mapcar (lambda (a) (car a)) texinfo-section-list) (condition-case nil texinfo-environments (error (split-string texinfo-environment-regexp "\\\\|\\|\\^@\\\\(\\|\\\\)"))) "anchor" "asis" "bullet" "code" "copyright" "defun" "deffn" "defoption" "defvar" "dfn" "emph" "end" "ifinfo" "iftex" "inforef" "item" "itemx" "kdb" "node" "ref" "set" "setfilename" "settitle" "value" "var" "xref")) nil [13605 14311])
            ("semantic-analyze-possible-completions" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("context"))
                nil [14313 15272])
            ("semantic-imenu-expandable-tag-classes" variable nil nil [15340 15386])
            ("semantic-imenu-bucketize-file" variable nil nil [15387 15425])
            ("semantic-imenu-bucketize-type-members" variable nil nil [15426 15472])
            ("semantic-default-texi-setup" function nil nil [15489 16425])
            ("add-hook" code nil nil [16427 16485])
            ("semantic-texi-associated-files" function (:arguments ("buffer")) nil [16760 17543])
            ("semantic-texi-find-documentation" function (:arguments ("name" "type")) nil [17617 18463])
            ("semantic-texi-goto-source" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [23496 24617])
            ("semantic/texi" package nil nil [24619 24643]))          
      :file "texi.el.gz"
      :pointmax 24796
      :fsize 7828
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 12977 . 12978) (symbol 12930 . 12947) (open-paren 12929 . 12930)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1121 1140])
            ("semantic/format" include nil nil [1141 1167])
            ("semantic/sort" include nil nil [1168 1192])
            ("semantic/util" include nil nil [1193 1217])
            ("speedbar" include nil nil [1218 1237])
            ("declare-function" code nil nil [1238 1293])
            ("semantic-sb-autoexpand-length" variable
               (:user-visible-flag t
                :default-value 1)
                nil [1295 1505])
            ("semantic-sb-filter-tags-of-class" variable (:default-value (quote (code))) nil [1507 1692])
            ("semantic-sb-button-format-tag-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-abbreviate))
                nil [1694 1899])
            ("semantic-sb-info-format-tag-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-summarize))
                nil [1901 2110])
            ("semantic-sb-tag-set-buffer" function (:arguments ("tag")) nil [2176 2491])
            ("semantic-sb-with-tag-buffer" function (:arguments ("tag" "forms")) nil [2493 2735])
            ("put" code nil nil [2736 2794])
            ("semantic-sb-tag-children-to-expand" function
               (:overloadable t
                :arguments ("tag"))
                nil [3090 3319])
            ("semantic-sb-tag-children-to-expand-default" function (:arguments ("tag")) nil [3321 3515])
            ("semantic-sb-one-button" function (:arguments ("tag" "depth" "prefix")) nil [3517 5115])
            ("semantic-sb-speedbar-data-line" function (:arguments ("depth" "button" "text" "text-fun" "text-data")) nil [5117 5864])
            ("semantic-sb-maybe-token-to-button" function (:arguments ("obj" "indent" "prefix" "modifiers")) nil [5866 6676])
            ("semantic-sb-insert-details" function (:arguments ("tag" "indent")) nil [6678 8848])
            ("semantic-sb-detail-parent" function nil nil [8850 9489])
            ("semantic-sb-show-extra" function (:arguments ("text" "token" "indent")) nil [9491 10234])
            ("semantic-sb-token-jump" function (:arguments ("text" "token" "indent")) nil [10236 11533])
            ("semantic-sb-expand-group" function (:arguments ("text" "token" "indent")) nil [11535 12205])
            ("semantic-sb-buttons-plain" function (:arguments ("level" "tokens")) nil [12207 12789])
            ("semantic-sb-insert-tag-table" function (:arguments ("level" "table")) nil [12791 13061])
            ("semantic-sb-buttons" function (:arguments ("level" "lst")) nil [13063 13612])
            ("semantic-sb-fetch-tag-table" function (:arguments ("file")) nil [13614 14883])
            ("add-to-list" code nil nil [14929 15048])
            ("semantic/sb" package nil nil [15050 15072]))          
      :file "sb.el.gz"
      :pointmax 15179
      :fsize 5119
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs!25.1!share!emacs!25.1!lisp!cedet!semantic!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
