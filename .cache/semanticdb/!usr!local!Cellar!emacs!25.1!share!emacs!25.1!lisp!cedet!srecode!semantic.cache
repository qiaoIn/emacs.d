;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mode-local" include nil nil [997 1018])
            ("srecode" include nil nil [1019 1037])
            ("srecode/insert" include nil nil [1038 1063])
            ("srecode/find" include nil nil [1064 1087])
            ("srecode/map" include nil nil [1088 1110])
            ("semantic/decorate" include nil nil [1111 1139])
            ("semantic/wisent" include nil nil [1140 1166])
            ("semantic/senator" include nil nil [1167 1194])
            ("semantic/wisent" include nil nil [1195 1221])
            ("semantic/find" include nil nil [1244 1268])
            ("srecode-minor-mode-hook" variable nil nil [1282 1415])
            ("srecode-prefix-key" variable (:default-value [(control 99) 47]) nil [1538 1632])
            ("srecode-prefix-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "/" (quote srecode-insert)) (define-key km [insert] (quote srecode-insert)) (define-key km "." (quote srecode-insert-again)) (define-key km "E" (quote srecode-edit)) (let ((k 97)) (while (<= k 122) (define-key km (format "%c" k) (quote srecode-bind-insert)) (setq k (1+ k)))) km)) nil [1634 2117])
            ("srecode-menu-bar" variable (:default-value (list "SRecoder" (semantic-menu-item ["Insert Template" srecode-insert :active t :help "Insert a template by name."]) (semantic-menu-item ["Insert Template Again" srecode-insert-again :active t :help "Run the same template as last time again."]) (semantic-menu-item ["Edit Template" srecode-edit :active t :help "Edit a template for this language by name."]) "---" (quote ("Insert ..." :filter srecode-minor-mode-templates-menu)) (\` ("Generate ..." :filter srecode-minor-mode-generate-menu)) "---" (semantic-menu-item ["Customize..." (customize-group "srecode") :active t :help "Customize SRecode options"]) (list "Debugging Tools..." (semantic-menu-item ["Dump Template MAP" srecode-get-maps :active t :help "Calculate (if needed) and display the current template file map."]) (semantic-menu-item ["Dump Tables" srecode-dump-templates :active t :help "Dump the current template table."]) (semantic-menu-item ["Dump Dictionary" srecode-dictionary-dump :active t :help "Calculate and dump a dictionary for point."]) (semantic-menu-item ["Show Macro Help" srecode-macro-help :active t :help "Display the different types of macros available."])))) nil [2119 3602])
            ("srecode-minor-menu" variable nil nil [3604 3682])
            ("srecode-takeover-INS-key" variable nil nil [3684 3807])
            ("srecode-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km srecode-prefix-key srecode-prefix-map) (easy-menu-define srecode-minor-menu km "Srecode Minor Mode Menu" srecode-menu-bar) (when srecode-takeover-INS-key (define-key km [insert] srecode-prefix-map)) km)) nil [3809 4166])
            ("define-minor-mode" code nil nil [4183 5105])
            ("define-minor-mode" code nil nil [5122 5479])
            ("semantic-add-minor-mode" code nil nil [5525 5573])
            ("srecode-minor-mode-templates-menu" function (:arguments ("menu-def")) nil [5595 7604])
            ("srecode-minor-mode-generators" variable nil nil [7606 7714])
            ("srecode-minor-mode-generate-menu" function (:arguments ("menu-def")) nil [7716 8323])
            ("srecode-bind-insert" function (:user-visible-flag t) nil [8352 8894])
            ("srecode-edit" function
               (:user-visible-flag t
                :arguments ("template-name"))
                nil [8896 10445])
            ("srecode-add-code-generator" function (:arguments ("function" "name" "binding")) nil [10447 12191])
            ("srecode-add-code-generator" code nil nil [12225 12301])
            ("srecode-add-code-generator" code nil nil [12302 12367])
            ("srecode/mode" package nil nil [12369 12392]))          
      :file "mode.el.gz"
      :pointmax 12543
      :fsize 4229
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1268 . 1269) (symbol 1224 . 1241) (open-paren 1223 . 1224)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio" include nil nil [960 976])
            ("cl-generic" include nil nil [977 998])
            ("eieio-base" include nil nil [999 1020])
            ("mode-local" include nil nil [1021 1042])
            ("srecode" include nil nil [1043 1061])
            ("declare-function" code nil nil [1063 1125])
            ("declare-function" code nil nil [1126 1195])
            ("srecode-template-table" type
               (:members 
                  ( ("file" variable
                       (:documentation "The name of the file this table was built from."
                        :type "string")
                        nil nil)
                    ("filesize" variable
                       (:documentation "The size of the file when it was parsed."
                        :type "number")
                        nil nil)
                    ("filedate" variable
                       (:documentation "Date from the inode of the file when it was last edited.
Format is from the `file-attributes' function."
                        :type "cons")
                        nil nil)
                    ("major-mode" variable (:documentation "The major mode this table of templates is associated with.") nil nil)
                    ("application" variable
                       (:documentation "Tracks the name of the application these templates belong to.
If this is nil, then this template table belongs to a set of generic
templates that can be used with no additional dictionary values.
When it is non-nil, it is assumed the template macros need specialized
Emacs Lisp code to fill in the dictionary."
                        :type "symbol")
                        nil nil)
                    ("framework" variable
                       (:documentation "Tracks the name of the framework these templates belong to.
If nil, then this template table belongs to any framework, or can be
considered generic for all files of this language.
A framework might be a specific library or build environment for which
special templates are desired.  OpenGL might be a framework that
exists for multiple languages."
                        :type "symbol")
                        nil nil)
                    ("priority" variable
                       (:documentation "For file of this Major Mode, what is the priority of this file.
When there are multiple template files with similar names, templates with
the highest priority are scanned last, allowing them to override values in
previous template files."
                        :type "number")
                        nil nil)
                    ("project" variable
                       (:documentation "Scope some project files to a specific project.
The value is a directory which forms the root of a particular project,
or a subset of a particular project."
                        :type "(or null string)")
                        nil nil)
                    ("templates" variable
                       (:documentation "The list of templates compiled into this table."
                        :type "list")
                        nil nil)
                    ("namehash" variable (:documentation "Hash table containing the names of all the templates.") nil nil)
                    ("contexthash" variable nil nil nil)
                    ("variables" variable (:documentation "AList of variables.
These variables are used to initialize dictionaries.") nil nil))                  
                :type "class")
                nil [1230 3903])
            ("srecode-mode-table-list" variable nil nil [3923 4028])
            ("srecode-mode-table" type
               (:superclasses "eieio-instance-tracker"
                :members 
                  ( ("tracking-symbol" variable (:default-value "(quote srecode-mode-table-list)") nil nil)
                    ("major-mode" variable (:documentation "Table of template tables for this major-mode.") nil nil)
                    ("modetables" variable (:documentation "All that tables unique to this major mode.") nil nil)
                    ("tables" variable (:documentation "All the tables that can be used for this major mode.") nil nil))                  
                :type "class")
                nil [4030 4578])
            ("srecode-get-mode-table" function (:arguments ("mode")) nil [4580 5450])
            ("srecode-make-mode-table" function (:arguments ("mode")) nil [5452 5947])
            ("cl-defmethod" code nil nil [5949 6159])
            ("srecode-mode-table-new" function (:arguments ("mode" "file" "init")) nil [6161 7183])
            ("object-sort-list" function (:arguments ("object" "slot" "predicate")) nil [7185 7476])
            ("srecode-dump-templates" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [7565 8131])
            ("cl-defmethod" code nil nil [8133 8558])
            ("cl-defmethod" code nil nil [8560 9694])
            ("srecode/table" package nil nil [9697 9721]))          
      :file "table.el.gz"
      :pointmax 9755
      :fsize 3378
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs!25.1!share!emacs!25.1!lisp!cedet!srecode!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
