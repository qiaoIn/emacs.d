;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1051 1068])
            ("declare-function" code nil nil [1071 1133])
            ("declare-function" code nil nil [1134 1174])
            ("compilation-current-error" variable nil nil [1196 1230])
            ("compilation-context-lines" variable nil nil [1231 1265])
            ("idle-update-delay" variable (:default-value 0.5) nil [1267 1564])
            ("killing" customgroup (:user-visible-flag t) nil [1566 1640])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1642 1744])
            ("next-error" customgroup (:user-visible-flag t) nil [1781 1882])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1884 2015])
            ("next-error-highlight" variable (:default-value 0.5) nil [2017 2772])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2774 3467])
            ("next-error-recenter" variable nil nil [3469 3831])
            ("next-error-hook" variable nil nil [3833 3974])
            ("next-error-highlight-timer" variable nil nil [3976 4015])
            ("next-error-overlay-arrow-position" variable nil nil [4017 4063])
            ("put" code nil nil [4064 4142])
            ("add-to-list" code nil nil [4143 4220])
            ("next-error-last-buffer" variable nil nil [4222 4449])
            ("next-error-function" variable nil nil [4451 4909])
            ("make-variable-buffer-local" code nil nil [4910 4959])
            ("next-error-move-function" variable nil nil [4961 5274])
            ("make-variable-buffer-local" code nil nil [5275 5329])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5331 6413])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6415 8697])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8699 10468])
            ("next-error-internal" function nil nil [10470 10891])
            ("defalias" code nil nil [10893 10932])
            ("defalias" code nil nil [10933 10967])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10969 11286])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11288 11556])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11558 12010])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12012 12390])
            ("next-error-follow-last-line" variable nil nil [12461 12501])
            ("define-minor-mode" code nil nil [12503 13211])
            ("next-error-follow-mode-post-command-hook" function nil nil [13327 13660])
            ("fundamental-mode" function (:user-visible-flag t) nil [13669 13878])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [13956 14440])
            ("put" code nil nil [14442 14482])
            ("define-derived-mode" code nil nil [14483 14628])
            ("self-insert-uses-region-functions" variable nil nil [14661 15034])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [15036 15169])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [15171 18496])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [18498 18846])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18848 19625])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19627 20428])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20430 21143])
            ("defalias" code nil nil [21145 21187])
            ("delete-blank-lines" function (:user-visible-flag t) nil [21206 22633])
            ("delete-trailing-lines" variable (:default-value t) nil [22635 22921])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [22923 24729])
            ("newline-and-indent" function (:user-visible-flag t) nil [24731 25164])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [25166 26392])
            ("read-quoted-char-radix" variable (:default-value 8) nil [26394 26615])
            ("read-quoted-char" function (:arguments ("prompt")) nil [26617 29269])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29271 31300])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31302 31495])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31497 31696])
            ("back-to-indentation" function (:user-visible-flag t) nil [31698 31988])
            ("fixup-whitespace" function (:user-visible-flag t) nil [31990 32329])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [32331 32769])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [32771 33031])
            ("cycle-spacing--context" variable nil nil [33033 33288])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "mode"))
                nil [33290 35739])
            ("beginning-of-buffer" function (:arguments ("arg")) nil [35742 36665])
            ("end-of-buffer" function (:arguments ("arg")) nil [36667 37914])
            ("delete-active-region" variable (:default-value t) nil [37916 38453])
            ("region-extract-function" variable (:default-value (lambda (delete) (when (region-beginning) (cond ((eq delete (quote bounds)) (list (cons (region-beginning) (region-end)))) ((eq delete (quote delete-only)) (delete-region (region-beginning) (region-end))) (t (filter-buffer-substring (region-beginning) (region-end) delete)))))) nil [38455 39277])
            ("region-insert-function" variable (:default-value (lambda (lines) (let ((first t)) (while lines (or first (insert 10)) (insert-for-yank (car lines)) (setq lines (cdr lines) first nil))))) nil [39279 39625])
            ("delete-backward-char" function (:arguments ("n" "killflag")) nil [39627 41264])
            ("delete-forward-char" function (:arguments ("n" "killflag")) nil [41266 42409])
            ("mark-whole-buffer" function nil nil [42411 42848])
            ("goto-line" function (:arguments ("line" "buffer")) nil [42892 45169])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [45171 45853])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [45855 46648])
            ("count-words--buffer-message" function nil nil [46650 46803])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [46805 47130])
            ("define-obsolete-function-alias" code nil nil [47132 47211])
            ("what-line" function (:user-visible-flag t) nil [47213 47564])
            ("count-lines" function (:arguments ("start" "end")) nil [47566 48403])
            ("line-number-at-pos" function (:arguments ("pos")) nil [48405 48865])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [48867 53370])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [53435 53750])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [53752 54275])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [54277 54734])
            ("minibuffer-completing-symbol" variable nil nil [54736 54839])
            ("make-obsolete-variable" code nil nil [54840 54910])
            ("minibuffer-default" variable nil nil [54912 55105])
            ("eval-expression-print-level" variable (:default-value 4) nil [55107 55337])
            ("eval-expression-print-length" variable (:default-value 12) nil [55339 55572])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [55574 55783])
            ("eval-expression-print-format" function (:arguments ("value")) nil [55785 56477])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [56479 56593])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [56595 57254])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value"))
                nil [57384 59673])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [59675 60602])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60604 62272])
            ("extended-command-history" variable nil nil [62275 62312])
            ("execute-extended-command--last-typed" variable nil nil [62313 62362])
            ("read-extended-command" function nil nil [62364 64548])
            ("suggest-key-bindings" variable (:default-value t) nil [64550 64916])
            ("execute-extended-command--shorter-1" function (:arguments ("name" "length")) nil [64918 65380])
            ("execute-extended-command--shorter" function (:arguments ("name" "typed")) nil [65382 66213])
            ("execute-extended-command" function (:arguments ("prefixarg" "command-name" "typed")) nil [66215 69780])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [69782 72391])
            ("minibuffer-history" variable nil nil [72394 72647])
            ("minibuffer-history-sexp-flag" variable nil nil [72648 72963])
            ("setq" code nil nil [72964 73018])
            ("setq" code nil nil [73019 73057])
            ("minibuffer-history-search-history" variable nil nil [73083 73129])
            ("minibuffer-text-before-history" variable nil nil [73131 73331])
            ("add-hook" code nil nil [73333 73397])
            ("minibuffer-history-initialize" function nil nil [73399 73483])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [73485 73700])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [73702 74092])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [74094 76938])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [76940 77994])
            ("minibuffer-temporary-goal-position" variable nil nil [77996 78043])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [78045 78685])
            ("minibuffer-default-add-done" variable nil nil [78687 79010])
            ("make-variable-buffer-local" code nil nil [79012 79069])
            ("minibuffer-default-add-completions" function nil nil [79071 79525])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [79527 81815])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [81817 82068])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [82070 82328])
            ("next-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82330 83812])
            ("previous-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [83814 85853])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [85855 86511])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [86513 86798])
            ("minibuffer-prompt-width" function nil nil [86857 87146])
            ("add-hook" code nil nil [87179 87246])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [87248 87299])
            ("make-variable-buffer-local" code nil nil [87300 87372])
            ("minibuffer-history-isearch-setup" function nil nil [87374 88014])
            ("minibuffer-history-isearch-end" function nil nil [88016 88246])
            ("minibuffer-history-isearch-search" function nil nil [88248 90153])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [90155 91552])
            ("minibuffer-history-isearch-wrap" function nil nil [91554 92171])
            ("minibuffer-history-isearch-push-state" function nil nil [92173 92504])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [92506 92718])
            ("define-obsolete-function-alias" code nil nil [92796 92858])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [92860 93103])
            ("undo-in-region" variable nil nil [93105 93209])
            ("undo-no-redo" variable nil nil [93211 93286])
            ("pending-undo-list" variable nil nil [93288 93439])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [93441 98062])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [98064 98345])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98347 98609])
            ("undo-in-progress" variable nil nil [98611 98742])
            ("undo-more" function (:arguments ("n")) nil [98744 99439])
            ("primitive-undo" function (:arguments ("n" "list")) nil [99441 105841])
            ("undo-copy-list" function (:arguments ("list")) nil [105866 105964])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [105966 106075])
            ("undo-start" function (:arguments ("beg" "end")) nil [106077 106665])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [109663 111949])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [111951 112990])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [112992 113534])
            ("undo-adjust-elt" function (:arguments ("elt" "deltas")) nil [113536 114301])
            ("undo-adjust-beg-end" function (:arguments ("beg" "end" "deltas")) nil [115192 115497])
            ("undo-adjust-pos" function (:arguments ("pos" "deltas" "use-<")) nil [115499 115971])
            ("undo-delta" function (:arguments ("undo-elt")) nil [116142 116475])
            ("defvar-local" code nil nil [116671 117392])
            ("undo-auto-current-boundary-timer" variable nil nil [117394 117569])
            ("undo-auto--this-command-amalgamating" variable nil nil [117571 117767])
            ("undo-auto--needs-boundary-p" function nil nil [117769 117909])
            ("undo-auto--last-boundary-amalgamating-number" function nil nil [117911 118215])
            ("undo-auto--ensure-boundary" function (:arguments ("cause")) nil [118217 118845])
            ("undo-auto--boundaries" function (:arguments ("cause")) nil [118847 119281])
            ("undo-auto--boundary-timer" function nil nil [119283 119452])
            ("undo-auto--boundary-ensure-timer" function nil nil [119454 119699])
            ("undo-auto--undoably-changed-buffers" variable nil nil [119701 119938])
            ("undo-auto--add-boundary" function nil nil [119940 120219])
            ("undo-auto-amalgamate" function nil nil [120221 121550])
            ("undo-auto--undoable-change-no-timer" function nil nil [121774 121930])
            ("undo-auto--undoable-change" function nil nil [121932 122093])
            ("undo-ask-before-discard" variable nil nil [122124 122890])
            ("undo-extra-outer-limit" variable nil nil [122892 123168])
            ("make-variable-buffer-local" code nil nil [123169 123221])
            ("setq" code nil nil [123506 123565])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [123566 125357])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "암호" "パスワード" "ପ୍ରବେଶ ସଙ୍କେତ" "ពាក្យសម្ងាត់" "adgangskode" "contraseña" "contrasenya" "geslo" "hasło" "heslo" "iphasiwedi" "jelszó" "lösenord" "lozinka" "mật khẩu" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slaptažodis" "wachtwoord" "كلمة السر" "ססמה" "лозинка" "пароль" "गुप्तशब्द" "शब्दकूट" "પાસવર્ડ" "సంకేతపదము" "ਪਾਸਵਰਡ" "ಗುಪ್ತಪದ" "கடவுச்சொல்" "അടയാളവാക്ക്" "গুপ্তশব্দ" "পাসওয়ার্ড" "රහස්පදය" "密码" "密碼"))) nil [125360 126749])
            ("shell-command-history" variable nil nil [126751 126941])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [126943 127057])
            ("shell-command-default-error-buffer" variable nil nil [127059 127374])
            ("declare-function" code nil nil [127376 127442])
            ("declare-function" code nil nil [127443 127529])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [127531 128235])
            ("declare-function" code nil nil [128237 128288])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [128290 128535])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [128537 129166])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [129168 130421])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [130423 131728])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [131730 139879])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "action" "frame")) nil [139881 142277])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [142373 142584])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer" "region-noncontiguous-p"))
                nil [142586 152142])
            ("shell-command-to-string" function (:arguments ("command")) nil [152144 152404])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [152406 153856])
            ("process-file-side-effects" variable (:default-value t) nil [153858 154280])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [154282 155167])
            ("tabulated-list-format" variable nil nil [155189 155219])
            ("tabulated-list-entries" variable nil nil [155220 155251])
            ("tabulated-list-sort-key" variable nil nil [155252 155284])
            ("declare-function" code nil nil [155285 155351])
            ("declare-function" code nil nil [155352 155458])
            ("process-menu-query-only" variable nil nil [155460 155496])
            ("process-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [100] (quote process-menu-delete-process)) map)) nil [155498 155628])
            ("define-derived-mode" code nil nil [155630 156126])
            ("process-menu-delete-process" function (:user-visible-flag t) nil [156128 156299])
            ("list-processes--refresh" function nil nil [156301 157948])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [157950 158047])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [158049 159012])
            ("setq" code nil nil [159037 159076])
            ("setq" code nil nil [159077 159113])
            ("internal-echo-keystrokes-prefix" function nil nil [159115 159720])
            ("prefix-command-echo-keystrokes-functions" variable nil nil [159722 159928])
            ("prefix-command-update" function nil nil [159930 160097])
            ("prefix-command-preserve-state-hook" variable nil nil [160099 160211])
            ("prefix-command-preserve-state" function nil nil [160213 160706])
            ("reset-this-command-lengths" function nil nil [160708 160811])
            ("add-hook" code nil nil [160907 161003])
            ("universal-argument--description" function nil nil [161004 161463])
            ("add-hook" code nil nil [161465 161552])
            ("universal-argument--preserve" function nil nil [161553 161631])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [161633 163249])
            ("universal-argument--mode" function nil nil [163251 163361])
            ("universal-argument" function (:user-visible-flag t) nil [163363 164106])
            ("universal-argument-more" function (:arguments ("arg")) nil [164108 164580])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164582 164956])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164958 165726])
            ("filter-buffer-substring-functions" variable nil nil [165730 165847])
            ("make-obsolete-variable" code nil nil [165848 165972])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [165974 166380])
            ("buffer-substring-filters" variable nil nil [166382 166863])
            ("make-obsolete-variable" code nil nil [166864 166979])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [166981 167837])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [167839 168668])
            ("interprogram-cut-function" variable (:default-value (function gui-select-text)) nil [168712 169263])
            ("interprogram-paste-function" variable (:default-value (function gui-selection-value)) nil [169265 170704])
            ("kill-ring" variable nil nil [170745 171200])
            ("kill-ring-max" variable (:default-value 60) nil [171202 171337])
            ("kill-ring-yank-pointer" variable nil nil [171339 171440])
            ("save-interprogram-paste-before-kill" variable nil nil [171442 171944])
            ("kill-do-not-save-duplicates" variable nil nil [171946 172175])
            ("kill-new" function (:arguments ("string" "replace")) nil [172177 174203])
            ("kill-append-merge-undo" variable nil nil [174362 174552])
            ("kill-append" function (:arguments ("string" "before-p")) nil [174554 175410])
            ("yank-pop-change-selection" variable nil nil [175412 175760])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [175762 177420])
            ("kill-read-only-ok" variable nil nil [177471 177607])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [177609 180485])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [180679 181812])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [181814 183103])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [183105 184687])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [184689 185509])
            ("bidi-directional-controls-chars" variable (:default-value "‪-‮⁦-⁩") nil [185511 185656])
            ("bidi-directional-non-controls-chars" variable (:default-value "^‪-‮⁦-⁩") nil [185658 185808])
            ("squeeze-bidi-context-1" function (:arguments ("from" "to" "category" "replacement")) nil [185810 186916])
            ("squeeze-bidi-context" function (:arguments ("from" "to")) nil [186918 188019])
            ("line-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [188021 189947])
            ("buffer-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [189949 191252])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [191268 192093])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [192166 192629])
            ("yank-window-start" variable nil nil [192631 192661])
            ("yank-undo-function" variable nil nil [192662 192993])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [192995 194730])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [194732 196179])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [196181 196371])
            ("kill-forward-chars" function (:arguments ("arg")) nil [196436 196581])
            ("kill-backward-chars" function (:arguments ("arg")) nil [196630 196776])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [196778 197253])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [197255 198607])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [198609 199226])
            ("kill-whole-line" variable nil nil [199263 199408])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [199410 201626])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [201628 203257])
            ("forward-visible-line" function (:arguments ("arg")) nil [203259 205749])
            ("end-of-visible-line" function nil nil [205751 206517])
            ("insert-buffer" function (:arguments ("buffer")) nil [206520 207073])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [207075 207975])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [207977 208519])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [208521 209090])
            ("define-error" code nil nil [209093 209162])
            ("activate-mark-hook" variable nil nil [209164 209353])
            ("deactivate-mark-hook" variable nil nil [209355 209433])
            ("mark" function (:arguments ("force")) nil [209435 210059])
            ("deactivate-mark" function (:arguments ("force")) nil [210094 212184])
            ("activate-mark" function (:arguments ("no-tmm")) nil [212186 212577])
            ("set-mark" function (:arguments ("pos")) nil [212579 213803])
            ("save-mark-and-excursion--save" function nil nil [213805 213954])
            ("save-mark-and-excursion--restore" function (:arguments ("saved-mark-info")) nil [213956 214906])
            ("save-mark-and-excursion" function (:arguments ("body")) nil [214908 215330])
            ("use-empty-active-region" variable nil nil [215332 215831])
            ("use-region-p" function nil nil [215833 216439])
            ("region-active-p" function nil nil [216441 217130])
            ("region-noncontiguous-p" function nil nil [217132 217381])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [217383 217489])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [217491 218362])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [218364 219200])
            ("pre-redisplay-functions" variable (:default-value (list (function redisplay--update-region-highlight))) nil [219202 219518])
            ("redisplay--pre-redisplay-functions" function (:arguments ("windows")) nil [219520 219985])
            ("add-function" code nil nil [219987 220083])
            ("defvar-local" code nil nil [220086 220185])
            ("put" code nil nil [220186 220221])
            ("mark-ring-max" variable (:default-value 16) nil [220223 220368])
            ("global-mark-ring" variable nil nil [220370 220454])
            ("global-mark-ring-max" variable (:default-value 16) nil [220456 220617])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [220619 220932])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [220934 221345])
            ("set-mark-command-repeat-pop" variable nil nil [221347 221806])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [221808 224110])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [224112 225666])
            ("pop-mark" function nil nil [225668 226087])
            ("define-obsolete-function-alias" code nil nil [226089 226178])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [226179 227074])
            ("shift-select-mode" variable (:default-value t) nil [227076 227648])
            ("handle-shift-selection" function nil nil [227650 228975])
            ("define-minor-mode" code nil nil [228977 230337])
            ("widen-automatically" variable (:default-value t) nil [230339 230673])
            ("non-essential" variable nil nil [230675 231073])
            ("pop-global-mark" function (:user-visible-flag t) nil [231075 231890])
            ("next-line-add-newlines" variable nil nil [231893 232067])
            ("next-line" function (:arguments ("arg" "try-vscroll")) nil [232069 234191])
            ("previous-line" function (:arguments ("arg" "try-vscroll")) nil [234193 235820])
            ("track-eol" variable nil nil [235822 236160])
            ("goal-column" variable nil nil [236162 236429])
            ("make-variable-buffer-local" code nil nil [236430 236471])
            ("temporary-goal-column" variable nil nil [236473 236990])
            ("line-move-ignore-invisible" variable (:default-value t) nil [236992 237650])
            ("line-move-visual" variable (:default-value t) nil [237652 238228])
            ("declare-function" code nil nil [238265 238325])
            ("default-font-height" function nil nil [238327 238961])
            ("default-font-width" function nil nil [238963 239684])
            ("default-line-height" function nil nil [239686 240148])
            ("window-screen-lines" function nil nil [240150 240720])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [240767 244540])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [244864 246841])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [246989 249579])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [249733 254406])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [254408 257546])
            ("line-move-to-column" function (:arguments ("col")) nil [257548 259130])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [259132 260487])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [260489 262021])
            ("put" code nil nil [262151 262185])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [262187 263220])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [263288 263852])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [263854 264445])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [264447 265862])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [265864 266233])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [266235 266614])
            ("visual-line" customgroup (:user-visible-flag t) nil [266616 266717])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [266719 267207])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [267209 268396])
            ("visual-line--saved-state" variable nil nil [268398 268435])
            ("define-minor-mode" code nil nil [268437 270078])
            ("turn-on-visual-line-mode" function nil nil [270080 270138])
            ("define-globalized-minor-mode" code nil nil [270140 270238])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [270242 270756])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [270758 271202])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [271204 272675])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [272677 273284])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [273435 274692])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [274694 275698])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [275701 276251])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [276253 277005])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [277007 277219])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [277221 277412])
            ("current-word" function (:arguments ("strict" "really-word")) nil [277414 278894])
            ("fill-prefix" variable nil nil [278897 279063])
            ("make-variable-buffer-local" code nil nil [279064 279105])
            ("put" code nil nil [279106 279163])
            ("auto-fill-inhibit-regexp" variable nil nil [279165 279331])
            ("do-auto-fill" function nil nil [279333 282633])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [282635 282961])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [282963 284070])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [284072 284228])
            ("put" code nil nil [284230 284292])
            ("put" code nil nil [284466 284518])
            ("define-minor-mode" code nil nil [284520 285263])
            ("auto-fill-function" function nil nil [285330 285437])
            ("turn-on-auto-fill" function nil nil [285439 285532])
            ("turn-off-auto-fill" function nil nil [285534 285630])
            ("custom-add-option" code nil nil [285632 285686])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [285688 286526])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [286529 287319])
            ("defvaralias" code nil nil [287321 287379])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [287381 288161])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [288163 288707])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [288709 288826])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [288827 288954])
            ("define-minor-mode" code nil nil [288956 289689])
            ("define-minor-mode" code nil nil [289691 290619])
            ("define-minor-mode" code nil nil [290621 291097])
            ("define-minor-mode" code nil nil [291099 291403])
            ("define-minor-mode" code nil nil [291405 291713])
            ("define-minor-mode" code nil nil [291715 292711])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [292714 292845])
            ("blink-matching-paren" variable (:default-value t) nil [292847 293445])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [293447 293863])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [293865 294190])
            ("blink-matching-delay" variable (:default-value 1) nil [294192 294328])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [294330 294598])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [294600 295585])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [295587 295953])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [295955 296165])
            ("blink-matching-open" function (:user-visible-flag t) nil [296167 300731])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [300733 300922])
            ("blink-paren-post-self-insert-function" function nil nil [300924 301571])
            ("put" code nil nil [301573 301631])
            ("add-hook" code nil nil [301633 302012])
            ("keyboard-quit" function (:user-visible-flag t) nil [302190 302908])
            ("buffer-quit-function" variable nil nil [302910 303160])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [303162 303988])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [303990 304385])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [304389 304906])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [304908 306452])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [306454 306779])
            ("rfc822-goto-eoh" function nil nil [306781 307185])
            ("mail-encode-mml" variable nil nil [307227 307366])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [307368 310062])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [310064 310455])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [310457 310845])
            ("set-variable-value-history" variable nil nil [310849 311034])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [311036 314132])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map [9] (quote next-completion)) (define-key map [backtab] (quote previous-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [314187 314820])
            ("put" code nil nil [314888 314936])
            ("completion-reference-buffer" variable nil nil [314938 315167])
            ("completion-no-auto-exit" variable nil nil [315169 315350])
            ("completion-base-position" variable nil nil [315352 315722])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [315724 316023])
            ("completion-base-size" variable nil nil [316025 316480])
            ("make-obsolete-variable" code nil nil [316481 316560])
            ("delete-completion-window" function (:user-visible-flag t) nil [316562 316936])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [316938 317069])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [317071 318321])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [318323 320282])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [320366 321204])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [321206 321398])
            ("choose-completion-string-functions" variable nil nil [321400 322039])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [322041 325451])
            ("define-derived-mode" code nil nil [325453 325825])
            ("completion-list-mode-finish" function nil nil [325827 326023])
            ("add-hook" code nil nil [326025 326087])
            ("completion-show-help" variable (:default-value t) nil [326151 326302])
            ("completion-setup-function" function nil nil [326433 328415])
            ("add-hook" code nil nil [328417 328477])
            ("define-key" code nil nil [328479 328554])
            ("define-key" code nil nil [328555 328630])
            ("switch-to-completions" function (:user-visible-flag t) nil [328632 329173])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [329335 329578])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [329579 329832])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [329833 330086])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [330087 330340])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [330341 330598])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [330599 330847])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [330849 331913])
            ("define-key" code nil nil [331915 331986])
            ("define-key" code nil nil [331987 332058])
            ("define-key" code nil nil [332059 332129])
            ("define-key" code nil nil [332130 332199])
            ("define-key" code nil nil [332200 332271])
            ("define-key" code nil nil [332272 332345])
            ("mapc" code nil nil [332635 333230])
            ("clone-buffer-hook" variable nil nil [333282 333383])
            ("clone-indirect-buffer-hook" variable nil nil [333385 333504])
            ("clone-process" function (:arguments ("process" "newname")) nil [333506 335015])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [335118 338081])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [338084 339720])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [339723 340206])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [340254 341795])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [341797 342872])
            ("define-minor-mode" code nil nil [342874 346369])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [346372 346495])
            ("define-minor-mode" code nil nil [346497 347650])
            ("define-minor-mode" code nil nil [347652 348422])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [348425 348608])
            ("define-derived-mode" code nil nil [348610 348726])
            ("messages-buffer" function nil nil [348728 349015])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [349974 351400])
            ("bad-package-check" function (:arguments ("package")) nil [351402 351907])
            ("dolist" code nil nil [351909 352031])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [352684 355308])
            ("upcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [355374 355743])
            ("downcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [355745 356132])
            ("capitalize-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [356134 356535])
            ("simple" package nil nil [356540 356557]))          
      :file "simple.el.gz"
      :pointmax 356583
      :fsize 96871
      :lastmodtime '(22458 49977 0 0)
      :unmatched-syntax '((close-paren 1068 . 1069) (symbol 1033 . 1050) (open-paren 1032 . 1033)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4456 4473])
            ("timer" include nil nil [4475 4491])
            ("filenotify" include nil nil [4492 4513])
            ("auto-revert" customgroup (:user-visible-flag t) nil [4629 4858])
            ("auto-revert-mode" variable nil nil [4992 5144])
            ("put" code nil nil [5145 5187])
            ("auto-revert-tail-mode" variable nil nil [5189 5356])
            ("put" code nil nil [5357 5404])
            ("auto-revert-timer" variable nil nil [5406 5472])
            ("auto-revert-interval" variable (:default-value 5) nil [5474 6209])
            ("auto-revert-stop-on-user-input" variable (:default-value t) nil [6211 6743])
            ("auto-revert-verbose" variable (:default-value t) nil [6745 6946])
            ("auto-revert-mode-text" variable (:default-value " ARev") nil [6948 7239])
            ("auto-revert-tail-mode-text" variable (:default-value " Tail") nil [7241 7493])
            ("auto-revert-mode-hook" variable nil nil [7495 7692])
            ("global-auto-revert-mode-text" variable nil nil [7694 8001])
            ("global-auto-revert-mode-hook" variable nil nil [8003 8142])
            ("global-auto-revert-non-file-buffers" variable nil nil [8144 9073])
            ("global-auto-revert-ignore-modes" variable nil nil [9075 9232])
            ("auto-revert-load-hook" variable nil nil [9234 9386])
            ("auto-revert-check-vc-info" variable nil nil [9388 10434])
            ("defvar-local" code nil nil [10436 10618])
            ("auto-revert-remote-files" variable nil nil [10620 10764])
            ("auto-revert-use-notify" variable (:default-value t) nil [10766 11275])
            ("auto-revert-notify-exclude-dir-regexp" variable (:default-value (concat "^" (regexp-opt (quote ("/afs/" "/media/" "/mnt" "/net/" "/tmp_mnt/"))) (unless auto-revert-remote-files "\\|^/[^/|:][^/|]+:"))) nil [11277 11651])
            ("auto-revert-buffer-list" variable nil nil [11677 11939])
            ("auto-revert-remaining-buffers" variable nil nil [11941 12041])
            ("auto-revert-tail-pos" variable nil nil [12043 12114])
            ("add-hook" code nil nil [12116 12263])
            ("auto-revert-notify-watch-descriptor-hash-list" variable (:default-value (make-hash-table :test (quote equal))) nil [12265 12554])
            ("defvar-local" code nil nil [12556 12671])
            ("put" code nil nil [12672 12733])
            ("defvar-local" code nil nil [12735 12896])
            ("define-minor-mode" code nil nil [12928 13996])
            ("turn-on-auto-revert-mode" function nil nil [14014 14223])
            ("define-minor-mode" code nil nil [14241 16933])
            ("turn-on-auto-revert-tail-mode" function nil nil [16951 17189])
            ("define-minor-mode" code nil nil [17207 18530])
            ("auto-revert-set-timer" function (:user-visible-flag t) nil [18532 19146])
            ("auto-revert-notify-rm-watch" function nil nil [19148 19883])
            ("auto-revert-notify-add-watch" function nil nil [19885 21191])
            ("auto-revert-buffers-counter" variable (:default-value 1) nil [21723 21819])
            ("defvar-local" code nil nil [21820 22339])
            ("auto-revert-notify-handler" function (:arguments ("event")) nil [22341 25204])
            ("auto-revert-active-p" function nil nil [25206 25513])
            ("auto-revert-handler" function nil nil [25515 28408])
            ("auto-revert-tail-handler" function (:arguments ("size")) nil [28410 29071])
            ("auto-revert-buffers" function nil nil [29073 31834])
            ("autorevert" package nil nil [31849 31870])
            ("run-hooks" code nil nil [31872 31906]))          
      :file "autorevert.el.gz"
      :pointmax 31936
      :fsize 9089
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax '((close-paren 4473 . 4474) (symbol 4438 . 4455) (open-paren 4437 . 4438)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock-defaults" variable nil nil [1097 2953])
            ("put" code nil nil [2969 3018])
            ("make-variable-buffer-local" code nil nil [3019 3067])
            ("font-lock-function" variable (:default-value (quote font-lock-default-function)) nil [3069 3269])
            ("font-lock-major-mode" variable nil nil [3336 3365])
            ("define-minor-mode" code nil nil [3367 6245])
            ("font-lock-change-mode" function nil nil [6340 6394])
            ("font-lock-defontify" function nil nil [6396 6830])
            ("font-lock-set-defaults" variable nil nil [6832 6863])
            ("font-lock-default-function" function (:arguments ("mode")) nil [6864 7944])
            ("turn-on-font-lock" function nil nil [7946 8087])
            ("font-lock-global-modes" variable (:default-value t) nil [11012 11857])
            ("turn-on-font-lock-if-desired" function nil nil [11859 12173])
            ("define-globalized-minor-mode" code nil nil [12175 12486])
            ("font-core" package nil nil [12523 12543]))          
      :file "font-core.el.gz"
      :pointmax 12572
      :fsize 4670
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("wid-edit" include nil nil [6709 6728])
            ("highlight-changes" customgroup (:user-visible-flag t) nil [6794 6888])
            ("highlight-changes" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1")) (((class color)) (:foreground "red")) (t (:inverse-video t))))
                :type "face")
                nil [7283 7508])
            ("define-obsolete-face-alias" code nil nil [7509 7589])
            ("highlight-changes-delete" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1" :underline t)) (((class color)) (:foreground "red" :underline t)) (t (:inverse-video t))))
                :type "face")
                nil [7668 7927])
            ("define-obsolete-face-alias" code nil nil [7928 8022])
            ("define-obsolete-variable-alias" code nil nil [8088 8212])
            ("highlight-changes-colors" variable (:default-value (if (eq (frame-parameter nil (quote background-mode)) (quote light)) (quote ("magenta" "blue" "darkgreen" "chocolate" "sienna4" "NavyBlue")) (quote ("yellow" "magenta" "blue" "maroon" "firebrick" "green4" "DarkOrchid")))) nil [8214 8997])
            ("define-obsolete-variable-alias" code nil nil [9098 9216])
            ("highlight-changes-visibility-initial-state" variable (:default-value t) nil [9218 9594])
            ("define-obsolete-variable-alias" code nil nil [9730 9838])
            ("highlight-changes-visible-string" variable (:default-value " +Chg") nil [9840 10141])
            ("define-obsolete-variable-alias" code nil nil [10143 10254])
            ("highlight-changes-invisible-string" variable (:default-value " -Chg") nil [10256 10558])
            ("highlight-changes-global-modes" variable (:default-value t) nil [10560 11677])
            ("highlight-changes-global-changes-existing-buffers" variable nil nil [11679 12189])
            ("hilit-chg-list" variable nil nil [12223 12250])
            ("hilit-chg-string" variable (:default-value " ??") nil [12251 12282])
            ("make-variable-buffer-local" code nil nil [12284 12330])
            ("define-minor-mode" code nil nil [12367 14145])
            ("define-minor-mode" code nil nil [14163 14847])
            ("hilit-chg-cust-fix-changes-face-list" function (:arguments ("w" "_wc" "event")) nil [14850 16461])
            ("highlight-changes-face-list" variable nil nil [16464 17123])
            ("hilit-chg-map-changes" function (:arguments ("func" "start-position" "end-position")) nil [17126 17764])
            ("hilit-chg-display-changes" function (:arguments ("beg" "end")) nil [17767 18106])
            ("hilit-chg-make-ov" function (:arguments ("prop" "start" "end")) nil [18109 18944])
            ("hilit-chg-hide-changes" function (:arguments ("beg" "end")) nil [18946 19444])
            ("hilit-chg-fixup" function (:arguments ("beg" "end")) nil [19447 19767])
            ("highlight-changes-remove-highlight" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [19784 20110])
            ("hilit-chg-set-face-on-change" function (:arguments ("beg" "end" "leng-before" "no-property-change")) nil [20112 22834])
            ("hilit-chg-update" function nil nil [22836 23267])
            ("hilit-chg-set" function nil nil [23269 23679])
            ("hilit-chg-clear" function nil nil [23681 24388])
            ("highlight-changes-next-change" function (:user-visible-flag t) nil [24406 24969])
            ("highlight-changes-previous-change" function (:user-visible-flag t) nil [24987 25816])
            ("hilit-chg-make-list" function (:arguments ("force")) nil [25895 27213])
            ("hilit-chg-bump-change" function (:arguments ("prop" "start" "end")) nil [27215 27616])
            ("highlight-changes-rotate-faces" function (:user-visible-flag t) nil [27633 29765])
            ("highlight-markup-buffers" function (:arguments ("buf-a" "file-a" "buf-b" "file-b" "markup-a-only")) nil [29915 32278])
            ("highlight-compare-buffers" function
               (:user-visible-flag t
                :arguments ("buf-a" "buf-b"))
                nil [32295 33163])
            ("highlight-compare-with-file" function
               (:user-visible-flag t
                :arguments ("file-b"))
                nil [33180 34565])
            ("hilit-chg-get-diff-info" function (:arguments ("buf-a" "file-a" "buf-b" "file-b")) nil [34568 34989])
            ("hilit-chg-get-diff-list-hk" function nil nil [34992 36455])
            ("define-globalized-minor-mode" code nil nil [36545 36661])
            ("define-obsolete-function-alias" code nil nil [36663 36762])
            ("highlight-changes-mode-turn-on" function nil nil [36764 37529])
            ("hilit-chg-desktop-restore" function (:arguments ("desktop-buffer-locals")) nil [37629 37782])
            ("add-to-list" code nil nil [37784 37893])
            ("add-to-list" code nil nil [37895 37956])
            ("hilit-chg-unload-function" function nil nil [38338 38482])
            ("hilit-chg" package nil nil [38484 38504]))          
      :file "hilit-chg.el.gz"
      :pointmax 38533
      :fsize 11071
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defvar-local" code nil nil [2860 2958])
            ("defvar-local" code nil nil [2960 3072])
            ("global-hl-line-overlays" variable nil nil [3074 3276])
            ("hl-line" customgroup (:user-visible-flag t) nil [3278 3372])
            ("hl-line" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [3374 3523])
            ("hl-line-face" variable (:default-value (quote hl-line)) nil [3525 3954])
            ("hl-line-sticky-flag" variable (:default-value t) nil [3956 4392])
            ("global-hl-line-sticky-flag" variable nil nil [4394 4763])
            ("hl-line-range-function" variable nil nil [4765 5152])
            ("define-minor-mode" code nil nil [5169 6645])
            ("hl-line-make-overlay" function nil nil [6647 6829])
            ("hl-line-highlight" function nil nil [6831 7269])
            ("hl-line-unhighlight" function nil nil [7271 7419])
            ("define-minor-mode" code nil nil [7436 8628])
            ("global-hl-line-highlight" function nil nil [8630 9230])
            ("global-hl-line-unhighlight" function nil nil [9232 9408])
            ("global-hl-line-unhighlight-all" function nil nil [9410 9704])
            ("hl-line-move" function (:arguments ("overlay")) nil [9706 10248])
            ("hl-line-unload-function" function nil nil [10250 10512])
            ("hl-line" package nil nil [10514 10532]))          
      :file "hl-line.el.gz"
      :pointmax 10559
      :fsize 3152
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("linum-version" variable
               (:constant-flag t
                :default-value "0.9x")
                nil [1148 1179])
            ("linum-overlays" variable nil nil [1181 1240])
            ("linum-available" variable nil nil [1241 1301])
            ("linum-before-numbering-hook" variable nil nil [1302 1405])
            ("mapc" code nil nil [1407 1476])
            ("linum" customgroup (:user-visible-flag t) nil [1478 1562])
            ("linum-format" variable (:default-value (quote dynamic)) nil [1564 2039])
            ("linum" variable
               (:default-value (quote ((t :inherit (shadow default))))
                :type "face")
                nil [2041 2167])
            ("linum-eager" variable (:default-value t) nil [2169 2430])
            ("linum-delay" variable nil nil [2432 2552])
            ("define-minor-mode" code nil nil [2569 4411])
            ("define-globalized-minor-mode" code nil nil [4428 4496])
            ("linum-on" function nil nil [4498 4561])
            ("linum-delete-overlays" function nil nil [4563 4846])
            ("linum-update-current" function nil nil [4848 4961])
            ("linum-update" function (:arguments ("buffer")) nil [4963 5378])
            ("declare-function" code nil nil [5414 5474])
            ("linum--face-width" function (:arguments ("face")) nil [5476 5654])
            ("linum-update-window" function (:arguments ("win")) nil [5656 7878])
            ("linum-after-change" function (:arguments ("beg" "end" "_len")) nil [7880 8148])
            ("linum-after-scroll" function (:arguments ("win" "_start")) nil [8150 8226])
            ("linum-schedule" function nil nil [8291 8445])
            ("linum-unload-function" function nil nil [8560 8686])
            ("linum" package nil nil [8688 8704]))          
      :file "linum.el.gz"
      :pointmax 8729
      :fsize 2987
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock" include nil nil [3639 3659])
            ("hi-lock" customgroup (:user-visible-flag t) nil [3661 3836])
            ("hi-lock-file-patterns-range" variable (:default-value 10000) nil [3838 4165])
            ("hi-lock-highlight-range" variable (:default-value 200000) nil [4167 4622])
            ("hi-lock-exclude-modes" variable (:default-value (quote (rmail-mode mime/viewer-mode gnus-article-mode))) nil [4624 4880])
            ("hi-lock-file-patterns-policy" variable (:default-value (quote ask)) nil [4882 5438])
            ("put" code nil nil [5473 5532])
            ("hi-lock-auto-select-face" variable nil nil [5534 5771])
            ("hi-lock-faces" customgroup (:user-visible-flag t) nil [5773 5858])
            ("hi-yellow" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "yellow1" :foreground "black")) (((background dark)) (:background "yellow" :foreground "black")) (((min-colors 88)) (:background "yellow1")) (t (:background "yellow"))))
                :type "face")
                nil [5860 6178])
            ("hi-pink" variable
               (:default-value (quote ((((background dark)) (:background "pink" :foreground "black")) (t (:background "pink"))))
                :type "face")
                nil [6180 6345])
            ("hi-green" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "light green" :foreground "black")) (((background dark)) (:background "green" :foreground "black")) (((min-colors 88)) (:background "light green")) (t (:background "green"))))
                :type "face")
                nil [6347 6662])
            ("hi-blue" variable
               (:default-value (quote ((((background dark)) (:background "light blue" :foreground "black")) (t (:background "light blue"))))
                :type "face")
                nil [6664 6841])
            ("hi-black-b" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [6843 6938])
            ("hi-blue-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "blue1")) (t (:weight bold :foreground "blue"))))
                :type "face")
                nil [6940 7112])
            ("hi-green-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "green1")) (t (:weight bold :foreground "green"))))
                :type "face")
                nil [7114 7289])
            ("hi-red-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "red1")) (t (:weight bold :foreground "red"))))
                :type "face")
                nil [7291 7460])
            ("hi-black-hb" variable
               (:default-value (quote ((t (:weight bold :height 1.67 :inherit variable-pitch))))
                :type "face")
                nil [7462 7595])
            ("defvar-local" code nil nil [7597 7701])
            ("put" code nil nil [7702 7749])
            ("defvar-local" code nil nil [7751 7864])
            ("put" code nil nil [7865 7919])
            ("define-obsolete-variable-alias" code nil nil [7921 8037])
            ("hi-lock-face-defaults" variable (:default-value (quote ("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))) nil [8038 8236])
            ("define-obsolete-variable-alias" code nil nil [8238 8381])
            ("hi-lock-file-patterns-prefix" variable (:default-value "Hi-lock") nil [8383 8493])
            ("hi-lock-archaic-interface-message-used" variable nil nil [8495 8835])
            ("hi-lock-archaic-interface-deduce" variable nil nil [8837 9063])
            ("hi-lock-menu" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key-after map [highlight-regexp] (quote (menu-item "Highlight Regexp..." highlight-regexp :help "Highlight text matching PATTERN (a regexp)."))) (define-key-after map [highlight-phrase] (quote (menu-item "Highlight Phrase..." highlight-phrase :help "Highlight text matching PATTERN (a regexp processed to match phrases)."))) (define-key-after map [highlight-lines-matching-regexp] (quote (menu-item "Highlight Lines..." highlight-lines-matching-regexp :help "Highlight lines containing match of PATTERN (a regexp)."))) (define-key-after map [highlight-symbol-at-point] (quote (menu-item "Highlight Symbol at Point" highlight-symbol-at-point :help "Highlight symbol found near point without prompting."))) (define-key-after map [unhighlight-regexp] (quote (menu-item "Remove Highlighting..." unhighlight-regexp :help "Remove previously entered highlighting pattern." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-write-interactive-patterns] (quote (menu-item "Patterns to Buffer" hi-lock-write-interactive-patterns :help "Insert interactively added REGEXPs into buffer at point." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-find-patterns] (quote (menu-item "Patterns from Buffer" hi-lock-find-patterns :help "Use patterns (if any) near top of buffer."))) map)) nil [9065 10581])
            ("hi-lock-map" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key map "wi" (quote hi-lock-find-patterns)) (define-key map "wl" (quote highlight-lines-matching-regexp)) (define-key map "wp" (quote highlight-phrase)) (define-key map "wh" (quote highlight-regexp)) (define-key map "w." (quote highlight-symbol-at-point)) (define-key map "wr" (quote unhighlight-regexp)) (define-key map "wb" (quote hi-lock-write-interactive-patterns)) map)) nil [10583 11068])
            ("define-minor-mode" code nil nil [11107 15704])
            ("define-globalized-minor-mode" code nil nil [15721 15831])
            ("turn-on-hi-lock-if-enabled" function nil nil [15833 15992])
            ("defalias" code nil nil [16009 16078])
            ("hi-lock-line-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [16094 16923])
            ("defalias" code nil nil [16941 16990])
            ("hi-lock-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [17006 17635])
            ("defalias" code nil nil [17652 17708])
            ("hi-lock-face-phrase-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [17724 18598])
            ("defalias" code nil nil [18615 18682])
            ("hi-lock-face-symbol-at-point" function (:user-visible-flag t) nil [18698 19385])
            ("hi-lock-keyword->face" function (:arguments ("keyword")) nil [19387 19457])
            ("declare-function" code nil nil [19507 19563])
            ("hi-lock--regexps-at-point" function nil nil [19565 21210])
            ("defvar-local" code nil nil [21212 21392])
            ("defalias" code nil nil [21409 21462])
            ("hi-lock-unface-buffer" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [21478 24549])
            ("hi-lock-write-interactive-patterns" function (:user-visible-flag t) nil [24566 25324])
            ("hi-lock-process-phrase" function (:arguments ("phrase")) nil [25355 26150])
            ("hi-lock-regexp-okay" function (:arguments ("regexp")) nil [26152 26499])
            ("hi-lock-read-face-name" function nil nil [26501 27655])
            ("hi-lock-set-pattern" function (:arguments ("regexp" "face")) nil [27657 29067])
            ("hi-lock-set-file-patterns" function (:arguments ("patterns")) nil [29069 29397])
            ("hi-lock-find-patterns" function (:user-visible-flag t) nil [29399 30827])
            ("hi-lock-font-lock-hook" function nil nil [30829 31053])
            ("hi-lock--hashcons-hash" variable (:default-value (make-hash-table :test (quote equal) :weakness t)) nil [31055 31173])
            ("hi-lock--hashcons" function (:arguments ("string")) nil [31175 31351])
            ("hi-lock-unload-function" function nil nil [31353 31485])
            ("hi-lock" package nil nil [31487 31505]))          
      :file "hi-lock.el.gz"
      :pointmax 31532
      :fsize 8725
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("whitespace" customgroup (:user-visible-flag t) nil [13151 13340])
            ("whitespace-style" variable (:default-value (quote (face tabs spaces trailing lines space-before-tab newline indentation empty space-after-tab space-mark tab-mark newline-mark))) nil [13343 19840])
            ("whitespace-space" variable (:default-value (quote whitespace-space)) nil [19842 19984])
            ("make-obsolete-variable" code nil nil [19985 20058])
            ("whitespace-space" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey20" :foreground "darkgray") (((class color) (background light)) :background "LightYellow" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [20061 20358])
            ("whitespace-hspace" variable (:default-value (quote whitespace-hspace)) nil [20361 20510])
            ("make-obsolete-variable" code nil nil [20511 20585])
            ("whitespace-hspace" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey24" :foreground "darkgray") (((class color) (background light)) :background "LemonChiffon3" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [20587 20912])
            ("whitespace-tab" variable (:default-value (quote whitespace-tab)) nil [20915 21049])
            ("make-obsolete-variable" code nil nil [21050 21121])
            ("whitespace-tab" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey22" :foreground "darkgray") (((class color) (background light)) :background "beige" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [21123 21406])
            ("whitespace-newline" variable (:default-value (quote whitespace-newline)) nil [21409 21626])
            ("make-obsolete-variable" code nil nil [21627 21702])
            ("whitespace-newline" variable
               (:default-value (quote ((default :weight normal) (((class color) (background dark)) :foreground "darkgray") (((class color) (min-colors 88) (background light)) :foreground "lightgray") (((class color) (background light)) :foreground "brown") (t :underline t)))
                :type "face")
                nil [21704 22227])
            ("whitespace-trailing" variable (:default-value (quote whitespace-trailing)) nil [22230 22390])
            ("make-obsolete-variable" code nil nil [22391 22467])
            ("whitespace-trailing" variable
               (:default-value (quote ((default :weight bold) (((class mono)) :inverse-video t :underline t) (t :background "red1" :foreground "yellow")))
                :type "face")
                nil [22469 22714])
            ("whitespace-line" variable (:default-value (quote whitespace-line)) nil [22717 22894])
            ("make-obsolete-variable" code nil nil [22895 22967])
            ("whitespace-line" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "gray20" :foreground "violet")))
                :type "face")
                nil [22969 23204])
            ("whitespace-space-before-tab" variable (:default-value (quote whitespace-space-before-tab)) nil [23207 23393])
            ("make-obsolete-variable" code nil nil [23394 23502])
            ("whitespace-space-before-tab" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "DarkOrange" :foreground "firebrick")))
                :type "face")
                nil [23504 23730])
            ("whitespace-indentation" variable (:default-value (quote whitespace-indentation)) nil [23733 23924])
            ("make-obsolete-variable" code nil nil [23925 24004])
            ("whitespace-indentation" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [24006 24243])
            ("whitespace-big-indent" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "red" :foreground "firebrick")))
                :type "face")
                nil [24245 24456])
            ("whitespace-empty" variable (:default-value (quote whitespace-empty)) nil [24459 24640])
            ("make-obsolete-variable" code nil nil [24641 24714])
            ("whitespace-empty" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [24716 24955])
            ("whitespace-space-after-tab" variable (:default-value (quote whitespace-space-after-tab)) nil [24958 25150])
            ("make-obsolete-variable" code nil nil [25151 25258])
            ("whitespace-space-after-tab" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [25260 25490])
            ("whitespace-hspace-regexp" variable (:default-value "\\( +\\)") nil [25493 26141])
            ("whitespace-space-regexp" variable (:default-value "\\( +\\)") nil [26144 26837])
            ("whitespace-tab-regexp" variable (:default-value "\\(	+\\)") nil [26840 27526])
            ("whitespace-trailing-regexp" variable (:default-value "\\([	  ]+\\)$") nil [27529 27982])
            ("whitespace-space-before-tab-regexp" variable (:default-value "\\( +\\)\\(	+\\)") nil [27985 28267])
            ("whitespace-indentation-regexp" variable (:default-value (quote ("^	*\\(\\( \\{%d\\}\\)+\\)[^
	]" . "^ *\\(	+\\)[^
]"))) nil [28270 28767])
            ("whitespace-empty-at-bob-regexp" variable (:default-value "^\\(\\([ 	]*
\\)+\\)") nil [28770 29025])
            ("whitespace-empty-at-eob-regexp" variable (:default-value "^\\([ 	
]+\\)") nil [29028 29264])
            ("whitespace-space-after-tab-regexp" variable (:default-value (quote ("	+\\(\\( \\{%d\\}\\)+\\)" . "\\(	+\\) +"))) nil [29267 29726])
            ("whitespace-big-indent-regexp" variable (:default-value "^\\(\\(?:	\\{4,\\}\\| \\{32,\\}\\)[	 ]*\\)") nil [29728 30260])
            ("whitespace-line-column" variable (:default-value 80) nil [30263 30656])
            ("whitespace-display-mappings" variable (:default-value (quote ((space-mark 32 [183] [46]) (space-mark 160 [164] [95]) (newline-mark 10 [36 10]) (tab-mark 9 [187 9] [92 9])))) nil [30716 32836])
            ("whitespace-global-modes" variable (:default-value t) nil [32839 33746])
            ("whitespace-action" variable nil nil [33749 34989])
            ("define-minor-mode" code nil nil [35113 35776])
            ("define-minor-mode" code nil nil [35794 36626])
            ("define-minor-mode" code nil nil [36751 38000])
            ("whitespace-enable-predicate" variable (:default-value (lambda nil (and (cond ((eq whitespace-global-modes t)) ((listp whitespace-global-modes) (if (eq (car-safe whitespace-global-modes) (quote not)) (not (memq major-mode (cdr whitespace-global-modes))) (memq major-mode whitespace-global-modes))) (t nil)) (not noninteractive) (not (eq (aref (buffer-name) 0) 32)) (or (not (eq (aref (buffer-name) 0) 42)) (string= (buffer-name) "*scratch*"))))) nil [38002 39020])
            ("whitespace-turn-on-if-enabled" function nil nil [39022 39134])
            ("define-minor-mode" code nil nil [39151 40071])
            ("whitespace-style-value-list" variable
               (:constant-flag t
                :default-value (quote (face tabs spaces trailing lines lines-tail newline empty indentation indentation::tab indentation::space big-indent space-after-tab space-after-tab::tab space-after-tab::space space-before-tab space-before-tab::tab space-before-tab::space help-newline tab-mark space-mark newline-mark)))
                nil [40176 40692])
            ("whitespace-toggle-option-alist" variable
               (:constant-flag t
                :default-value (quote ((102 . face) (116 . tabs) (115 . spaces) (114 . trailing) (108 . lines) (76 . lines-tail) (110 . newline) (101 . empty) (9 . indentation) (73 . indentation::tab) (105 . indentation::space) (20 . big-indent) (1 . space-after-tab) (65 . space-after-tab::tab) (97 . space-after-tab::space) (2 . space-before-tab) (66 . space-before-tab::tab) (98 . space-before-tab::space) (84 . tab-mark) (83 . space-mark) (78 . newline-mark) (120 . whitespace-style))))
                nil [40695 41558])
            ("whitespace-active-style" variable nil nil [41561 41648])
            ("whitespace-indent-tabs-mode" variable (:default-value indent-tabs-mode) nil [41650 41754])
            ("whitespace-tab-width" variable (:default-value tab-width) nil [41756 41839])
            ("whitespace-point" variable (:default-value (point)) nil [41841 41979])
            ("defvar-local" code nil nil [41980 42082])
            ("whitespace-font-lock-refontify" variable nil nil [42084 42244])
            ("whitespace-bob-marker" variable nil nil [42246 42388])
            ("whitespace-eob-marker" variable nil nil [42390 42532])
            ("whitespace-buffer-changed" variable nil nil [42534 42714])
            ("whitespace-toggle-options" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [42732 45702])
            ("whitespace-toggle-style" variable nil nil [45705 45797])
            ("global-whitespace-toggle-options" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [45815 48869])
            ("whitespace-cleanup" function (:user-visible-flag t) nil [48990 52373])
            ("whitespace-ensure-local-variables" function nil nil [52375 52645])
            ("whitespace-cleanup-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [52662 57481])
            ("whitespace-replace-action" function (:arguments ("action" "rstart" "rend" "regexp" "index")) nil [57511 57898])
            ("whitespace-regexp" function (:arguments ("regexp" "kind")) nil [58002 58302])
            ("whitespace-indentation-regexp" function (:arguments ("kind")) nil [58305 58494])
            ("whitespace-space-after-tab-regexp" function (:arguments ("kind")) nil [58497 58698])
            ("whitespace-report-list" variable
               (:constant-flag t
                :default-value (list (cons (quote empty) whitespace-empty-at-bob-regexp) (cons (quote empty) whitespace-empty-at-eob-regexp) (cons (quote trailing) whitespace-trailing-regexp) (cons (quote indentation) nil) (cons (quote indentation::tab) nil) (cons (quote indentation::space) nil) (cons (quote space-before-tab) whitespace-space-before-tab-regexp) (cons (quote space-before-tab::tab) whitespace-space-before-tab-regexp) (cons (quote space-before-tab::space) whitespace-space-before-tab-regexp) (cons (quote space-after-tab) nil) (cons (quote space-after-tab::tab) nil) (cons (quote space-after-tab::space) nil)))
                nil [58701 59448])
            ("whitespace-report-text" variable
               (:constant-flag t
                :default-value (quote (" Whitespace Report

 Current Setting                       Whitespace Problem

 empty                    []     []  empty lines at beginning of buffer
 empty                    []     []  empty lines at end of buffer
 trailing                 []     []  SPACEs or TABs at end of line
 indentation              []     []  8 or more SPACEs at beginning of line
 indentation::tab         []     []  8 or more SPACEs at beginning of line
 indentation::space       []     []  TABs at beginning of line
 space-before-tab         []     []  SPACEs before TAB
 space-before-tab::tab    []     []  SPACEs before TAB: SPACEs
 space-before-tab::space  []     []  SPACEs before TAB: TABs
 space-after-tab          []     []  8 or more SPACEs after TAB
 space-after-tab::tab     []     []  8 or more SPACEs after TAB: SPACEs
 space-after-tab::space   []     []  8 or more SPACEs after TAB: TABs

 indent-tabs-mode =
 tab-width        = 

" . " Whitespace Report

 Current Setting                       Whitespace Problem

 empty                    []     []  empty lines at beginning of buffer
 empty                    []     []  empty lines at end of buffer
 trailing                 []     []  SPACEs or TABs at end of line
 indentation              []     []  TABs at beginning of line
 indentation::tab         []     []  8 or more SPACEs at beginning of line
 indentation::space       []     []  TABs at beginning of line
 space-before-tab         []     []  SPACEs before TAB
 space-before-tab::tab    []     []  SPACEs before TAB: SPACEs
 space-before-tab::space  []     []  SPACEs before TAB: TABs
 space-after-tab          []     []  8 or more SPACEs after TAB
 space-after-tab::tab     []     []  8 or more SPACEs after TAB: SPACEs
 space-after-tab::space   []     []  8 or more SPACEs after TAB: TABs

 indent-tabs-mode =
 tab-width        = 

")))
                nil [59451 61616])
            ("whitespace-report-buffer-name" variable
               (:constant-flag t
                :default-value "*Whitespace Report*")
                nil [61619 61730])
            ("whitespace-report" function
               (:user-visible-flag t
                :arguments ("force" "report-if-bogus"))
                nil [61748 62037])
            ("whitespace-report-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "force" "report-if-bogus"))
                nil [62055 65867])
            ("whitespace-font-lock-keywords" variable nil nil [65968 66089])
            ("whitespace-help-text" variable
               (:constant-flag t
                :default-value " Whitespace Toggle Options                  | scroll up  :  SPC   or > |
                                            | scroll down:  M-SPC or < |
 FACES                                      \\__________________________/
 []  f   - toggle face visualization
 []  t   - toggle TAB visualization
 []  s   - toggle SPACE and HARD SPACE visualization
 []  r   - toggle trailing blanks visualization
 []  l   - toggle \"long lines\" visualization
 []  L   - toggle \"long lines\" tail visualization
 []  n   - toggle NEWLINE visualization
 []  e   - toggle empty line at bob and/or eob visualization
 []  C-i - toggle indentation SPACEs visualization (via `indent-tabs-mode')
 []  I   - toggle indentation SPACEs visualization
 []  i   - toggle indentation TABs visualization
 []  C-t - toggle big indentation visualization
 []  C-a - toggle SPACEs after TAB visualization (via `indent-tabs-mode')
 []  A   - toggle SPACEs after TAB: SPACEs visualization
 []  a   - toggle SPACEs after TAB: TABs visualization
 []  C-b - toggle SPACEs before TAB visualization (via `indent-tabs-mode')
 []  B   - toggle SPACEs before TAB: SPACEs visualization
 []  b   - toggle SPACEs before TAB: TABs visualization

 DISPLAY TABLE
 []  T - toggle TAB visualization
 []  S - toggle SPACE and HARD SPACE visualization
 []  N - toggle NEWLINE visualization

      x - restore `whitespace-style' value

      ? - display this text

")
                nil [66092 67578])
            ("whitespace-help-buffer-name" variable
               (:constant-flag t
                :default-value "*Whitespace Toggle Options*")
                nil [67581 67700])
            ("whitespace-insert-value" function (:arguments ("value")) nil [67703 67860])
            ("whitespace-mark-x" function (:arguments ("nchars" "condition")) nil [67863 68035])
            ("whitespace-insert-option-mark" function (:arguments ("the-list" "the-value")) nil [68038 68356])
            ("whitespace-help-on" function (:arguments ("style")) nil [68359 68771])
            ("whitespace-display-window" function (:arguments ("buffer")) nil [68774 69198])
            ("whitespace-kill-buffer" function (:arguments ("buffer-name")) nil [69201 69424])
            ("whitespace-help-off" function nil nil [69427 69579])
            ("whitespace-help-scroll" function (:arguments ("up")) nil [69582 69996])
            ("whitespace-interactive-char" function (:arguments ("local-p")) nil [69999 72460])
            ("whitespace-toggle-list" function (:arguments ("local-p" "arg" "the-list")) nil [72497 73396])
            ("whitespace-display-table" variable nil nil [73399 73476])
            ("whitespace-display-table-was-local" variable nil nil [73478 73600])
            ("whitespace-turn-on" function nil nil [73602 74299])
            ("whitespace-turn-off" function nil nil [74302 74533])
            ("whitespace-style-face-p" function nil nil [74536 75697])
            ("whitespace-color-on" function nil nil [75700 80943])
            ("whitespace-color-off" function nil nil [80946 81349])
            ("whitespace-point--used" function (:arguments ("start" "end")) nil [81351 81677])
            ("whitespace-point--flush-used" function (:arguments ("limit")) nil [81679 82211])
            ("whitespace-trailing-regexp" function (:arguments ("limit")) nil [82213 82645])
            ("whitespace-empty-at-bob-regexp" function (:arguments ("limit")) nil [82648 83836])
            ("whitespace-looking-back" function (:arguments ("regexp" "limit")) nil [83839 84027])
            ("whitespace-empty-at-eob-regexp" function (:arguments ("limit")) nil [84030 85451])
            ("whitespace-buffer-changed" function (:arguments ("_beg" "_end")) nil [85454 85587])
            ("whitespace-post-command-hook" function nil nil [85590 88106])
            ("whitespace-style-mark-p" function nil nil [88239 88490])
            ("whitespace-char-valid-p" function (:arguments ("char")) nil [88493 88616])
            ("whitespace-display-vector-p" function (:arguments ("vec")) nil [88619 88873])
            ("whitespace-display-char-on" function nil nil [88876 90414])
            ("whitespace-display-char-off" function nil nil [90417 90711])
            ("whitespace-action-when-on" function nil nil [90798 91041])
            ("whitespace-write-file-hook" function nil nil [91044 91424])
            ("whitespace-warn-read-only" function (:arguments ("msg")) nil [91458 91643])
            ("whitespace-unload-function" function nil nil [91720 91988])
            ("whitespace" package nil nil [92025 92046])
            ("run-hooks" code nil nil [92049 92082]))          
      :file "whitespace.el.gz"
      :pointmax 92113
      :fsize 18081
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reveal" customgroup (:user-visible-flag t) nil [1864 1942])
            ("reveal-around-mark" variable (:default-value t) nil [1944 2054])
            ("reveal-open-spots" variable nil nil [2056 2180])
            ("make-variable-buffer-local" code nil nil [2181 2228])
            ("reveal-last-tick" variable nil nil [2230 2259])
            ("make-variable-buffer-local" code nil nil [2260 2306])
            ("reveal-post-command" function nil nil [2324 3721])
            ("reveal-open-new-overlays" function (:arguments ("old-ols")) nil [3723 5912])
            ("reveal-close-old-overlays" function (:arguments ("old-ols")) nil [5914 8233])
            ("reveal-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap move-beginning-of-line] (quote beginning-of-line)) (define-key map [remap move-end-of-line] (quote end-of-line)) map)) nil [8235 8550])
            ("define-minor-mode" code nil nil [8567 9255])
            ("define-minor-mode" code nil nil [9272 9891])
            ("reveal" package nil nil [9893 9910]))          
      :file "reveal.el.gz"
      :pointmax 9936
      :fsize 3230
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1049 1066])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1069 1183])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1185 1375])
            ("only-global-abbrevs" variable nil nil [1377 1628])
            ("define-minor-mode" code nil nil [1630 2058])
            ("put" code nil nil [2060 2109])
            ("edit-abbrevs-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote abbrev-edit-save-buffer)) (define-key map "" (quote abbrev-edit-save-to-file)) (define-key map "" (quote edit-abbrevs-redefine)) map)) nil [2113 2393])
            ("define-obsolete-variable-alias" code nil nil [2394 2476])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2478 2649])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2651 2986])
            ("insert-abbrevs" function (:user-visible-flag t) nil [2988 3274])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3276 3574])
            ("abbrev-table-name" function (:arguments ("table")) nil [3576 3862])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3864 4750])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4752 5695])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5697 5892])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5894 6892])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [6894 7411])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7413 7738])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7740 9499])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9501 9821])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [9823 10056])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10060 10600])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10602 11092])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [11094 11687])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11689 12120])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12122 12465])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12467 13078])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13080 13741])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13743 14438])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [14464 14617])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [14619 14844])
            ("defalias" code nil nil [14846 14935])
            ("defalias" code nil nil [14937 15107])
            ("abbrev-table-name-list" variable (:default-value (quote (fundamental-mode-abbrev-table global-abbrev-table))) nil [15163 15304])
            ("make-abbrev-table" function (:arguments ("props")) nil [15306 16097])
            ("abbrev-table-p" function (:arguments ("object")) nil [16099 16268])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [16270 16734])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [16736 16983])
            ("abbrev-minor-mode-table-alist" variable nil nil [16985 17240])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [17242 17517])
            ("abbrevs-changed" variable nil nil [17519 17667])
            ("abbrev-all-caps" variable nil nil [17669 17810])
            ("abbrev-start-location" variable nil nil [17812 18014])
            ("abbrev-start-location-buffer" variable nil nil [18016 18194])
            ("last-abbrev" variable nil nil [18196 18293])
            ("last-abbrev-text" variable nil nil [18295 18425])
            ("last-abbrev-location" variable nil nil [18427 18517])
            ("pre-abbrev-expand-hook" variable nil nil [18694 18969])
            ("make-obsolete-variable" code nil nil [18970 19049])
            ("clear-abbrev-table" function (:arguments ("table")) nil [19051 19673])
            ("define-abbrev" function (:arguments ("table" "name" "expansion" "hook" "props")) nil [19675 22811])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [22813 23556])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23558 23916])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23918 24340])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [24342 25389])
            ("abbrev--symbol" function (:arguments ("abbrev" "table")) nil [25392 26340])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [26342 27036])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [27039 27299])
            ("abbrev--before-point" function nil nil [27302 29886])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [29888 32932])
            ("abbrev-expand-functions" variable nil nil [32934 33020])
            ("make-obsolete-variable" code nil nil [33021 33101])
            ("abbrev-expand-function" variable (:default-value (function abbrev--default-expand)) nil [33103 33306])
            ("expand-abbrev" function (:user-visible-flag t) nil [33308 33773])
            ("abbrev--default-expand" function nil nil [33775 35202])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [35204 36102])
            ("abbrev--write" function (:arguments ("sym")) nil [36104 36559])
            ("abbrev--describe" function (:arguments ("sym")) nil [36561 36955])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [36957 37998])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [38000 40293])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [40295 41111])
            ("define-derived-mode" code nil nil [41206 41336])
            ("abbrev" package nil nil [41338 41355]))          
      :file "abbrev.el.gz"
      :pointmax 41381
      :fsize 12053
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax '((close-paren 1066 . 1067) (symbol 1031 . 1048) (open-paren 1030 . 1031)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_arglist" "_fileonly")) nil [1096 2616])
            ("defalias" code nil nil [2645 2666])
            ("noreturn" function (:arguments ("form")) nil [2668 2872])
            ("1value" function (:arguments ("form")) nil [2874 3112])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3114 3574])
            ("lambda" function (:arguments ("cdr")) nil [3576 4734])
            ("setq-local" function (:arguments ("var" "val")) nil [4736 4948])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [4950 5391])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5393 5770])
            ("push" function (:arguments ("newelt" "place")) nil [5772 6366])
            ("pop" function (:arguments ("place")) nil [6368 7225])
            ("when" function (:arguments ("cond" "body")) nil [7227 7515])
            ("unless" function (:arguments ("cond" "body")) nil [7517 7803])
            ("dolist" function (:arguments ("spec" "body")) nil [7805 9084])
            ("dotimes" function (:arguments ("spec" "body")) nil [9086 10551])
            ("declare" function (:arguments ("_specs")) nil [10553 11128])
            ("ignore-errors" function (:arguments ("body")) nil [11130 11437])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11468 11616])
            ("error" function (:arguments ("args")) nil [11673 12189])
            ("user-error" function (:arguments ("format" "args")) nil [12191 12851])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [12853 13766])
            ("frame-configuration-p" function (:arguments ("object")) nil [13880 14135])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [14329 14909])
            ("caar" function (:arguments ("x")) nil [14911 15038])
            ("cadr" function (:arguments ("x")) nil [15040 15167])
            ("cdar" function (:arguments ("x")) nil [15169 15296])
            ("cddr" function (:arguments ("x")) nil [15298 15425])
            ("last" function (:arguments ("list" "n")) nil [15427 15844])
            ("butlast" function (:arguments ("list" "n")) nil [15846 16074])
            ("nbutlast" function (:arguments ("list" "n")) nil [16076 16353])
            ("zerop" function (:arguments ("number")) nil [16355 16585])
            ("delete-dups" function (:arguments ("list")) nil [16587 17374])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [17451 17909])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [17911 19918])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [19920 20669])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [20709 21509])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [21511 21833])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [21835 22103])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [22105 22540])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [22542 23026])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [23028 23521])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove")) nil [23523 23983])
            ("remove" function (:arguments ("elt" "seq")) nil [23985 24338])
            ("remq" function (:arguments ("elt" "list")) nil [24340 24671])
            ("kbd" function (:arguments ("keys")) nil [24696 25076])
            ("put" code nil nil [25077 25095])
            ("undefined" function (:user-visible-flag t) nil [25097 25552])
            ("put" code nil nil [25647 25682])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [25684 26248])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [26250 26902])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [26904 28965])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [28967 29647])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [29649 30119])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [30173 30773])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [30775 31241])
            ("keymap-canonicalize" function (:arguments ("map")) nil [31243 33112])
            ("put" code nil nil [33114 33171])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [33173 33548])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [33579 34325])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [34327 35131])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [35133 35329])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [35331 35560])
            ("key-substitution-in-progress" variable nil nil [35616 35709])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [35711 37095])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [37097 38760])
            ("global-map" variable nil nil [38909 39083])
            ("esc-map" variable nil nil [39085 39225])
            ("ctl-x-map" variable nil nil [39227 39362])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [39364 39442])
            ("defalias" code nil nil [39443 39481])
            ("define-key" code nil nil [39482 39524])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [39526 39598])
            ("defalias" code nil nil [39599 39637])
            ("define-key" code nil nil [39638 39680])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [39720 39775])
            ("listify-key-sequence" function (:arguments ("key")) nil [39777 40015])
            ("eventp" function (:arguments ("obj")) nil [40017 40218])
            ("event-modifiers" function (:arguments ("event")) nil [40220 41514])
            ("event-basic-type" function (:arguments ("event")) nil [41516 42284])
            ("mouse-movement-p" function (:arguments ("object")) nil [42286 42419])
            ("mouse-event-p" function (:arguments ("object")) nil [42421 42639])
            ("event-start" function (:arguments ("event")) nil [42641 43801])
            ("event-end" function (:arguments ("event")) nil [43803 44121])
            ("event-click-count" function (:arguments ("event")) nil [44123 44333])
            ("posnp" function (:arguments ("obj")) nil [44390 45038])
            ("posn-window" function (:arguments ("position")) nil [45072 45254])
            ("posn-area" function (:arguments ("position")) nil [45256 45580])
            ("posn-point" function (:arguments ("position")) nil [45582 46048])
            ("posn-set-point" function (:arguments ("position")) nil [46050 46370])
            ("posn-x-y" function (:arguments ("position")) nil [46372 46625])
            ("declare-function" code nil nil [46627 46693])
            ("posn-col-row" function (:arguments ("position")) nil [46695 48513])
            ("posn-actual-col-row" function (:arguments ("position")) nil [48515 49103])
            ("posn-timestamp" function (:arguments ("position")) nil [49105 49293])
            ("posn-string" function (:arguments ("position")) nil [49295 49654])
            ("posn-image" function (:arguments ("position")) nil [49656 49896])
            ("posn-object" function (:arguments ("position")) nil [49898 50267])
            ("posn-object-x-y" function (:arguments ("position")) nil [50269 50556])
            ("posn-object-width-height" function (:arguments ("position")) nil [50558 50818])
            ("define-obsolete-function-alias" code nil nil [50861 50926])
            ("define-obsolete-function-alias" code nil nil [50927 51000])
            ("define-obsolete-function-alias" code nil nil [51001 51065])
            ("define-obsolete-function-alias" code nil nil [51066 51137])
            ("define-obsolete-function-alias" code nil nil [51138 51211])
            ("define-obsolete-function-alias" code nil nil [51212 51284])
            ("make-obsolete" code nil nil [51286 51352])
            ("make-obsolete" code nil nil [51353 51402])
            ("insert-string" function (:arguments ("args")) nil [51404 51722])
            ("makehash" function (:arguments ("test")) nil [51724 51844])
            ("log10" function (:arguments ("x")) nil [51846 51955])
            ("defalias" code nil nil [52003 52037])
            ("make-obsolete" code nil nil [52038 52092])
            ("defalias" code nil nil [52093 52129])
            ("make-obsolete" code nil nil [52130 52186])
            ("make-obsolete" code nil nil [52187 52294])
            ("set-advertised-calling-convention" code nil nil [52295 52396])
            ("set-advertised-calling-convention" code nil nil [52397 52465])
            ("set-advertised-calling-convention" code nil nil [52466 52537])
            ("set-advertised-calling-convention" code nil nil [52538 52623])
            ("set-advertised-calling-convention" code nil nil [52624 52693])
            ("set-advertised-calling-convention" code nil nil [52694 52763])
            ("make-obsolete-variable" code nil nil [53168 53355])
            ("make-obsolete-variable" code nil nil [53356 53435])
            ("make-obsolete-variable" code nil nil [53436 53503])
            ("make-obsolete-variable" code nil nil [53504 53569])
            ("make-obsolete-variable" code nil nil [53570 53631])
            ("make-obsolete-variable" code nil nil [53632 53703])
            ("make-obsolete-variable" code nil nil [53704 53769])
            ("make-obsolete-variable" code nil nil [53770 53831])
            ("make-obsolete-variable" code nil nil [53832 53907])
            ("make-obsolete-variable" code nil nil [53908 53985])
            ("make-obsolete-variable" code nil nil [53986 54065])
            ("make-obsolete-variable" code nil nil [54066 54143])
            ("make-obsolete-variable" code nil nil [54144 54223])
            ("make-obsolete-variable" code nil nil [54224 54313])
            ("make-obsolete-variable" code nil nil [54314 54389])
            ("make-obsolete-variable" code nil nil [54390 54471])
            ("make-obsolete-variable" code nil nil [54472 54555])
            ("make-obsolete-variable" code nil nil [54556 54651])
            ("make-obsolete-variable" code nil nil [54652 54739])
            ("make-obsolete-variable" code nil nil [54740 54821])
            ("make-obsolete-variable" code nil nil [54822 54909])
            ("make-obsolete-variable" code nil nil [54910 55001])
            ("make-obsolete-variable" code nil nil [55002 55067])
            ("make-obsolete-variable" code nil nil [55068 55133])
            ("make-obsolete-variable" code nil nil [55134 55237])
            ("make-obsolete-variable" code nil nil [55238 55331])
            ("make-obsolete-variable" code nil nil [55332 55395])
            ("make-obsolete-variable" code nil nil [55396 55536])
            ("make-obsolete-variable" code nil nil [55538 55602])
            ("make-obsolete-variable" code nil nil [55603 55686])
            ("make-obsolete-variable" code nil nil [55687 55759])
            ("make-obsolete-variable" code nil nil [55760 55836])
            ("make-obsolete-variable" code nil nil [55837 55894])
            ("make-obsolete" code nil nil [55895 55951])
            ("make-obsolete" code nil nil [55952 56012])
            ("make-obsolete" code nil nil [56014 56068])
            ("make-obsolete" code nil nil [56069 56125])
            ("define-obsolete-variable-alias" code nil nil [56164 56251])
            ("define-obsolete-variable-alias" code nil nil [56253 56346])
            ("define-obsolete-variable-alias" code nil nil [56347 56440])
            ("make-obsolete-variable" code nil nil [56686 56750])
            ("defvaralias" code nil nil [56752 56809])
            ("defalias" code nil nil [56882 56926])
            ("defalias" code nil nil [56927 56971])
            ("defalias" code nil nil [56972 57005])
            ("defalias" code nil nil [57006 57039])
            ("defalias" code nil nil [57040 57076])
            ("defalias" code nil nil [57077 57112])
            ("defalias" code nil nil [57113 57139])
            ("defalias" code nil nil [57140 57166])
            ("defalias" code nil nil [57167 57189])
            ("defalias" code nil nil [57215 57254])
            ("defalias" code nil nil [57255 57309])
            ("defalias" code nil nil [57310 57380])
            ("defalias" code nil nil [57381 57453])
            ("defalias" code nil nil [57454 57497])
            ("defalias" code nil nil [57498 57542])
            ("defalias" code nil nil [57543 57576])
            ("defalias" code nil nil [57577 57610])
            ("defalias" code nil nil [57642 57685])
            ("defalias" code nil nil [57686 57735])
            ("defalias" code nil nil [57737 57790])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [57829 59958])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [59960 61628])
            ("letrec" function (:arguments ("binders" "body")) nil [61630 62259])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [62261 65314])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [65316 68685])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [68688 70007])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [70009 71221])
            ("delay-mode-hooks" variable nil nil [71243 71337])
            ("delayed-mode-hooks" variable nil nil [71338 71419])
            ("make-variable-buffer-local" code nil nil [71420 71468])
            ("put" code nil nil [71469 71511])
            ("change-major-mode-after-body-hook" variable nil nil [71513 71627])
            ("after-change-major-mode-hook" variable nil nil [71629 71731])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [71733 72616])
            ("delay-mode-hooks" function (:arguments ("body")) nil [72618 73017])
            ("derived-mode-p" function (:arguments ("modes")) nil [73078 73391])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [73582 73775])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [73777 76462])
            ("autoloadp" function (:arguments ("object")) nil [76484 76586])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [77070 78277])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [78279 79685])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [79710 80832])
            ("process-lines" function (:arguments ("program" "args")) nil [80834 81439])
            ("process-live-p" function (:arguments ("process")) nil [81441 81754])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [81774 82244])
            ("process-kill-buffer-query-function" function nil nil [82246 82665])
            ("add-hook" code nil nil [82667 82742])
            ("process-get" function (:arguments ("process" "propname")) nil [82773 82985])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [82987 83226])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [83266 83316])
            ("read-key-delay" variable (:default-value 0.01) nil [83318 83346])
            ("read-key" function (:arguments ("prompt")) nil [83395 86619])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [86621 86958])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [86960 89672])
            ("read-number" function (:arguments ("prompt" "default")) nil [89674 90744])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [90746 92485])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [92487 95846])
            ("declare-function" code nil nil [95886 95965])
            ("y-or-n-p" function (:arguments ("prompt")) nil [95967 99528])
            ("atomic-change-group" function (:arguments ("body")) nil [99559 100765])
            ("prepare-change-group" function (:arguments ("buffer")) nil [100767 102243])
            ("activate-change-group" function (:arguments ("handle")) nil [102245 102483])
            ("accept-change-group" function (:arguments ("handle")) nil [102485 102776])
            ("cancel-change-group" function (:arguments ("handle")) nil [102778 103949])
            ("define-obsolete-function-alias" code nil nil [104007 104089])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [104091 105643])
            ("copy-overlay" function (:arguments ("o")) nil [105672 106246])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [106248 107256])
            ("suspend-hook" variable nil nil [107278 107362])
            ("suspend-resume-hook" variable nil nil [107364 107462])
            ("temp-buffer-show-hook" variable nil nil [107464 107680])
            ("temp-buffer-setup-hook" variable nil nil [107682 107913])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [107915 108290])
            ("buffer-narrowed-p" function nil nil [108323 108457])
            ("find-tag-default-bounds" function nil nil [108459 108713])
            ("find-tag-default" function nil nil [108715 108981])
            ("find-tag-default-as-regexp" function nil nil [108983 109418])
            ("find-tag-default-as-symbol-regexp" function nil nil [109420 109979])
            ("play-sound" function (:arguments ("sound")) nil [109981 110800])
            ("declare-function" code nil nil [110802 110858])
            ("shell-quote-argument" function (:arguments ("argument")) nil [110860 113194])
            ("string-or-null-p" function (:arguments ("object")) nil [113196 113333])
            ("booleanp" function (:arguments ("object")) nil [113335 113493])
            ("special-form-p" function (:arguments ("object")) nil [113495 113738])
            ("macrop" function (:arguments ("object")) nil [113740 113970])
            ("field-at-pos" function (:arguments ("pos")) nil [113972 114242])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [114244 114607])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [114609 115419])
            ("yank-handled-properties" variable nil nil [115526 115558])
            ("yank-excluded-properties" variable nil nil [115559 115592])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [115594 116505])
            ("yank-undo-function" variable nil nil [116507 116534])
            ("insert-for-yank" function (:arguments ("string")) nil [116536 116895])
            ("insert-for-yank-1" function (:arguments ("string")) nil [116897 119247])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [119249 119734])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [119736 120422])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [120424 120736])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [120875 121313])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [121351 122335])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [122337 122829])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [122831 124472])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [124474 125023])
            ("track-mouse" function (:arguments ("body")) nil [125078 125384])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [125386 125774])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [125776 126296])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [126298 126858])
            ("with-selected-window" function (:arguments ("window" "body")) nil [126860 127998])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [128000 128741])
            ("save-window-excursion" function (:arguments ("body")) nil [128743 129562])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [129564 130959])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [131012 133465])
            ("with-temp-file" function (:arguments ("file" "body")) nil [133467 134162])
            ("with-temp-message" function (:arguments ("message" "body")) nil [134164 135091])
            ("with-temp-buffer" function (:arguments ("body")) nil [135093 135652])
            ("with-silent-modifications" function (:arguments ("body")) nil [135654 136644])
            ("with-output-to-string" function (:arguments ("body")) nil [136646 137091])
            ("with-local-quit" function (:arguments ("body")) nil [137093 137848])
            ("while-no-input" function (:arguments ("body")) nil [137850 138350])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [138352 138905])
            ("define-obsolete-function-alias" code nil nil [138907 139002])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [139004 139941])
            ("combine-after-change-calls" function (:arguments ("body")) nil [139943 140638])
            ("with-case-table" function (:arguments ("table" "body")) nil [140640 141161])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [141163 141588])
            ("save-match-data-internal" variable nil nil [141622 141655])
            ("save-match-data" function (:arguments ("body")) nil [141913 142593])
            ("match-string" function (:arguments ("num" "string")) nil [142595 143240])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [143242 143966])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [143969 144618])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [144621 145892])
            ("looking-at-p" function (:arguments ("regexp")) nil [145894 146072])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [146074 146294])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [146296 148206])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [148228 148581])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [148843 151959])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [151961 152641])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [152643 153279])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [153313 153717])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [153719 156400])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [156403 156798])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [156800 157209])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [157211 157994])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [157996 158231])
            ("load-history-regexp" function (:arguments ("file")) nil [158272 158908])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [158910 159346])
            ("put" code nil nil [159348 159394])
            ("eval-after-load" function (:arguments ("file" "form")) nil [159395 163277])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [163279 163654])
            ("after-load-functions" variable nil nil [163656 163829])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [163831 165400])
            ("eval-next-after-load" function (:arguments ("file")) nil [165402 165702])
            ("display-delayed-warnings" function nil nil [165706 165973])
            ("collapse-delayed-warnings" function nil nil [165975 166654])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [166784 167124])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [167126 167381])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [167410 167753])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [167755 168000])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [168024 168660])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [168662 168982])
            ("syntax-after" function (:arguments ("pos")) nil [168984 169357])
            ("syntax-class" function (:arguments ("syntax")) nil [169359 169711])
            ("word-move-empty-char-table" variable nil nil [169742 169912])
            ("forward-word-strictly" function (:arguments ("arg")) nil [169914 170687])
            ("backward-word-strictly" function (:arguments ("arg")) nil [170689 171306])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [171324 171907])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [171922 172471])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [172492 172974])
            ("text-clone--maintaining" variable nil nil [172996 173032])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [173034 175100])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [175102 177350])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [177458 179036])
            ("called-interactively-p-functions" variable nil nil [179039 179456])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote funcall-interactively)))
                nil [179458 179543])
            ("called-interactively-p" function (:arguments ("kind")) nil [179545 183726])
            ("interactive-p" function nil nil [183728 184738])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [184740 185085])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [185087 185395])
            ("define-obsolete-function-alias" code nil nil [185397 185484])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [185486 188038])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [188621 189388])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [189390 191235])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [191237 191736])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [191738 191855])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [191857 193533])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [193535 193690])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [193692 194796])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [194833 194992])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [194995 196529])
            ("version-to-list" function (:arguments ("ver")) nil [196532 199315])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [199317 200148])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [200151 200950])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [200953 201738])
            ("version-list-not-zero" function (:arguments ("lst")) nil [201740 202050])
            ("version<" function (:arguments ("v1" "v2")) nil [202053 202557])
            ("version<=" function (:arguments ("v1" "v2")) nil [202559 203077])
            ("version=" function (:arguments ("v1" "v2")) nil [203079 203573])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [203575 203952])
            ("package--description-file" function (:arguments ("dir")) nil [203954 204285])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [204299 204361])
            ("when" code nil nil [204523 204648])
            ("unmsys--file-name" function (:arguments ("file")) nil [204781 205268]))          
      :file "subr.el.gz"
      :pointmax 205293
      :fsize 61184
      :lastmodtime '(22421 48001 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reference-point-alist" variable
               (:constant-flag t
                :default-value (quote ((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5))))
                nil [1166 3374])
            ("encode-composition-rule" function (:arguments ("rule")) nil [3392 4587])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4794 5460])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5795 6267])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6724 7034])
            ("compose-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [7036 9255])
            ("decompose-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9257 9629])
            ("compose-string" function (:arguments ("string" "start" "end" "components" "modification-func")) nil [9631 10595])
            ("decompose-string" function (:arguments ("string")) nil [10597 10769])
            ("compose-chars" function (:arguments ("args")) nil [10771 11647])
            ("find-composition" function (:arguments ("pos" "limit" "string" "detail-p")) nil [11649 13597])
            ("compose-chars-after" function (:arguments ("pos" "limit" "object")) nil [13601 15045])
            ("compose-last-chars" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [15047 15958])
            ("global-set-key" code nil nil [15960 16017])
            ("lgstring-header" function (:arguments ("gstring")) nil [16138 16191])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16192 16263])
            ("lgstring-font" function (:arguments ("gstring")) nil [16264 16333])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16334 16410])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16411 16489])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16490 16545])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16546 16605])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16606 16666])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16667 16729])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16730 16806])
            ("lglyph-from" function (:arguments ("glyph")) nil [16808 16853])
            ("lglyph-to" function (:arguments ("glyph")) nil [16854 16897])
            ("lglyph-char" function (:arguments ("glyph")) nil [16898 16943])
            ("lglyph-code" function (:arguments ("glyph")) nil [16944 16989])
            ("lglyph-width" function (:arguments ("glyph")) nil [16990 17036])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [17037 17086])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17087 17136])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17137 17184])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17185 17233])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17234 17285])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17287 17380])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17381 17440])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17441 17500])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17501 17563])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17564 17697])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17699 17751])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17753 18252])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [18254 18827])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [18829 20043])
            ("compose-gstring-for-graphic" function (:arguments ("gstring")) nil [20045 25966])
            ("compose-gstring-for-dotted-circle" function (:arguments ("gstring")) nil [25968 27759])
            ("when" code nil nil [27806 28251])
            ("compose-gstring-for-terminal" function (:arguments ("gstring")) nil [28253 30196])
            ("auto-compose-chars" function (:arguments ("func" "from" "to" "font-object" "string")) nil [30199 31138])
            ("put" code nil nil [31140 31187])
            ("make-variable-buffer-local" code nil nil [31189 31244])
            ("setq-default" code nil nil [31245 31305])
            ("define-minor-mode" code nil nil [31322 31923])
            ("make-variable-buffer-local" code nil nil [31975 32026])
            ("define-minor-mode" code nil nil [32043 32423])
            ("defalias" code nil nil [32425 32483]))          
      :file "composite.el.gz"
      :pointmax 32515
      :fsize 9066
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1056 1091])
            ("cua-enable-cua-keys" variable nil nil [1135 1163])
            ("or" code nil nil [1277 1387])
            ("setq" code nil nil [1541 1581])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [1709 1772])
            ("define-obsolete-variable-alias" code nil nil [1840 1922])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] (quote (menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit"))) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] (quote (menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame"))) (bindings--define-key menu [make-frame-on-display] (quote (menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display"))) (bindings--define-key menu [make-frame] (quote (menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame"))) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] (quote (menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame"))) (bindings--define-key menu [new-window-on-right] (quote (menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one"))) (bindings--define-key menu [new-window-below] (quote (menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one"))) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] (quote (menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-buffer] (quote (menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-region-faces] (quote (menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer"))) (bindings--define-key menu [ps-print-buffer-faces] (quote (menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer"))) (bindings--define-key menu [print-region] (quote (menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position"))) (bindings--define-key menu [print-buffer] (quote (menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings"))) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] (quote (menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session"))) (bindings--define-key menu [revert-buffer] (quote (menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file"))) (bindings--define-key menu [write-file] (quote (menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file"))) (bindings--define-key menu [save-buffer] (quote (menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file"))) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] (quote (menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer"))) (bindings--define-key menu [insert-file] (quote (menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer"))) (bindings--define-key menu [dired] (quote (menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files"))) (bindings--define-key menu [open-file] (quote (menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer"))) (bindings--define-key menu [new-file] (quote (menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file"))) menu)) nil [1923 8903])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [8905 9235])
            ("menu-bar-last-search-type" variable nil nil [9267 9375])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [9377 9770])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [9772 10169])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "backward"))
                nil [10171 10766])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10768 10988])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10990 11329])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11331 11682])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] (quote (menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it"))) (bindings--define-key menu [isearch-forward-regexp] (quote (menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it"))) (bindings--define-key menu [isearch-backward] (quote (menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it"))) (bindings--define-key menu [isearch-forward] (quote (menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it"))) menu)) nil [11729 12546])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] (\` (menu-item "Incremental Search" (\, menu-bar-i-search-menu)))) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] (quote (menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation"))) (bindings--define-key menu [tags-srch] (quote (menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files"))) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] (quote (menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards"))) (bindings--define-key menu [repeat-search-fwd] (quote (menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward"))) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] (quote (menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression"))) (bindings--define-key menu [re-search-forward] (quote (menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression"))) (bindings--define-key menu [search-backward] (quote (menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string"))) (bindings--define-key menu [search-forward] (quote (menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string"))) menu)) nil [12548 15012])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] (quote (menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation"))) (bindings--define-key menu [tags-repl] (quote (menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files"))) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] (quote (menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence"))) (bindings--define-key menu [query-replace] (quote (menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence"))) menu)) nil [15044 16035])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] (quote (menu-item "Set Tags File Name..." visit-tags-table :visible (menu-bar-goto-uses-etags-p) :help "Tell navigation commands which tag table file to use"))) (bindings--define-key menu [separator-tag-file] (quote (menu-item "--" nil :visible (menu-bar-goto-uses-etags-p)))) (bindings--define-key menu [xref-pop] (quote (menu-item "Back" xref-pop-marker-stack :visible (and (featurep (quote xref)) (not (xref-marker-stack-empty-p))) :help "Back to the position of the last search"))) (bindings--define-key menu [xref-apropos] (quote (menu-item "Find Apropos..." xref-find-apropos :help "Find function/variables whose names match regexp"))) (bindings--define-key menu [xref-find-otherw] (quote (menu-item "Find Definition in Other Window..." xref-find-definitions-other-window :help "Find function/variable definition in another window"))) (bindings--define-key menu [xref-find-def] (quote (menu-item "Find Definition..." xref-find-definitions :help "Find definition of function or variable"))) (bindings--define-key menu [separator-xref] menu-bar-separator) (bindings--define-key menu [end-of-buf] (quote (menu-item "Goto End of Buffer" end-of-buffer))) (bindings--define-key menu [beg-of-buf] (quote (menu-item "Goto Beginning of Buffer" beginning-of-buffer))) (bindings--define-key menu [go-to-pos] (quote (menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N"))) (bindings--define-key menu [go-to-line] (quote (menu-item "Goto Line..." goto-line :help "Read a line number and go to that line"))) menu)) nil [16081 18003])
            ("menu-bar-goto-uses-etags-p" function nil nil [18005 18149])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18151 18205])
            ("fset" code nil nil [18206 18248])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] (\` (menu-item "Text Properties" facemenu-menu))) (if (featurep (quote ns)) (bindings--define-key menu [spell] (\` (menu-item "Spell" ispell-menu-map)))) (bindings--define-key menu [fill] (\` (menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin"))) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] (\` (menu-item "Bookmarks" menu-bar-bookmark-map))) (bindings--define-key menu [goto] (\` (menu-item "Go To" (\, menu-bar-goto-menu)))) (bindings--define-key menu [replace] (\` (menu-item "Replace" (\, menu-bar-replace-menu)))) (bindings--define-key menu [search] (\` (menu-item "Search" (\, menu-bar-search-menu)))) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] (quote (menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy"))) (bindings--define-key menu [clear] (quote (menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position"))) (bindings--define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu")) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it"))) (bindings--define-key menu [paste] (\` (menu-item "Paste" yank :enable (funcall (quote (\, (lambda nil (and (or (gui-backend-selection-exists-p (quote CLIPBOARD)) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)))))) :help "Paste (yank) text most recently cut/copied"))) (bindings--define-key menu [copy] (\` (menu-item "Copy" (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help "Copy text in region between mark and current position" :keys (\, (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] (quote (menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position"))) (if (featurep (quote ns)) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] (quote (menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation"))) menu)) nil [18250 22274])
            ("define-obsolete-function-alias" code nil nil [22276 22358])
            ("put" code nil nil [22502 22590])
            ("put" code nil nil [22591 22648])
            ("put" code nil nil [22649 22904])
            ("gui-select-enable-clipboard" variable nil nil [22906 22942])
            ("clipboard-yank" function (:user-visible-flag t) nil [22944 23113])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23115 23454])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23456 23783])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [23785 24408])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] (quote (menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list"))) (bindings--define-key menu [customize-apropos-options] (quote (menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list"))) (bindings--define-key menu [customize-apropos] (quote (menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list"))) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] (quote (menu-item "Specific Group..." customize-group :help "Customize settings of specific group"))) (bindings--define-key menu [customize-face] (quote (menu-item "Specific Face..." customize-face :help "Customize attributes of specific face"))) (bindings--define-key menu [customize-option] (quote (menu-item "Specific Option..." customize-option :help "Customize value of specific option"))) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] (quote (menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions"))) (bindings--define-key menu [customize-saved] (quote (menu-item "Saved Options" customize-saved :help "Customize previously saved options"))) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] (quote (menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups"))) (bindings--define-key menu [customize] (quote (menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'"))) (bindings--define-key menu [customize-themes] (quote (menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme"))) menu)) nil [24440 26705])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [26778 27229])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27231 28439])
            ("menu-set-font" function (:user-visible-flag t) nil [28487 28786])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [28788 30893])
            ("menu-bar-window-divider-customize" function (:user-visible-flag t) nil [31002 31156])
            ("menu-bar-bottom-and-right-window-divider" function (:user-visible-flag t) nil [31158 31372])
            ("menu-bar-right-window-divider" function (:user-visible-flag t) nil [31374 31581])
            ("menu-bar-bottom-window-divider" function (:user-visible-flag t) nil [31583 31793])
            ("menu-bar-no-window-divider" function (:user-visible-flag t) nil [31795 31911])
            ("menu-bar-showhide-window-divider-menu" variable (:default-value (let ((menu (make-sparse-keymap "Window Divider"))) (bindings--define-key menu [customize] (quote (menu-item "Customize" menu-bar-window-divider-customize :help "Customize window dividers" :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [bottom-and-right] (quote (menu-item "Bottom and Right" menu-bar-bottom-and-right-window-divider :help "Display window divider on the bottom and right of each window" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [right-only] (quote (menu-item "Right Only" menu-bar-right-window-divider :help "Display window divider on the right of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [bottom-only] (quote (menu-item "Bottom Only" menu-bar-bottom-window-divider :help "Display window divider on the bottom of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) (bindings--define-key menu [no-divider] (quote (menu-item "None" menu-bar-no-window-divider :help "Do not display window dividers" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) menu)) nil [32195 34637])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [34639 34819])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [34821 35046])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [35048 35259])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [35261 35446])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [35448 35630])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [35632 35802])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] (quote (menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (bindings--define-key menu [mixed] (quote (menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (bindings--define-key menu [box] (quote (menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (bindings--define-key menu [right] (quote (menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (bindings--define-key menu [left] (quote (menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (bindings--define-key menu [none] (quote (menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [35804 38216])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [38218 38369])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [38371 38557])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [38559 38756])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [38758 38953])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [38955 39126])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] (\` (menu-item "Buffer Boundaries" (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe"))) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] (quote (menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)))) (bindings--define-key menu [default] (quote (menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [39128 41152])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [41154 41310])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [41312 41465])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [41467 41590])
            ("menu-bar-horizontal-scroll-bar" function (:user-visible-flag t) nil [41592 41757])
            ("menu-bar-no-horizontal-scroll-bar" function (:user-visible-flag t) nil [41759 41915])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll-bar"))) (bindings--define-key menu [horizontal] (quote (menu-item "Horizontal" menu-bar-horizontal-scroll-bar :help "Horizontal scroll bar" :visible (horizontal-scroll-bars-available-p) :button (:radio cdr (assq (quote horizontal-scroll-bars) (frame-parameters)))))) (bindings--define-key menu [none-horizontal] (quote (menu-item "None-horizontal" menu-bar-no-horizontal-scroll-bar :help "Turn off horizontal scroll bars" :visible (horizontal-scroll-bars-available-p) :button (:radio not (cdr (assq (quote horizontal-scroll-bars) (frame-parameters))))))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)))) menu)) nil [41917 43885])
            ("menu-bar-frame-for-menubar" function nil nil [43887 44070])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [44072 44192])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [44194 44342])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [44343 44495])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [44496 44657])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [44658 44822])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [44823 44981])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [44982 45149])
            ("when" code nil nil [45151 47930])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] (quote (menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (bindings--define-key menu [showhide-window-divider] (\` (menu-item "Window Divider" (\, menu-bar-showhide-window-divider-menu) :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [showhide-fringe] (\` (menu-item "Fringe" (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-scroll-bar] (\` (menu-item "Scroll-bar" (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tooltip-mode] (quote (menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (bindings--define-key menu [menu-bar-mode] (quote (menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] (\` (menu-item "Tool-bar" (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tool-bar] (quote (menu-item "Tool-bar" toggle-tool-bar-mode-from-frame :help "Turn tool-bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [47932 51772])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] (\` (menu-item "Word Wrap (Visual Line mode)" (\, (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled"))) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [truncate] (\` (menu-item "Truncate Long Lines" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1))) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (bindings--define-key menu [window-wrap] (\` (menu-item "Wrap at Window Edge" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1)))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [51774 53871])
            ("menu-bar-search-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Options"))) (dolist (x (quote ((char-fold-to-regexp "Fold Characters" "Character folding") (isearch-symbol-regexp "Whole Symbols" "Whole symbol") (word-search-regexp "Whole Words" "Whole word")))) (bindings--define-key menu (vector (nth 0 x)) (\` (menu-item (\, (nth 1 x)) (lambda nil (interactive) (setq search-default-mode (function (\, (nth 0 x)))) (message (\, (format "%s search enabled" (nth 2 x))))) :help (\, (format "Enable %s search" (downcase (nth 2 x)))) :button (:radio eq search-default-mode (function (\, (nth 0 x)))))))) (bindings--define-key menu [regexp-search] (quote (menu-item "Regular Expression" (lambda nil (interactive) (setq search-default-mode t) (message "Regular-expression search enabled")) :help "Enable regular-expression search" :button (:radio eq search-default-mode t)))) (bindings--define-key menu [regular-search] (quote (menu-item "Literal Search" (lambda nil (interactive) (when search-default-mode (setq search-default-mode nil) (when (symbolp search-default-mode) (message "Literal search enabled")))) :help "Disable special search modes" :button (:radio not search-default-mode)))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) menu)) nil [53873 55819])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] (\` (menu-item "Customize Emacs" (\, menu-bar-custom-menu)))) (bindings--define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (bindings--define-key menu [save] (quote (menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above"))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] (quote (menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font"))) (if (featurep (quote system-font-setting)) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] (\` (menu-item "Show/Hide" (\, menu-bar-showhide-menu)))) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] (\` (menu-item "Multilingual Environment" (\, mule-menu-keymap)))) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place) (not (symbol-value (quote save-place)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote post-forward-angle-brackets))))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (bindings--define-key menu [search-options] (\` (menu-item "Default Search Options" (\, menu-bar-search-options-menu)))) (bindings--define-key menu [line-wrapping] (\` (menu-item "Line Wrapping in This Buffer" (\, menu-bar-line-wrapping-menu)))) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [55821 61140])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] (quote (menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle"))) (bindings--define-key menu [tetris] (quote (menu-item "Tetris" tetris :help "Falling blocks game"))) (bindings--define-key menu [solitaire] (quote (menu-item "Solitaire" solitaire :help "Get rid of all the stones"))) (bindings--define-key menu [snake] (quote (menu-item "Snake" snake :help "Move snake around avoiding collisions"))) (bindings--define-key menu [pong] (quote (menu-item "Pong" pong :help "Bounce the ball to your opponent"))) (bindings--define-key menu [mult] (quote (menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication"))) (bindings--define-key menu [life] (quote (menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves"))) (bindings--define-key menu [hanoi] (quote (menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs"))) (bindings--define-key menu [gomoku] (quote (menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)"))) (bindings--define-key menu [bubbles] (quote (menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves"))) (bindings--define-key menu [black-box] (quote (menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays"))) (bindings--define-key menu [adventure] (quote (menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs"))) (bindings--define-key menu [5x5] (quote (menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board"))) menu)) nil [61171 63110])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] (quote (menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point"))) (bindings--define-key menu [export-keys] (quote (menu-item "Export Keys" epa-export-keys :help "Export public keys to a file"))) (bindings--define-key menu [import-keys-region] (quote (menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region"))) (bindings--define-key menu [import-keys] (quote (menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file"))) (bindings--define-key menu [list-keys] (quote (menu-item "List Keys" epa-list-keys :help "Browse your public keyring"))) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] (quote (menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region"))) (bindings--define-key menu [verify-region] (quote (menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region"))) (bindings--define-key menu [encrypt-region] (quote (menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region"))) (bindings--define-key menu [decrypt-region] (quote (menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region"))) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] (quote (menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file"))) (bindings--define-key menu [verify-file] (quote (menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file"))) (bindings--define-key menu [encrypt-file] (quote (menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file"))) (bindings--define-key menu [decrypt-file] (quote (menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file"))) menu)) nil [63112 65453])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [65455 65582])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] (\` (menu-item "Games" (\, menu-bar-games-menu)))) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] (\` (menu-item "Encryption/Decryption" (\, menu-bar-encryption-decryption-menu)))) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] (quote (menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator"))) (bindings--define-key menu [calc] (quote (menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator"))) (bindings--define-key menu [calendar] (quote (menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar"))) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] (quote (menu-item "Browse the Web..." browse-web))) (bindings--define-key menu [directory-search] (quote (menu-item "Directory Search" eudc-tools-menu))) (bindings--define-key menu [compose-mail] (quote (menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message"))) (bindings--define-key menu [rmail] (quote (menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail"))) (bindings--define-key menu [gnus] (quote (menu-item "Read Net News" gnus :help "Read network news groups"))) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] (quote (menu-item "Apply Patch" menu-bar-epatch-menu))) (bindings--define-key menu [ediff-merge] (quote (menu-item "Merge" menu-bar-ediff-merge-menu))) (bindings--define-key menu [compare] (quote (menu-item "Compare (Ediff)" menu-bar-ediff-menu))) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] (quote (menu-item "Spell Checking" ispell-menu-map))) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] (quote (menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)))) (bindings--define-key menu [ede] (quote (menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)))) (bindings--define-key menu [gdb] (quote (menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB"))) (bindings--define-key menu [shell-on-region] (quote (menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command"))) (bindings--define-key menu [shell] (quote (menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output"))) (bindings--define-key menu [compile] (quote (menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors"))) (bindings--define-key menu [grep] (quote (menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)"))) menu)) nil [65584 69645])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] (quote (menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings"))) (bindings--define-key menu [describe-coding-system-briefly] (quote (menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method"))) (bindings--define-key menu [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map)))) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] (quote (menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)"))) (bindings--define-key menu [describe-current-display-table] (quote (menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table"))) (bindings--define-key menu [describe-package] (quote (menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package"))) (bindings--define-key menu [describe-face] (quote (menu-item "Describe Face..." describe-face :help "Display the properties of a face"))) (bindings--define-key menu [describe-variable] (quote (menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option"))) (bindings--define-key menu [describe-function] (quote (menu-item "Describe Function..." describe-function :help "Display documentation of function/command"))) (bindings--define-key menu [describe-key-1] (quote (menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item"))) (bindings--define-key menu [describe-mode] (quote (menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode"))) menu)) nil [69674 72514])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [72516 72639])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [72641 72777])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [72779 72918])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [72920 73091])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [73093 73274])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] (quote (menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp"))) (bindings--define-key menu [find-any-object-by-name] (quote (menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp"))) (bindings--define-key menu [find-option-by-value] (quote (menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp"))) (bindings--define-key menu [find-options-by-name] (quote (menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp"))) (bindings--define-key menu [find-commands-by-name] (quote (menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp"))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] (quote (menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command"))) (bindings--define-key menu [lookup-key-in-manual] (quote (menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key"))) (bindings--define-key menu [lookup-subject-in-elisp-manual] (quote (menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual"))) (bindings--define-key menu [lookup-subject-in-emacs-manual] (quote (menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual"))) (bindings--define-key menu [emacs-terminology] (quote (menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual"))) menu)) nil [73276 75497])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] (quote (menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] (quote (menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation"))) (bindings--define-key menu [lookup-subject-in-all-manuals] (quote (menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals"))) (bindings--define-key menu [other-manuals] (quote (menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals"))) (bindings--define-key menu [emacs-lisp-reference] (quote (menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual"))) (bindings--define-key menu [emacs-lisp-intro] (quote (menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming"))) menu)) nil [75499 76773])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [76775 76923])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] (quote (menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux"))) (bindings--define-key menu [about-emacs] (quote (menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help"))) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] (quote (menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY"))) (bindings--define-key menu [describe-copying] (quote (menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)"))) (bindings--define-key menu [getting-new-versions] (quote (menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] (quote (menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs"))) (bindings--define-key menu [find-emacs-packages] (quote (menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword"))) (bindings--define-key menu [more-manuals] (\` (menu-item "More Manuals" (\, menu-bar-manuals-menu)))) (bindings--define-key menu [emacs-manual] (quote (menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features"))) (bindings--define-key menu [describe] (\` (menu-item "Describe" (\, menu-bar-describe-menu)))) (bindings--define-key menu [search-documentation] (\` (menu-item "Search Documentation" (\, menu-bar-search-documentation-menu)))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] (quote (menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better"))) (bindings--define-key menu [send-emacs-bug-report] (quote (menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers"))) (bindings--define-key menu [emacs-manual-bug] (quote (menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug"))) (bindings--define-key menu [emacs-known-problems] (quote (menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs"))) (bindings--define-key menu [emacs-news] (quote (menu-item "Emacs News" view-emacs-news :help "New features of this version"))) (bindings--define-key menu [emacs-faq] (quote (menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs"))) (bindings--define-key menu [emacs-tutorial-language-specific] (quote (menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)"))) (bindings--define-key menu [emacs-tutorial] (quote (menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs"))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (bindings--define-key menu [info-panel] (quote (menu-item "About Emacs..." ns-do-emacs-info-panel)))) menu)) nil [76925 80672])
            ("bindings--define-key" code nil nil [80674 80761])
            ("bindings--define-key" code nil nil [80762 80856])
            ("bindings--define-key" code nil nil [80857 80950])
            ("bindings--define-key" code nil nil [80951 81035])
            ("bindings--define-key" code nil nil [81036 81120])
            ("bindings--define-key" code nil nil [81121 81221])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [81223 81527])
            ("menu-bar-non-minibuffer-window-p" function nil nil [81529 81975])
            ("kill-this-buffer" function (:user-visible-flag t) nil [81977 82409])
            ("kill-this-buffer-enabled-p" function nil nil [82411 82879])
            ("put" code nil nil [82881 82942])
            ("delete-frame-enabled-p" function nil nil [83017 83302])
            ("yank-menu-length" variable (:default-value 20) nil [83304 83415])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [83417 84408])
            ("put" code nil nil [84410 84456])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [84457 84697])
            ("buffers-menu-max-size" variable (:default-value 10) nil [84719 85063])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [85065 85414])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [85416 86160])
            ("buffers-menu-show-status" variable (:default-value t) nil [86162 86535])
            ("list-buffers-directory" variable nil nil [86537 86646])
            ("make-variable-buffer-local" code nil nil [86647 86699])
            ("menu-bar-select-buffer" function nil nil [86701 86790])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [86792 86903])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [86905 87775])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [87844 87894])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [87896 88084])
            ("menu-bar-buffer-vector" function (:arguments ("alist")) nil [88086 88514])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [88516 92402])
            ("add-hook" code nil nil [92404 92461])
            ("menu-bar-update-buffers" code nil nil [92463 92488])
            ("dolist" code nil nil [93111 93407])
            ("let" code nil nil [93409 93898])
            ("let" code nil nil [93900 94969])
            ("define-minor-mode" code nil nil [94972 96331])
            ("put" code nil nil [96775 96816])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [96818 97224])
            ("declare-function" code nil nil [97226 97291])
            ("declare-function" code nil nil [97292 97361])
            ("lookup-key-ignore-too-long" function (:arguments ("map" "key")) nil [97363 97577])
            ("popup-menu" function (:arguments ("menu" "position" "prefix" "from-menu-bar")) nil [97579 100589])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [100591 101339])
            ("tty-menu-open-use-tmm" variable nil nil [101341 101802])
            ("tty-menu--initial-menu-x" variable (:default-value 1) nil [101804 101955])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [101957 103525])
            ("global-set-key" code nil nil [103527 103564])
            ("buffer-menu-open" function (:user-visible-flag t) nil [103566 103791])
            ("global-set-key" code nil nil [103793 103835])
            ("mouse-buffer-menu-keymap" function nil nil [103837 104164])
            ("tty-menu-navigation-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (bind (quote ((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit)))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] (quote tty-menu-exit)) (define-key map [18] (quote tty-menu-select)) (define-key map [10] (quote tty-menu-select)) (define-key map [return] (quote tty-menu-select)) (define-key map [linefeed] (quote tty-menu-select)) (define-key map [mouse-1] (quote tty-menu-select)) (define-key map [drag-mouse-1] (quote tty-menu-select)) (define-key map [mouse-2] (quote tty-menu-select)) (define-key map [drag-mouse-2] (quote tty-menu-select)) (define-key map [mouse-3] (quote tty-menu-select)) (define-key map [drag-mouse-3] (quote tty-menu-select)) (define-key map [wheel-down] (quote tty-menu-next-item)) (define-key map [wheel-up] (quote tty-menu-prev-item)) (define-key map [wheel-left] (quote tty-menu-prev-menu)) (define-key map [wheel-right] (quote tty-menu-next-menu)) (define-key map [S-mouse-1] (quote tty-menu-next-item)) (define-key map [S-drag-mouse-1] (quote tty-menu-next-item)) (define-key map [S-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-mouse-3] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-3] (quote tty-menu-prev-item)) (define-key map [header-line mouse-1] (quote tty-menu-select)) (define-key map [header-line drag-mouse-1] (quote tty-menu-select)) (define-key map [mode-line down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-3] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [mouse-movement] (quote tty-menu-mouse-movement)) map)) nil [104166 107711])
            ("menu-bar" package nil nil [107713 107732]))          
      :file "menu-bar.el.gz"
      :pointmax 107760
      :fsize 23201
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("put" code nil nil [1005 1051])
            ("make-display-table" function nil nil [1068 1175])
            ("or" code nil nil [1177 1259])
            ("put" code nil nil [1329 1368])
            ("put" code nil nil [1369 1402])
            ("put" code nil nil [1403 1438])
            ("put" code nil nil [1439 1475])
            ("put" code nil nil [1476 1522])
            ("put" code nil nil [1523 1567])
            ("display-table-slot" function (:arguments ("display-table" "slot")) nil [1584 2077])
            ("set-display-table-slot" function (:arguments ("display-table" "slot" "value")) nil [2094 2608])
            ("describe-display-table" function (:arguments ("dt")) nil [2625 3544])
            ("display-table-print-array" function (:arguments ("desc")) nil [3546 3945])
            ("describe-current-display-table" function (:user-visible-flag t) nil [3962 4284])
            ("standard-display-8bit" function (:arguments ("l" "h")) nil [4301 5131])
            ("standard-display-default" function (:arguments ("l" "h")) nil [5148 5461])
            ("standard-display-ascii" function (:arguments ("c" "s")) nil [5656 5875])
            ("standard-display-g1" function (:arguments ("c" "sc")) nil [5892 6385])
            ("standard-display-graphic" function (:arguments ("c" "gc")) nil [6402 6882])
            ("standard-display-underline" function (:arguments ("c" "uc")) nil [6899 7251])
            ("create-glyph" function (:arguments ("string")) nil [7268 7697])
            ("make-glyph-code" function (:arguments ("char" "face")) nil [7714 8129])
            ("glyph-char" function (:arguments ("glyph")) nil [8146 8285])
            ("glyph-face" function (:arguments ("glyph")) nil [8302 8610])
            ("standard-display-european" function (:arguments ("arg")) nil [8627 10791])
            ("disp-table" package nil nil [10793 10814]))          
      :file "disp-table.el.gz"
      :pointmax 10844
      :fsize 3558
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [962 1995])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [1997 2294])
            ("save-selected-window" function (:arguments ("body")) nil [2296 3334])
            ("temp-buffer-window-setup-hook" variable nil nil [3336 3537])
            ("temp-buffer-window-show-hook" variable nil nil [3539 3760])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3762 4376])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4378 5622])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5624 8206])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8208 9097])
            ("with-displayed-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [9099 10679])
            ("window-right" function (:arguments ("window")) nil [10986 11198])
            ("window-left" function (:arguments ("window")) nil [11200 11410])
            ("window-child" function (:arguments ("window")) nil [11412 11567])
            ("window-child-count" function (:arguments ("window")) nil [11569 11865])
            ("window-last-child" function (:arguments ("window")) nil [11867 12134])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [12136 12630])
            ("window-normalize-frame" function (:arguments ("frame")) nil [12632 12885])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [12887 13442])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [13481 14253])
            ("ignore-window-parameters" variable nil nil [14255 14599])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [14649 14773])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [14775 14971])
            ("window-min-height" variable (:default-value 4) nil [14973 15676])
            ("window-min-pixel-height" function (:arguments ("window")) nil [15678 15865])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [15915 16038])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [16040 16235])
            ("window-min-width" variable (:default-value 10) nil [16237 16936])
            ("window-min-pixel-width" function (:arguments ("window")) nil [16938 17123])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [17125 17442])
            ("window-min-pixel-size" function (:arguments ("window" "horizontal")) nil [17444 17728])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [17730 18362])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [18364 18790])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [18792 19899])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [19901 20613])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [20615 21838])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [21840 22491])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [22493 23451])
            ("window-atom-root" function (:arguments ("window")) nil [23473 23893])
            ("window-make-atom" function (:arguments ("window")) nil [23895 24283])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [24285 26730])
            ("window--atom-check-1" function (:arguments ("window")) nil [26732 27620])
            ("window--atom-check" function (:arguments ("frame")) nil [27622 28010])
            ("window-sides" variable (:default-value (quote (left top right bottom))) nil [28029 28093])
            ("window-sides-vertical" variable nil nil [28095 28301])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [28303 29724])
            ("window--side-window-p" function (:arguments ("window")) nil [29726 30046])
            ("window--major-non-side-window" function (:arguments ("frame")) nil [30048 31104])
            ("window--major-side-window" function (:arguments ("side")) nil [31106 32776])
            ("display-buffer-in-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [32778 34830])
            ("delete-side-window" function (:arguments ("window")) nil [34832 35050])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [35052 40055])
            ("window--side-check" function (:arguments ("frame")) nil [40057 42561])
            ("window--check" function (:arguments ("frame")) nil [42563 42742])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [42778 44622])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [44624 46245])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [46265 47213])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [47215 48019])
            ("window-size-fixed" variable nil nil [48021 48458])
            ("make-variable-buffer-local" code nil nil [48459 48506])
            ("window--preservable-size" function (:arguments ("window" "horizontal")) nil [48508 48934])
            ("window-preserve-size" function (:arguments ("window" "horizontal" "preserve")) nil [48936 50340])
            ("window-preserved-size" function (:arguments ("window" "horizontal")) nil [50342 50880])
            ("window--preserve-size" function (:arguments ("window" "horizontal")) nil [50882 51242])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [51244 51949])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [51951 52519])
            ("window--min-size-ignore-p" function (:arguments ("window" "horizontal" "ignore")) nil [52521 52853])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [52855 56690])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [56692 58062])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [58064 58569])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal" "ignore")) nil [58571 59896])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal" "ignore")) nil [59898 60546])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [60548 61890])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [61892 63675])
            ("frame-windows-min-size" function (:arguments ("frame" "horizontal" "ignore" "pixelwise")) nil [63677 64286])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [64288 65588])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [65590 67036])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [67084 68893])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [68895 69553])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [69555 71067])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [71069 71625])
            ("defalias" code nil nil [71672 71718])
            ("defalias" code nil nil [71719 71762])
            ("window-full-height-p" function (:arguments ("window")) nil [71764 72302])
            ("window-full-width-p" function (:arguments ("window")) nil [72304 72736])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [72738 73269])
            ("declare-function" code nil nil [73271 73331])
            ("window-font-width" function (:arguments ("window" "face")) nil [73333 73963])
            ("window-font-height" function (:arguments ("window" "face")) nil [73965 74528])
            ("overflow-newline-into-fringe" variable nil nil [74530 74567])
            ("window-max-chars-per-line" function (:arguments ("window" "face")) nil [74569 76083])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [76085 77056])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [77058 78940])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [78942 79519])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [79521 80039])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [80041 80431])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [80726 86224])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [86226 87847])
            ("defalias" code nil nil [87849 87899])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [87901 89552])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [89554 90824])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [90826 92119])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [92121 93689])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [93691 93841])
            ("count-windows" function (:arguments ("minibuf")) nil [93843 94136])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [94161 95111])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [95113 96737])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [96739 98654])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [98656 99092])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [99094 99616])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [99618 100842])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [100844 101250])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [101252 105153])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [105155 105702])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [105704 105881])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [105883 109401])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [109403 116015])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [116017 119813])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [119815 121718])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [121720 122553])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [122555 124476])
            ("window--sanitize-window-sizes" function (:arguments ("frame" "horizontal")) nil [124478 125440])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [125442 132448])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [132450 134284])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [134286 136137])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [136139 136735])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [136737 137347])
            ("window-edges" function (:arguments ("window" "body" "absolute" "pixelwise")) nil [137367 140431])
            ("window-body-edges" function (:arguments ("window")) nil [140433 140641])
            ("defalias" code nil nil [140642 140692])
            ("window-pixel-edges" function (:arguments ("window")) nil [140694 140915])
            ("window-body-pixel-edges" function (:arguments ("window")) nil [140917 141158])
            ("defalias" code nil nil [141159 141221])
            ("window-absolute-pixel-edges" function (:arguments ("window")) nil [141223 141450])
            ("window-absolute-body-pixel-edges" function (:arguments ("window")) nil [141452 141704])
            ("defalias" code nil nil [141705 141785])
            ("window-absolute-pixel-position" function (:arguments ("position" "window")) nil [141787 142687])
            ("frame-root-window-p" function (:arguments ("window")) nil [142690 142829])
            ("window--subtree" function (:arguments ("window" "next")) nil [142831 143554])
            ("window-tree" function (:arguments ("frame")) nil [143556 144451])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [144454 147085])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [147221 148494])
            ("window-deletable-p" function (:arguments ("window")) nil [148519 149909])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [149911 150214])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [150216 153612])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [153614 156065])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [156067 156693])
            ("record-window-buffer" function (:arguments ("window")) nil [158429 159848])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [159850 160349])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [160351 161278])
            ("switch-to-visible-buffer" variable (:default-value t) nil [161280 161735])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [161737 167088])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [167090 170489])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [170491 171487])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [171489 172216])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [172218 172736])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [172738 173578])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [173580 174713])
            ("unbury-buffer" function (:user-visible-flag t) nil [174715 174840])
            ("next-buffer" function (:user-visible-flag t) nil [174842 175144])
            ("previous-buffer" function (:user-visible-flag t) nil [175146 175456])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [175458 177212])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [177214 178246])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [178248 183091])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [183093 183693])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [183695 184659])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [184662 196451])
            ("split-window-keep-point" variable (:default-value t) nil [196528 196902])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [196904 199158])
            ("defalias" code nil nil [199160 199215])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [199217 200425])
            ("defalias" code nil nil [200427 200484])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [200987 203755])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [203757 204183])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [204185 205442])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [205444 205874])
            ("window-area-factor" variable (:default-value 1) nil [205921 206090])
            ("make-variable-buffer-local" code nil nil [206091 206139])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [206141 206795])
            ("balance-windows-area" function (:user-visible-flag t) nil [206797 211153])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [211223 214018])
            ("window-state-get" function (:arguments ("window" "writable")) nil [214020 216109])
            ("window-state-put-list" variable nil nil [216111 216189])
            ("window-state-put-stale-windows" variable nil nil [216191 216278])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [216280 218982])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [218984 222760])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [222762 226878])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [226881 229398])
            ("display-buffer-function" variable nil nil [229400 229956])
            ("make-obsolete-variable" code nil nil [229958 230039])
            ("pop-up-frame-alist" variable nil nil [230220 230836])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [230838 231167])
            ("special-display-buffer-names" variable nil nil [231169 233759])
            ("make-obsolete-variable" code nil nil [233760 233843])
            ("put" code nil nil [233844 233903])
            ("special-display-regexps" variable nil nil [233905 236547])
            ("make-obsolete-variable" code nil nil [236548 236626])
            ("put" code nil nil [236627 236681])
            ("special-display-p" function (:arguments ("buffer-name")) nil [236683 237578])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [237580 238198])
            ("make-obsolete-variable" code nil nil [238199 238281])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [238283 240303])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [240305 241103])
            ("make-obsolete-variable" code nil nil [241104 241183])
            ("same-window-buffer-names" variable nil nil [241185 241757])
            ("same-window-regexps" variable nil nil [241759 242347])
            ("same-window-p" function (:arguments ("buffer-name")) nil [242349 243320])
            ("pop-up-frames" variable nil nil [243322 243734])
            ("display-buffer-reuse-frames" variable nil nil [243736 243965])
            ("make-obsolete-variable" code nil nil [243967 244095])
            ("pop-up-windows" variable (:default-value t) nil [244097 244221])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [244223 245606])
            ("split-height-threshold" variable (:default-value 80) nil [245608 246134])
            ("split-width-threshold" variable (:default-value 160) nil [246136 246524])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [246526 248846])
            ("split-window-sensibly" function (:arguments ("window")) nil [248848 251233])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [251235 252345])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [252347 253289])
            ("even-window-sizes" variable (:default-value t) nil [253291 253814])
            ("defvaralias" code nil nil [253815 253868])
            ("window--even-window-sizes" function (:arguments ("window")) nil [253870 254875])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [254877 257786])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [257788 258212])
            ("display-buffer-mark-dedicated" variable nil nil [258551 258760])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-below-selected) (const display-buffer-at-bottom) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (const display-buffer-use-some-frame) (function :tag "Other function"))))
                nil [258762 259359])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [259361 259736])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [259738 260073])
            ("put" code nil nil [260074 260137])
            ("display-buffer-alist" variable nil nil [260139 261150])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [261152 261576])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [261578 262162])
            ("put" code nil nil [262163 262224])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [262226 262649])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [262651 262823])
            ("put" code nil nil [262824 262889])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [262891 263121])
            ("put" code nil nil [263122 263187])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [263189 269137])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [269139 269472])
            ("display-buffer-use-some-frame" function (:arguments ("buffer" "alist")) nil [269514 271014])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [271016 271501])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [271503 271844])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [271846 273492])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [273494 274245])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [274247 275267])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [275269 276583])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [276585 277171])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [277173 278022])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [278024 279561])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [279563 281850])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [281852 283593])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [283595 284050])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "action" "norecord"))
                nil [284086 285618])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [285620 286254])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [286256 287400])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [287402 287958])
            ("switch-to-buffer-preserve-window-point" variable nil nil [287960 288849])
            ("switch-to-buffer-in-dedicated-window" variable nil nil [288851 289641])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [289643 293386])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [293388 294420])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [294422 295434])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [295437 296410])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [296412 296627])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [296629 296848])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [296850 298251])
            ("window-buffer-height" function (:arguments ("window")) nil [298253 298731])
            ("fit-window-to-buffer-horizontally" variable nil nil [298796 299190])
            ("fit-frame-to-buffer" variable nil nil [299304 299753])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [299755 300969])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [300971 302260])
            ("declare-function" code nil nil [302262 302333])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [302335 302539])
            ("declare-function" code nil nil [302541 302613])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [302615 311275])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width" "preserve-size"))
                nil [311277 317764])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [317766 318147])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [318149 319257])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [319260 320082])
            ("window-group-start-function" variable nil nil [320502 320542])
            ("make-variable-buffer-local" code nil nil [320543 320600])
            ("put" code nil nil [320601 320654])
            ("window-group-start" function (:arguments ("window")) nil [320655 321154])
            ("window-group-end-function" variable nil nil [321156 321194])
            ("make-variable-buffer-local" code nil nil [321195 321250])
            ("put" code nil nil [321251 321302])
            ("window-group-end" function (:arguments ("window" "update")) nil [321303 322109])
            ("set-window-group-start-function" variable nil nil [322111 322155])
            ("make-variable-buffer-local" code nil nil [322156 322217])
            ("put" code nil nil [322218 322275])
            ("set-window-group-start" function (:arguments ("window" "pos" "noforce")) nil [322276 322917])
            ("recenter-window-group-function" variable nil nil [322919 322962])
            ("make-variable-buffer-local" code nil nil [322963 323023])
            ("put" code nil nil [323024 323080])
            ("recenter-window-group" function (:arguments ("arg")) nil [323081 324251])
            ("pos-visible-in-window-group-p-function" variable nil nil [324253 324304])
            ("make-variable-buffer-local" code nil nil [324305 324373])
            ("put" code nil nil [324374 324438])
            ("pos-visible-in-window-group-p" function (:arguments ("pos" "window" "partially")) nil [324439 325915])
            ("selected-window-group-function" variable nil nil [325917 325960])
            ("make-variable-buffer-local" code nil nil [325961 326021])
            ("put" code nil nil [326022 326078])
            ("selected-window-group" function nil nil [326079 326429])
            ("move-to-window-group-line-function" variable nil nil [326431 326478])
            ("make-variable-buffer-local" code nil nil [326479 326543])
            ("put" code nil nil [326544 326604])
            ("move-to-window-group-line" function (:arguments ("arg")) nil [326605 327203])
            ("recenter-last-op" variable nil nil [327207 327432])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [327434 328294])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [328296 329443])
            ("define-key" code nil nil [329445 329497])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [329499 330633])
            ("define-key" code nil nil [330635 330698])
            ("scroll-error-top-bottom" variable nil nil [330868 331312])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [331314 332377])
            ("put" code nil nil [332379 332421])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [332423 333490])
            ("put" code nil nil [333492 333536])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [333606 333889])
            ("put" code nil nil [333891 333930])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [333932 334217])
            ("put" code nil nil [334219 334260])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [334264 334659])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [334661 335345])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [335347 335850])
            ("mouse-autoselect-window-timer" variable nil nil [335853 335943])
            ("mouse-autoselect-window-position-1" variable nil nil [335945 336059])
            ("mouse-autoselect-window-position" variable nil nil [336061 336172])
            ("mouse-autoselect-window-window" variable nil nil [336174 336275])
            ("mouse-autoselect-window-state" variable nil nil [336277 336574])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [336576 337347])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [337349 338177])
            ("mouse-autoselect-window-select" function nil nil [338179 341964])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [341966 343505])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [343507 344192])
            ("window-adjust-process-window-size-function" variable (:default-value (quote window-adjust-process-window-size-smallest)) nil [344261 345703])
            ("window-adjust-process-window-size" function (:arguments ("reducer" "process" "windows")) nil [345705 346322])
            ("window-adjust-process-window-size-smallest" function (:arguments ("process" "windows")) nil [346324 346622])
            ("window-adjust-process-window-size-largest" function (:arguments ("process" "windows")) nil [346624 346920])
            ("window--process-window-list" function nil nil [346922 348135])
            ("window--adjust-process-windows" function nil nil [348137 348833])
            ("add-hook" code nil nil [348835 348911])
            ("define-key" code nil nil [349002 349043])
            ("define-key" code nil nil [349044 349092])
            ("define-key" code nil nil [349093 349139])
            ("define-key" code nil nil [349140 349186])
            ("define-key" code nil nil [349187 349227])
            ("define-key" code nil nil [349228 349270])
            ("define-key" code nil nil [349271 349326])
            ("define-key" code nil nil [349327 349381])
            ("define-key" code nil nil [349382 349445])
            ("define-key" code nil nil [349446 349489])
            ("define-key" code nil nil [349490 349542]))          
      :file "window.el.gz"
      :pointmax 349568
      :fsize 77609
      :lastmodtime '(22458 49977 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("selection-coding-system" variable nil nil [1751 3131])
            ("next-selection-coding-system" variable nil nil [3133 3494])
            ("define-obsolete-function-alias" code nil nil [3531 3610])
            ("select-enable-clipboard" variable (:default-value t) nil [3612 3941])
            ("define-obsolete-variable-alias" code nil nil [3942 4035])
            ("select-enable-primary" variable nil nil [4037 4308])
            ("define-obsolete-variable-alias" code nil nil [4309 4398])
            ("gui--last-selected-text-clipboard" variable nil nil [4725 4823])
            ("gui--last-selected-text-primary" variable nil nil [4824 4918])
            ("gui-select-text" function (:arguments ("text")) nil [4920 5651])
            ("define-obsolete-function-alias" code nil nil [5652 5723])
            ("x-select-request-type" variable nil nil [5725 6435])
            ("gui--selection-value-internal" function (:arguments ("type")) nil [6691 7346])
            ("gui-selection-value" function nil nil [7348 9424])
            ("define-obsolete-function-alias" code nil nil [9426 9505])
            ("x-get-clipboard" function nil nil [9507 9671])
            ("gui-get-primary-selection" function nil nil [9673 10170])
            ("define-obsolete-function-alias" code nil nil [10171 10262])
            ("cl-defgeneric" code nil nil [10320 10632])
            ("cl-defgeneric" code nil nil [10634 11172])
            ("cl-defgeneric" code nil nil [11174 11505])
            ("cl-defgeneric" code nil nil [11507 11830])
            ("gui-get-selection" function (:arguments ("type" "data-type")) nil [11832 13422])
            ("define-obsolete-function-alias" code nil nil [13423 13498])
            ("gui-set-selection" function
               (:user-visible-flag t
                :arguments ("type" "data"))
                nil [13500 15230])
            ("define-obsolete-function-alias" code nil nil [15231 15306])
            ("gui--valid-simple-selection-p" function (:arguments ("data")) nil [15308 15758])
            ("xselect--selection-bounds" function (:arguments ("value")) nil [15954 16748])
            ("xselect--int-to-cons" function (:arguments ("n")) nil [16750 16820])
            ("xselect--encode-string" function (:arguments ("type" "str" "can-modify")) nil [16822 19275])
            ("xselect-convert-to-string" function (:arguments ("_selection" "type" "value")) nil [19277 19577])
            ("xselect-convert-to-length" function (:arguments ("_selection" "_type" "value")) nil [19579 19838])
            ("xselect-convert-to-targets" function (:arguments ("_selection" "_type" "_value")) nil [19840 20353])
            ("xselect-convert-to-delete" function (:arguments ("selection" "_type" "_value")) nil [20355 20699])
            ("xselect-convert-to-filename" function (:arguments ("_selection" "_type" "value")) nil [20701 20885])
            ("xselect-convert-to-charpos" function (:arguments ("_selection" "_type" "value")) nil [20887 21187])
            ("xselect-convert-to-lineno" function (:arguments ("_selection" "_type" "value")) nil [21189 21548])
            ("xselect-convert-to-colno" function (:arguments ("_selection" "_type" "value")) nil [21550 21940])
            ("xselect-convert-to-os" function (:arguments ("_selection" "_type" "_size")) nil [21942 22055])
            ("xselect-convert-to-host" function (:arguments ("_selection" "_type" "_size")) nil [22057 22160])
            ("xselect-convert-to-user" function (:arguments ("_selection" "_type" "_size")) nil [22162 22268])
            ("xselect-convert-to-class" function (:arguments ("_selection" "_type" "_size")) nil [22270 22413])
            ("xselect-convert-to-name" function (:arguments ("_selection" "_type" "_size")) nil [22549 22690])
            ("xselect-convert-to-integer" function (:arguments ("_selection" "_type" "value")) nil [22692 22812])
            ("xselect-convert-to-atom" function (:arguments ("_selection" "_type" "value")) nil [22814 22900])
            ("xselect-convert-to-identity" function (:arguments ("_selection" "_type" "value")) nil [22902 22997])
            ("xselect-convert-to-save-targets" function (:arguments ("selection" "_type" "_value")) nil [23117 23226])
            ("setq" code nil nil [23228 24079])
            ("select" package nil nil [24081 24098]))          
      :file "select.el.gz"
      :pointmax 24124
      :fsize 7286
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [1545 1591])
            ("gpm-mouse-enable" function nil nil [1593 2152])
            ("gpm-mouse-disable" function nil nil [2154 2353])
            ("define-obsolete-function-alias" code nil nil [2370 2439])
            ("define-minor-mode" code nil nil [2455 3529])
            ("t-mouse" package nil nil [3531 3549]))          
      :file "t-mouse.el.gz"
      :pointmax 3576
      :fsize 1632
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("make-mode-line-mouse-map" function (:arguments ("mouse" "function")) nil [928 1263])
            ("mode-line-toggle-read-only" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1266 1471])
            ("mode-line-toggle-modified" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1473 1732])
            ("mode-line-widen" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1734 1924])
            ("mode-line-input-method-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-2] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (toggle-input-method) (force-mode-line-update)))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (describe-current-input-method)))) (purecopy map))) nil [1926 2371])
            ("mode-line-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (when (and enable-multibyte-characters buffer-file-coding-system) (describe-coding-system buffer-file-coding-system))))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (call-interactively (quote set-buffer-file-coding-system))))) (purecopy map))) nil [2373 2981])
            ("mode-line-change-eol" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2983 3333])
            ("mode-line-eol-desc-cache" variable nil nil [3335 3372])
            ("mode-line-eol-desc" function nil nil [3374 4253])
            ("mode-line-default-help-echo" variable (:default-value "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display") nil [4281 4821])
            ("mode-line-front-space" variable (:default-value (quote (:eval (if (display-graphic-p) " " "-")))) nil [4823 5108])
            ("put" code nil nil [5109 5161])
            ("mode-line-mule-info-help-echo" function (:arguments ("window" "_object" "_point")) nil [5163 5615])
            ("mode-line-mule-info" variable (:default-value (\` ("" (current-input-method (:propertize ("" current-input-method-title) help-echo (concat (\, (purecopy "Current input method: ")) current-input-method (\, (purecopy "
mouse-2: Disable input method
mouse-3: Describe current input method"))) local-map (\, mode-line-input-method-map) mouse-face mode-line-highlight)) (\, (propertize "%z" (quote help-echo) (quote mode-line-mule-info-help-echo) (quote mouse-face) (quote mode-line-highlight) (quote local-map) mode-line-coding-system-map)) (:eval (mode-line-eol-desc))))) nil [5617 6539])
            ("put" code nil nil [6555 6605])
            ("make-variable-buffer-local" code nil nil [6606 6655])
            ("mode-line-client" variable (:default-value (\` ("" (:propertize ("" (:eval (if (frame-parameter nil (quote client)) "@" ""))) help-echo (\, (purecopy "emacsclient frame")))))) nil [6657 6868])
            ("put" code nil nil [6884 6931])
            ("mode-line-read-only-help-echo" function (:arguments ("window" "_object" "_point")) nil [6933 7208])
            ("mode-line-modified-help-echo" function (:arguments ("window" "_object" "_point")) nil [7210 7470])
            ("mode-line-modified" variable (:default-value (list (propertize "%1*" (quote help-echo) (quote mode-line-read-only-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-read-only))) (quote mouse-face) (quote mode-line-highlight)) (propertize "%1+" (quote help-echo) (quote mode-line-modified-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-modified))) (quote mouse-face) (quote mode-line-highlight)))) nil [7472 7990])
            ("put" code nil nil [8006 8055])
            ("make-variable-buffer-local" code nil nil [8056 8104])
            ("mode-line-remote" variable (:default-value (list (propertize "%1@" (quote mouse-face) (quote mode-line-highlight) (quote help-echo) (purecopy (lambda (window _object _point) (format "%s" (with-selected-window window (if (stringp default-directory) (concat (if (file-remote-p default-directory) "Current directory is remote: " "Current directory is local: ") default-directory) "Current directory is nil")))))))) nil [8106 8616])
            ("put" code nil nil [8632 8679])
            ("make-variable-buffer-local" code nil nil [8680 8726])
            ("mode-line-frame-control" function nil nil [8796 9033])
            ("mode-line-frame-identification" variable (:default-value (quote (:eval (mode-line-frame-control)))) nil [9143 9272])
            ("put" code nil nil [9288 9349])
            ("mode-line-process" variable nil nil [9351 9510])
            ("put" code nil nil [9526 9574])
            ("make-variable-buffer-local" code nil nil [9575 9622])
            ("bindings--define-key" function (:arguments ("map" "key" "item")) nil [9624 10375])
            ("mode-line-mode-menu" variable (:default-value (make-sparse-keymap "Minor Modes")) nil [10377 10486])
            ("mode-line-major-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [mode-line down-mouse-1] (\` (menu-item "Menu Bar" ignore :filter (\, (lambda (_) (mouse-menu-major-mode-map)))))) (define-key map [mode-line mouse-2] (quote describe-mode)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) map)) nil [10488 10879])
            ("mode-line-minor-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line down-mouse-1] (quote mouse-minor-mode-menu)) (define-key map [mode-line mouse-2] (quote mode-line-minor-mode-help)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) (define-key map [header-line down-mouse-3] mode-line-mode-menu) map)) nil [10881 11271])
            ("mode-line-modes" variable (:default-value (let ((recursive-edit-help-echo "Recursive edit, type C-M-c to get out")) (list (propertize "%[" (quote help-echo) recursive-edit-help-echo) "(" (\` (:propertize ("" mode-name) help-echo "Major mode
mouse-1: Display major mode menu
mouse-2: Show help for major mode
mouse-3: Toggle minor modes" mouse-face mode-line-highlight local-map (\, mode-line-major-mode-keymap))) (quote ("" mode-line-process)) (\` (:propertize ("" minor-mode-alist) mouse-face mode-line-highlight help-echo "Minor mode
mouse-1: Display minor mode menu
mouse-2: Show help for minor mode
mouse-3: Toggle minor modes" local-map (\, mode-line-minor-mode-keymap))) (propertize "%n" (quote help-echo) "mouse-2: Remove narrowing from buffer" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) (function mode-line-widen))) ")" (propertize "%]" (quote help-echo) recursive-edit-help-echo) " "))) nil [11273 12283])
            ("put" code nil nil [12284 12330])
            ("mode-line-column-line-number-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Toggle Line and Column Number Display"))) (bindings--define-key menu-map [line-number-mode] (quote (menu-item "Display Line Numbers" line-number-mode :help "Toggle displaying line numbers in the mode-line" :button (:toggle . line-number-mode)))) (bindings--define-key menu-map [column-number-mode] (quote (menu-item "Display Column Numbers" column-number-mode :help "Toggle displaying column numbers in the mode-line" :button (:toggle . column-number-mode)))) (define-key map [mode-line down-mouse-1] menu-map) map)) nil [12332 13041])
            ("mode-line-position" variable (:default-value (\` ((-3 (\, (propertize "%p" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu"))) (size-indication-mode (8 (\, (propertize " of %I" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu")))) (line-number-mode ((column-number-mode (10 (\, (propertize " (%l,%c)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu"))) (6 (\, (propertize " L%l" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line Number
mouse-1: Display Line and Column Mode Menu"))))) ((column-number-mode (5 (\, (propertize " C%c" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu"))))))))) nil [13043 14479])
            ("put" code nil nil [14480 14529])
            ("mode-line-buffer-identification-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [header-line down-mouse-1] (quote ignore)) (define-key map [header-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [mode-line mouse-3] (quote mode-line-next-buffer)) (define-key map [header-line down-mouse-3] (quote ignore)) (define-key map [header-line mouse-3] (quote mode-line-next-buffer)) map)) nil [14531 15264])
            ("propertized-buffer-identification" function (:arguments ("fmt")) nil [15266 15750])
            ("mode-line-buffer-identification" variable (:default-value (propertized-buffer-identification "%12b")) nil [15752 16065])
            ("put" code nil nil [16081 16143])
            ("make-variable-buffer-local" code nil nil [16144 16205])
            ("mode-line-misc-info" variable (:default-value (quote ((which-func-mode ("" which-func-format " ")) (global-mode-string ("" global-mode-string " "))))) nil [16207 16489])
            ("put" code nil nil [16490 16540])
            ("mode-line-end-spaces" variable (:default-value (quote (:eval (unless (display-graphic-p) "-%-")))) nil [16542 16675])
            ("put" code nil nil [16676 16727])
            ("let" code nil nil [16792 17357])
            ("mode-line-unbury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17361 17540])
            ("mode-line-bury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17542 17739])
            ("mode-line-other-buffer" function (:user-visible-flag t) nil [17741 17908])
            ("mode-line-next-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17910 18107])
            ("mode-line-previous-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [18109 18318])
            ("bound-and-true-p" function (:arguments ("var")) nil [18320 18450])
            ("bindings--define-key" code nil nil [18569 18790])
            ("bindings--define-key" code nil nil [18791 19039])
            ("bindings--define-key" code nil nil [19040 19305])
            ("bindings--define-key" code nil nil [19306 19535])
            ("bindings--define-key" code nil nil [19536 19775])
            ("bindings--define-key" code nil nil [19776 19950])
            ("bindings--define-key" code nil nil [19951 20156])
            ("bindings--define-key" code nil nil [20157 20451])
            ("bindings--define-key" code nil nil [20452 20692])
            ("bindings--define-key" code nil nil [20693 20893])
            ("bindings--define-key" code nil nil [20894 21084])
            ("mode-line-minor-mode-help" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [21086 21325])
            ("minor-mode-alist" variable nil nil [21327 21624])
            ("put" code nil nil [21640 21687])
            ("setq" code nil nil [21758 21965])
            ("setq" code nil nil [22250 23512])
            ("setq" code nil nil [23548 23690])
            ("setq" code nil nil [23804 24207])
            ("make-variable-buffer-local" code nil nil [24209 24255])
            ("mapc" code nil nil [24511 24877])
            ("base64" package nil nil [24935 24952])
            ("md5" package nil nil [24953 24967])
            ("sha1" package nil nil [24968 24983])
            ("overlay" package nil nil [24984 25032])
            ("text-properties" package nil nil [25033 25103])
            ("define-key" code nil nil [25105 25147])
            ("complete-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25149 25528])
            ("garbage-collect" code nil nil [25646 25663])
            ("setq" code nil nil [25667 25704])
            ("make-variable-buffer-local" code nil nil [25706 25767])
            ("global-set-key" code nil nil [25785 25837])
            ("global-set-key" code nil nil [25838 25892])
            ("global-set-key" code nil nil [26088 26140])
            ("global-set-key" code nil nil [26141 26187])
            ("global-set-key" code nil nil [26188 26239])
            ("put" code nil nil [26325 26360])
            ("visual-order-cursor-movement" variable nil nil [26413 27117])
            ("right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27119 27875])
            ("left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27877 28632])
            ("right-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [28634 29248])
            ("left-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [29250 29863])
            ("narrow-map" variable (:default-value (make-sparse-keymap)) nil [29865 29940])
            ("define-key" code nil nil [29941 29978])
            ("define-key" code nil nil [29980 30025])
            ("define-key" code nil nil [30026 30060])
            ("define-key" code nil nil [30074 30128])
            ("define-key" code nil nil [30129 30174])
            ("substitute-key-definition" code nil nil [30283 30351])
            ("define-key" code nil nil [30353 30392])
            ("define-key" code nil nil [30393 30434])
            ("define-key" code nil nil [30435 30474])
            ("define-key" code nil nil [30475 30520])
            ("define-key" code nil nil [30521 30565])
            ("define-key" code nil nil [30566 30616])
            ("define-key" code nil nil [30617 30662])
            ("define-key" code nil nil [30663 30712])
            ("define-key" code nil nil [30713 30753])
            ("define-key" code nil nil [30754 30791])
            ("define-key" code nil nil [30792 30836])
            ("define-key" code nil nil [30837 30885])
            ("define-key" code nil nil [30886 30927])
            ("define-key" code nil nil [31001 31045])
            ("define-key" code nil nil [31112 31165])
            ("define-key" code nil nil [31199 31252])
            ("define-key" code nil nil [31253 31285])
            ("put" code nil nil [31286 31328])
            ("define-key" code nil nil [31399 31436])
            ("define-key" code nil nil [31437 31473])
            ("define-key" code nil nil [31652 31691])
            ("define-key" code nil nil [31692 31741])
            ("define-key" code nil nil [31742 31787])
            ("define-key" code nil nil [31789 31832])
            ("define-key" code nil nil [31833 31878])
            ("define-key" code nil nil [31879 31929])
            ("define-key" code nil nil [31930 31976])
            ("define-key" code nil nil [31977 32025])
            ("define-key" code nil nil [32026 32077])
            ("let" code nil nil [32079 32982])
            ("define-key" code nil nil [32984 33034])
            ("let" code nil nil [33035 33149])
            ("define-key" code nil nil [33150 33193])
            ("let" code nil nil [33220 33348])
            ("define-key" code nil nil [33349 33399])
            ("let" code nil nil [33431 33556])
            ("define-key" code nil nil [33557 33610])
            ("define-key" code nil nil [33666 33718])
            ("define-key" code nil nil [34001 34044])
            ("define-key" code nil nil [34046 34087])
            ("define-key" code nil nil [34088 34131])
            ("define-key" code nil nil [34132 34172])
            ("define-key" code nil nil [34173 34218])
            ("define-key" code nil nil [34219 34255])
            ("define-key" code nil nil [34256 34290])
            ("define-key" code nil nil [34341 34389])
            ("define-key" code nil nil [34447 34496])
            ("put" code nil nil [34497 34548])
            ("define-key" code nil nil [34550 34604])
            ("define-key" code nil nil [34605 34651])
            ("define-key" code nil nil [34652 34699])
            ("define-key" code nil nil [34700 34747])
            ("define-key" code nil nil [34749 34790])
            ("define-key" code nil nil [34791 34836])
            ("define-key" code nil nil [34837 34883])
            ("define-key" code nil nil [34884 34938])
            ("define-key" code nil nil [34939 34987])
            ("define-key" code nil nil [34989 35027])
            ("goto-map" variable (:default-value (make-sparse-keymap)) nil [35029 35103])
            ("define-key" code nil nil [35104 35137])
            ("define-key" code nil nil [35139 35178])
            ("define-key" code nil nil [35179 35218])
            ("define-key" code nil nil [35219 35258])
            ("define-key" code nil nil [35259 35299])
            ("define-key" code nil nil [35300 35340])
            ("define-key" code nil nil [35341 35385])
            ("define-key" code nil nil [35386 35430])
            ("define-key" code nil nil [35431 35475])
            ("search-map" variable (:default-value (make-sparse-keymap)) nil [35477 35557])
            ("define-key" code nil nil [35558 35593])
            ("define-key" code nil nil [35595 35632])
            ("define-key" code nil nil [35633 35681])
            ("define-key" code nil nil [35682 35730])
            ("define-key" code nil nil [35731 35779])
            ("define-key" code nil nil [35780 35843])
            ("define-key" code nil nil [35844 35901])
            ("define-key" code nil nil [35902 35952])
            ("define-key" code nil nil [35953 36006])
            ("define-key" code nil nil [36007 36073])
            ("define-key" code nil nil [36183 36239])
            ("define-key" code nil nil [36240 36286])
            ("define-key" code nil nil [36483 36540])
            ("define-key" code nil nil [36541 36596])
            ("define-key" code nil nil [36597 36651])
            ("define-key" code nil nil [36652 36719])
            ("define-key" code nil nil [36720 36785])
            ("define-key" code nil nil [36786 36828])
            ("define-key" code nil nil [36829 36873])
            ("define-key" code nil nil [36874 36918])
            ("define-key" code nil nil [36919 36961])
            ("define-key" code nil nil [36962 37015])
            ("define-key" code nil nil [37016 37066])
            ("define-key" code nil nil [37067 37118])
            ("define-key" code nil nil [37119 37171])
            ("define-key" code nil nil [37172 37219])
            ("put" code nil nil [37220 37250])
            ("define-key" code nil nil [37251 37297])
            ("define-key" code nil nil [37298 37352])
            ("define-key" code nil nil [37353 37405])
            ("define-key" code nil nil [37406 37465])
            ("define-key" code nil nil [37466 37524])
            ("define-key" code nil nil [37525 37583])
            ("define-key" code nil nil [37584 37632])
            ("define-key" code nil nil [37633 37680])
            ("define-key" code nil nil [37681 37741])
            ("define-key" code nil nil [37742 37800])
            ("define-key" code nil nil [37801 37854])
            ("define-key" code nil nil [37855 37922])
            ("define-key" code nil nil [37923 37989])
            ("define-key" code nil nil [38101 38160])
            ("define-key" code nil nil [38161 38210])
            ("define-key" code nil nil [38211 38261])
            ("define-key" code nil nil [38262 38302])
            ("define-key" code nil nil [38401 38453])
            ("define-key" code nil nil [38454 38508])
            ("define-key" code nil nil [38509 38553])
            ("define-key" code nil nil [38554 38591])
            ("define-key" code nil nil [38592 38647])
            ("define-key" code nil nil [38648 38704])
            ("define-key" code nil nil [38720 38762])
            ("define-key" code nil nil [38994 39041])
            ("define-key" code nil nil [39042 39089])
            ("define-key" code nil nil [39090 39147])
            ("let" code nil nil [43108 43954])
            ("define-key" code nil nil [43956 44005])
            ("define-key" code nil nil [44006 44052])
            ("define-key" code nil nil [44053 44102])
            ("define-key" code nil nil [45269 45315])
            ("define-key" code nil nil [45437 45484])
            ("define-key" code nil nil [45486 45534])
            ("define-key" code nil nil [45536 45583])
            ("define-key" code nil nil [45584 45625])
            ("define-key" code nil nil [45626 45670])
            ("define-key" code nil nil [45671 45717])
            ("define-key" code nil nil [45719 45757])
            ("define-key" code nil nil [45758 45807])
            ("define-key" code nil nil [45808 45860])
            ("define-key" code nil nil [45861 45907])
            ("define-key" code nil nil [45908 45953])
            ("define-key" code nil nil [45954 45997])
            ("define-key" code nil nil [45998 46047])
            ("define-key" code nil nil [46049 46084])
            ("define-key" code nil nil [46085 46123])
            ("define-key" code nil nil [46124 46163])
            ("define-key" code nil nil [46164 46199])
            ("define-key" code nil nil [46200 46247])
            ("define-key" code nil nil [46249 46294])
            ("define-key" code nil nil [46295 46334])
            ("define-key" code nil nil [46335 46380])
            ("define-key" code nil nil [46381 46431])
            ("defalias" code nil nil [46433 46494])
            ("mode-specific-map" variable (:default-value (symbol-function (quote mode-specific-command-prefix))) nil [46495 46610])
            ("define-key" code nil nil [46611 46671])
            ("global-set-key" code nil nil [46673 46712])
            ("define-key" code nil nil [46713 46755])
            ("global-set-key" code nil nil [46756 46794])
            ("define-key" code nil nil [46795 46837])
            ("global-set-key" code nil nil [46914 46953])
            ("global-set-key" code nil nil [46954 46992])
            ("global-set-key" code nil nil [47052 47090])
            ("global-set-key" code nil nil [47091 47141])
            ("global-set-key" code nil nil [47202 47242])
            ("global-set-key" code nil nil [47244 47289])
            ("define-key" code nil nil [47290 47335])
            ("global-set-key" code nil nil [47336 47380])
            ("define-key" code nil nil [47381 47425])
            ("global-set-key" code nil nil [47426 47474])
            ("define-key" code nil nil [47475 47523])
            ("global-set-key" code nil nil [47524 47565])
            ("define-key" code nil nil [47566 47607])
            ("global-set-key" code nil nil [47608 47658])
            ("define-key" code nil nil [47659 47709])
            ("global-set-key" code nil nil [47710 47754])
            ("define-key" code nil nil [47755 47799])
            ("define-key" code nil nil [47801 47842])
            ("define-key" code nil nil [47843 47885])
            ("define-key" code nil nil [47886 47931])
            ("define-key" code nil nil [47932 47970])
            ("define-key" code nil nil [47971 48011])
            ("define-key" code nil nil [48012 48050])
            ("define-key" code nil nil [48051 48089])
            ("define-key" code nil nil [48307 48358])
            ("define-key" code nil nil [48359 48413])
            ("define-key" code nil nil [48414 48455])
            ("define-key" code nil nil [48456 48498])
            ("define-key" code nil nil [48499 48546])
            ("define-key" code nil nil [48547 48588])
            ("define-key" code nil nil [48589 48628])
            ("define-key" code nil nil [48629 48673])
            ("define-key" code nil nil [48674 48718])
            ("define-key" code nil nil [48719 48773])
            ("define-key" code nil nil [48775 48820])
            ("define-key" code nil nil [48822 48862])
            ("define-key" code nil nil [48863 48918])
            ("define-key" code nil nil [48919 48973])
            ("ctl-x-r-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote clear-rectangle)) (define-key map "k" (quote kill-rectangle)) (define-key map "d" (quote delete-rectangle)) (define-key map "y" (quote yank-rectangle)) (define-key map "o" (quote open-rectangle)) (define-key map "t" (quote string-rectangle)) (define-key map "N" (quote rectangle-number-lines)) (define-key map "\367" (quote copy-rectangle-as-kill)) (define-key map " " (quote point-to-register)) (define-key map [67108896] (quote point-to-register)) (define-key map " " (quote point-to-register)) (define-key map "j" (quote jump-to-register)) (define-key map "s" (quote copy-to-register)) (define-key map "x" (quote copy-to-register)) (define-key map "i" (quote insert-register)) (define-key map "g" (quote insert-register)) (define-key map "r" (quote copy-rectangle-to-register)) (define-key map "n" (quote number-to-register)) (define-key map "+" (quote increment-register)) (define-key map "w" (quote window-configuration-to-register)) (define-key map "f" (quote frameset-to-register)) map)) nil [48977 50033])
            ("define-key" code nil nil [50034 50072])
            ("define-key" code nil nil [50074 50114])
            ("define-key" code nil nil [50115 50158])
            ("define-key" code nil nil [50161 50205])
            ("define-key" code nil nil [50206 50249])
            ("define-key" code nil nil [50250 50290])
            ("define-key" code nil nil [50291 50334])
            ("define-key" code nil nil [50335 50377])
            ("define-key" code nil nil [50378 50417])
            ("define-key" code nil nil [50418 50471])
            ("define-key" code nil nil [50473 50514])
            ("define-key" code nil nil [50515 50555])
            ("define-key" code nil nil [50556 50596])
            ("define-key" code nil nil [50597 50641])
            ("define-key" code nil nil [50642 50685])
            ("abbrev-map" variable (:default-value (make-sparse-keymap)) nil [50734 50806])
            ("define-key" code nil nil [50807 50844])
            ("define-key" code nil nil [50846 50890])
            ("define-key" code nil nil [50891 50938])
            ("define-key" code nil nil [50939 50985])
            ("define-key" code nil nil [50986 51030])
            ("define-key" code nil nil [51031 51086])
            ("define-key" code nil nil [51087 51140])
            ("define-key" code nil nil [51202 51256])
            ("define-key" code nil nil [51257 51299])
            ("define-key" code nil nil [51300 51342])
            ("define-key" code nil nil [51557 51601])
            ("define-key" code nil nil [51602 51643])
            ("define-key" code nil nil [51644 51687])
            ("define-key" code nil nil [51689 51723])
            ("define-key" code nil nil [51725 51771])
            ("define-key" code nil nil [51773 51836])
            ("define-key" code nil nil [51837 51901])
            ("define-key" code nil nil [51922 51970])
            ("define-key" code nil nil [51971 52019]))          
      :file "bindings.el.gz"
      :pointmax 52151
      :fsize 13097
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("describe-buffer-case-table" function (:user-visible-flag t) nil [1238 2284])
            ("case-table-get-table" function (:arguments ("case-table" "table")) nil [2286 2982])
            ("get-upcase-table" function (:arguments ("case-table")) nil [2984 3104])
            ("make-obsolete" code nil nil [3105 3167])
            ("copy-case-table" function (:arguments ("case-table")) nil [3169 3584])
            ("set-case-syntax-delims" function (:arguments ("l" "r" "table")) nil [3586 4420])
            ("set-case-syntax-pair" function (:arguments ("uc" "lc" "table")) nil [4422 5200])
            ("set-upcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5202 5803])
            ("set-downcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5805 6410])
            ("set-case-syntax" function (:arguments ("c" "syntax" "table")) nil [6412 7060])
            ("case-table" package nil nil [7062 7083]))          
      :file "case-table.el.gz"
      :pointmax 7113
      :fsize 2027
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mouse" include nil nil [1043 1059])
            ("cl-lib" include nil nil [1079 1096])
            ("scroll-bar-event-ratio" function (:arguments ("event")) nil [1118 1434])
            ("scroll-bar-scale" function (:arguments ("num-denom" "whole")) nil [1436 2117])
            ("scroll-bar-columns" function (:arguments ("side")) nil [2119 2794])
            ("scroll-bar-lines" function nil nil [2796 3324])
            ("scroll-bar-mode" variable nil nil [3392 3416])
            ("horizontal-scroll-bar-mode" variable nil nil [3417 3452])
            ("previous-scroll-bar-mode" variable nil nil [3453 3490])
            ("scroll-bar-mode-explicit" variable nil nil [3492 3657])
            ("set-scroll-bar-mode" function (:arguments ("value")) nil [3659 4071])
            ("scroll-bar-mode" variable (:default-value default-frame-scroll-bars) nil [4073 4763])
            ("setq" code nil nil [4864 4897])
            ("get-scroll-bar-mode" function nil nil [4899 4991])
            ("define-minor-mode" code nil nil [4993 5507])
            ("horizontal-scroll-bars-available-p" function nil nil [5509 5765])
            ("define-minor-mode" code nil nil [5767 6745])
            ("toggle-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6747 7407])
            ("toggle-horizontal-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7409 7910])
            ("scroll-bar-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8018 8548])
            ("scroll-bar-drag-position" function (:arguments ("portion-whole")) nil [8550 8805])
            ("scroll-bar-maybe-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8807 9817])
            ("scroll-bar-drag-1" function (:arguments ("event")) nil [9874 10338])
            ("scroll-bar-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [10340 11331])
            ("scroll-bar-horizontal-drag-1" function (:arguments ("event")) nil [11388 11888])
            ("scroll-bar-horizontal-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [11890 12927])
            ("scroll-bar-scroll-down" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [12929 13657])
            ("scroll-bar-scroll-up" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [13659 14379])
            ("scroll-bar-toolkit-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [14408 15588])
            ("scroll-bar-toolkit-horizontal-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [15590 17155])
            ("cond" code nil nil [17226 17936])
            ("scroll-bar" package nil nil [17940 17961]))          
      :file "scroll-bar.el.gz"
      :pointmax 17991
      :fsize 4444
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax '((close-paren 1096 . 1097) (symbol 1061 . 1078) (open-paren 1060 . 1061)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1227 1244])
            ("cl-defstruct" code nil nil [1295 1627])
            ("cl-defun" code nil nil [1629 2250])
            ("register-alist" variable nil nil [2252 2965])
            ("register" customgroup (:user-visible-flag t) nil [2967 3053])
            ("register-separator" variable nil nil [3055 3451])
            ("register-preview-delay" variable (:default-value 1) nil [3453 3779])
            ("get-register" function (:arguments ("register")) nil [3781 3920])
            ("set-register" function (:arguments ("register" "value")) nil [3922 4162])
            ("register-describe-oneline" function (:arguments ("c")) nil [4164 4483])
            ("register-preview-default" function (:arguments ("r")) nil [4485 4685])
            ("register-preview-function" variable (:default-value (function register-preview-default)) nil [4687 4891])
            ("register-preview" function (:arguments ("buffer" "show-empty")) nil [4893 5535])
            ("register-read-with-preview" function (:arguments ("prompt")) nil [5537 6795])
            ("point-to-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [6797 7484])
            ("window-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [7486 8130])
            ("set-advertised-calling-convention" code nil nil [8192 8287])
            ("frame-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [8289 8921])
            ("set-advertised-calling-convention" code nil nil [8983 9077])
            ("make-obsolete" code nil nil [9079 9156])
            ("defalias" code nil nil [9158 9205])
            ("jump-to-register" function
               (:user-visible-flag t
                :arguments ("register" "delete"))
                nil [9206 11249])
            ("register-swap-out" function nil nil [11251 11604])
            ("number-to-register" function
               (:user-visible-flag t
                :arguments ("number" "register"))
                nil [11606 12307])
            ("increment-register" function
               (:user-visible-flag t
                :arguments ("prefix" "register"))
                nil [12309 13167])
            ("view-register" function
               (:user-visible-flag t
                :arguments ("register"))
                nil [13169 13648])
            ("list-registers" function (:user-visible-flag t) nil [13650 14027])
            ("describe-register-1" function (:arguments ("register" "verbose")) nil [14029 16230])
            ("insert-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [16232 17439])
            ("copy-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag" "region"))
                nil [17441 18412])
            ("append-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [18414 19420])
            ("prepend-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [19422 20432])
            ("copy-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [20434 21370])
            ("register" package nil nil [21372 21391]))          
      :file "register.el.gz"
      :pointmax 21418
      :fsize 5932
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax '((close-paren 1244 . 1245) (symbol 1209 . 1226) (open-paren 1208 . 1209)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-envvar-name-history" variable nil nil [1441 1478])
            ("read-envvar-name" function (:arguments ("prompt" "mustmatch")) nil [1480 2282])
            ("setenv-history" variable nil nil [2330 2357])
            ("env--substitute-vars-regexp" variable
               (:constant-flag t
                :default-value "\\$\\(?:\\(?1:[[:alnum:]_]+\\)\\|{\\(?1:[^{}]+\\)}\\|\\$\\)")
                nil [2359 2461])
            ("substitute-env-vars" function (:arguments ("string" "when-undefined")) nil [2463 4017])
            ("substitute-env-in-file-name" function (:arguments ("filename")) nil [4019 4401])
            ("setenv-internal" function (:arguments ("env" "variable" "value" "keep-empty")) nil [4403 5395])
            ("setenv" function
               (:user-visible-flag t
                :arguments ("variable" "value" "substitute-env-vars"))
                nil [5465 7868])
            ("getenv" function
               (:user-visible-flag t
                :arguments ("variable" "frame"))
                nil [7870 8920])
            ("env" package nil nil [8922 8936]))          
      :file "env.el.gz"
      :pointmax 8959
      :fsize 3296
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("gs-program" variable (:default-value "gs") nil [908 977])
            ("gs-device" variable (:default-value "x11") nil [980 1057])
            ("gs-options" variable (:default-value (quote ("-q" "-dSAFER" "-dBATCH" "-sDEVICE=<device>" "<file>"))) nil [1060 1345])
            ("put" code nil nil [1346 1387])
            ("gs-options" function (:arguments ("device" "file")) nil [1389 1801])
            ("declare-function" code nil nil [3137 3204])
            ("declare-function" code nil nil [3205 3275])
            ("gs-width-in-pt" function (:arguments ("frame" "pixel-width")) nil [3277 3536])
            ("declare-function" code nil nil [3538 3606])
            ("declare-function" code nil nil [3607 3678])
            ("gs-height-in-pt" function (:arguments ("frame" "pixel-height")) nil [3680 3946])
            ("declare-function" code nil nil [3948 4053])
            ("gs-set-ghostview-window-prop" function (:arguments ("frame" "spec" "img-width" "img-height")) nil [4055 4877])
            ("declare-function" code nil nil [4879 4949])
            ("gs-set-ghostview-colors-window-prop" function (:arguments ("frame" "pixel-colors")) nil [4951 5329])
            ("declare-function" code nil nil [5331 5437])
            ("gs-load-image" function (:arguments ("frame" "spec" "img-width" "img-height" "window-and-pixmap-id" "pixel-colors")) nil [5454 8038])
            ("gs" package nil nil [8312 8325]))          
      :file "gs.el.gz"
      :pointmax 8347
      :fsize 3456
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock-keywords" variable nil nil [1117 1144])
            ("backup" customgroup (:user-visible-flag t) nil [1146 1217])
            ("find-file" customgroup (:user-visible-flag t) nil [1219 1278])
            ("delete-auto-save-files" variable (:default-value t) nil [1281 1531])
            ("directory-abbrev-alist" variable nil nil [1533 2501])
            ("make-backup-files" variable (:default-value t) nil [2503 3426])
            ("backup-inhibited" variable nil nil [3527 3719])
            ("put" code nil nil [3720 3762])
            ("backup-by-copying" variable nil nil [3764 3942])
            ("backup-by-copying-when-linked" variable nil nil [3944 4237])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4239 4727])
            ("put" code nil nil [4728 4785])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4787 5410])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5412 5631])
            ("buffer-offer-save" variable nil nil [5633 5852])
            ("make-variable-buffer-local" code nil nil [5853 5900])
            ("put" code nil nil [5901 5944])
            ("find-file-existing-other-name" variable (:default-value t) nil [5946 6239])
            ("find-file-visit-truename" variable nil nil [6241 6613])
            ("put" code nil nil [6614 6676])
            ("revert-without-query" variable nil nil [6678 7043])
            ("buffer-file-number" variable nil nil [7045 7314])
            ("make-variable-buffer-local" code nil nil [7315 7363])
            ("put" code nil nil [7364 7408])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7410 7555])
            ("buffer-file-read-only" variable nil nil [7557 7647])
            ("make-variable-buffer-local" code nil nil [7648 7699])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7701 8145])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8213 8282])
            ("declare-function" code nil nil [8284 8334])
            ("declare-function" code nil nil [8335 8384])
            ("declare-function" code nil nil [8385 8471])
            ("declare-function" code nil nil [8472 8539])
            ("declare-function" code nil nil [8540 8612])
            ("declare-function" code nil nil [8613 8669])
            ("declare-function" code nil nil [8670 8729])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8731 9404])
            ("file-precious-flag" variable nil nil [9406 10246])
            ("break-hardlink-on-save" variable nil nil [10248 11003])
            ("version-control" variable nil nil [11005 11375])
            ("put" code nil nil [11376 11472])
            ("dired-kept-versions" variable (:default-value 2) nil [11474 11614])
            ("delete-old-versions" variable nil nil [11616 11882])
            ("kept-old-versions" variable (:default-value 2) nil [11884 12023])
            ("put" code nil nil [12024 12079])
            ("kept-new-versions" variable (:default-value 2) nil [12081 12258])
            ("put" code nil nil [12259 12314])
            ("require-final-newline" variable nil nil [12316 13087])
            ("mode-require-final-newline" variable (:default-value t) nil [13089 14224])
            ("auto-save-default" variable (:default-value t) nil [14226 14368])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14370 15798])
            ("save-abbrevs" variable (:default-value t) nil [15800 16011])
            ("find-file-run-dired" variable (:default-value t) nil [16013 16210])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16212 16540])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16601 16929])
            ("define-obsolete-variable-alias" code nil nil [17037 17138])
            ("find-file-not-found-functions" variable nil nil [17139 17440])
            ("define-obsolete-variable-alias" code nil nil [17538 17610])
            ("find-file-hook" variable nil nil [17611 17888])
            ("define-obsolete-variable-alias" code nil nil [17890 17969])
            ("write-file-functions" variable nil nil [17970 18751])
            ("put" code nil nil [18752 18798])
            ("local-write-file-hooks" variable nil nil [18800 18835])
            ("make-variable-buffer-local" code nil nil [18836 18888])
            ("put" code nil nil [18889 18937])
            ("make-obsolete-variable" code nil nil [18938 19015])
            ("define-obsolete-variable-alias" code nil nil [19017 19108])
            ("write-contents-functions" variable nil nil [19109 19865])
            ("make-variable-buffer-local" code nil nil [19866 19920])
            ("enable-local-variables" variable (:default-value t) nil [19922 21174])
            ("enable-dir-local-variables" variable (:default-value t) nil [21176 21397])
            ("local-enable-local-variables" variable (:default-value t) nil [22760 23145])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [23147 23538])
            ("view-read-only" variable nil nil [23540 23890])
            ("file-name-history" variable nil nil [23892 24075])
            ("save-silently" variable nil nil [24077 24232])
            ("put" code nil nil [24236 24290])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [24291 24897])
            ("declare-function" code nil nil [24899 24971])
            ("declare-function" code nil nil [24972 25044])
            ("convert-standard-filename" function (:arguments ("filename")) nil [25046 26299])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [26301 27422])
            ("pwd" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [27426 27694])
            ("cd-path" variable nil nil [27696 27826])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27828 28447])
            ("cd-absolute" function (:arguments ("dir")) nil [28449 29354])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [29356 31246])
            ("directory-name-p" function (:arguments ("name")) nil [31248 31565])
            ("directory-files-recursively" function (:arguments ("dir" "regexp" "include-directories")) nil [31567 32962])
            ("module-file-suffix" variable nil nil [32964 32991])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [32993 33461])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [33463 34840])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [34842 37804])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [37806 38214])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [38216 38820])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [40373 42581])
            ("user-emacs-directory-warning" variable (:default-value t) nil [42583 42785])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [42787 44473])
            ("executable-find" function (:arguments ("command")) nil [44476 44784])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [44786 45481])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [45483 47235])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [47534 48253])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [48255 49474])
            ("file-local-copy" function (:arguments ("file")) nil [49476 49865])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [49867 54763])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [54765 56168])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [56300 57417])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [57419 58721])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [58723 60960])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [60963 61576])
            ("confirm-nonexistent-file-or-buffer" function nil nil [61578 62019])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [62021 63264])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [63266 63380])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63382 64627])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [64629 65560])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65562 66487])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [66489 66924])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [66926 67353])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67355 67736])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67738 68189])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [68191 68637])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [68639 69588])
            ("kill-buffer-hook" variable nil nil [69649 69889])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [69891 72944])
            ("create-file-buffer" function (:arguments ("filename")) nil [73069 73749])
            ("generate-new-buffer" function (:arguments ("name")) nil [73751 73956])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [73958 74110])
            ("make-obsolete-variable" code nil nil [74111 74188])
            ("abbreviated-home-dir" variable nil nil [74190 74297])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [74299 76650])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [76652 78579])
            ("find-file-wildcards" variable (:default-value t) nil [78582 78829])
            ("find-file-suppress-same-file-warnings" variable nil nil [78831 79157])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [79159 79438])
            ("out-of-memory-warning-percentage" variable nil nil [79440 79823])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [79825 80317])
            ("warn-maybe-out-of-memory" function (:arguments ("size")) nil [80319 81157])
            ("files--message" function (:arguments ("format" "args")) nil [81159 81426])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [81428 88498])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [88500 90994])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [90997 92018])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [92020 92712])
            ("insert-file-literally" function (:arguments ("filename")) nil [92714 93197])
            ("find-file-literally" variable nil nil [93199 93406])
            ("put" code nil nil [93407 93452])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [93454 94548])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [94551 97891])
            ("define-obsolete-function-alias" code nil nil [97893 97968])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [97970 99591])
            ("auto-mode-case-fold" variable (:default-value t) nil [99593 100031])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.jsm?\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [100033 111442])
            ("put" code nil nil [111443 111489])
            ("conf-mode-maybe" function nil nil [111491 111741])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [111743 113138])
            ("define-obsolete-variable-alias" code nil nil [113140 113253])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [113452 114312])
            ("define-obsolete-variable-alias" code nil nil [114314 114424])
            ("inhibit-local-variables-suffixes" variable nil nil [114426 114702])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [114774 114880])
            ("inhibit-local-variables-p" function nil nil [114882 115692])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [115694 116212])
            ("magic-mode-alist" variable nil nil [116214 116748])
            ("put" code nil nil [116749 116796])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [116798 118339])
            ("put" code nil nil [118340 118396])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [118398 118540])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [118542 124970])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [125223 125630])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [125632 125898])
            ("set-auto-mode-1" function nil nil [125900 127405])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [127443 127649])
            ("put" code nil nil [127650 127704])
            ("hack-local-variables-hook" variable nil nil [127706 127939])
            ("safe-local-variable-values" variable nil nil [127941 128201])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [128203 128865])
            ("mapc" code nil nil [128893 129510])
            ("dolist" code nil nil [130152 130840])
            ("put" code nil nil [130842 130956])
            ("put" code nil nil [130958 131004])
            ("file-local-variables-alist" variable nil nil [131006 131361])
            ("make-variable-buffer-local" code nil nil [131362 131418])
            ("put" code nil nil [131419 131471])
            ("dir-local-variables-alist" variable nil nil [131473 131855])
            ("make-variable-buffer-local" code nil nil [131856 131911])
            ("before-hack-local-variables-hook" variable nil nil [131913 132331])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [132333 135203])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [135205 135292])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [135294 137748])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [137750 140236])
            ("hack-local-variables--warned-lexical" variable nil nil [140297 140346])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [140348 146586])
            ("hack-local-variables-apply" function nil nil [146588 147389])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [147391 148079])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [148081 148984])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [148986 149090])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [149092 149280])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [149282 151102])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [151104 151536])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [151538 152451])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [152517 152632])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [152634 153210])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [153212 153345])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [153347 153992])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [153994 156086])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [156088 156852])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [156854 158229])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [158231 158413])
            ("dir-locals-find-file" function (:arguments ("file")) nil [158415 161431])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [161433 162276])
            ("enable-remote-dir-locals" variable nil nil [162278 162444])
            ("hack-dir-local-variables--warned-coding" variable nil nil [162446 162498])
            ("hack-dir-local-variables" function nil nil [162500 164156])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [164158 164464])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [164468 164903])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [164905 169994])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [169996 172061])
            ("file-extended-attributes" function (:arguments ("filename")) nil [172064 172378])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [172380 172982])
            ("backup-buffer" function nil nil [172985 176608])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [176610 177711])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [177713 178006])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [178008 178707])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [178709 180576])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [180578 181303])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [181305 182234])
            ("file-name-base" function (:arguments ("filename")) nil [182236 182480])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [182482 183230])
            ("backup-directory-alist" variable nil nil [183232 184269])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [184271 185563])
            ("make-backup-file-name" function (:arguments ("file")) nil [185565 185878])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [185880 186630])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [186632 188739])
            ("backup-file-name-p" function (:arguments ("file")) nil [188741 189002])
            ("backup-extract-version-start" variable nil nil [189004 189041])
            ("backup-extract-version" function (:arguments ("fn")) nil [189216 189668])
            ("find-backup-file-name" function (:arguments ("fn")) nil [189670 191809])
            ("file-nlinks" function (:arguments ("filename")) nil [191811 191928])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [193904 196666])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [196669 199487])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [199489 200060])
            ("auto-save-hook" variable nil nil [200062 200134])
            ("before-save-hook" variable nil nil [200136 200306])
            ("after-save-hook" variable nil nil [200308 200499])
            ("save-buffer-coding-system" variable nil nil [200501 200873])
            ("make-variable-buffer-local" code nil nil [200875 200930])
            ("put" code nil nil [200931 200982])
            ("basic-save-buffer" function
               (:user-visible-flag t
                :arguments ("called-interactively"))
                nil [200984 205355])
            ("basic-save-buffer-1" function nil nil [205637 205940])
            ("basic-save-buffer-2" function nil nil [206029 210878])
            ("declare-function" code nil nil [210880 210966])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [210968 212134])
            ("put" code nil nil [212135 212196])
            ("buffer-save-without-query" variable nil nil [212198 212314])
            ("make-variable-buffer-local" code nil nil [212315 212370])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [212372 215951])
            ("clear-visited-file-modtime" function nil nil [215954 216135])
            ("not-modified" function (:arguments ("arg")) nil [216137 216660])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [216662 216948])
            ("insert-file" function (:arguments ("filename")) nil [216950 217398])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [217400 218058])
            ("file-newest-backup" function (:arguments ("filename")) nil [218060 218983])
            ("rename-uniquely" function (:user-visible-flag t) nil [218985 220001])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [220003 221575])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [221577 221723])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [221725 224223])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [224225 224785])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [224787 225905])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [225907 229094])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [229142 229704])
            ("put" code nil nil [229708 229756])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [229757 230209])
            ("put" code nil nil [230211 230280])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [230281 230753])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [230755 231317])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [231319 232234])
            ("before-revert-hook" variable nil nil [232236 232439])
            ("after-revert-hook" variable nil nil [232441 232796])
            ("revert-buffer-in-progress-p" variable nil nil [232798 232912])
            ("revert-buffer-internal-hook" variable nil nil [232914 232950])
            ("revert-buffer-preserve-modes" variable nil nil [233140 233177])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [233179 235391])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [235393 238748])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [238750 240950])
            ("recover-this-file" function (:user-visible-flag t) nil [240952 241103])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [241105 243188])
            ("recover-session" function (:user-visible-flag t) nil [243190 244922])
            ("recover-session-finish" function (:user-visible-flag t) nil [244924 247327])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [247329 247580])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [247582 248185])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [248187 248715])
            ("rename-auto-save-file" function nil nil [248719 249283])
            ("make-auto-save-file-name" function nil nil [249285 253514])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [253516 253744])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [253747 255930])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [255933 256094])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [256096 256262])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [256264 257906])
            ("files" package nil nil [257980 258016])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [258018 259364])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [259366 261204])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [261207 261334])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [261336 261873])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [261875 262062])
            ("get-free-disk-space" function (:arguments ("dir")) nil [262064 263834])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [263906 266295])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [266297 266342])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [267416 277556])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [277558 278124])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [278126 278610])
            ("kill-emacs-query-functions" variable nil nil [278612 278918])
            ("confirm-kill-emacs" variable nil nil [278920 279360])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [279362 281451])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [281453 281941])
            ("setq" code nil nil [282051 282172])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [282373 285006])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [285049 285516])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [285518 286367])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [286369 287523])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [287525 288608])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [288610 289677])
            ("define-obsolete-variable-alias" code nil nil [289679 289761])
            ("trash-directory" variable nil nil [289785 290188])
            ("trash--hexify-table" variable nil nil [290190 290218])
            ("declare-function" code nil nil [290220 290286])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [290288 295552])
            ("define-key" code nil nil [295556 295596])
            ("define-key" code nil nil [295597 295647])
            ("define-key" code nil nil [295648 295698])
            ("define-key" code nil nil [295699 295741])
            ("define-key" code nil nil [295742 295787])
            ("define-key" code nil nil [295788 295829])
            ("define-key" code nil nil [295830 295869])
            ("define-key" code nil nil [295870 295908])
            ("define-key" code nil nil [295909 295954])
            ("define-key" code nil nil [295955 296012])
            ("define-key" code nil nil [296013 296058])
            ("define-key" code nil nil [296060 296112])
            ("define-key" code nil nil [296113 296175])
            ("define-key" code nil nil [296176 296231])
            ("define-key" code nil nil [296232 296291])
            ("define-key" code nil nil [296292 296339])
            ("define-key" code nil nil [296341 296399])
            ("define-key" code nil nil [296400 296451])
            ("define-key" code nil nil [296452 296506])
            ("define-key" code nil nil [296507 296568])
            ("define-key" code nil nil [296569 296628]))          
      :file "files.el.gz"
      :pointmax 296653
      :fsize 85688
      :lastmodtime '(22421 48169 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [975 992])
            ("cl-defgeneric" code nil nil [995 1259])
            ("cl-generic-define-context-rewriter" code nil nil [1261 1519])
            ("cl-defmethod" code nil nil [1521 1920])
            ("window-system-default-frame-alist" variable nil nil [1922 2369])
            ("display-format-alist" variable nil nil [2371 2623])
            ("initial-frame-alist" variable nil nil [2815 4048])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [4050 4755])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4757 5226])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5228 5524])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5526 5786])
            ("frame-initial-frame" variable nil nil [6282 6314])
            ("frame-initial-frame-alist" variable nil nil [6393 6427])
            ("frame-initial-geometry-arguments" variable nil nil [6429 6474])
            ("frame-initialize" function nil nil [6663 8195])
            ("frame-notice-user-settings" variable (:default-value t) nil [8197 8306])
            ("declare-function" code nil nil [8308 8367])
            ("declare-function" code nil nil [8368 8440])
            ("defalias" code nil nil [8442 8492])
            ("frame-notice-user-settings" function nil nil [8689 19804])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [19806 20007])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [20074 21249])
            ("get-other-frame" function nil nil [21251 21509])
            ("next-multiframe-window" function (:user-visible-flag t) nil [21511 21769])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [21771 22035])
            ("window-system-for-display" function (:arguments ("display")) nil [22037 22532])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [22534 22803])
            ("declare-function" code nil nil [22805 22862])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [22864 24216])
            ("make-frame-command" function (:user-visible-flag t) nil [24218 24481])
            ("before-make-frame-hook" variable nil nil [24483 24566])
            ("after-make-frame-functions" variable nil nil [24568 24715])
            ("after-setting-font-hook" variable nil nil [24717 24813])
            ("define-obsolete-function-alias" code nil nil [24843 24905])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [24907 25025])
            ("x-display-name" variable nil nil [25027 25050])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [25052 29046])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [29048 29347])
            ("minibuffer-frame-list" function nil nil [29349 29542])
            ("get-device-terminal" function (:arguments ("device")) nil [29594 30347])
            ("frames-on-display-list" function (:arguments ("device")) nil [30349 30791])
            ("framep-on-display" function (:arguments ("terminal")) nil [30793 31232])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [31234 32095])
            ("declare-function" code nil nil [32097 32147])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [32149 33259])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33261 34240])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [34242 34472])
            ("suspend-frame" function (:user-visible-flag t) nil [34474 34951])
            ("make-frame-names-alist" function nil nil [34953 35359])
            ("frame-name-history" variable nil nil [35361 35392])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [35393 36084])
            ("frame-background-mode" variable nil nil [36111 36787])
            ("declare-function" code nil nil [36789 36883])
            ("declare-function" code nil nil [36928 36998])
            ("inhibit-frame-set-background-mode" variable nil nil [37000 37046])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [37048 39946])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [39948 40464])
            ("current-frame-configuration" function nil nil [40495 41091])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [41093 43098])
            ("frame-height" function (:arguments ("frame")) nil [43193 43859])
            ("frame-width" function (:arguments ("frame")) nil [43861 44066])
            ("declare-function" code nil nil [44068 44173])
            ("define-obsolete-function-alias" code nil nil [44175 44248])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [44250 47566])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [47568 47819])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47821 48566])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [48568 49313])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49315 49801])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49803 50269])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [50271 50653])
            ("define-minor-mode" code nil nil [50655 51535])
            ("define-minor-mode" code nil nil [51537 52378])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [52380 52756])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [52758 53480])
            ("declare-function" code nil nil [53482 53544])
            ("declare-function" code nil nil [53545 53611])
            ("declare-function" code nil nil [53612 53676])
            ("frame-geometry" function (:arguments ("frame")) nil [53678 56124])
            ("frame--size-history" function (:arguments ("frame")) nil [56126 56954])
            ("declare-function" code nil nil [56956 57020])
            ("declare-function" code nil nil [57021 57089])
            ("declare-function" code nil nil [57090 57156])
            ("frame-edges" function (:arguments ("frame" "type")) nil [57158 58144])
            ("declare-function" code nil nil [58146 58209])
            ("declare-function" code nil nil [58210 58269])
            ("mouse-absolute-pixel-position" function nil nil [58271 58753])
            ("declare-function" code nil nil [58755 58828])
            ("declare-function" code nil nil [58829 58898])
            ("set-mouse-absolute-pixel-position" function (:arguments ("x" "y")) nil [58900 59325])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [59327 60017])
            ("declare-function" code nil nil [60055 60098])
            ("display-mouse-p" function (:arguments ("display")) nil [60100 60891])
            ("display-popup-menus-p" function (:arguments ("display")) nil [60893 61179])
            ("display-graphic-p" function (:arguments ("display")) nil [61181 61638])
            ("display-images-p" function (:arguments ("display")) nil [61640 61918])
            ("defalias" code nil nil [61920 61972])
            ("defalias" code nil nil [61973 62024])
            ("display-selections-p" function (:arguments ("display")) nil [62026 62654])
            ("declare-function" code nil nil [62656 62722])
            ("display-screens" function (:arguments ("display")) nil [62724 63113])
            ("declare-function" code nil nil [63115 63186])
            ("display-pixel-height" function (:arguments ("display")) nil [63188 63921])
            ("declare-function" code nil nil [63923 63993])
            ("display-pixel-width" function (:arguments ("display")) nil [63995 64723])
            ("display-mm-dimensions-alist" variable nil nil [64725 65343])
            ("declare-function" code nil nil [65345 65413])
            ("display-mm-height" function (:arguments ("display")) nil [65415 66294])
            ("declare-function" code nil nil [66296 66363])
            ("display-mm-width" function (:arguments ("display")) nil [66365 67240])
            ("declare-function" code nil nil [67242 67314])
            ("display-backing-store" function (:arguments ("display")) nil [67419 67937])
            ("declare-function" code nil nil [67939 68008])
            ("display-save-under" function (:arguments ("display")) nil [68010 68407])
            ("declare-function" code nil nil [68409 68474])
            ("display-planes" function (:arguments ("display")) nil [68476 68917])
            ("declare-function" code nil nil [68919 68989])
            ("display-color-cells" function (:arguments ("display")) nil [68991 69436])
            ("declare-function" code nil nil [69438 69509])
            ("display-visual-class" function (:arguments ("display")) nil [69511 70101])
            ("declare-function" code nil nil [70103 70189])
            ("declare-function" code nil nil [70190 70279])
            ("declare-function" code nil nil [70280 70368])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [70370 72895])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [72927 74797])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [74799 76058])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [76062 77114])
            ("define-obsolete-variable-alias" code nil nil [77159 77245])
            ("window-divider" customgroup (:user-visible-flag t) nil [77270 77373])
            ("window-divider-default-places" variable (:default-value (quote right-only)) nil [77375 78239])
            ("window-divider-width-valid-p" function (:arguments ("value")) nil [78241 78371])
            ("window-divider-default-bottom-width" variable (:default-value 6) nil [78373 79029])
            ("window-divider-default-right-width" variable (:default-value 6) nil [79031 79678])
            ("window-divider-mode-apply" function (:arguments ("enable")) nil [79680 80972])
            ("define-minor-mode" code nil nil [80974 81554])
            ("cursor" customgroup (:user-visible-flag t) nil [81577 81662])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [81664 81792])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [81794 81912])
            ("blink-cursor-blinks" variable (:default-value 10) nil [81914 82124])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [82126 82239])
            ("blink-cursor-idle-timer" variable nil nil [82241 82416])
            ("blink-cursor-timer" variable nil nil [82418 82580])
            ("blink-cursor-start" function nil nil [82582 83281])
            ("blink-cursor-timer-function" function nil nil [83283 83939])
            ("blink-cursor-end" function nil nil [83942 84337])
            ("blink-cursor-suspend" function nil nil [84339 84694])
            ("blink-cursor-check" function nil nil [84696 85181])
            ("define-obsolete-variable-alias" code nil nil [85183 85255])
            ("define-minor-mode" code nil nil [85257 86524])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [86562 87564])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [87566 88786])
            ("define-key" code nil nil [88808 88856])
            ("define-key" code nil nil [88857 88906])
            ("define-key" code nil nil [88907 88949])
            ("define-key" code nil nil [88950 88991])
            ("define-key" code nil nil [88992 89046])
            ("define-key" code nil nil [89047 89107])
            ("define-key" code nil nil [89108 89168])
            ("define-obsolete-variable-alias" code nil nil [89218 89300])
            ("make-variable-buffer-local" code nil nil [89302 89356])
            ("make-obsolete-variable" code nil nil [89383 89477])
            ("setq" code nil nil [89546 89610])
            ("mapc" code nil nil [89611 89851])
            ("frame" package nil nil [89853 89869]))          
      :file "frame.el.gz"
      :pointmax 89894
      :fsize 23005
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax '((close-paren 992 . 993) (symbol 957 . 974) (open-paren 956 . 957)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("Electric-command-loop" function (:arguments ("return-tag" "prompt" "inhibit-quitting" "loop-function" "loop-state")) nil [2973 5148])
            ("Electric-pop-up-window" function (:arguments ("buffer" "max-height")) nil [5753 6590])
            ("electricity" customgroup (:user-visible-flag t) nil [6612 6702])
            ("electric--after-char-pos" function nil nil [6704 7311])
            ("electric--sort-post-self-insertion-hook" function nil nil [7313 7794])
            ("electric-indent-chars" variable (:default-value (quote (10))) nil [8037 8132])
            ("electric-indent-functions" variable nil nil [8134 8442])
            ("defvar-local" code nil nil [8444 8674])
            ("electric-indent-functions-without-reindent" variable (:default-value (quote (indent-relative indent-to-left-margin indent-relative-maybe py-indent-line coffee-indent-line org-indent-line yaml-indent-line haskell-indentation-indent-line haskell-indent-cycle haskell-simple-indent yaml-indent-line))) nil [8676 9231])
            ("electric-indent-post-self-insert-function" function nil nil [9233 12215])
            ("put" code nil nil [12217 12279])
            ("electric-indent-just-newline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12281 12469])
            ("define-key" code nil nil [12486 12551])
            ("electric-newline-and-maybe-indent" function (:user-visible-flag t) nil [12567 13120])
            ("define-minor-mode" code nil nil [13137 14214])
            ("define-minor-mode" code nil nil [14231 14771])
            ("electric-layout-rules" variable nil nil [14828 15349])
            ("electric-layout-post-self-insert-function" function nil nil [15351 16850])
            ("put" code nil nil [16852 16914])
            ("define-minor-mode" code nil nil [16931 17610])
            ("electric-quote-comment" variable (:default-value t) nil [17635 17805])
            ("electric-quote-string" variable nil nil [17807 17977])
            ("electric-quote-paragraph" variable (:default-value t) nil [17979 18150])
            ("electric--insertable-p" function (:arguments ("string")) nil [18152 18422])
            ("electric-quote-post-self-insert-function" function nil nil [18424 20725])
            ("put" code nil nil [20727 20787])
            ("define-minor-mode" code nil nil [20804 22016])
            ("define-minor-mode" code nil nil [22033 22564])
            ("electric" package nil nil [22566 22585]))          
      :file "electric.el.gz"
      :pointmax 22613
      :fsize 6709
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("electric" include nil nil [880 899])
            ("chistory" include nil nil [917 936])
            ("electric-history-in-progress" variable nil nil [1006 1043])
            ("Electric-command-history-redo-expression" function
               (:user-visible-flag t
                :arguments ("noconfirm"))
                nil [1060 1530])
            ("electric-history-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [t] (quote Electric-history-undefined)) (define-key map "" (make-sparse-keymap)) (define-key map [27 t] (quote Electric-history-undefined)) (define-key map "" (quote universal-argument)) (define-key map " " (quote Electric-command-history-redo-expression)) (define-key map "!" (quote Electric-command-history-redo-expression)) (define-key map "" (quote eval-sexp)) (define-key map "" (quote down-list)) (define-key map "" (quote backward-up-list)) (define-key map "" (quote backward-sexp)) (define-key map "" (quote forward-sexp)) (define-key map "" (quote beginning-of-defun)) (define-key map "" (quote end-of-defun)) (define-key map "" (quote forward-list)) (define-key map "" (quote backward-list)) (define-key map "q" (quote Electric-history-quit)) (define-key map "" nil) (define-key map "" (quote Electric-history-quit)) (define-key map "" (quote Electric-history-quit)) (define-key map "" (quote suspend-frame)) (define-key map (char-to-string help-char) (quote Helper-help)) (define-key map "?" (quote Helper-describe-bindings)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "
" (quote next-line)) (define-key map "" (quote next-line)) (define-key map "" (quote previous-line)) (define-key map "" (quote next-line)) (define-key map "" (quote previous-line)) (define-key map "v" (quote scroll-down)) (define-key map "" (quote scroll-up)) (define-key map [home] (quote beginning-of-buffer)) (define-key map [down] (quote next-line)) (define-key map [up] (quote previous-line)) (define-key map [prior] (quote scroll-down)) (define-key map [next] (quote scroll-up)) (define-key map "" (quote recenter)) (define-key map "" (quote scroll-other-window)) map)) nil [1532 3401])
            ("electric-command-history-hook" variable nil nil [3403 3512])
            ("Helper-return-blurb" variable nil nil [3514 3542])
            ("electric-command-history" function (:user-visible-flag t) nil [3561 5513])
            ("Electric-history-undefined" function nil nil [5515 5717])
            ("Electric-history-quit" function (:user-visible-flag t) nil [5719 5957])
            ("echistory" package nil nil [5959 5979]))          
      :file "echistory.el.gz"
      :pointmax 6008
      :fsize 2086
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("case-replace" variable (:default-value t) nil [1016 1150])
            ("replace-char-fold" variable nil nil [1152 1486])
            ("replace-lax-whitespace" variable nil nil [1488 1795])
            ("replace-regexp-lax-whitespace" variable nil nil [1797 2118])
            ("query-replace-history" variable nil nil [2120 2290])
            ("query-replace-defaults" variable nil nil [2292 2491])
            ("query-replace-interactive" variable nil nil [2493 2634])
            ("make-obsolete-variable" code nil nil [2635 2883])
            ("query-replace-from-to-separator" variable (:default-value (propertize (if (char-displayable-p 8594) " → " " -> ") (quote face) (quote minibuffer-prompt))) nil [2885 3375])
            ("query-replace-from-history-variable" variable (:default-value (quote query-replace-history)) nil [3377 3723])
            ("query-replace-to-history-variable" variable (:default-value (quote query-replace-history)) nil [3725 4060])
            ("query-replace-skip-read-only" variable nil nil [4062 4232])
            ("query-replace-show-replacement" variable (:default-value t) nil [4234 4454])
            ("query-replace-highlight" variable (:default-value t) nil [4456 4594])
            ("query-replace-lazy-highlight" variable (:default-value t) nil [4596 4965])
            ("query-replace" variable
               (:default-value (quote ((t (:inherit isearch))))
                :type "face")
                nil [4967 5108])
            ("replace-count" variable nil nil [5110 5228])
            ("query-replace-descr" function (:arguments ("string")) nil [5230 5321])
            ("query-replace--split-string" function (:arguments ("string")) nil [5323 5815])
            ("query-replace-read-from" function (:arguments ("prompt" "regexp-flag")) nil [5817 8991])
            ("query-replace-compile-replacement" function (:arguments ("to" "regexp-flag")) nil [8993 10341])
            ("query-replace-read-to" function (:arguments ("from" "prompt" "regexp-flag")) nil [10344 10882])
            ("query-replace-read-args" function (:arguments ("prompt" "regexp-flag" "noerror")) nil [10884 11325])
            ("query-replace" function
               (:user-visible-flag t
                :arguments ("from-string" "to-string" "delimited" "start" "end" "backward" "region-noncontiguous-p"))
                nil [11327 14060])
            ("define-key" code nil nil [14062 14101])
            ("query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-string" "delimited" "start" "end" "backward" "region-noncontiguous-p"))
                nil [14103 17763])
            ("define-key" code nil nil [17765 17815])
            ("query-replace-regexp-eval" function (:arguments ("regexp" "to-expr" "delimited" "start" "end")) nil [17817 21132])
            ("map-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-strings" "n" "start" "end"))
                nil [21134 23161])
            ("replace-string" function (:arguments ("from-string" "to-string" "delimited" "start" "end" "backward")) nil [23163 25616])
            ("replace-regexp" function (:arguments ("regexp" "to-string" "delimited" "start" "end" "backward")) nil [25618 28812])
            ("regexp-history" variable nil nil [28816 29004])
            ("occur-collect-regexp-history" variable (:default-value (quote ("\\1"))) nil [29006 29104])
            ("read-regexp-defaults-function" variable nil nil [29106 30079])
            ("read-regexp-suggestions" function nil nil [30081 30662])
            ("read-regexp" function (:arguments ("prompt" "defaults" "history")) nil [30664 33470])
            ("defalias" code nil nil [33473 33522])
            ("defalias" code nil nil [33523 33569])
            ("defalias" code nil nil [33570 33605])
            ("keep-lines-read-args" function (:arguments ("prompt")) nil [33608 33794])
            ("keep-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [33796 36493])
            ("flush-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [36496 38544])
            ("how-many" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [38547 40352])
            ("occur-menu-map" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [next-error-follow-minor-mode] (quote (menu-item "Auto Occurrence Display" next-error-follow-minor-mode :help "Display another occurrence when moving the cursor" :button (:toggle and (boundp (quote next-error-follow-minor-mode)) next-error-follow-minor-mode)))) (bindings--define-key map [separator-1] menu-bar-separator) (bindings--define-key map [kill-this-buffer] (quote (menu-item "Kill Occur Buffer" kill-this-buffer :help "Kill the current *Occur* buffer"))) (bindings--define-key map [quit-window] (quote (menu-item "Quit Occur Window" quit-window :help "Quit the current *Occur* buffer.  Bury it, and maybe delete the selected frame"))) (bindings--define-key map [revert-buffer] (quote (menu-item "Revert Occur Buffer" revert-buffer :help "Replace the text in the *Occur* buffer with the results of rerunning occur"))) (bindings--define-key map [clone-buffer] (quote (menu-item "Clone Occur Buffer" clone-buffer :help "Create and return a twin copy of the current *Occur* buffer"))) (bindings--define-key map [occur-rename-buffer] (quote (menu-item "Rename Occur Buffer" occur-rename-buffer :help "Rename the current *Occur* buffer to *Occur: original-buffer-name*."))) (bindings--define-key map [occur-edit-buffer] (quote (menu-item "Edit Occur Buffer" occur-edit-mode :help "Edit the *Occur* buffer and apply changes to the original buffers."))) (bindings--define-key map [separator-2] menu-bar-separator) (bindings--define-key map [occur-mode-goto-occurrence-other-window] (quote (menu-item "Go To Occurrence Other Window" occur-mode-goto-occurrence-other-window :help "Go to the occurrence the current line describes, in another window"))) (bindings--define-key map [occur-mode-goto-occurrence] (quote (menu-item "Go To Occurrence" occur-mode-goto-occurrence :help "Go to the occurrence the current line describes"))) (bindings--define-key map [occur-mode-display-occurrence] (quote (menu-item "Display Occurrence" occur-mode-display-occurrence :help "Display in another window the occurrence the current line describes"))) (bindings--define-key map [occur-next] (quote (menu-item "Move to Next Match" occur-next :help "Move to the Nth (default 1) next match in an Occur mode buffer"))) (bindings--define-key map [occur-prev] (quote (menu-item "Move to Previous Match" occur-prev :help "Move to the Nth (default 1) previous match in an Occur mode buffer"))) map)) nil [40356 42958])
            ("occur-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote occur-mode-mouse-goto)) (define-key map "" (quote occur-mode-goto-occurrence)) (define-key map "e" (quote occur-edit-mode)) (define-key map "" (quote occur-mode-goto-occurrence)) (define-key map "o" (quote occur-mode-goto-occurrence-other-window)) (define-key map "" (quote occur-mode-display-occurrence)) (define-key map "\356" (quote occur-next)) (define-key map "\360" (quote occur-prev)) (define-key map "r" (quote occur-rename-buffer)) (define-key map "c" (quote clone-buffer)) (define-key map "" (quote next-error-follow-minor-mode)) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [42960 43777])
            ("occur-revert-arguments" variable nil nil [43779 43910])
            ("make-variable-buffer-local" code nil nil [43911 43963])
            ("put" code nil nil [43964 44012])
            ("occur-mode-hook" variable (:default-value (quote (turn-on-font-lock))) nil [44014 44134])
            ("occur-hook" variable nil nil [44136 44245])
            ("occur-mode-find-occurrence-hook" variable nil nil [44247 44539])
            ("put" code nil nil [44541 44579])
            ("define-derived-mode" code nil nil [44580 45044])
            ("occur-edit-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (define-key map [mouse-2] (quote occur-mode-mouse-goto)) (define-key map "" (quote occur-cease-edit)) (define-key map "" (quote occur-mode-display-occurrence)) (define-key map "" (quote next-error-follow-minor-mode)) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [45069 45521])
            ("define-derived-mode" code nil nil [45523 45984])
            ("occur-cease-edit" function (:user-visible-flag t) nil [45986 46177])
            ("occur-after-change-function" function (:arguments ("beg" "end" "length")) nil [46179 47681])
            ("occur-revert-function" function (:arguments ("_ignore1" "_ignore2")) nil [47685 47857])
            ("occur-mode-find-occurrence" function nil nil [47859 48125])
            ("defalias" code nil nil [48127 48188])
            ("occur-mode-goto-occurrence" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [48189 48937])
            ("occur-mode-goto-occurrence-other-window" function (:user-visible-flag t) nil [48939 49247])
            ("occur-mode-display-occurrence" function (:user-visible-flag t) nil [49249 49675])
            ("occur-find-match" function (:arguments ("n" "search" "message")) nil [49677 50028])
            ("occur-next" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [50030 50221])
            ("occur-prev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [50223 50425])
            ("occur-next-error" function
               (:user-visible-flag t
                :arguments ("argp" "reset"))
                nil [50427 51418])
            ("match" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "RoyalBlue3") (((class color) (min-colors 8) (background light)) :background "yellow" :foreground "black") (((class color) (min-colors 8) (background dark)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [51421 51996])
            ("list-matching-lines-default-context-lines" variable nil nil [51998 52315])
            ("defalias" code nil nil [52317 52355])
            ("list-matching-lines-face" variable (:default-value (quote match)) nil [52357 52575])
            ("list-matching-lines-buffer-name-face" variable (:default-value (quote underline)) nil [52577 52805])
            ("list-matching-lines-prefix-face" variable (:default-value (quote shadow)) nil [52807 53083])
            ("occur-excluded-properties" variable (:default-value (quote (read-only invisible intangible field mouse-face help-echo local-map keymap yank-handler follow-link))) nil [53085 53503])
            ("occur-read-primary-args" function nil nil [53505 54376])
            ("occur-rename-buffer" function
               (:user-visible-flag t
                :arguments ("unique-p" "interactive-p"))
                nil [54378 55265])
            ("occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [55267 56651])
            ("ido-ignore-item-temp-list" variable nil nil [56653 56687])
            ("multi-occur" function
               (:user-visible-flag t
                :arguments ("bufs" "regexp" "nlines"))
                nil [56689 57609])
            ("multi-occur-in-matching-buffers" function
               (:user-visible-flag t
                :arguments ("bufregexp" "regexp" "allbufs"))
                nil [57611 58564])
            ("occur-regexp-descr" function (:arguments ("regexp")) nil [58566 58979])
            ("occur-1" function (:arguments ("regexp" "nlines" "bufs" "buf-name")) nil [58981 62073])
            ("occur-engine" function (:arguments ("regexp" "buffers" "out-buf" "nlines" "case-fold" "title-face" "prefix-face" "match-face" "keep-props")) nil [62075 68989])
            ("occur-engine-line" function (:arguments ("beg" "end" "keep-props")) nil [68991 69481])
            ("occur-engine-add-prefix" function (:arguments ("lines" "prefix-face")) nil [69483 69707])
            ("occur-accumulate-lines" function (:arguments ("count" "keep-props" "pt")) nil [69709 70229])
            ("occur-context-lines" function (:arguments ("out-line" "nlines" "keep-props" "begpt" "endpt" "curr-line" "prev-line" "prev-after-lines" "prefix-face")) nil [70642 72469])
            ("query-replace-help" variable
               (:constant-flag t
                :default-value "Type Space or `y' to replace one match, Delete or `n' to skip to next,
RET or `q' to exit, Period to replace one match and exit,
Comma to replace but not move point immediately,
C-r to enter recursive edit (\\[exit-recursive-edit] to get out again),
C-w to delete match and recursive edit,
C-l to clear the screen, redisplay, and offer same replacement again,
! to replace all remaining matches in this buffer with no more questions,
^ to move point back to previous match,
E to edit the replacement string.
In multi-buffer replacements type `Y' to replace all remaining
matches in all remaining buffers with no more questions,
`N' to skip to the next buffer without replacing remaining matches
in the current buffer.")
                nil [72580 73374])
            ("query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote act)) (define-key map "" (quote skip)) (define-key map [delete] (quote skip)) (define-key map [backspace] (quote skip)) (define-key map "y" (quote act)) (define-key map "n" (quote skip)) (define-key map "Y" (quote act)) (define-key map "N" (quote skip)) (define-key map "e" (quote edit-replacement)) (define-key map "E" (quote edit-replacement)) (define-key map "," (quote act-and-show)) (define-key map "q" (quote exit)) (define-key map "" (quote exit)) (define-key map [return] (quote exit)) (define-key map "." (quote act-and-exit)) (define-key map "" (quote edit)) (define-key map "" (quote delete-and-edit)) (define-key map "" (quote recenter)) (define-key map "!" (quote automatic)) (define-key map "^" (quote backup)) (define-key map "" (quote help)) (define-key map [f1] (quote help)) (define-key map [help] (quote help)) (define-key map "?" (quote help)) (define-key map "" (quote quit)) (define-key map "" (quote quit)) (define-key map "" (quote scroll-up)) (define-key map "\366" (quote scroll-down)) (define-key map [next] (quote scroll-up)) (define-key map [prior] (quote scroll-down)) (define-key map [134217750] (quote scroll-other-window)) (define-key map [M-next] (quote scroll-other-window)) (define-key map [167772182] (quote scroll-other-window-down)) (define-key map [M-prior] (quote scroll-other-window-down)) (define-key map [escape] (quote exit-prefix)) map)) nil [73376 75412])
            ("multi-query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map query-replace-map) (define-key map "Y" (quote automatic-all)) (define-key map "N" (quote exit-current)) map)) nil [75414 76074])
            ("replace-match-string-symbols" function (:arguments ("n")) nil [76076 77237])
            ("replace-eval-replacement" function (:arguments ("expression" "count")) nil [77239 77602])
            ("replace-quote" function (:arguments ("replacement")) nil [77604 78078])
            ("replace-loop-through-replacements" function (:arguments ("data" "count")) nil [78080 78503])
            ("replace-match-data" function (:arguments ("integers" "reuse" "new")) nil [78505 78908])
            ("replace-match-maybe-edit" function (:arguments ("newtext" "fixedcase" "literal" "noedit" "match-data" "backward")) nil [78910 80497])
            ("replace-update-post-hook" variable nil nil [80499 80613])
            ("replace-search-function" variable nil nil [80615 80830])
            ("replace-re-search-function" variable nil nil [80832 81117])
            ("replace-search" function (:arguments ("search-string" "limit" "regexp-flag" "delimited-flag" "case-fold-search" "backward")) nil [81119 82439])
            ("replace-overlay" variable nil nil [82441 82469])
            ("replace-highlight" function (:arguments ("match-beg" "match-end" "range-beg" "range-end" "search-string" "regexp-flag" "delimited-flag" "case-fold-search" "backward")) nil [82471 83433])
            ("replace-dehighlight" function nil nil [83435 83772])
            ("perform-replace" function (:arguments ("from-string" "replacements" "query-flag" "regexp-flag" "delimited-flag" "repeat-count" "map" "start" "end" "backward" "region-noncontiguous-p")) nil [83774 99929]))          
      :file "replace.el.gz"
      :pointmax 99956
      :fsize 24962
      :lastmodtime '(22421 48000 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("outlines" customgroup (:user-visible-flag t) nil [1241 1338])
            ("outline-regexp" variable (:default-value "[*]+") nil [1340 1776])
            ("outline-heading-end-regexp" variable (:default-value "
") nil [1844 2172])
            ("outline-mode-prefix-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "@" (quote outline-mark-subtree)) (define-key map "" (quote outline-next-visible-heading)) (define-key map "" (quote outline-previous-visible-heading)) (define-key map "	" (quote outline-show-children)) (define-key map "" (quote outline-show-subtree)) (define-key map "" (quote outline-hide-subtree)) (define-key map "" (quote outline-up-heading)) (define-key map "" (quote outline-forward-same-level)) (define-key map "" (quote outline-backward-same-level)) (define-key map "" (quote outline-hide-body)) (define-key map "" (quote outline-show-all)) (define-key map "" (quote outline-hide-entry)) (define-key map "" (quote outline-show-entry)) (define-key map "" (quote outline-hide-leaves)) (define-key map "" (quote outline-show-branches)) (define-key map "" (quote outline-hide-sublevels)) (define-key map "" (quote outline-hide-other)) (define-key map "" (quote outline-move-subtree-up)) (define-key map "" (quote outline-move-subtree-down)) (define-key map [(control 60)] (quote outline-promote)) (define-key map [(control 62)] (quote outline-demote)) (define-key map "" (quote outline-insert-heading)) map)) nil [2252 3462])
            ("outline-mode-menu-bar-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [hide] (cons "Hide" (make-sparse-keymap "Hide"))) (define-key map [hide outline-hide-other] (quote (menu-item "Hide Other" outline-hide-other :help "Hide everything except current body and parent and top-level headings"))) (define-key map [hide outline-hide-sublevels] (quote (menu-item "Hide Sublevels" outline-hide-sublevels :help "Hide everything but the top LEVELS levels of headers, in whole buffer"))) (define-key map [hide outline-hide-subtree] (quote (menu-item "Hide Subtree" outline-hide-subtree :help "Hide everything after this heading at deeper levels"))) (define-key map [hide outline-hide-entry] (quote (menu-item "Hide Entry" outline-hide-entry :help "Hide the body directly following this heading"))) (define-key map [hide outline-hide-body] (quote (menu-item "Hide Body" outline-hide-body :help "Hide all body lines in buffer, leaving all headings visible"))) (define-key map [hide outline-hide-leaves] (quote (menu-item "Hide Leaves" outline-hide-leaves :help "Hide the body after this heading and at deeper levels"))) (define-key map [show] (cons "Show" (make-sparse-keymap "Show"))) (define-key map [show outline-show-subtree] (quote (menu-item "Show Subtree" outline-show-subtree :help "Show everything after this heading at deeper levels"))) (define-key map [show outline-show-children] (quote (menu-item "Show Children" outline-show-children :help "Show all direct subheadings of this heading"))) (define-key map [show outline-show-branches] (quote (menu-item "Show Branches" outline-show-branches :help "Show all subheadings of this heading, but not their bodies"))) (define-key map [show outline-show-entry] (quote (menu-item "Show Entry" outline-show-entry :help "Show the body directly following this heading"))) (define-key map [show outline-show-all] (quote (menu-item "Show All" outline-show-all :help "Show all of the text in the buffer"))) (define-key map [headings] (cons "Headings" (make-sparse-keymap "Headings"))) (define-key map [headings demote-subtree] (quote (menu-item "Demote Subtree" outline-demote :help "Demote headings lower down the tree"))) (define-key map [headings promote-subtree] (quote (menu-item "Promote Subtree" outline-promote :help "Promote headings higher up the tree"))) (define-key map [headings move-subtree-down] (quote (menu-item "Move Subtree Down" outline-move-subtree-down :help "Move the current subtree down past arg headlines of the same level"))) (define-key map [headings move-subtree-up] (quote (menu-item "Move Subtree Up" outline-move-subtree-up :help "Move the current subtree up past arg headlines of the same level"))) (define-key map [headings copy] (quote (menu-item "Copy to Kill Ring" outline-headers-as-kill :enable mark-active :help "Save the visible outline headers in region at the start of the kill ring"))) (define-key map [headings outline-insert-heading] (quote (menu-item "New Heading" outline-insert-heading :help "Insert a new heading at same depth at point"))) (define-key map [headings outline-backward-same-level] (quote (menu-item "Previous Same Level" outline-backward-same-level :help "Move backward to the arg'th subheading at same level as this one."))) (define-key map [headings outline-forward-same-level] (quote (menu-item "Next Same Level" outline-forward-same-level :help "Move forward to the arg'th subheading at same level as this one"))) (define-key map [headings outline-previous-visible-heading] (quote (menu-item "Previous" outline-previous-visible-heading :help "Move to the previous heading line"))) (define-key map [headings outline-next-visible-heading] (quote (menu-item "Next" outline-next-visible-heading :help "Move to the next visible heading line"))) (define-key map [headings outline-up-heading] (quote (menu-item "Up" outline-up-heading :help "Move to the visible heading line of which the present line is a subheading"))) map)) nil [3464 7583])
            ("outline-minor-mode-menu-bar-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [outline] (cons "Outline" (nconc (make-sparse-keymap "Outline") (cdr (apply (quote append) (mapcar (lambda (x) (if (consp x) (cons (quote (--- "---")) (cdr x)))) outline-mode-menu-bar-map)))))) map)) nil [7585 8084])
            ("outline-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" outline-mode-prefix-map) (define-key map [menu-bar] outline-mode-menu-bar-map) map)) nil [8086 8266])
            ("outline-font-lock-keywords" variable (:default-value (quote ((eval list (concat "^\\(?:" outline-regexp "\\).+") 0 (quote (outline-font-lock-face)) nil t)))) nil [8268 8515])
            ("outline-1" variable
               (:default-value (quote ((t :inherit font-lock-function-name-face)))
                :type "face")
                nil [8517 8615])
            ("outline-2" variable
               (:default-value (quote ((t :inherit font-lock-variable-name-face)))
                :type "face")
                nil [8617 8715])
            ("outline-3" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [8717 8809])
            ("outline-4" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [8811 8903])
            ("outline-5" variable
               (:default-value (quote ((t :inherit font-lock-type-face)))
                :type "face")
                nil [8905 8994])
            ("outline-6" variable
               (:default-value (quote ((t :inherit font-lock-constant-face)))
                :type "face")
                nil [8996 9089])
            ("outline-7" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [9091 9183])
            ("outline-8" variable
               (:default-value (quote ((t :inherit font-lock-string-face)))
                :type "face")
                nil [9185 9276])
            ("outline-font-lock-faces" variable (:default-value [outline-1 outline-2 outline-3 outline-4 outline-5 outline-6 outline-7 outline-8]) nil [9278 9397])
            ("outline-font-lock-face" function nil nil [9399 9706])
            ("outline-view-change-hook" variable nil nil [9708 9805])
            ("outline-mode-hook" variable nil nil [9807 9884])
            ("outline-blank-line" variable nil nil [9886 9980])
            ("define-derived-mode" code nil nil [9997 11913])
            ("outline-minor-mode-prefix" variable (:default-value "@") nil [11915 12199])
            ("define-minor-mode" code nil nil [12216 13226])
            ("outline-level" variable (:default-value (quote outline-level)) nil [13229 13453])
            ("outline-heading-alist" variable nil nil [13514 14447])
            ("make-variable-buffer-local" code nil nil [14448 14499])
            ("outline-level" function nil nil [14801 15179])
            ("outline-next-preface" function nil nil [15181 15562])
            ("outline-next-heading" function (:user-visible-flag t) nil [15564 15887])
            ("outline-previous-heading" function (:user-visible-flag t) nil [15889 16080])
            ("outline-invisible-p" function (:arguments ("pos")) nil [16082 16267])
            ("outline-back-to-heading" function (:arguments ("invisible-ok")) nil [16269 16843])
            ("outline-on-heading-p" function (:arguments ("invisible-ok")) nil [16845 17153])
            ("outline-insert-heading" function (:user-visible-flag t) nil [17155 17800])
            ("outline-invent-heading" function (:arguments ("head" "up")) nil [17802 18578])
            ("outline-promote" function
               (:user-visible-flag t
                :arguments ("which"))
                nil [18580 20137])
            ("outline-demote" function
               (:user-visible-flag t
                :arguments ("which"))
                nil [20139 21889])
            ("outline-head-from-level" function (:arguments ("level" "head" "alist")) nil [21891 23553])
            ("outline-map-region" function (:arguments ("fun" "beg" "end")) nil [23555 24066])
            ("outline-move-subtree-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [24093 24268])
            ("outline-move-subtree-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [24270 25643])
            ("outline-end-of-heading" function nil nil [25645 25833])
            ("outline-next-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25835 26692])
            ("outline-previous-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [26694 26972])
            ("outline-mark-subtree" function (:user-visible-flag t) nil [26974 27445])
            ("outline-isearch-open-invisible-function" variable nil nil [27449 27699])
            ("put" code nil nil [27701 27773])
            ("outline-flag-region" function (:arguments ("from" "to" "flag")) nil [27774 28583])
            ("outline-reveal-toggle-invisible" function (:arguments ("o" "hidep")) nil [28585 30500])
            ("outline-isearch-open-invisible" function (:arguments ("_overlay")) nil [30654 30798])
            ("outline-hide-entry" function (:user-visible-flag t) nil [30801 31050])
            ("define-obsolete-function-alias" code nil nil [31052 31127])
            ("outline-show-entry" function (:user-visible-flag t) nil [31129 31621])
            ("define-obsolete-function-alias" code nil nil [31623 31698])
            ("outline-hide-body" function (:user-visible-flag t) nil [31700 31862])
            ("define-obsolete-function-alias" code nil nil [31864 31937])
            ("outline-hide-region-body" function (:arguments ("start" "end")) nil [31939 32683])
            ("define-obsolete-function-alias" code nil nil [32685 32772])
            ("outline-show-all" function (:user-visible-flag t) nil [32774 32909])
            ("define-obsolete-function-alias" code nil nil [32911 32982])
            ("outline-hide-subtree" function (:user-visible-flag t) nil [32984 33115])
            ("define-obsolete-function-alias" code nil nil [33117 33196])
            ("outline-hide-leaves" function (:user-visible-flag t) nil [33198 33546])
            ("define-obsolete-function-alias" code nil nil [33548 33625])
            ("outline-show-subtree" function (:user-visible-flag t) nil [33627 33760])
            ("define-obsolete-function-alias" code nil nil [33762 33841])
            ("outline-show-heading" function nil nil [33843 34163])
            ("outline-hide-sublevels" function
               (:user-visible-flag t
                :arguments ("levels"))
                nil [34165 35569])
            ("define-obsolete-function-alias" code nil nil [35571 35654])
            ("outline-hide-other" function (:user-visible-flag t) nil [35656 36161])
            ("define-obsolete-function-alias" code nil nil [36163 36238])
            ("outline-toggle-children" function (:user-visible-flag t) nil [36240 36553])
            ("outline-flag-subtree" function (:arguments ("flag")) nil [36555 36798])
            ("outline-end-of-subtree" function nil nil [36800 37362])
            ("outline-show-branches" function (:user-visible-flag t) nil [37365 37508])
            ("define-obsolete-function-alias" code nil nil [37510 37591])
            ("outline-show-children" function
               (:user-visible-flag t
                :arguments ("level"))
                nil [37593 38506])
            ("define-obsolete-function-alias" code nil nil [38508 38589])
            ("outline-up-heading" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [38594 39484])
            ("outline-forward-same-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [39486 39977])
            ("outline-get-next-sibling" function nil nil [39979 40374])
            ("outline-backward-same-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [40376 40868])
            ("outline-get-last-sibling" function nil nil [40870 41350])
            ("outline-headers-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [41353 42522])
            ("outline" package nil nil [42524 42542])
            ("noutline" package nil nil [42543 42562]))          
      :file "outline.el.gz"
      :pointmax 42589
      :fsize 10841
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1158 1175])
            ("rectangle" customgroup (:user-visible-flag t) nil [1178 1268])
            ("operate-on-rectangle" function (:arguments ("function" "start" "end" "coerce-tabs")) nil [1337 2616])
            ("defvar-local" code nil nil [2734 2837])
            ("rectangle--pos-cols" function (:arguments ("start" "end" "window")) nil [2839 4472])
            ("rectangle--col-pos" function (:arguments ("col" "kind")) nil [4474 5251])
            ("rectangle--point-col" function (:arguments ("pos")) nil [5253 5433])
            ("rectangle--crutches" function nil nil [5435 5557])
            ("rectangle--reset-crutches" function nil nil [5558 5768])
            ("apply-on-rectangle" function (:arguments ("function" "start" "end" "args")) nil [5797 6926])
            ("delete-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [6928 7134])
            ("delete-extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines" "fill")) nil [7136 7532])
            ("extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines")) nil [7701 8665])
            ("spaces-strings" variable
               (:constant-flag t
                :default-value (quote ["" " " "  " "   " "    " "     " "      " "       " "        "]))
                nil [8667 8760])
            ("spaces-string" function (:arguments ("n")) nil [8762 8886])
            ("delete-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [8903 9394])
            ("delete-extract-rectangle" function (:arguments ("start" "end" "fill")) nil [9411 9895])
            ("extract-rectangle" function (:arguments ("start" "end")) nil [9912 10210])
            ("extract-rectangle-bounds" function (:arguments ("start" "end")) nil [10212 10636])
            ("killed-rectangle" variable nil nil [10638 10713])
            ("kill-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [10730 11798])
            ("copy-rectangle-as-kill" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [11815 12134])
            ("yank-rectangle" function (:user-visible-flag t) nil [12151 12302])
            ("insert-rectangle" function (:arguments ("rectangle")) nil [12319 12976])
            ("open-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [12993 13508])
            ("open-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [13510 13713])
            ("delete-whitespace-rectangle-line" function (:arguments ("startcol" "_endcol" "fill")) nil [13715 13982])
            ("defalias" code nil nil [13999 14055])
            ("delete-whitespace-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [14084 14649])
            ("string-rectangle-history" variable nil nil [14651 14688])
            ("string-rectangle-line" function (:arguments ("startcol" "endcol" "string" "delete")) nil [14689 14862])
            ("defvar-local" code nil nil [14864 14914])
            ("defvar-local" code nil nil [14915 14966])
            ("rectangle--string-flush-preview" function nil nil [14968 15135])
            ("rectangle--string-erase-preview" function nil nil [15137 15275])
            ("rectangle--space-to" function (:arguments ("col")) nil [15277 15362])
            ("rectangle-preview" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [15364 15488])
            ("rectangle-preview" variable (:default-value t) nil [15490 15624])
            ("rectangle--string-preview" function nil nil [15626 17346])
            ("rectangle--inhibit-region-highlight" variable nil nil [17467 17515])
            ("string-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [17532 19141])
            ("defalias" code nil nil [19158 19205])
            ("string-insert-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [19222 19894])
            ("clear-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [19911 20317])
            ("clear-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [20319 20732])
            ("rectangle-number-line-counter" variable nil nil [20788 20826])
            ("rectangle-number-line-callback" function (:arguments ("start" "_end" "format-string")) nil [20828 21059])
            ("rectangle--default-line-number-format" function (:arguments ("start" "end" "start-at")) nil [21061 21240])
            ("rectangle-number-lines" function
               (:user-visible-flag t
                :arguments ("start" "end" "start-at" "format"))
                nil [21257 22215])
            ("add-function" code nil nil [22418 22527])
            ("add-function" code nil nil [22528 22641])
            ("add-function" code nil nil [22642 22730])
            ("add-function" code nil nil [22731 22817])
            ("rectangle-mark-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [15] (quote open-rectangle)) (define-key map [20] (quote string-rectangle)) (define-key map [remap exchange-point-and-mark] (quote rectangle-exchange-point-and-mark)) (dolist (cmd (quote (right-char left-char forward-char backward-char next-line previous-line))) (define-key map (vector (quote remap) cmd) (intern (format "rectangle-%s" cmd)))) map)) nil [22819 23335])
            ("define-minor-mode" code nil nil [23352 23772])
            ("rectangle-exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [23774 24600])
            ("rectangle--*-char" function (:arguments ("cmd" "n" "other-cmd")) nil [24602 26396])
            ("rectangle-right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [26398 26575])
            ("rectangle-left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [26576 26751])
            ("rectangle-forward-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [26753 26940])
            ("rectangle-backward-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [26941 27130])
            ("rectangle-next-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27132 27392])
            ("rectangle-previous-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27393 27665])
            ("rectangle--extract-region" function (:arguments ("orig" "delete")) nil [27668 28515])
            ("rectangle--insert-region" function (:arguments ("orig" "strings")) nil [28517 28679])
            ("rectangle--insert-for-yank" function (:arguments ("strs")) nil [28681 29078])
            ("rectangle--place-cursor" function (:arguments ("leftcol" "left" "str")) nil [29080 29297])
            ("rectangle--highlight-for-redisplay" function (:arguments ("orig" "start" "end" "window" "rol")) nil [29299 34583])
            ("rectangle--unhighlight-for-redisplay" function (:arguments ("orig" "rol")) nil [34585 34779])
            ("rect" package nil nil [34781 34796]))          
      :file "rect.el.gz"
      :pointmax 34820
      :fsize 8607
      :lastmodtime '(22421 48000 0 0)
      :unmatched-syntax '((close-paren 1175 . 1176) (symbol 1140 . 1157) (open-paren 1139 . 1140)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("5x5" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [183 1124])
            ("5x5-crack-randomly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1126 1224])
            ("5x5-crack-mutating-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1226 1342])
            ("5x5-crack-mutating-best" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1344 1454])
            ("5x5-crack-xor-mutate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1456 1592])
            ("5x5-crack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1594 1964])
            ("ada-add-extensions" function (:prototype-flag t) nil [2120 2406])
            ("ada-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2408 2505])
            ("ada-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2661 2763])
            ("ada-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2919 3055])
            ("put" code nil nil [3194 3263])
            ("add-log-current-defun-function" variable nil nil [3265 3520])
            ("custom-autoload" code nil nil [3522 3583])
            ("add-log-full-name" variable nil nil [3585 3750])
            ("custom-autoload" code nil nil [3752 3800])
            ("add-log-mailing-address" variable nil nil [3802 4163])
            ("custom-autoload" code nil nil [4165 4219])
            ("prompt-for-change-log-name" function (:prototype-flag t) nil [4221 4318])
            ("find-change-log" function (:prototype-flag t) nil [4320 5097])
            ("add-change-log-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5099 6400])
            ("add-change-log-entry-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6402 6666])
            ("change-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6668 7094])
            ("add-log-current-defun" function (:prototype-flag t) nil [7096 7617])
            ("change-log-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7619 8020])
            ("ad-redefinition-action" variable (:default-value (quote warn)) nil [8172 8826])
            ("custom-autoload" code nil nil [8828 8880])
            ("ad-default-compilation-action" variable (:default-value (quote maybe)) nil [8882 9431])
            ("custom-autoload" code nil nil [9433 9492])
            ("ad-enable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [9494 9620])
            ("ad-disable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [9622 9749])
            ("ad-add-advice" function (:prototype-flag t) nil [9751 10813])
            ("ad-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10815 11896])
            ("defadvice" function (:prototype-flag t) nil [11898 14072])
            ("function-put" code nil nil [14074 14118])
            ("function-put" code nil nil [14120 14170])
            ("align" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [14288 15110])
            ("align-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15112 16920])
            ("align-entire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16922 17298])
            ("align-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17300 17728])
            ("align-highlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17730 18190])
            ("align-unhighlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18192 18317])
            ("align-newline-and-indent" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18319 18524])
            ("push" code nil nil [18645 18702])
            ("allout-auto-activation-helper" function (:prototype-flag t) nil [18704 18887])
            ("allout-setup" function (:prototype-flag t) nil [18889 19213])
            ("allout-auto-activation" variable nil nil [19215 19879])
            ("custom-autoload" code nil nil [19881 19935])
            ("put" code nil nil [19937 20059])
            ("put" code nil nil [20061 20153])
            ("put" code nil nil [20155 20269])
            ("put" code nil nil [20271 20328])
            ("put" code nil nil [20330 20388])
            ("put" code nil nil [20390 20454])
            ("put" code nil nil [20456 20526])
            ("put" code nil nil [20528 20669])
            ("put" code nil nil [20671 20792])
            ("put" code nil nil [20794 20913])
            ("put" code nil nil [20915 21055])
            ("put" code nil nil [21057 21198])
            ("put" code nil nil [21200 21265])
            ("put" code nil nil [21267 21368])
            ("put" code nil nil [21370 21440])
            ("put" code nil nil [21442 21508])
            ("allout-mode-p" function (:prototype-flag t) nil [21510 21616])
            ("allout-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [21618 34611])
            ("defalias" code nil nil [34613 34660])
            ("outlineify-sticky" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [34662 34938])
            ("push" code nil nil [35089 35154])
            ("allout-widgets-setup" function (:prototype-flag t) nil [35156 35381])
            ("allout-widgets-auto-activation" variable nil nil [35383 35917])
            ("custom-autoload" code nil nil [35919 35989])
            ("put" code nil nil [35991 36114])
            ("allout-widgets-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [36116 37133])
            ("defalias" code nil nil [37277 37330])
            ("ange-ftp-reread-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [37332 37727])
            ("ange-ftp-hook-function" function (:prototype-flag t) nil [37729 37815])
            ("animate-string" function (:prototype-flag t) nil [37958 38349])
            ("animate-sequence" function (:prototype-flag t) nil [38351 38715])
            ("animate-birthday-present" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38717 39032])
            ("push" code nil nil [39173 39236])
            ("ansi-color-for-comint-mode-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [39238 39348])
            ("ansi-color-process-output" function (:prototype-flag t) nil [39350 39939])
            ("push" code nil nil [40099 40162])
            ("antlr-show-makefile-rules" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40164 41018])
            ("antlr-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41020 41116])
            ("antlr-set-tabs" function (:prototype-flag t) nil [41118 41314])
            ("appt-add" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41456 41820])
            ("appt-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41822 42018])
            ("apropos-read-pattern" function (:prototype-flag t) nil [42143 42496])
            ("apropos-user-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42498 43000])
            ("apropos-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43002 43302])
            ("defalias" code nil nil [43304 43348])
            ("apropos-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43350 44113])
            ("apropos-documentation-property" function (:prototype-flag t) nil [44115 44275])
            ("apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44277 44956])
            ("apropos-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44958 45251])
            ("apropos-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45253 45895])
            ("apropos-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45897 46613])
            ("archive-mode" function (:prototype-flag t) nil [46749 47274])
            ("array-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [47393 50478])
            ("push" code nil nil [50625 50684])
            ("artist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [50686 58369])
            ("asm-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [58525 59253])
            ("auth-source-cache-expiry" variable (:default-value 7200) nil [59408 59575])
            ("custom-autoload" code nil nil [59577 59636])
            ("autoarg-mode" variable nil nil [59761 59895])
            ("custom-autoload" code nil nil [59897 59942])
            ("autoarg-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [59944 61027])
            ("autoarg-kp-mode" variable nil nil [61029 61326])
            ("custom-autoload" code nil nil [61328 61376])
            ("autoarg-kp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [61378 61803])
            ("autoconf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [61959 62064])
            ("auto-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [62206 62411])
            ("define-auto-insert" function (:prototype-flag t) nil [62413 62717])
            ("auto-insert-mode" variable nil nil [62719 63020])
            ("custom-autoload" code nil nil [63022 63074])
            ("auto-insert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [63076 63494])
            ("put" code nil nil [63652 63712])
            ("put" code nil nil [63714 63779])
            ("put" code nil nil [63781 63836])
            ("update-file-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [63838 64383])
            ("update-directory-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [64385 65201])
            ("batch-update-autoloads" function (:prototype-flag t) nil [65203 65457])
            ("auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [65599 66241])
            ("turn-on-auto-revert-mode" function (:prototype-flag t) nil [66243 66458])
            ("auto-revert-tail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [66460 67268])
            ("turn-on-auto-revert-tail-mode" function (:prototype-flag t) nil [67270 67509])
            ("global-auto-revert-mode" variable nil nil [67511 67840])
            ("custom-autoload" code nil nil [67842 67901])
            ("global-auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [67903 68812])
            ("mouse-avoidance-mode" variable nil nil [68931 69174])
            ("custom-autoload" code nil nil [69176 69227])
            ("mouse-avoidance-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [69229 70369])
            ("add-to-list" code nil nil [70525 70593])
            ("bat-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [70595 70894])
            ("put" code nil nil [71019 71074])
            ("battery" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [71076 71306])
            ("display-battery-mode" variable nil nil [71308 71625])
            ("custom-autoload" code nil nil [71627 71680])
            ("display-battery-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [71682 72169])
            ("benchmark-run" function (:prototype-flag t) nil [72330 72764])
            ("function-put" code nil nil [72766 72820])
            ("benchmark-run-compiled" function (:prototype-flag t) nil [72822 73158])
            ("function-put" code nil nil [73160 73223])
            ("benchmark" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [73225 73485])
            ("bibtex-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [73635 74349])
            ("bibtex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [74351 77020])
            ("bibtex-search-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [77022 77767])
            ("bibtex-style-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [77934 78038])
            ("binhex-begin-line" variable
               (:constant-flag t
                :default-value "^:...............................................................$")
                nil [78178 78345])
            ("binhex-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78347 78590])
            ("binhex-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78592 78736])
            ("binhex-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78738 78850])
            ("blackbox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78996 83958])
            ("define-key" code nil nil [84094 84137])
            ("define-key" code nil nil [84139 84181])
            ("define-key" code nil nil [84183 84238])
            ("define-key" code nil nil [84240 84289])
            ("bookmark-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "x" (quote bookmark-set)) (define-key map "m" (quote bookmark-set)) (define-key map "M" (quote bookmark-set-no-overwrite)) (define-key map "j" (quote bookmark-jump)) (define-key map "g" (quote bookmark-jump)) (define-key map "o" (quote bookmark-jump-other-window)) (define-key map "i" (quote bookmark-insert)) (define-key map "e" (quote edit-bookmarks)) (define-key map "f" (quote bookmark-insert-location)) (define-key map "r" (quote bookmark-rename)) (define-key map "d" (quote bookmark-delete)) (define-key map "l" (quote bookmark-load)) (define-key map "w" (quote bookmark-write)) (define-key map "s" (quote bookmark-save)) map)) nil [84291 85179])
            ("fset" code nil nil [85181 85214])
            ("bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [85216 86400])
            ("bookmark-set-no-overwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [86402 87684])
            ("bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [87686 88618])
            ("bookmark-jump-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [88620 88762])
            ("bookmark-relocate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [88764 89080])
            ("bookmark-insert-location" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [89082 89347])
            ("defalias" code nil nil [89349 89402])
            ("bookmark-rename" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [89404 90013])
            ("bookmark-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [90015 90425])
            ("bookmark-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [90427 90921])
            ("bookmark-write" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [90923 91048])
            ("function-put" code nil nil [91050 91113])
            ("bookmark-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [91115 91892])
            ("bookmark-load" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [91894 92822])
            ("bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [92824 93092])
            ("defalias" code nil nil [93094 93141])
            ("defalias" code nil nil [93143 93190])
            ("bookmark-bmenu-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [93192 93319])
            ("menu-bar-bookmark-map" variable (:default-value (let ((map (make-sparse-keymap "Bookmark functions"))) (bindings--define-key map [load] (quote (menu-item "Load a Bookmark File..." bookmark-load :help "Load bookmarks from a bookmark file)"))) (bindings--define-key map [write] (quote (menu-item "Save Bookmarks As..." bookmark-write :help "Write bookmarks to a file (reading the file name with the minibuffer)"))) (bindings--define-key map [save] (quote (menu-item "Save Bookmarks" bookmark-save :help "Save currently defined bookmarks"))) (bindings--define-key map [edit] (quote (menu-item "Edit Bookmark List" bookmark-bmenu-list :help "Display a list of existing bookmarks"))) (bindings--define-key map [delete] (quote (menu-item "Delete Bookmark..." bookmark-delete :help "Delete a bookmark from the bookmark list"))) (bindings--define-key map [rename] (quote (menu-item "Rename Bookmark..." bookmark-rename :help "Change the name of a bookmark"))) (bindings--define-key map [locate] (quote (menu-item "Insert Location..." bookmark-locate :help "Insert the name of the file associated with a bookmark"))) (bindings--define-key map [insert] (quote (menu-item "Insert Contents..." bookmark-insert :help "Insert the text of the file pointed to by a bookmark"))) (bindings--define-key map [set] (quote (menu-item "Set Bookmark..." bookmark-set :help "Set a bookmark named inside a file."))) (bindings--define-key map [jump] (quote (menu-item "Jump to Bookmark..." bookmark-jump :help "Jump to a bookmark (a point in some file)"))) map)) nil [93321 94768])
            ("defalias" code nil nil [94770 94825])
            ("browse-url-browser-function" variable (:default-value (quote browse-url-default-browser)) nil [94975 95538])
            ("custom-autoload" code nil nil [95540 95601])
            ("browse-url-of-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95603 95952])
            ("browse-url-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95954 96213])
            ("browse-url-of-dired-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96215 96349])
            ("browse-url-of-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96351 96470])
            ("browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96472 97174])
            ("browse-url-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97176 97470])
            ("browse-url-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97472 97756])
            ("browse-url-xdg-open" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97758 98005])
            ("browse-url-netscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98007 98816])
            ("make-obsolete" code nil nil [98818 98867])
            ("browse-url-mozilla" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98869 99672])
            ("browse-url-firefox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [99674 100411])
            ("browse-url-chromium" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [100413 100716])
            ("browse-url-galeon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [100718 101515])
            ("make-obsolete" code nil nil [101517 101564])
            ("browse-url-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101566 101716])
            ("browse-url-gnome-moz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101718 102362])
            ("make-obsolete" code nil nil [102364 102414])
            ("browse-url-mosaic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102416 103117])
            ("make-obsolete" code nil nil [103119 103166])
            ("browse-url-cci" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103168 103915])
            ("make-obsolete" code nil nil [103917 103961])
            ("browse-url-conkeror" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103963 104776])
            ("browse-url-w3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104778 105262])
            ("browse-url-w3-gnudoit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105264 105566])
            ("make-obsolete" code nil nil [105568 105619])
            ("browse-url-text-xterm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105621 106041])
            ("browse-url-text-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106043 106736])
            ("browse-url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106738 107449])
            ("browse-url-generic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107451 107852])
            ("browse-url-kde" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107854 108061])
            ("browse-url-elinks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108063 108429])
            ("push" code nil nil [108538 108592])
            ("bs-cycle-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108594 108796])
            ("bs-cycle-previous" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108798 109008])
            ("bs-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109010 109109])
            ("bs-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109111 109737])
            ("bubbles" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109880 110484])
            ("put" code nil nil [110655 110789])
            ("bug-reference-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110791 111103])
            ("bug-reference-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111105 111258])
            ("put" code nil nil [111414 111472])
            ("put" code nil nil [111473 111544])
            ("put" code nil nil [111545 111614])
            ("put" code nil nil [111616 111755])
            ("byte-compile-disable-warning" function (:prototype-flag t) nil [111757 112131])
            ("byte-compile-enable-warning" function (:prototype-flag t) nil [112133 112491])
            ("byte-force-recompile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112493 112692])
            ("byte-recompile-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [112694 113432])
            ("put" code nil nil [113433 113486])
            ("byte-compile-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113488 113885])
            ("compile-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113887 114104])
            ("byte-compile" function (:prototype-flag t) nil [114106 114287])
            ("display-call-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114289 114971])
            ("batch-byte-compile-if-not-done" function (:prototype-flag t) nil [114973 115201])
            ("batch-byte-compile" function (:prototype-flag t) nil [115203 115654])
            ("batch-byte-recompile-directory" function (:prototype-flag t) nil [115656 116100])
            ("put" code nil nil [116257 116314])
            ("put" code nil nil [116465 116528])
            ("put" code nil nil [116530 116591])
            ("put" code nil nil [116593 116656])
            ("calendar-hebrew-list-yahrzeits" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [116816 117100])
            ("define-key" code nil nil [117226 117267])
            ("calc-dispatch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117269 117406])
            ("calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117408 117560])
            ("full-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117562 117684])
            ("quick-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117686 117947])
            ("calc-eval" function (:prototype-flag t) nil [117949 118233])
            ("calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118235 118533])
            ("full-calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118535 118699])
            ("calc-grab-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118701 118842])
            ("calc-grab-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118844 118989])
            ("calc-embedded" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [118991 119127])
            ("calc-embedded-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [119129 119337])
            ("defmath" function (:prototype-flag t) nil [119339 119749])
            ("function-put" code nil nil [119751 119793])
            ("calc-undo" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [119942 119995])
            ("calculator" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [120137 120281])
            ("calendar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [120436 122112])
            ("canlock-insert-header" function (:prototype-flag t) nil [122254 122419])
            ("canlock-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [122421 122614])
            ("c-guess-basic-syntax" function (:prototype-flag t) nil [122773 122886])
            ("c-guess-guessed-offsets-alist" variable nil nil [123042 123121])
            ("c-guess-guessed-basic-offset" variable nil nil [123123 123200])
            ("c-guess" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [123202 123572])
            ("c-guess-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [123574 123890])
            ("c-guess-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [123892 124256])
            ("c-guess-buffer-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [124258 124568])
            ("c-guess-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [124570 124929])
            ("c-guess-region-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [124931 125820])
            ("c-guess-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [125822 126261])
            ("c-initialize-cc-mode" function (:prototype-flag t) nil [126414 126866])
            ("add-to-list" code nil nil [126868 126934])
            ("add-to-list" code nil nil [126936 127015])
            ("add-to-list" code nil nil [127017 127085])
            ("add-to-list" code nil nil [127087 127142])
            ("add-to-list" code nil nil [127144 127206])
            ("add-to-list" code nil nil [127208 127262])
            ("add-to-list" code nil nil [127264 127316])
            ("add-to-list" code nil nil [127318 127373])
            ("c-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127375 127923])
            ("c++-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127925 128482])
            ("add-to-list" code nil nil [128484 128539])
            ("objc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128541 129111])
            ("add-to-list" code nil nil [129113 129171])
            ("java-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129173 129735])
            ("add-to-list" code nil nil [129737 129793])
            ("idl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129795 130376])
            ("add-to-list" code nil nil [130378 130469])
            ("add-to-list" code nil nil [130471 130530])
            ("pike-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [130532 131094])
            ("add-to-list" code nil nil [131096 131152])
            ("add-to-list" code nil nil [131154 131211])
            ("add-to-list" code nil nil [131213 131271])
            ("add-to-list" code nil nil [131273 131331])
            ("add-to-list" code nil nil [131333 131391])
            ("awk-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [131393 131951])
            ("c-set-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [132110 133236])
            ("c-add-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [133238 133783])
            ("c-set-offset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [133785 134123])
            ("put" code nil nil [134275 134327])
            ("put" code nil nil [134328 134384])
            ("put" code nil nil [134385 134443])
            ("ccl-compile" function (:prototype-flag t) nil [134592 134717])
            ("ccl-dump" function (:prototype-flag t) nil [134719 134805])
            ("declare-ccl-program" function (:prototype-flag t) nil [134807 135269])
            ("define-ccl-program" function (:prototype-flag t) nil [135271 143158])
            ("function-put" code nil nil [143160 143213])
            ("check-ccl-program" function (:prototype-flag t) nil [143215 143536])
            ("ccl-execute-with-args" function (:prototype-flag t) nil [143538 143821])
            ("cconv-closure-convert" function (:prototype-flag t) nil [143970 144275])
            ("cconv-warnings-only" function (:prototype-flag t) nil [144277 144398])
            ("push" code nil nil [144536 144592])
            ("push" code nil nil [144747 144806])
            ("cfengine3-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [144808 145041])
            ("cfengine2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145043 145276])
            ("cfengine-auto-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145278 145400])
            ("char-fold-to-regexp" function (:prototype-flag t) nil [145539 146052])
            ("push" code nil nil [146200 146256])
            ("check-declare-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146428 146609])
            ("check-declare-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146611 146809])
            ("push" code nil nil [146966 147027])
            ("put" code nil nil [147028 147097])
            ("put" code nil nil [147098 147164])
            ("put" code nil nil [147165 147242])
            ("put" code nil nil [147243 147320])
            ("put" code nil nil [147321 147404])
            ("put" code nil nil [147405 147476])
            ("put" code nil nil [147477 147553])
            ("put" code nil nil [147554 147632])
            ("checkdoc-list-of-strings-p" function (:prototype-flag t) nil [147634 147746])
            ("put" code nil nil [147747 147811])
            ("put" code nil nil [147812 147877])
            ("checkdoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [147879 148099])
            ("checkdoc-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [148101 148629])
            ("checkdoc-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [148631 149171])
            ("checkdoc-eval-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149173 149462])
            ("checkdoc-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149464 149765])
            ("checkdoc-file" function (:prototype-flag t) nil [149767 149892])
            ("checkdoc-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149894 150249])
            ("checkdoc-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150251 150621])
            ("checkdoc-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150623 150912])
            ("checkdoc-rogue-spaces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150914 151273])
            ("checkdoc-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151275 151490])
            ("checkdoc-eval-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151492 151833])
            ("checkdoc-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151835 152200])
            ("checkdoc-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152202 152409])
            ("checkdoc-ispell-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152411 152657])
            ("checkdoc-ispell-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152659 152910])
            ("checkdoc-ispell-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152912 153181])
            ("checkdoc-ispell-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153183 153431])
            ("checkdoc-ispell-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153433 153652])
            ("checkdoc-ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153654 153894])
            ("checkdoc-ispell-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [153896 154135])
            ("checkdoc-ispell-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154137 154367])
            ("checkdoc-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154369 154921])
            ("checkdoc-package-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [154923 155050])
            ("decode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [155210 155362])
            ("decode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [155364 155471])
            ("encode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [155473 155621])
            ("encode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [155623 155726])
            ("post-read-decode-hz" function (:prototype-flag t) nil [155728 155796])
            ("pre-write-encode-hz" function (:prototype-flag t) nil [155798 155870])
            ("repeat-matching-complex-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156006 156411])
            ("list-command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156413 156780])
            ("command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [156782 157407])
            ("common-lisp-indent-function" function (:prototype-flag t) nil [157568 161077])
            ("push" code nil nil [161228 161285])
            ("define-obsolete-variable-alias" code nil nil [161287 161377])
            ("cl-custom-print-functions" variable nil nil [161379 161865])
            ("c-macro-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [162018 162554])
            ("run-scheme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [162693 163357])
            ("color-name-to-rgb" function (:prototype-flag t) nil [163476 164007])
            ("comint-output-filter-functions" variable (:default-value (quote (ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))) nil [164128 164796])
            ("make-comint-in-buffer" function (:prototype-flag t) nil [164798 165593])
            ("make-comint" function (:prototype-flag t) nil [165595 166333])
            ("comint-run" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166335 166675])
            ("function-put" code nil nil [166677 166734])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [166736 166956])
            ("comint-redirect-send-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166958 167256])
            ("comint-redirect-send-command-to-process" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167258 167552])
            ("comint-redirect-results-list" function (:prototype-flag t) nil [167554 167809])
            ("comint-redirect-results-list-from-process" function (:prototype-flag t) nil [167811 168079])
            ("compare-windows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [168224 169501])
            ("compilation-mode-hook" variable nil nil [169654 169742])
            ("custom-autoload" code nil nil [169744 169796])
            ("compilation-start-hook" variable nil nil [169798 169940])
            ("custom-autoload" code nil nil [169942 169995])
            ("compilation-window-height" variable nil nil [169997 170107])
            ("custom-autoload" code nil nil [170109 170165])
            ("compilation-process-setup-function" variable nil nil [170167 170472])
            ("compilation-buffer-name-function" variable nil nil [170474 170771])
            ("compilation-finish-function" variable nil nil [170773 170978])
            ("compilation-finish-functions" variable nil nil [170980 171198])
            ("put" code nil nil [171199 171257])
            ("compilation-ask-about-save" variable (:default-value t) nil [171259 171428])
            ("custom-autoload" code nil nil [171430 171487])
            ("compilation-search-path" variable (:default-value (quote (nil))) nil [171489 171735])
            ("custom-autoload" code nil nil [171737 171791])
            ("compile-command" variable (:default-value (purecopy "make -k ")) nil [171793 172379])
            ("custom-autoload" code nil nil [172381 172427])
            ("put" code nil nil [172428 172573])
            ("compilation-disable-input" variable nil nil [172575 172817])
            ("custom-autoload" code nil nil [172819 172875])
            ("compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172877 174130])
            ("compilation-start" function (:prototype-flag t) nil [174132 175084])
            ("compilation-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175086 175488])
            ("put" code nil nil [175490 175538])
            ("compilation-shell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175540 176032])
            ("compilation-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176034 176446])
            ("compilation-next-error-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176448 176677])
            ("dynamic-completion-mode" variable nil nil [176819 177148])
            ("custom-autoload" code nil nil [177150 177209])
            ("dynamic-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177211 177486])
            ("conf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177644 179071])
            ("conf-unix-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179073 179394])
            ("conf-windows-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179396 179868])
            ("conf-javaprop-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179870 180294])
            ("conf-space-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180296 181056])
            ("conf-space-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181058 181217])
            ("conf-colon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181219 181545])
            ("conf-ppd-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181547 181875])
            ("conf-xdefaults-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181877 182194])
            ("cookie" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [182337 182659])
            ("cookie-insert" function (:prototype-flag t) nil [182661 182909])
            ("cookie-snarf" function (:prototype-flag t) nil [182911 183189])
            ("put" code nil nil [183348 183407])
            ("put" code nil nil [183408 183467])
            ("put" code nil nil [183468 183527])
            ("copyright-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [183529 183981])
            ("copyright-fix-years" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [183983 184250])
            ("copyright" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184252 184374])
            ("copyright-update-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184376 184594])
            ("put" code nil nil [184755 184811])
            ("put" code nil nil [184812 184868])
            ("put" code nil nil [184869 184935])
            ("put" code nil nil [184936 184992])
            ("put" code nil nil [184993 185063])
            ("put" code nil nil [185064 185134])
            ("put" code nil nil [185135 185198])
            ("cperl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [185200 193493])
            ("cperl-perldoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [193495 193578])
            ("cperl-perldoc-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [193580 193686])
            ("cpp-highlight-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [193827 194123])
            ("cpp-parse-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [194125 194221])
            ("completing-read-multiple" function (:prototype-flag t) nil [194363 195325])
            ("css-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [195480 195571])
            ("add-to-list" code nil nil [195573 195631])
            ("scss-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [195633 195722])
            ("cua-mode" variable nil nil [195878 196147])
            ("custom-autoload" code nil nil [196149 196191])
            ("cua-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [196193 197311])
            ("cua-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197313 197439])
            ("cua-rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197594 197782])
            ("cursor-sensor-inhibit" variable nil nil [197954 197988])
            ("cursor-intangible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197990 198133])
            ("cursor-sensor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [198135 198634])
            ("custom-browse-sort-alphabetically" variable nil nil [198771 198893])
            ("custom-autoload" code nil nil [198895 198960])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [198962 199080])
            ("custom-autoload" code nil nil [199082 199147])
            ("custom-menu-sort-alphabetically" variable nil nil [199149 199264])
            ("custom-autoload" code nil nil [199266 199329])
            ("customize-set-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [199331 199856])
            ("customize-set-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [199858 200511])
            ("customize-save-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [200513 201172])
            ("customize-push-and-save" function (:prototype-flag t) nil [201174 201586])
            ("customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [201588 201882])
            ("customize-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [201884 202145])
            ("customize-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [202147 202340])
            ("customize-group-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [202342 202499])
            ("defalias" code nil nil [202501 202549])
            ("customize-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [202551 202661])
            ("defalias" code nil nil [202663 202737])
            ("customize-option-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [202739 202918])
            ("customize-package-emacs-version-alist" variable nil nil [202920 204259])
            ("defalias" code nil nil [204261 204317])
            ("customize-changed-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204319 204782])
            ("customize-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204784 205203])
            ("customize-face-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205205 205535])
            ("customize-unsaved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205537 205661])
            ("customize-rogue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205663 205775])
            ("customize-saved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205777 205871])
            ("customize-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205873 206406])
            ("customize-apropos-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [206408 206557])
            ("customize-apropos-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [206559 206673])
            ("customize-apropos-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [206675 206791])
            ("custom-prompt-customize-unsaved-options" function (:prototype-flag t) nil [206793 207020])
            ("custom-buffer-create" function (:prototype-flag t) nil [207022 207368])
            ("custom-buffer-create-other-window" function (:prototype-flag t) nil [207370 207783])
            ("customize-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207785 207908])
            ("custom-file" variable nil nil [207910 209431])
            ("custom-autoload" code nil nil [209433 209476])
            ("custom-save-all" function (:prototype-flag t) nil [209478 209577])
            ("customize-save-customized" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209579 209703])
            ("custom-menu-create" function (:prototype-flag t) nil [209705 209874])
            ("customize-menu-create" function (:prototype-flag t) nil [209876 210180])
            ("customize-create-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [210319 210741])
            ("custom-theme-visit-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [210743 210865])
            ("describe-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [210867 210988])
            ("customize-themes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [210990 211219])
            ("cvs-status-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211367 211457])
            ("push" code nil nil [211603 211661])
            ("cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211663 212174])
            ("define-obsolete-function-alias" code nil nil [212176 212247])
            ("global-cwarn-mode" variable nil nil [212249 212554])
            ("custom-autoload" code nil nil [212556 212604])
            ("global-cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [212606 212999])
            ("cyrillic-encode-koi8-r-char" function (:prototype-flag t) nil [213159 213297])
            ("cyrillic-encode-alternativnyj-char" function (:prototype-flag t) nil [213299 213451])
            ("standard-display-cyrillic-translit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [213453 214042])
            ("put" code nil nil [214166 214221])
            ("put" code nil nil [214222 214273])
            ("define-key" code nil nil [214275 214315])
            ("define-key" code nil nil [214317 214365])
            ("dabbrev-completion" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214367 214857])
            ("dabbrev-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [214859 215735])
            ("data-debug-new-buffer" function (:prototype-flag t) nil [215889 216001])
            ("dbus-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216125 216403])
            ("dcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216559 220568])
            ("setq" code nil nil [220716 220738])
            ("debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [220740 221153])
            ("debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [221155 221867])
            ("cancel-debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [221869 222192])
            ("decipher" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [222338 222459])
            ("decipher-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [222461 223188])
            ("push" code nil nil [223324 223384])
            ("delimit-columns-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [223386 223486])
            ("delimit-columns-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [223488 223641])
            ("delimit-columns-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [223643 223816])
            ("defalias" code nil nil [223936 223990])
            ("delete-selection-mode" variable nil nil [223992 224313])
            ("custom-autoload" code nil nil [224315 224368])
            ("delete-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224370 225056])
            ("define-derived-mode" function (:prototype-flag t) nil [225210 227318])
            ("function-put" code nil nil [227320 227374])
            ("derived-mode-init-mode-variables" function (:prototype-flag t) nil [227376 227660])
            ("describe-text-properties" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [227801 228219])
            ("describe-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [228221 229102])
            ("describe-char-eldoc" function (:prototype-flag t) nil [229104 229640])
            ("desktop-save-mode" variable nil nil [229764 230069])
            ("custom-autoload" code nil nil [230071 230121])
            ("desktop-save-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [230123 231053])
            ("desktop-locals-to-save" variable (:default-value (quote (desktop-locals-to-save truncate-lines case-fold-search case-replace fill-column overwrite-mode change-log-default-name line-number-mode column-number-mode size-indication-mode buffer-file-coding-system indent-tabs-mode tab-width indicate-buffer-boundaries indicate-empty-lines show-trailing-whitespace))) nil [231055 231587])
            ("custom-autoload" code nil nil [231589 231642])
            ("defvar-local" code nil nil [231644 232240])
            ("desktop-buffer-mode-handlers" variable nil nil [232242 233550])
            ("put" code nil nil [233552 233611])
            ("desktop-minor-mode-handlers" variable nil nil [233613 234928])
            ("put" code nil nil [234930 234988])
            ("desktop-clear" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [234990 235443])
            ("desktop-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [235445 236781])
            ("desktop-remove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [236783 236928])
            ("desktop-read" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [236930 237454])
            ("desktop-load-default" function (:prototype-flag t) nil [237456 237599])
            ("make-obsolete" code nil nil [237601 237665])
            ("desktop-change-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237667 237922])
            ("desktop-save-in-desktop-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237924 238039])
            ("desktop-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238041 238129])
            ("gnus-article-outlook-unwrap-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238275 238690])
            ("gnus-article-outlook-repair-attribution" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238692 238886])
            ("gnus-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238888 239166])
            ("gnus-article-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239168 239303])
            ("diary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239459 239809])
            ("diary-mail-entries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [239811 240578])
            ("diary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [240580 240670])
            ("diff-switches" variable (:default-value (purecopy "-u")) nil [240792 240904])
            ("custom-autoload" code nil nil [240906 240947])
            ("diff-command" variable (:default-value (purecopy "diff")) nil [240949 241024])
            ("custom-autoload" code nil nil [241026 241066])
            ("diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [241068 241634])
            ("diff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [241636 241969])
            ("diff-latest-backup-file" function (:prototype-flag t) nil [241971 242086])
            ("diff-buffer-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [242088 242292])
            ("diff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [242437 243017])
            ("diff-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243019 243299])
            ("dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243420 243640])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [243759 244248])
            ("custom-autoload" code nil nil [244250 244301])
            ("dired-directory" variable nil nil [244303 244606])
            ("define-key" code nil nil [244608 244641])
            ("dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [244643 245659])
            ("define-key" code nil nil [245661 245709])
            ("dired-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [245711 245866])
            ("define-key" code nil nil [245868 245915])
            ("dired-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [245917 246063])
            ("dired-noselect" function (:prototype-flag t) nil [246065 246221])
            ("dired-mode" function (:prototype-flag t) nil [246223 249264])
            ("put" code nil nil [249266 249310])
            ("dirtrack-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [249446 250038])
            ("dirtrack" function (:prototype-flag t) nil [250040 250369])
            ("disassemble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [250520 250888])
            ("make-display-table" function (:prototype-flag t) nil [251030 251127])
            ("display-table-slot" function (:prototype-flag t) nil [251129 251448])
            ("set-display-table-slot" function (:prototype-flag t) nil [251450 251780])
            ("describe-display-table" function (:prototype-flag t) nil [251782 251899])
            ("describe-current-display-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [251901 252042])
            ("standard-display-8bit" function (:prototype-flag t) nil [252044 252550])
            ("standard-display-default" function (:prototype-flag t) nil [252552 252691])
            ("standard-display-ascii" function (:prototype-flag t) nil [252693 252809])
            ("standard-display-g1" function (:prototype-flag t) nil [252811 253042])
            ("standard-display-graphic" function (:prototype-flag t) nil [253044 253262])
            ("standard-display-underline" function (:prototype-flag t) nil [253264 253393])
            ("create-glyph" function (:prototype-flag t) nil [253395 253526])
            ("make-glyph-code" function (:prototype-flag t) nil [253528 253666])
            ("glyph-char" function (:prototype-flag t) nil [253668 253770])
            ("glyph-face" function (:prototype-flag t) nil [253772 253903])
            ("standard-display-european" function (:prototype-flag t) nil [253905 254806])
            ("dissociated-press" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [254958 255345])
            ("dnd-protocol-alist" variable (:default-value (\` (((\, (purecopy "^file:///")) . dnd-open-local-file) ((\, (purecopy "^file://")) . dnd-open-file) ((\, (purecopy "^file:")) . dnd-open-local-file) ((\, (purecopy "^\\(https?\\|ftp\\|file\\|nfs\\)://")) . dnd-open-file)))) nil [255458 256401])
            ("custom-autoload" code nil nil [256403 256448])
            ("dns-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [256603 257015])
            ("defalias" code nil nil [257017 257048])
            ("dns-mode-soa-increment-serial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [257050 257169])
            ("doc-view-mode-p" function (:prototype-flag t) nil [257305 257521])
            ("doc-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [257523 257868])
            ("doc-view-mode-maybe" function (:prototype-flag t) nil [257870 258057])
            ("doc-view-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [258059 258426])
            ("doc-view-bookmark-jump" function (:prototype-flag t) nil [258428 258497])
            ("doctor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [258637 258739])
            ("double-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [258861 259263])
            ("push" code nil nil [259402 259459])
            ("dunnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [259461 259548])
            ("defalias" code nil nil [259711 259770])
            ("define-minor-mode" function (:prototype-flag t) nil [259772 263222])
            ("function-put" code nil nil [263224 263276])
            ("defalias" code nil nil [263278 263349])
            ("defalias" code nil nil [263351 263417])
            ("define-globalized-minor-mode" function (:prototype-flag t) nil [263419 264746])
            ("function-put" code nil nil [264748 264811])
            ("easy-mmode-define-keymap" function (:prototype-flag t) nil [264813 265495])
            ("easy-mmode-defmap" function (:prototype-flag t) nil [265497 265747])
            ("easy-mmode-defsyntax" function (:prototype-flag t) nil [265749 265945])
            ("easy-menu-define" function (:prototype-flag t) nil [266102 269580])
            ("function-put" code nil nil [269582 269643])
            ("easy-menu-do-define" function (:prototype-flag t) nil [269645 269728])
            ("easy-menu-create-menu" function (:prototype-flag t) nil [269730 270028])
            ("easy-menu-change" function (:prototype-flag t) nil [270030 270921])
            ("push" code nil nil [271072 271130])
            ("ebnf-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271132 271215])
            ("ebnf-print-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271217 271538])
            ("ebnf-print-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271540 271850])
            ("ebnf-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271852 272425])
            ("ebnf-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272427 272641])
            ("ebnf-spool-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272643 272964])
            ("ebnf-spool-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272966 273276])
            ("ebnf-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273278 273596])
            ("ebnf-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273598 273876])
            ("ebnf-eps-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273878 274176])
            ("ebnf-eps-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274178 274449])
            ("ebnf-eps-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274451 275188])
            ("ebnf-eps-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275190 275935])
            ("defalias" code nil nil [275937 275973])
            ("ebnf-syntax-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275975 276278])
            ("ebnf-syntax-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276280 276559])
            ("ebnf-syntax-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276561 276665])
            ("ebnf-syntax-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276667 276769])
            ("ebnf-setup" function (:prototype-flag t) nil [276771 276856])
            ("ebnf-find-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276858 277034])
            ("ebnf-insert-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277036 277230])
            ("ebnf-delete-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277232 277354])
            ("ebnf-merge-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277356 277517])
            ("ebnf-apply-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277519 277685])
            ("ebnf-reset-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277687 277852])
            ("ebnf-push-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277854 278097])
            ("ebnf-pop-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [278099 278331])
            ("ebrowse-tree-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [278484 278876])
            ("ebrowse-electric-choose-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [278878 279016])
            ("ebrowse-member-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279018 279115])
            ("ebrowse-tags-view-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279117 279222])
            ("ebrowse-tags-find-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279224 279329])
            ("ebrowse-tags-view-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279331 279434])
            ("ebrowse-tags-find-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279436 279539])
            ("ebrowse-tags-find-declaration-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279541 279675])
            ("ebrowse-tags-view-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279677 279809])
            ("ebrowse-tags-find-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279811 279943])
            ("ebrowse-tags-find-declaration-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279945 280076])
            ("ebrowse-tags-view-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280078 280208])
            ("ebrowse-tags-find-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280210 280340])
            ("ebrowse-tags-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280342 280638])
            ("ebrowse-tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280640 280911])
            ("ebrowse-tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280913 281125])
            ("ebrowse-tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281127 281312])
            ("ebrowse-tags-search-member-use" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281314 281651])
            ("ebrowse-back-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281653 281793])
            ("ebrowse-forward-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281795 281937])
            ("ebrowse-electric-position-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281939 282068])
            ("ebrowse-save-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282070 282177])
            ("ebrowse-save-tree-as" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282179 282423])
            ("ebrowse-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282425 282519])
            ("electric-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282659 284038])
            ("Electric-command-history-redo-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284177 284409])
            ("ecomplete-setup" function (:prototype-flag t) nil [284558 284617])
            ("push" code nil nil [284741 284795])
            ("global-ede-mode" variable nil nil [284797 285094])
            ("custom-autoload" code nil nil [285096 285140])
            ("global-ede-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [285142 285517])
            ("edebug-all-defs" variable nil nil [285669 286136])
            ("custom-autoload" code nil nil [286138 286183])
            ("edebug-all-forms" variable nil nil [286185 286419])
            ("custom-autoload" code nil nil [286421 286467])
            ("edebug-basic-spec" function (:prototype-flag t) nil [286469 286675])
            ("defalias" code nil nil [286677 286729])
            ("edebug-eval-top-level-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286731 287608])
            ("edebug-all-defs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [287610 287701])
            ("edebug-all-forms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [287703 287789])
            ("push" code nil nil [287912 287971])
            ("ediff-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [287973 288108])
            ("ediff-files3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288110 288258])
            ("defalias" code nil nil [288260 288292])
            ("defalias" code nil nil [288294 288324])
            ("ediff-current-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288326 288547])
            ("ediff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288549 288762])
            ("ediff-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288764 288920])
            ("defalias" code nil nil [288922 288957])
            ("ediff-buffers3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288959 289132])
            ("defalias" code nil nil [289134 289171])
            ("ediff-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [289173 289459])
            ("defalias" code nil nil [289461 289497])
            ("ediff-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [289499 289801])
            ("defalias" code nil nil [289803 289856])
            ("ediff-directories3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [289858 290157])
            ("defalias" code nil nil [290159 290197])
            ("ediff-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [290199 290519])
            ("defalias" code nil nil [290521 290569])
            ("ediff-merge-directories-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [290571 291078])
            ("ediff-merge-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [291080 291416])
            ("defalias" code nil nil [291418 291483])
            ("ediff-merge-directory-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [291485 291849])
            ("defalias" code nil nil [291851 291944])
            ("defalias" code nil nil [291946 292022])
            ("ediff-windows-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292024 292366])
            ("ediff-windows-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292368 292710])
            ("ediff-regions-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292712 293073])
            ("ediff-regions-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293075 293470])
            ("defalias" code nil nil [293472 293514])
            ("ediff-merge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293516 293660])
            ("ediff-merge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293662 293831])
            ("defalias" code nil nil [293833 293903])
            ("ediff-merge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [293905 294062])
            ("ediff-merge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [294064 294248])
            ("ediff-merge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [294250 294483])
            ("ediff-merge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [294485 294755])
            ("ediff-patch-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [294757 295100])
            ("ediff-patch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [295102 295665])
            ("defalias" code nil nil [295667 295703])
            ("defalias" code nil nil [295705 295750])
            ("ediff-revision" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [295752 296068])
            ("defalias" code nil nil [296070 296107])
            ("ediff-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [296109 296255])
            ("ediff-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [296257 296391])
            ("ediff-files-command" function (:prototype-flag t) nil [296393 296452])
            ("ediff3-files-command" function (:prototype-flag t) nil [296454 296514])
            ("ediff-merge-command" function (:prototype-flag t) nil [296516 296575])
            ("ediff-merge-with-ancestor-command" function (:prototype-flag t) nil [296577 296650])
            ("ediff-directories-command" function (:prototype-flag t) nil [296652 296717])
            ("ediff-directories3-command" function (:prototype-flag t) nil [296719 296785])
            ("ediff-merge-directories-command" function (:prototype-flag t) nil [296787 296858])
            ("ediff-merge-directories-with-ancestor-command" function (:prototype-flag t) nil [296860 296945])
            ("ediff-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [297093 297151])
            ("ediff-show-registry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [297298 297385])
            ("defalias" code nil nil [297387 297429])
            ("ediff-toggle-multiframe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [297577 297789])
            ("ediff-toggle-use-toolbar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [297791 298019])
            ("push" code nil nil [298143 298201])
            ("edit-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298203 298650])
            ("edit-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298652 298774])
            ("edit-named-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298776 298928])
            ("read-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298930 299605])
            ("format-kbd-macro" function (:prototype-flag t) nil [299607 299988])
            ("edt-set-scroll-margins" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300129 300367])
            ("edt-emulation-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300369 300443])
            ("with-electric-help" function (:prototype-flag t) nil [300562 301785])
            ("electric-helpify" function (:prototype-flag t) nil [301787 301862])
            ("push" code nil nil [302010 302066])
            ("push" code nil nil [302230 302291])
            ("eieio-defclass-autoload" function (:prototype-flag t) nil [302293 302680])
            ("electric-pair-text-pairs" variable (:default-value (quote ((34 . 34)))) nil [302819 303111])
            ("custom-autoload" code nil nil [303113 303170])
            ("electric-pair-mode" variable nil nil [303172 303481])
            ("custom-autoload" code nil nil [303483 303536])
            ("electric-pair-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [303538 304079])
            ("electric-pair-local-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [304081 304209])
            ("elide-head" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [304351 304666])
            ("elint-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [304815 304887])
            ("elint-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [304889 305041])
            ("elint-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [305043 305176])
            ("elint-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [305178 305305])
            ("elint-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [305307 305498])
            ("elp-instrument-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [305641 305786])
            ("elp-instrument-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [305788 306018])
            ("elp-instrument-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [306020 306258])
            ("elp-results" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [306260 306486])
            ("emacs-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [306628 307443])
            ("report-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [307589 307750])
            ("set-advertised-calling-convention" code nil nil [307752 307822])
            ("emerge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [307949 308086])
            ("emerge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [308088 308290])
            ("emerge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [308292 308424])
            ("emerge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [308426 308627])
            ("emerge-files-command" function (:prototype-flag t) nil [308629 308690])
            ("emerge-files-with-ancestor-command" function (:prototype-flag t) nil [308692 308767])
            ("emerge-files-remote" function (:prototype-flag t) nil [308769 308852])
            ("emerge-files-with-ancestor-remote" function (:prototype-flag t) nil [308854 308960])
            ("emerge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [308962 309118])
            ("emerge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309120 309334])
            ("emerge-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309336 309435])
            ("enriched-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309590 310142])
            ("enriched-encode" function (:prototype-flag t) nil [310144 310219])
            ("enriched-decode" function (:prototype-flag t) nil [310221 310287])
            ("epa-list-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [310400 310520])
            ("epa-list-secret-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [310522 310650])
            ("epa-select-keys" function (:prototype-flag t) nil [310652 311012])
            ("epa-decrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [311014 311216])
            ("epa-verify-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [311218 311286])
            ("epa-sign-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [311288 311390])
            ("epa-encrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [311392 311488])
            ("epa-decrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [311490 312424])
            ("epa-decrypt-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [312426 312676])
            ("function-put" code nil nil [312678 312742])
            ("epa-verify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [312744 313385])
            ("function-put" code nil nil [313387 313441])
            ("epa-verify-cleartext-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [313443 313713])
            ("function-put" code nil nil [313715 313782])
            ("epa-sign-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [313784 314439])
            ("function-put" code nil nil [314441 314493])
            ("epa-encrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [314495 315174])
            ("function-put" code nil nil [315176 315231])
            ("epa-delete-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315233 315333])
            ("epa-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315335 315413])
            ("epa-import-keys-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315415 315511])
            ("epa-import-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315513 315669])
            ("epa-export-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315671 315761])
            ("epa-insert-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315763 315856])
            ("epa-dired-do-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315995 316078])
            ("epa-dired-do-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316080 316161])
            ("epa-dired-do-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316163 316240])
            ("epa-dired-do-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316242 316325])
            ("epa-file-handler" function (:prototype-flag t) nil [316461 316541])
            ("epa-file-enable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316543 316599])
            ("epa-file-disable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316601 316658])
            ("epa-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [316794 317071])
            ("epa-mail-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317073 317225])
            ("function-put" code nil nil [317227 317280])
            ("epa-mail-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317282 317451])
            ("function-put" code nil nil [317453 317505])
            ("epa-mail-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317507 317658])
            ("function-put" code nil nil [317660 317710])
            ("epa-mail-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317712 318272])
            ("epa-mail-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318274 318447])
            ("function-put" code nil nil [318449 318506])
            ("epa-global-mail-mode" variable nil nil [318508 318825])
            ("custom-autoload" code nil nil [318827 318881])
            ("epa-global-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [318883 319153])
            ("push" code nil nil [319265 319321])
            ("epg-make-context" function (:prototype-flag t) nil [319323 319502])
            ("epg-find-configuration" function (:prototype-flag t) nil [319644 320150])
            ("epg-configuration" function (:prototype-flag t) nil [320152 320286])
            ("make-obsolete" code nil nil [320288 320354])
            ("epg-check-configuration" function (:prototype-flag t) nil [320356 320512])
            ("epg-expand-group" function (:prototype-flag t) nil [320514 320627])
            ("push" code nil nil [320747 320801])
            ("erc-select-read-args" function (:prototype-flag t) nil [320803 320924])
            ("erc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320926 321751])
            ("defalias" code nil nil [321753 321780])
            ("erc-tls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321782 321929])
            ("erc-handle-irc-url" function (:prototype-flag t) nil [321931 322203])
            ("erc-autoaway-mode" function (:prototype-flag t) nil [322359 322403])
            ("erc-button-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322553 322599])
            ("erc-capab-identify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322746 322799])
            ("erc-define-minor-mode" function (:prototype-flag t) nil [322949 322995])
            ("erc-dcc-mode" function (:prototype-flag t) nil [323136 323170])
            ("erc-cmd-DCC" function (:prototype-flag t) nil [323172 323472])
            ("pcomplete/erc-mode/DCC" function (:prototype-flag t) nil [323474 323579])
            ("erc-ctcp-query-DCC-hook" variable (:default-value (quote (erc-ctcp-query-DCC))) nil [323581 323675])
            ("erc-ctcp-query-DCC" function (:prototype-flag t) nil [323677 323924])
            ("erc-notifications-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324117 324184])
            ("erc-cmd-ezb" function (:prototype-flag t) nil [324339 324462])
            ("erc-ezb-get-login" function (:prototype-flag t) nil [324464 324723])
            ("erc-ezb-lookup-action" function (:prototype-flag t) nil [324725 324801])
            ("erc-ezb-notice-autodetect" function (:prototype-flag t) nil [324803 324923])
            ("erc-ezb-identify" function (:prototype-flag t) nil [324925 325029])
            ("erc-ezb-init-session-list" function (:prototype-flag t) nil [325031 325150])
            ("erc-ezb-end-of-session-list" function (:prototype-flag t) nil [325152 325283])
            ("erc-ezb-add-session" function (:prototype-flag t) nil [325285 325403])
            ("erc-ezb-select" function (:prototype-flag t) nil [325405 325528])
            ("erc-ezb-select-session" function (:prototype-flag t) nil [325530 325634])
            ("erc-ezb-initialize" function (:prototype-flag t) nil [325636 325744])
            ("erc-fill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325887 325929])
            ("erc-fill" function (:prototype-flag t) nil [325931 326125])
            ("erc-identd-mode" function (:prototype-flag t) nil [326275 326315])
            ("erc-identd-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326317 326702])
            ("erc-identd-stop" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326704 326775])
            ("erc-create-imenu-index" function (:prototype-flag t) nil [326922 326988])
            ("erc-autojoin-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327132 327178])
            ("erc-list-mode" function (:prototype-flag t) nil [327322 327358])
            ("erc-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327499 327539])
            ("erc-logging-enabled" function (:prototype-flag t) nil [327541 327897])
            ("erc-save-buffer-in-logs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327899 328395])
            ("erc-match-mode" function (:prototype-flag t) nil [328542 328580])
            ("erc-add-pal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [328582 328671])
            ("erc-delete-pal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [328673 328768])
            ("erc-add-fool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [328770 328862])
            ("erc-delete-fool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [328864 328962])
            ("erc-add-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [328964 329065])
            ("erc-delete-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [329067 329174])
            ("erc-add-dangerous-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [329176 329298])
            ("erc-delete-dangerous-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [329300 329428])
            ("erc-menu-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [329572 329614])
            ("erc-netsplit-mode" function (:prototype-flag t) nil [329770 329814])
            ("erc-cmd-WHOLEFT" function (:prototype-flag t) nil [329816 329894])
            ("erc-determine-network" function (:prototype-flag t) nil [330050 330303])
            ("erc-server-select" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [330305 330436])
            ("erc-notify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [330584 330630])
            ("erc-cmd-NOTIFY" function (:prototype-flag t) nil [330632 330876])
            ("pcomplete/erc-mode/NOTIFY" function (:prototype-flag t) nil [330878 330948])
            ("erc-page-mode" function (:prototype-flag t) nil [331090 331126])
            ("erc-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331284 331337])
            ("erc-replace-mode" function (:prototype-flag t) nil [331489 331531])
            ("erc-ring-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331674 331716])
            ("erc-services-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331871 331921])
            ("erc-nickserv-identify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331923 332056])
            ("erc-nickserv-identify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [332058 332251])
            ("erc-sound-mode" function (:prototype-flag t) nil [332397 332435])
            ("erc-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [332590 332746])
            ("erc-spelling-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [332901 332951])
            ("erc-timestamp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [333098 333146])
            ("erc-track-minor-mode" variable nil nil [333293 333451])
            ("custom-autoload" code nil nil [333453 333508])
            ("erc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [333510 334051])
            ("erc-track-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [334053 334097])
            ("erc-truncate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [334253 334303])
            ("erc-truncate-buffer-to-size" function (:prototype-flag t) nil [334305 334569])
            ("erc-truncate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [334571 334745])
            ("erc-xdcc-mode" function (:prototype-flag t) nil [334889 334925])
            ("erc-xdcc-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [334927 335021])
            ("ert-deftest" function (:prototype-flag t) nil [335164 335746])
            ("function-put" code nil nil [335748 335794])
            ("function-put" code nil nil [335796 335848])
            ("put" code nil nil [335850 335892])
            ("put" code nil nil [335894 335933])
            ("ert-run-tests-batch" function (:prototype-flag t) nil [335935 336341])
            ("ert-run-tests-batch-and-exit" function (:prototype-flag t) nil [336343 336692])
            ("ert-run-tests-interactively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336694 337087])
            ("defalias" code nil nil [337089 337133])
            ("ert-describe-test" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337135 337277])
            ("put" code nil nil [337426 337477])
            ("ert-kill-all-test-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337479 337584])
            ("eshell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337734 337815])
            ("push" code nil nil [337958 338017])
            ("eshell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [338019 338555])
            ("eshell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [338557 338739])
            ("eshell-command-result" function (:prototype-flag t) nil [338741 339105])
            ("define-obsolete-function-alias" code nil nil [339107 339183])
            ("tags-file-name" variable nil nil [339331 339567])
            ("put" code nil nil [339569 339645])
            ("put" code nil nil [339647 339698])
            ("tags-case-fold-search" variable (:default-value (quote default)) nil [339700 339928])
            ("custom-autoload" code nil nil [339930 339980])
            ("tags-table-list" variable nil nil [339982 340321])
            ("custom-autoload" code nil nil [340323 340367])
            ("tags-compression-info-list" variable (:default-value (purecopy (quote ("" ".Z" ".bz2" ".gz" ".xz" ".tgz")))) nil [340369 340580])
            ("custom-autoload" code nil nil [340582 340637])
            ("tags-add-tables" variable (:default-value (quote ask-user)) nil [340639 340917])
            ("custom-autoload" code nil nil [340919 340963])
            ("find-tag-hook" variable nil nil [340965 341178])
            ("custom-autoload" code nil nil [341180 341222])
            ("find-tag-default-function" variable nil nil [341224 341503])
            ("custom-autoload" code nil nil [341505 341559])
            ("tags-table-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341561 341653])
            ("visit-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341655 342201])
            ("visit-tags-table-buffer" function (:prototype-flag t) nil [342203 342785])
            ("tags-table-files" function (:prototype-flag t) nil [342787 343064])
            ("tags-lazy-completion-table" function (:prototype-flag t) nil [343066 343132])
            ("tags-completion-at-point-function" function nil nil [343134 343302])
            ("find-tag-noselect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343304 344302])
            ("find-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344304 345268])
            ("make-obsolete" code nil nil [345270 345326])
            ("find-tag-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [345328 346320])
            ("make-obsolete" code nil nil [346322 346404])
            ("find-tag-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [346406 347387])
            ("make-obsolete" code nil nil [347389 347469])
            ("find-tag-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [347471 348372])
            ("make-obsolete" code nil nil [348374 348433])
            ("defalias" code nil nil [348435 348482])
            ("next-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348484 349033])
            ("tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349035 349633])
            ("tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349635 350102])
            ("tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350104 350703])
            ("list-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350705 350981])
            ("tags-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350983 351094])
            ("make-obsolete" code nil nil [351096 351152])
            ("select-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351154 351419])
            ("complete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351421 351678])
            ("etags--xref-backend" function (:prototype-flag t) nil [351680 351739])
            ("setup-ethiopic-environment-internal" function (:prototype-flag t) nil [351899 351979])
            ("ethio-sera-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351981 352599])
            ("ethio-sera-to-fidel-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352601 353237])
            ("ethio-sera-to-fidel-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [353239 353533])
            ("ethio-fidel-to-sera-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [353535 354243])
            ("ethio-fidel-to-sera-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [354245 354951])
            ("ethio-fidel-to-sera-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [354953 355185])
            ("ethio-modify-vowel" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355187 355303])
            ("ethio-replace-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355305 355814])
            ("ethio-input-special-character" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355816 355920])
            ("ethio-fidel-to-tex-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355922 356067])
            ("ethio-tex-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [356069 356203])
            ("ethio-fidel-to-java-buffer" function (:prototype-flag t) nil [356205 356521])
            ("ethio-java-to-fidel-buffer" function (:prototype-flag t) nil [356523 356667])
            ("ethio-find-file" function (:prototype-flag t) nil [356669 356799])
            ("ethio-write-file" function (:prototype-flag t) nil [356801 356937])
            ("ethio-insert-ethio-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [356939 357111])
            ("ethio-composition-function" function (:prototype-flag t) nil [357113 357210])
            ("eudc-set-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357334 357560])
            ("eudc-get-email" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357562 357743])
            ("eudc-get-phone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357745 357926])
            ("eudc-expand-inline" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357928 358733])
            ("eudc-query-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358735 359014])
            ("eudc-load-eudc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [359016 359170])
            ("cond" code nil nil [359172 361152])
            ("eudc-display-generic-binary" function (:prototype-flag t) nil [361296 361417])
            ("eudc-display-url" function (:prototype-flag t) nil [361419 361516])
            ("eudc-display-mail" function (:prototype-flag t) nil [361518 361628])
            ("eudc-display-sound" function (:prototype-flag t) nil [361630 361736])
            ("eudc-display-jpeg-inline" function (:prototype-flag t) nil [361738 361860])
            ("eudc-display-jpeg-as-button" function (:prototype-flag t) nil [361862 361972])
            ("eudc-insert-record-at-point-into-bbdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [362125 362323])
            ("eudc-try-bbdb-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [362325 362449])
            ("eudc-edit-hotlist" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [362605 362729])
            ("ewoc-create" function (:prototype-flag t) nil [362875 363676])
            ("eww-suggest-uris" variable (:default-value (quote (eww-links-at-point url-get-url-at-point eww-current-url))) nil [363797 364125])
            ("custom-autoload" code nil nil [364127 364170])
            ("eww" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [364172 364359])
            ("defalias" code nil nil [364361 364388])
            ("eww-open-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [364390 364466])
            ("eww-search-words" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [364468 364651])
            ("eww-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [364653 364723])
            ("eww-browse-url" function (:prototype-flag t) nil [364725 364802])
            ("eww-list-bookmarks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [364804 364880])
            ("executable-command-find-posix-p" function (:prototype-flag t) nil [365042 365236])
            ("executable-interpret" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [365238 365583])
            ("executable-set-magic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [365585 365996])
            ("executable-make-buffer-file-executable-if-script-p" function (:prototype-flag t) nil [365998 366243])
            ("expand-add-abbrevs" function (:prototype-flag t) nil [366365 367267])
            ("expand-abbrev-hook" function (:prototype-flag t) nil [367269 367454])
            ("expand-jump-to-previous-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367456 367649])
            ("expand-jump-to-next-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367651 367836])
            ("define-key" code nil nil [367838 367895])
            ("define-key" code nil nil [367897 367950])
            ("f90-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368091 370470])
            ("face-remap-add-relative" function (:prototype-flag t) nil [370612 371704])
            ("face-remap-reset-base" function (:prototype-flag t) nil [371706 371957])
            ("face-remap-set-base" function (:prototype-flag t) nil [371959 372666])
            ("text-scale-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [372668 373096])
            ("text-scale-increase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [373098 373551])
            ("text-scale-decrease" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [373553 373738])
            ("define-key" code nil nil [373740 373796])
            ("define-key" code nil nil [373798 373854])
            ("define-key" code nil nil [373856 373912])
            ("define-key" code nil nil [373914 373970])
            ("text-scale-adjust" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [373972 375126])
            ("buffer-face-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375128 375511])
            ("buffer-face-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375513 375998])
            ("buffer-face-toggle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376000 376696])
            ("variable-pitch-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376698 376946])
            ("push" code nil nil [377091 377149])
            ("feedmail-send-it" function (:prototype-flag t) nil [377151 377407])
            ("feedmail-run-the-queue-no-prompts" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377409 377562])
            ("feedmail-run-the-queue-global-prompt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377564 377865])
            ("feedmail-run-the-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377867 378193])
            ("feedmail-queue-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378195 379342])
            ("ffap-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379458 379880])
            ("find-file-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379882 380347])
            ("defalias" code nil nil [380349 380385])
            ("ffap-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380387 380744])
            ("ffap-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380746 381072])
            ("dired-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381074 381273])
            ("ffap-guess-file-name-at-point" function (:prototype-flag t) nil [381275 381442])
            ("ffap-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381444 381541])
            ("file-cache-add-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381680 381922])
            ("file-cache-add-directory-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381924 382345])
            ("file-cache-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382347 382440])
            ("file-cache-add-directory-using-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382442 382609])
            ("file-cache-add-directory-using-locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382611 382808])
            ("file-cache-add-directory-recursively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382810 383206])
            ("file-cache-minibuffer-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383208 383644])
            ("file-notify-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [383786 384076])
            ("add-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384201 384718])
            ("delete-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384720 384890])
            ("add-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384892 385300])
            ("delete-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385302 385470])
            ("add-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385472 385625])
            ("delete-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385627 385774])
            ("copy-file-locals-to-dir-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385776 385890])
            ("copy-dir-locals-to-file-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385892 386021])
            ("copy-dir-locals-to-file-locals-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386023 386150])
            ("filesets-init" function (:prototype-flag t) nil [386285 386437])
            ("push" code nil nil [386571 386630])
            ("find-cmd" function (:prototype-flag t) nil [386632 387069])
            ("find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387210 387537])
            ("find-name-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387539 387924])
            ("find-grep-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387926 388317])
            ("ff-special-constructs" variable (:default-value (\` (((\, (purecopy "^#\\s *\\(include\\|import\\)\\s +[<\"]\\(.*\\)[>\"]")) lambda nil (buffer-substring (match-beginning 2) (match-end 2)))))) nil [388455 388972])
            ("custom-autoload" code nil nil [388974 389028])
            ("ff-get-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389030 389300])
            ("defalias" code nil nil [389302 389354])
            ("ff-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389356 391249])
            ("ff-mouse-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [391251 391351])
            ("ff-mouse-find-other-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [391353 391484])
            ("find-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [391646 391800])
            ("find-function-search-for-symbol" function (:prototype-flag t) nil [391802 392305])
            ("find-function-noselect" function (:prototype-flag t) nil [392307 392992])
            ("find-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392994 393525])
            ("find-function-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393527 393706])
            ("find-function-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [393708 393885])
            ("find-variable-noselect" function (:prototype-flag t) nil [393887 394389])
            ("find-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394391 394920])
            ("find-variable-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394922 395101])
            ("find-variable-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [395103 395280])
            ("find-definition-noselect" function (:prototype-flag t) nil [395282 395806])
            ("find-face-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [395808 396355])
            ("find-function-on-key" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396357 396531])
            ("find-function-on-key-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396533 396697])
            ("find-function-on-key-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396699 396861])
            ("find-function-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396863 396983])
            ("find-variable-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396985 397105])
            ("find-function-setup-keys" function (:prototype-flag t) nil [397107 397242])
            ("find-lisp-find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [397379 397487])
            ("find-lisp-find-dired-subdirectories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [397489 397601])
            ("find-lisp-find-dired-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [397603 397742])
            ("push" code nil nil [397863 397920])
            ("finder-list-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [397922 398039])
            ("finder-commentary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398041 398203])
            ("finder-by-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398205 398300])
            ("enable-flow-control" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398439 398691])
            ("enable-flow-control-on" function (:prototype-flag t) nil [398693 399077])
            ("fill-flowed-encode" function (:prototype-flag t) nil [399226 399305])
            ("fill-flowed" function (:prototype-flag t) nil [399307 399392])
            ("push" code nil nil [399544 399602])
            ("flymake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399604 399913])
            ("flymake-mode-on" function (:prototype-flag t) nil [399915 399993])
            ("flymake-mode-off" function (:prototype-flag t) nil [399995 400075])
            ("flymake-find-file-hook" function (:prototype-flag t) nil [400077 400141])
            ("flyspell-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [400297 400405])
            ("flyspell-mode" variable nil nil [400406 400471])
            ("flyspell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [400473 401740])
            ("turn-on-flyspell" function (:prototype-flag t) nil [401742 401839])
            ("turn-off-flyspell" function (:prototype-flag t) nil [401841 401940])
            ("flyspell-mode-off" function (:prototype-flag t) nil [401942 402025])
            ("flyspell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402027 402125])
            ("flyspell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402127 402205])
            ("push" code nil nil [402329 402388])
            ("turn-on-follow-mode" function (:prototype-flag t) nil [402510 402630])
            ("turn-off-follow-mode" function (:prototype-flag t) nil [402632 402754])
            ("follow-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402756 404187])
            ("follow-scroll-up-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404189 404641])
            ("follow-scroll-down-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [404643 405113])
            ("follow-scroll-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [405115 405500])
            ("follow-scroll-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [405502 405892])
            ("follow-delete-other-windows-and-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [405894 406585])
            ("push" code nil nil [406730 406790])
            ("footnote-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [406792 407229])
            ("forms-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [407348 408152])
            ("forms-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408154 408237])
            ("forms-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408239 408351])
            ("fortran-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [408503 411551])
            ("fortune-add-fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [411694 411920])
            ("fortune-from-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [411922 412175])
            ("fortune-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [412177 412410])
            ("fortune-to-signature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [412412 412803])
            ("fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [412805 413155])
            ("frameset-session-filter-alist" variable (:default-value (quote ((name . :never) (left . frameset-filter-iconified) (minibuffer . frameset-filter-minibuffer) (top . frameset-filter-iconified)))) nil [413291 413600])
            ("frameset-persistent-filter-alist" variable (:default-value (nconc (quote ((background-color . frameset-filter-sanitize-color) (buffer-list . :never) (buffer-predicate . :never) (buried-buffer-list . :never) (font . frameset-filter-shelve-param) (foreground-color . frameset-filter-sanitize-color) (fullscreen . frameset-filter-shelve-param) (GUI:font . frameset-filter-unshelve-param) (GUI:fullscreen . frameset-filter-unshelve-param) (GUI:height . frameset-filter-unshelve-param) (GUI:width . frameset-filter-unshelve-param) (height . frameset-filter-shelve-param) (outer-window-id . :never) (parent-id . :never) (tty . frameset-filter-tty-to-GUI) (tty-type . frameset-filter-tty-to-GUI) (width . frameset-filter-shelve-param) (window-id . :never) (window-system . :never))) frameset-session-filter-alist)) nil [413602 414503])
            ("frameset-filter-alist" variable (:default-value frameset-persistent-filter-alist) nil [414505 416720])
            ("frameset-frame-id" function (:prototype-flag t) nil [416722 417157])
            ("frameset-frame-id-equal-p" function (:prototype-flag t) nil [417159 417276])
            ("frameset-frame-with-id" function (:prototype-flag t) nil [417278 417512])
            ("frameset-save" function (:prototype-flag t) nil [417514 418275])
            ("frameset-restore" function (:prototype-flag t) nil [418277 421257])
            ("frameset--jump-to-register" function (:prototype-flag t) nil [421259 421431])
            ("frameset--print-register" function (:prototype-flag t) nil [421433 421622])
            ("frameset-to-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [421624 421909])
            ("push" code nil nil [422054 422113])
            ("gdb-enable-debug" variable nil nil [422264 422415])
            ("custom-autoload" code nil nil [422417 422465])
            ("gdb-enable-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422467 422905])
            ("gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422907 425935])
            ("generic-mode-list" variable nil nil [426089 426253])
            ("define-generic-mode" function (:prototype-flag t) nil [426255 427831])
            ("function-put" code nil nil [427833 427893])
            ("function-put" code nil nil [427895 427949])
            ("generic-mode-internal" function (:prototype-flag t) nil [427951 428104])
            ("generic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428106 428501])
            ("generic-make-keywords-list" function (:prototype-flag t) nil [428503 429004])
            ("make-obsolete" code nil nil [429006 429069])
            ("glasses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429222 429601])
            ("gmm-regexp-concat" function (:prototype-flag t) nil [429750 429917])
            ("gmm-message" function (:prototype-flag t) nil [429919 430243])
            ("gmm-error" function (:prototype-flag t) nil [430245 430407])
            ("gmm-widget-p" function (:prototype-flag t) nil [430409 430502])
            ("gmm-tool-bar-from-list" function (:prototype-flag t) nil [430504 431351])
            ("push" code nil nil [431476 431532])
            ("when" code nil nil [431533 431612])
            ("gnus-slave-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431614 431754])
            ("gnus-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431756 432147])
            ("gnus-slave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432149 432231])
            ("gnus-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432233 432842])
            ("gnus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432844 433129])
            ("gnus-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433281 433359])
            ("gnus-plugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433361 433435])
            ("gnus-slave-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433437 433545])
            ("gnus-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433547 433955])
            ("gnus-agent-possibly-save-gcc" function (:prototype-flag t) nil [433957 434060])
            ("gnus-agent-rename-group" function (:prototype-flag t) nil [434062 434391])
            ("gnus-agent-delete-group" function (:prototype-flag t) nil [434393 434691])
            ("gnus-agent-get-undownloaded-list" function (:prototype-flag t) nil [434693 434827])
            ("gnus-agent-possibly-alter-active" function (:prototype-flag t) nil [434829 435019])
            ("gnus-agent-find-parameter" function (:prototype-flag t) nil [435021 435278])
            ("gnus-agent-batch-fetch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [435280 435374])
            ("gnus-agent-batch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [435376 435476])
            ("gnus-agent-regenerate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [435478 435631])
            ("gnus-article-prepare-display" function (:prototype-flag t) nil [435777 435897])
            ("gnus-bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436058 436153])
            ("gnus-bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436155 436273])
            ("gnus-bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436275 436563])
            ("gnus-jog-cache" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436715 436891])
            ("gnus-cache-generate-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [436893 437013])
            ("gnus-cache-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [437015 437142])
            ("gnus-cache-rename-group" function (:prototype-flag t) nil [437144 437459])
            ("gnus-cache-delete-group" function (:prototype-flag t) nil [437461 437758])
            ("gnus-delay-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [437909 438457])
            ("gnus-delay-send-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [438459 438570])
            ("gnus-delay-initialize" function (:prototype-flag t) nil [438572 438949])
            ("gnus-user-format-function-d" function (:prototype-flag t) nil [439100 439179])
            ("gnus-user-format-function-D" function (:prototype-flag t) nil [439181 439260])
            ("turn-on-gnus-dired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439411 439523])
            ("gnus-draft-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439674 439777])
            ("gnus--random-face-with-type" function (:prototype-flag t) nil [439922 440093])
            ("message-goto-eoh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440095 440139])
            ("gnus-random-x-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440141 440332])
            ("gnus-insert-random-x-face-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440334 440466])
            ("gnus-x-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440468 440674])
            ("gnus-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [440676 440875])
            ("gnus-convert-face-to-png" function (:prototype-flag t) nil [440877 441030])
            ("gnus-convert-png-to-face" function (:prototype-flag t) nil [441032 441206])
            ("gnus-random-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441208 441379])
            ("gnus-insert-random-face-header" function (:prototype-flag t) nil [441381 441509])
            ("gnus-treat-from-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441669 441836])
            ("gnus-treat-mail-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441838 442016])
            ("gnus-fetch-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [442168 442381])
            ("gnus-fetch-group-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [442383 442491])
            ("gnus-article-html" function (:prototype-flag t) nil [442639 442717])
            ("gnus-html-prefetch-images" function (:prototype-flag t) nil [442719 442796])
            ("defalias" code nil nil [442945 442990])
            ("gnus-batch-score" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [442992 443130])
            ("turn-on-gnus-mailing-list-mode" function (:prototype-flag t) nil [443273 443345])
            ("gnus-mailing-list-insinuate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443347 443518])
            ("gnus-mailing-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443520 443675])
            ("gnus-group-split-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443827 444963])
            ("gnus-group-split-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [444965 445323])
            ("gnus-group-split" function (:prototype-flag t) nil [445325 445563])
            ("gnus-group-split-fancy" function (:prototype-flag t) nil [445565 447744])
            ("gnus-msg-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [447890 448253])
            ("gnus-button-mailto" function (:prototype-flag t) nil [448255 448340])
            ("gnus-button-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [448342 448447])
            ("define-mail-user-agent" code nil nil [448449 448568])
            ("gnus-notifications" function (:prototype-flag t) nil [448744 449098])
            ("gnus-treat-from-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [449250 449394])
            ("gnus-treat-mail-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [449396 449546])
            ("gnus-treat-newsgroups-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [449548 449721])
            ("gnus-sorted-difference" function (:prototype-flag t) nil [449873 450085])
            ("gnus-sorted-ndifference" function (:prototype-flag t) nil [450087 450286])
            ("gnus-sorted-complement" function (:prototype-flag t) nil [450288 450470])
            ("gnus-intersection" function (:prototype-flag t) nil [450472 450546])
            ("gnus-sorted-intersection" function (:prototype-flag t) nil [450548 450710])
            ("gnus-sorted-range-intersection" function (:prototype-flag t) nil [450712 450886])
            ("defalias" code nil nil [450888 450955])
            ("gnus-sorted-nintersection" function (:prototype-flag t) nil [450957 451155])
            ("gnus-sorted-union" function (:prototype-flag t) nil [451157 451305])
            ("gnus-sorted-nunion" function (:prototype-flag t) nil [451307 451491])
            ("gnus-add-to-sorted-list" function (:prototype-flag t) nil [451493 451610])
            ("gnus-registry-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451771 451870])
            ("gnus-registry-install-hooks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451872 451972])
            ("gnus-sieve-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452124 452497])
            ("gnus-sieve-generate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452499 452830])
            ("gnus-sieve-article-add-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452832 452902])
            ("gnus-update-format" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453051 453158])
            ("gnus-declare-backend" function (:prototype-flag t) nil [453310 453452])
            ("gnus-summary-bookmark-jump" function (:prototype-flag t) nil [453597 453801])
            ("gnus-sync-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453950 454046])
            ("gnus-sync-install-hooks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [454048 454136])
            ("gnus-add-configuration" function (:prototype-flag t) nil [454282 454417])
            ("gnutls-min-prime-bits" variable (:default-value 256) nil [454555 454951])
            ("custom-autoload" code nil nil [454953 455004])
            ("gomoku" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [455144 455908])
            ("define-obsolete-function-alias" code nil nil [456055 456140])
            ("goto-address-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456142 456434])
            ("goto-address" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456436 456870])
            ("put" code nil nil [456871 456918])
            ("goto-address-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456920 457219])
            ("goto-address-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457221 457359])
            ("gravatar-retrieve" function (:prototype-flag t) nil [457505 457714])
            ("gravatar-retrieve-synchronously" function (:prototype-flag t) nil [457716 457849])
            ("grep-window-height" variable nil nil [457993 458104])
            ("custom-autoload" code nil nil [458106 458152])
            ("grep-command" variable nil nil [458154 458592])
            ("custom-autoload" code nil nil [458594 458636])
            ("grep-find-command" variable nil nil [458638 458896])
            ("custom-autoload" code nil nil [458898 458945])
            ("grep-setup-hook" variable nil nil [458947 459049])
            ("custom-autoload" code nil nil [459051 459094])
            ("grep-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^\\(.*?[^/
]\\):[ 	]*\\([1-9][0-9]*\\)[ 	]*:" 1 2 ((lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) grep-match-face))) (when mbeg (- mbeg beg))))) lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) grep-match-face)) (mend (and mbeg (next-single-property-change mbeg (quote font-lock-face) nil end)))) (when mend (- mend beg)))))) ("^Binary file \\(.+\\) matches$" 1 nil nil 0 1))))
                nil [459096 459828])
            ("grep-program" variable (:default-value (purecopy "grep")) nil [459830 460017])
            ("find-program" variable (:default-value (purecopy "find")) nil [460019 460164])
            ("xargs-program" variable (:default-value (purecopy "xargs")) nil [460166 460364])
            ("grep-find-use-xargs" variable nil nil [460366 460680])
            ("grep-history" variable nil nil [460682 460734])
            ("grep-find-history" variable nil nil [460736 460798])
            ("grep-process-setup" function (:prototype-flag t) nil [460800 460977])
            ("grep-compute-defaults" function (:prototype-flag t) nil [460979 461039])
            ("grep-mode" function (:prototype-flag t) nil [461041 461145])
            ("grep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461147 462048])
            ("grep-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462050 462409])
            ("defalias" code nil nil [462411 462443])
            ("lgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462445 463231])
            ("rgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463233 464206])
            ("zrgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [464208 464497])
            ("defalias" code nil nil [464499 464525])
            ("gs-load-image" function (:prototype-flag t) nil [464635 464994])
            ("gud-gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465136 465683])
            ("sdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465685 465895])
            ("dbx" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465897 466107])
            ("xdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466109 466470])
            ("perldb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466472 466688])
            ("pdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466690 466902])
            ("guiler" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [466904 467122])
            ("jdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [467124 467753])
            ("gdb-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [467755 467841])
            ("gud-tooltip-mode" variable nil nil [467843 468144])
            ("custom-autoload" code nil nil [468146 468191])
            ("gud-tooltip-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468193 468445])
            ("gv-get" function (:prototype-flag t) nil [468586 469076])
            ("gv-letplace" function (:prototype-flag t) nil [469078 469628])
            ("function-put" code nil nil [469630 469682])
            ("gv-define-expander" function (:prototype-flag t) nil [469684 469995])
            ("function-put" code nil nil [469997 470056])
            ("gv--defun-declaration" function (:prototype-flag t) nil [470058 470155])
            ("or" code nil nil [470157 470357])
            ("or" code nil nil [470359 470505])
            ("gv-define-setter" function (:prototype-flag t) nil [470507 471180])
            ("function-put" code nil nil [471182 471239])
            ("gv-define-simple-setter" function (:prototype-flag t) nil [471241 471824])
            ("setf" function (:prototype-flag t) nil [471826 472178])
            ("put" code nil nil [472180 472232])
            ("gv-ref" function (:prototype-flag t) nil [472234 472526])
            ("handwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472675 473101])
            ("hanoi" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473238 473333])
            ("hanoi-unix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473335 473557])
            ("hanoi-unix-64" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473559 473802])
            ("hashcash-insert-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473948 474078])
            ("hashcash-insert-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474080 474274])
            ("hashcash-verify-payment" function (:prototype-flag t) nil [474276 474399])
            ("mail-add-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474401 474697])
            ("mail-add-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474699 474941])
            ("mail-check-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474943 475117])
            ("help-at-pt-string" function (:prototype-flag t) nil [475259 475652])
            ("help-at-pt-kbd-string" function (:prototype-flag t) nil [475654 475932])
            ("display-local-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [475934 476415])
            ("help-at-pt-cancel-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476417 476576])
            ("help-at-pt-set-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476578 476741])
            ("help-at-pt-display-when-idle" variable (:default-value (quote never)) nil [476743 478119])
            ("custom-autoload" code nil nil [478121 478185])
            ("scan-buf-move-to-region" function (:prototype-flag t) nil [478187 479130])
            ("scan-buf-next-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [479132 480146])
            ("scan-buf-previous-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [480148 480524])
            ("describe-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [480661 480782])
            ("help-C-file-name" function (:prototype-flag t) nil [480784 480983])
            ("find-lisp-object-file-name" function (:prototype-flag t) nil [480985 481735])
            ("describe-function-1" function (:prototype-flag t) nil [481737 481808])
            ("variable-at-point" function (:prototype-flag t) nil [481810 482046])
            ("describe-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [482048 482390])
            ("describe-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [482392 482768])
            ("describe-syntax" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [482770 483020])
            ("describe-categories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [483022 483347])
            ("doc-file-to-man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [483349 483479])
            ("doc-file-to-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [483481 483610])
            ("three-step-help" variable nil nil [483752 484081])
            ("custom-autoload" code nil nil [484083 484132])
            ("help-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [484271 484473])
            ("help-mode-setup" function (:prototype-flag t) nil [484475 484572])
            ("help-mode-finish" function (:prototype-flag t) nil [484574 484677])
            ("help-setup-xref" function (:prototype-flag t) nil [484679 485273])
            ("help-buffer" function (:prototype-flag t) nil [485275 485612])
            ("help-make-xrefs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [485614 486635])
            ("help-xref-button" function (:prototype-flag t) nil [486637 487006])
            ("help-insert-xref-button" function (:prototype-flag t) nil [487008 487309])
            ("help-xref-on-pp" function (:prototype-flag t) nil [487311 487436])
            ("define-obsolete-function-alias" code nil nil [487438 487514])
            ("help-bookmark-jump" function (:prototype-flag t) nil [487516 487742])
            ("Helper-describe-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487894 488001])
            ("Helper-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [488003 488083])
            ("hexl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [488199 491739])
            ("hexl-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [491741 491962])
            ("hexlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [491964 492099])
            ("hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [492224 495044])
            ("global-hi-lock-mode" variable nil nil [495046 495359])
            ("custom-autoload" code nil nil [495361 495413])
            ("global-hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495415 495819])
            ("defalias" code nil nil [495821 495890])
            ("hi-lock-line-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495892 496306])
            ("defalias" code nil nil [496308 496357])
            ("hi-lock-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496359 496750])
            ("defalias" code nil nil [496752 496808])
            ("hi-lock-face-phrase-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496810 497415])
            ("defalias" code nil nil [497417 497484])
            ("hi-lock-face-symbol-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [497486 497908])
            ("defalias" code nil nil [497910 497963])
            ("hi-lock-unface-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [497965 498316])
            ("hi-lock-write-interactive-patterns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [498318 498642])
            ("hide-ifdef-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [498792 500603])
            ("hs-special-modes-alist" variable (:default-value (mapcar (quote purecopy) (quote ((c-mode "{" "}" "/[*/]" nil nil) (c++-mode "{" "}" "/[*/]" nil nil) (bibtex-mode ("@\\S(*\\(\\s(\\)" 1)) (java-mode "{" "}" "/[*/]" nil nil) (js-mode "{" "}" "/[*/]" nil))))) nil [500758 502199])
            ("hs-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [502201 503103])
            ("turn-off-hideshow" function (:prototype-flag t) nil [503105 503206])
            ("highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [503345 504436])
            ("highlight-changes-visible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [504438 505073])
            ("highlight-changes-remove-highlight" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [505075 505294])
            ("highlight-changes-next-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [505296 505438])
            ("highlight-changes-previous-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [505440 505590])
            ("highlight-changes-rotate-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [505592 506269])
            ("highlight-compare-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [506271 506855])
            ("highlight-compare-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [506857 507475])
            ("global-highlight-changes-mode" variable nil nil [507477 507830])
            ("custom-autoload" code nil nil [507832 507896])
            ("global-highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [507898 508368])
            ("push" code nil nil [508509 508570])
            ("hippie-expand-try-functions-list" variable (:default-value (quote (try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol))) nil [508572 509043])
            ("custom-autoload" code nil nil [509045 509111])
            ("hippie-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [509113 509599])
            ("make-hippie-expand-function" function (:prototype-flag t) nil [509601 509868])
            ("hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [509993 510854])
            ("global-hl-line-mode" variable nil nil [510856 511169])
            ("custom-autoload" code nil nil [511171 511223])
            ("global-hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [511225 511806])
            ("holiday-general-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-fixed 1 1 "New Year's Day") (holiday-float 1 1 3 "Martin Luther King Day") (holiday-fixed 2 2 "Groundhog Day") (holiday-fixed 2 14 "Valentine's Day") (holiday-float 2 1 3 "President's Day") (holiday-fixed 3 17 "St. Patrick's Day") (holiday-fixed 4 1 "April Fools' Day") (holiday-float 5 0 2 "Mother's Day") (holiday-float 5 1 -1 "Memorial Day") (holiday-fixed 6 14 "Flag Day") (holiday-float 6 0 3 "Father's Day") (holiday-fixed 7 4 "Independence Day") (holiday-float 9 1 1 "Labor Day") (holiday-float 10 1 2 "Columbus Day") (holiday-fixed 10 31 "Halloween") (holiday-fixed 11 11 "Veteran's Day") (holiday-float 11 4 4 "Thanksgiving"))))) nil [511960 512781])
            ("custom-autoload" code nil nil [512783 512839])
            ("put" code nil nil [512841 512896])
            ("holiday-oriental-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-chinese-new-year) (if calendar-chinese-all-holidays-flag (append (holiday-chinese 1 15 "Lantern Festival") (holiday-chinese-qingming) (holiday-chinese 5 5 "Dragon Boat Festival") (holiday-chinese 7 7 "Double Seventh Festival") (holiday-chinese 8 15 "Mid-Autumn Festival") (holiday-chinese 9 9 "Double Ninth Festival") (holiday-chinese-winter-solstice))))))) nil [512898 513399])
            ("custom-autoload" code nil nil [513401 513458])
            ("put" code nil nil [513460 513516])
            ("holiday-local-holidays" variable nil nil [513518 513632])
            ("custom-autoload" code nil nil [513634 513688])
            ("put" code nil nil [513690 513743])
            ("holiday-other-holidays" variable nil nil [513745 513866])
            ("custom-autoload" code nil nil [513868 513922])
            ("put" code nil nil [513924 513977])
            ("holiday-hebrew-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-passover) (holiday-hebrew-rosh-hashanah) (holiday-hebrew-hanukkah) (if calendar-hebrew-all-holidays-flag (append (holiday-hebrew-tisha-b-av) (holiday-hebrew-misc))))))) nil [513979 514294])
            ("custom-autoload" code nil nil [514296 514351])
            ("put" code nil nil [514353 514407])
            ("holiday-christian-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-easter-etc) (holiday-fixed 12 25 "Christmas") (if calendar-christian-all-holidays-flag (append (holiday-fixed 1 6 "Epiphany") (holiday-julian 12 25 "Christmas (Julian calendar)") (holiday-greek-orthodox-easter) (holiday-fixed 8 15 "Assumption") (holiday-advent 0 "Advent"))))))) nil [514409 514833])
            ("custom-autoload" code nil nil [514835 514893])
            ("put" code nil nil [514895 514952])
            ("holiday-islamic-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-islamic-new-year) (holiday-islamic 9 1 "Ramadan Begins") (if calendar-islamic-all-holidays-flag (append (holiday-islamic 1 10 "Ashura") (holiday-islamic 3 12 "Mulad-al-Nabi") (holiday-islamic 7 26 "Shab-e-Mi'raj") (holiday-islamic 8 15 "Shab-e-Bara't") (holiday-islamic 9 27 "Shab-e Qadr") (holiday-islamic 10 1 "Id-al-Fitr") (holiday-islamic 12 10 "Id-al-Adha"))))))) nil [514954 515464])
            ("custom-autoload" code nil nil [515466 515522])
            ("put" code nil nil [515524 515579])
            ("holiday-bahai-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-bahai-new-year) (holiday-bahai-ridvan) (holiday-fixed 5 23 "Declaration of the Báb") (holiday-fixed 5 29 "Ascension of Bahá’u’lláh") (holiday-fixed 7 9 "Martyrdom of the Báb") (holiday-fixed 10 20 "Birth of the Báb") (holiday-fixed 11 12 "Birth of Bahá’u’lláh") (if calendar-bahai-all-holidays-flag (append (holiday-fixed 11 26 "Day of the Covenant") (holiday-fixed 11 28 "Ascension of `Abdu’l-Bahá"))))))) nil [515581 516126])
            ("custom-autoload" code nil nil [516128 516182])
            ("put" code nil nil [516184 516237])
            ("holiday-solar-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((solar-equinoxes-solstices) (holiday-sexp calendar-daylight-savings-starts (format "Daylight Saving Time Begins %s" (solar-time-string (/ calendar-daylight-savings-starts-time (float 60)) calendar-standard-time-zone-name))) (holiday-sexp calendar-daylight-savings-ends (format "Daylight Saving Time Ends %s" (solar-time-string (/ calendar-daylight-savings-ends-time (float 60)) calendar-daylight-time-zone-name))))))) nil [516239 516791])
            ("custom-autoload" code nil nil [516793 516847])
            ("put" code nil nil [516849 516902])
            ("put" code nil nil [516904 516952])
            ("holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [516954 517213])
            ("list-holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [517215 518038])
            ("defalias" code nil nil [518040 518079])
            ("html2text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518228 518328])
            ("push" code nil nil [518472 518535])
            ("htmlfontify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518537 519247])
            ("htmlfontify-copy-and-link-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [519249 519558])
            ("define-ibuffer-column" function (:prototype-flag t) nil [519697 520798])
            ("function-put" code nil nil [520800 520866])
            ("define-ibuffer-sorter" function (:prototype-flag t) nil [520868 521369])
            ("function-put" code nil nil [521371 521433])
            ("function-put" code nil nil [521435 521491])
            ("define-ibuffer-op" function (:prototype-flag t) nil [521493 523127])
            ("function-put" code nil nil [523129 523187])
            ("function-put" code nil nil [523189 523241])
            ("define-ibuffer-filter" function (:prototype-flag t) nil [523243 523808])
            ("function-put" code nil nil [523810 523872])
            ("function-put" code nil nil [523874 523930])
            ("ibuffer-list-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [524055 524282])
            ("ibuffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [524284 524525])
            ("ibuffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [524527 525394])
            ("push" code nil nil [525550 525611])
            ("icalendar-export-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [525613 525874])
            ("icalendar-export-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [525876 526350])
            ("icalendar-import-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [526352 526699])
            ("icalendar-import-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [526701 527405])
            ("icomplete-mode" variable nil nil [527543 527836])
            ("custom-autoload" code nil nil [527838 527887])
            ("icomplete-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [527889 528648])
            ("when" code nil nil [528649 528844])
            ("icon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528988 530414])
            ("idlwave-shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530576 531426])
            ("push" code nil nil [531577 531638])
            ("idlwave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [531640 536600])
            ("ido-mode" variable nil nil [536713 537177])
            ("custom-autoload" code nil nil [537179 537216])
            ("ido-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537218 537735])
            ("ido-switch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [537737 539433])
            ("ido-switch-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539435 539674])
            ("ido-display-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539676 539903])
            ("ido-kill-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [539905 540088])
            ("ido-insert-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [540090 540319])
            ("ido-switch-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [540321 540558])
            ("ido-find-file-in-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [540560 540661])
            ("ido-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [540663 543152])
            ("ido-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543154 543381])
            ("ido-find-alternate-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543383 543607])
            ("ido-find-file-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543609 543834])
            ("ido-find-file-read-only-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [543836 544090])
            ("ido-find-file-read-only-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [544092 544344])
            ("ido-display-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [544346 544563])
            ("ido-find-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [544565 544790])
            ("ido-write-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [544792 544985])
            ("ido-insert-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [544987 545192])
            ("ido-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [545194 545376])
            ("ido-read-buffer" function (:prototype-flag t) nil [545378 545769])
            ("ido-read-file-name" function (:prototype-flag t) nil [545771 546062])
            ("ido-read-directory-name" function (:prototype-flag t) nil [546064 546364])
            ("ido-completing-read" function (:prototype-flag t) nil [546366 547340])
            ("ielm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [547456 547656])
            ("define-obsolete-function-alias" code nil nil [547778 547851])
            ("iimage-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [547853 548157])
            ("image-type-from-data" function (:prototype-flag t) nil [548276 548468])
            ("image-type-from-buffer" function (:prototype-flag t) nil [548470 548670])
            ("image-type-from-file-header" function (:prototype-flag t) nil [548672 548889])
            ("image-type-from-file-name" function (:prototype-flag t) nil [548891 549095])
            ("image-type" function (:prototype-flag t) nil [549097 549565])
            ("image-type-available-p" function (:prototype-flag t) nil [549567 549727])
            ("image-type-auto-detected-p" function (:prototype-flag t) nil [549729 550226])
            ("create-image" function (:prototype-flag t) nil [550228 551107])
            ("put-image" function (:prototype-flag t) nil [551109 551828])
            ("insert-image" function (:prototype-flag t) nil [551830 552680])
            ("insert-sliced-image" function (:prototype-flag t) nil [552682 553265])
            ("remove-images" function (:prototype-flag t) nil [553267 553515])
            ("find-image" function (:prototype-flag t) nil [553517 554345])
            ("defimage" function (:prototype-flag t) nil [554347 555162])
            ("function-put" code nil nil [555164 555207])
            ("imagemagick-register-types" function (:prototype-flag t) nil [555209 555786])
            ("push" code nil nil [555930 555995])
            ("image-dired-dired-toggle-marked-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [555997 556385])
            ("image-dired-dired-with-window-configuration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [556387 557018])
            ("image-dired-display-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [557020 558010])
            ("image-dired-show-all-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558012 558292])
            ("defalias" code nil nil [558294 558348])
            ("define-obsolete-function-alias" code nil nil [558350 558409])
            ("image-dired-tag-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558411 558545])
            ("image-dired-delete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558547 558706])
            ("image-dired-jump-thumbnail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558708 558810])
            ("image-dired-setup-dired-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [558812 559056])
            ("image-dired-display-thumbs-append" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559058 559187])
            ("image-dired-display-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559189 559322])
            ("image-dired-dired-display-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559324 559449])
            ("image-dired-dired-display-image" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559451 559701])
            ("image-dired-dired-comment-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559703 559826])
            ("image-dired-mark-tagged-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559828 560254])
            ("image-dired-dired-edit-comment-and-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560256 560467])
            ("image-file-name-extensions" variable (:default-value (purecopy (quote ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg")))) nil [560609 561147])
            ("custom-autoload" code nil nil [561149 561211])
            ("image-file-name-regexps" variable nil nil [561213 561686])
            ("custom-autoload" code nil nil [561688 561747])
            ("image-file-name-regexp" function (:prototype-flag t) nil [561749 561874])
            ("insert-image-file" function (:prototype-flag t) nil [561876 562133])
            ("auto-image-file-mode" variable nil nil [562135 562452])
            ("custom-autoload" code nil nil [562454 562510])
            ("auto-image-file-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [562512 562952])
            ("image-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [563094 563322])
            ("image-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [563324 563755])
            ("image-mode-as-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [563757 564351])
            ("image-bookmark-jump" function (:prototype-flag t) nil [564353 564421])
            ("imenu-sort-function" variable nil nil [564540 565076])
            ("custom-autoload" code nil nil [565078 565126])
            ("imenu-generic-expression" variable nil nil [565128 566637])
            ("put" code nil nil [566638 566693])
            ("make-variable-buffer-local" code nil nil [566695 566749])
            ("imenu-create-index-function" variable (:default-value (quote imenu-default-create-index-function)) nil [566751 567117])
            ("make-variable-buffer-local" code nil nil [567119 567176])
            ("imenu-prev-index-position-function" variable (:default-value (quote beginning-of-defun)) nil [567178 567618])
            ("make-variable-buffer-local" code nil nil [567620 567684])
            ("imenu-extract-index-name-function" variable nil nil [567686 567979])
            ("make-variable-buffer-local" code nil nil [567981 568044])
            ("imenu-name-lookup-function" variable nil nil [568046 568404])
            ("make-variable-buffer-local" code nil nil [568406 568462])
            ("imenu-default-goto-function" variable (:default-value (quote imenu-default-goto-function)) nil [568464 568667])
            ("make-variable-buffer-local" code nil nil [568669 568726])
            ("put" code nil nil [568727 568776])
            ("make-variable-buffer-local" code nil nil [568778 568826])
            ("make-variable-buffer-local" code nil nil [568828 568880])
            ("imenu-add-to-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [568882 569100])
            ("imenu-add-menubar-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [569102 569306])
            ("imenu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [569308 569523])
            ("indian-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [569677 569808])
            ("indian-compose-string" function (:prototype-flag t) nil [569810 569881])
            ("in-is13194-post-read-conversion" function (:prototype-flag t) nil [569883 569961])
            ("in-is13194-pre-write-conversion" function (:prototype-flag t) nil [569963 570045])
            ("indian-2-column-to-ucs-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [570047 570172])
            ("inferior-lisp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [570328 570806])
            ("defalias" code nil nil [570808 570843])
            ("Info-default-directory-list" variable (:default-value (let* ((config-dir (file-name-as-directory (or (and (featurep (quote ns)) (let ((dir (expand-file-name "../info" data-directory))) (if (file-directory-p dir) dir))) configure-info-directory))) (prefixes (prune-directory-list (quote ("/usr/local/" "/usr/" "/opt/" "/")))) (suffixes (quote ("share/" "" "gnu/" "gnu/lib/" "gnu/lib/emacs/" "emacs/" "lib/" "lib/emacs/"))) (standard-info-dirs (apply (function nconc) (mapcar (lambda (pfx) (let ((dirs (mapcar (lambda (sfx) (concat pfx sfx "info/")) suffixes))) (prune-directory-list dirs))) prefixes))) (dirs (if (member config-dir standard-info-dirs) (nconc standard-info-dirs (list config-dir)) (cons config-dir standard-info-dirs)))) (if (not (eq system-type (quote windows-nt))) dirs (let* ((instdir (file-name-directory invocation-directory)) (dir1 (expand-file-name "../info/" instdir)) (dir2 (expand-file-name "../../../info/" instdir))) (cond ((file-exists-p dir1) (append dirs (list dir1))) ((file-exists-p dir2) (append dirs (list dir2))) (t dirs)))))) nil [570959 572972])
            ("info-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [572974 573113])
            ("put" code nil nil [573115 573156])
            ("info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [573158 574106])
            ("info-emacs-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [574108 574200])
            ("info-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [574202 574325])
            ("info-standalone" function (:prototype-flag t) nil [574327 574534])
            ("Info-on-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [574536 574763])
            ("Info-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [574765 574846])
            ("Info-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [574848 575243])
            ("info-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [575245 575404])
            ("info-finder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [575406 575738])
            ("Info-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [575740 579431])
            ("put" code nil nil [579433 579498])
            ("Info-goto-emacs-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [579500 579836])
            ("put" code nil nil [579838 579907])
            ("Info-goto-emacs-key-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [579909 580322])
            ("Info-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [580324 580479])
            ("Info-bookmark-jump" function (:prototype-flag t) nil [580481 580662])
            ("info-display-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [580664 581005])
            ("info-lookup-reset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [581144 581388])
            ("put" code nil nil [581390 581434])
            ("info-lookup-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [581436 581881])
            ("put" code nil nil [581883 581925])
            ("info-lookup-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [581927 582330])
            ("info-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582332 582454])
            ("info-complete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582456 582574])
            ("push" code nil nil [582712 582770])
            ("info-xref-check" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582772 584007])
            ("info-xref-check-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [584009 584599])
            ("info-xref-check-all-custom" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [584601 584987])
            ("info-xref-docstrings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [584989 585859])
            ("Info-tagify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [585995 586145])
            ("Info-split-threshold" variable (:default-value 262144) nil [586147 586255])
            ("custom-autoload" code nil nil [586257 586309])
            ("Info-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [586311 586996])
            ("Info-validate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [586998 587160])
            ("batch-info-validate" function (:prototype-flag t) nil [587162 587492])
            ("define-inline" function (:prototype-flag t) nil [587644 587717])
            ("function-put" code nil nil [587719 587777])
            ("function-put" code nil nil [587779 587827])
            ("push" code nil nil [587977 588037])
            ("inversion-require-emacs" function (:prototype-flag t) nil [588039 588264])
            ("isearch-toggle-specified-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [588429 588568])
            ("isearch-toggle-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [588570 588681])
            ("isearch-process-search-multibyte-characters" function (:prototype-flag t) nil [588683 588796])
            ("push" code nil nil [588931 588990])
            ("isearchb-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [588992 589257])
            ("iso-spanish" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [589417 589687])
            ("iso-german" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [589689 589948])
            ("iso-iso2tex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [589950 590217])
            ("iso-tex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [590219 590486])
            ("iso-gtex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [590488 590764])
            ("iso-iso2gtex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [590766 591042])
            ("iso-iso2duden" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591044 591317])
            ("iso-iso2sgml" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591319 591584])
            ("iso-sgml2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591586 591851])
            ("iso-cvt-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591853 591953])
            ("iso-cvt-write-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [591955 592057])
            ("iso-cvt-define-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592059 592188])
            ("define-key" code nil nil [592357 592421])
            ("iso-transl-ctl-x-8-map" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592423 592507])
            ("put" code nil nil [592657 592747])
            ("ispell-personal-dictionary" variable nil nil [592749 593064])
            ("custom-autoload" code nil nil [593066 593122])
            ("put" code nil nil [593124 593193])
            ("ispell-menu-map" variable nil nil [593195 593252])
            ("ispell-menu-xemacs" variable nil nil [593254 593420])
            ("ispell-menu-map-needed" variable (:default-value (and (not ispell-menu-map) (not (featurep (quote xemacs))) (quote reload))) nil [593422 593514])
            ("if" code nil nil [593516 595266])
            ("if" code nil nil [595268 595949])
            ("if" code nil nil [595951 596583])
            ("ispell-skip-region-alist" variable (:default-value (\` ((ispell-words-keyword forward-line) (ispell-dictionary-keyword forward-line) (ispell-pdict-keyword forward-line) (ispell-parsing-keyword forward-line) ((\, (purecopy "^---*BEGIN PGP [A-Z ]*--*")) \, (purecopy "^---*END PGP [A-Z ]*--*")) ((\, (purecopy "^begin [0-9][0-9][0-9] [^ 	]+$")) \, (purecopy "
end
")) ((\, (purecopy "^%!PS-Adobe-[123].0")) \, (purecopy "
%%EOF
")) ((\, (purecopy "^---* \\(Start of \\)?[Ff]orwarded [Mm]essage")) \, (purecopy "^---* End of [Ff]orwarded [Mm]essage"))))) nil [596585 597484])
            ("ispell-tex-skip-alists" variable (:default-value (purecopy (quote ((("\\\\addcontentsline" ispell-tex-arg-end 2) ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end) ("\\\\\\([aA]lph\\|arabic\\)" ispell-tex-arg-end) ("\\\\bibliographystyle" ispell-tex-arg-end) ("\\\\makebox" ispell-tex-arg-end 0) ("\\\\e?psfig" ispell-tex-arg-end) ("\\\\document\\(class\\|style\\)" . "\\\\begin[ 	
]*{[ 	
]*document[ 	
]*}")) (("\\(figure\\|table\\)\\*?" ispell-tex-arg-end 0) ("list" ispell-tex-arg-end 2) ("program" . "\\\\end[ 	
]*{[ 	
]*program[ 	
]*}") ("verbatim\\*?" . "\\\\end[ 	
]*{[ 	
]*verbatim\\*?[ 	
]*}")))))) nil [597486 598292])
            ("ispell-html-skip-alists" variable
               (:constant-flag t
                :default-value (quote (("<[cC][oO][dD][eE]\\>[^>]*>" "</[cC][oO][dD][eE]*>") ("<[sS][cC][rR][iI][pP][tT]\\>[^>]*>" "</[sS][cC][rR][iI][pP][tT]>") ("<[aA][pP][pP][lL][eE][tT]\\>[^>]*>" "</[aA][pP][pP][lL][eE][tT]>") ("<[vV][eE][rR][bB]\\>[^>]*>" "<[vV][eE][rR][bB]\\>[^>]*>") ("<[tT][tT]/" "/") ("<[^ 	
>]" ">") ("&[^ 	
;]" "[; 	
]"))))
                nil [598294 598839])
            ("put" code nil nil [598840 598895])
            ("define-key" code nil nil [598897 598934])
            ("ispell-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [598936 600311])
            ("ispell-pdict-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [600313 600493])
            ("ispell-help" function (:prototype-flag t) nil [600495 601588])
            ("ispell-kill-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [601590 601854])
            ("ispell-change-dictionary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [601856 602168])
            ("ispell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [602170 602421])
            ("ispell-comments-and-strings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [602423 602558])
            ("ispell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [602560 602671])
            ("ispell-buffer-with-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [602673 602892])
            ("ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [602894 603015])
            ("ispell-complete-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603017 603287])
            ("ispell-complete-word-interior-frag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603289 603419])
            ("ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603421 603866])
            ("ispell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603868 604516])
            ("ispell-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [604518 605487])
            ("setup-japanese-environment-internal" function (:prototype-flag t) nil [605647 605727])
            ("japanese-katakana" function (:prototype-flag t) nil [605729 606204])
            ("japanese-hiragana" function (:prototype-flag t) nil [606206 606448])
            ("japanese-hankaku" function (:prototype-flag t) nil [606450 606788])
            ("japanese-zenkaku" function (:prototype-flag t) nil [606790 607032])
            ("japanese-katakana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607034 607318])
            ("japanese-hiragana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607320 607463])
            ("japanese-hankaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607465 607809])
            ("japanese-zenkaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607811 608160])
            ("read-hiragana-string" function (:prototype-flag t) nil [608162 608406])
            ("jka-compr-inhibit" variable nil nil [608545 608759])
            ("jka-compr-handler" function (:prototype-flag t) nil [608761 608843])
            ("jka-compr-uninstall" function (:prototype-flag t) nil [608845 609085])
            ("push" code nil nil [609214 609265])
            ("js-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [609267 609343])
            ("js-jsx-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [609345 609709])
            ("defalias" code nil nil [609711 609747])
            ("dolist" code nil nil [609749 609871])
            ("push" code nil nil [609986 610041])
            ("keypad-setup" variable nil nil [610191 610402])
            ("custom-autoload" code nil nil [610404 610448])
            ("keypad-numlock-setup" variable nil nil [610450 610668])
            ("custom-autoload" code nil nil [610670 610722])
            ("keypad-shifted-setup" variable nil nil [610724 610941])
            ("custom-autoload" code nil nil [610943 610995])
            ("keypad-numlock-shifted-setup" variable nil nil [610997 611222])
            ("custom-autoload" code nil nil [611224 611284])
            ("keypad-setup" function (:prototype-flag t) nil [611286 612329])
            ("kinsoku" function (:prototype-flag t) nil [612490 613134])
            ("kkc-after-update-conversion-functions" variable nil nil [613283 613661])
            ("kkc-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [613663 614090])
            ("global-set-key" code nil nil [614212 614256])
            ("global-set-key" code nil nil [614258 614300])
            ("global-set-key" code nil nil [614302 614353])
            ("global-set-key" code nil nil [614355 614414])
            ("global-set-key" code nil nil [614416 614463])
            ("global-set-key" code nil nil [614465 614507])
            ("kmacro-keymap" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [614509 614591])
            ("kmacro-exec-ring-item" function (:prototype-flag t) nil [614593 614750])
            ("kmacro-start-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [614752 615759])
            ("kmacro-end-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [615761 616224])
            ("kmacro-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [616226 616870])
            ("kmacro-start-macro-or-insert-counter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [616872 617621])
            ("kmacro-end-or-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [617623 617894])
            ("kmacro-end-and-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [617896 618280])
            ("kmacro-end-call-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [618282 618488])
            ("default-korean-keyboard" variable (:default-value (purecopy (if (string-match "3" (or (getenv "HANGUL_KEYBOARD_TYPE") "")) "3" ""))) nil [618648 618844])
            ("setup-korean-environment-internal" function (:prototype-flag t) nil [618846 618924])
            ("lao-compose-string" function (:prototype-flag t) nil [619078 619143])
            ("lao-transcribe-single-roman-syllable-to-lao" function (:prototype-flag t) nil [619145 619681])
            ("lao-transcribe-roman-to-lao-string" function (:prototype-flag t) nil [619683 619824])
            ("lao-composition-function" function (:prototype-flag t) nil [619826 619901])
            ("lao-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [619903 619970])
            ("latex-inputenc-coding-alist" variable (:default-value (purecopy (quote (("ansinew" . windows-1252) ("applemac" . mac-roman) ("ascii" . us-ascii) ("cp1250" . windows-1250) ("cp1252" . windows-1252) ("cp1257" . cp1257) ("cp437de" . cp437) ("cp437" . cp437) ("cp850" . cp850) ("cp852" . cp852) ("cp858" . cp858) ("cp865" . cp865) ("latin1" . iso-8859-1) ("latin2" . iso-8859-2) ("latin3" . iso-8859-3) ("latin4" . iso-8859-4) ("latin5" . iso-8859-5) ("latin9" . iso-8859-15) ("next" . next) ("utf8" . utf-8) ("utf8x" . utf-8))))) nil [620134 620843])
            ("custom-autoload" code nil nil [620845 620904])
            ("latexenc-inputenc-to-coding-system" function (:prototype-flag t) nil [620906 621118])
            ("latexenc-coding-system-to-inputenc" function (:prototype-flag t) nil [621120 621327])
            ("latexenc-find-file-coding-system" function (:prototype-flag t) nil [621329 621621])
            ("latin1-display" variable nil nil [621794 622497])
            ("custom-autoload" code nil nil [622499 622550])
            ("latin1-display" function (:prototype-flag t) nil [622552 622893])
            ("latin1-display-ucs-per-lynx" variable nil nil [622895 623230])
            ("custom-autoload" code nil nil [623232 623296])
            ("ld-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623454 623550])
            ("push" code nil nil [623710 623772])
            ("let-alist" function (:prototype-flag t) nil [623774 624708])
            ("function-put" code nil nil [624710 624760])
            ("life" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [624886 625151])
            ("push" code nil nil [625269 625328])
            ("linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [625330 625653])
            ("global-linum-mode" variable nil nil [625655 625960])
            ("custom-autoload" code nil nil [625962 626010])
            ("global-linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [626012 626384])
            ("unload-feature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [626520 627694])
            ("locate-ls-subdir-switches" variable (:default-value (purecopy "-al")) nil [627816 628015])
            ("custom-autoload" code nil nil [628017 628072])
            ("locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [628074 629138])
            ("locate-with-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [629140 629900])
            ("log-edit" function (:prototype-flag t) nil [630042 631282])
            ("log-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [631424 631517])
            ("lpr-windows-system" variable (:default-value (memq system-type (quote (ms-dos windows-nt)))) nil [631630 631745])
            ("lpr-lp-system" variable (:default-value (memq system-type (quote (usg-unix-v hpux irix)))) nil [631747 631882])
            ("printer-name" variable (:default-value (and (eq system-type (quote ms-dos)) "PRN")) nil [631884 632698])
            ("custom-autoload" code nil nil [632700 632739])
            ("lpr-switches" variable nil nil [632741 632949])
            ("custom-autoload" code nil nil [632951 632990])
            ("lpr-command" variable (:default-value (purecopy (cond (lpr-windows-system "") (lpr-lp-system "lp") (t "lpr")))) nil [632992 633558])
            ("custom-autoload" code nil nil [633560 633598])
            ("lpr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [633600 633796])
            ("print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [633798 634364])
            ("lpr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [634366 634572])
            ("print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [634574 635154])
            ("ls-lisp-support-shell-wildcards" variable (:default-value t) nil [635279 635462])
            ("custom-autoload" code nil nil [635464 635526])
            ("lunar-phases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [635671 635944])
            ("m4-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [636097 636180])
            ("name-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [636302 636605])
            ("insert-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [636607 637305])
            ("kbd-macro-query" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [637307 637966])
            ("apply-macro-to-region-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [637968 639435])
            ("define-key" code nil nil [639437 639480])
            ("mail-extract-address-components" function (:prototype-flag t) nil [639629 640552])
            ("what-domain" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [640554 640674])
            ("mail-hist-define-keys" function (:prototype-flag t) nil [640823 640953])
            ("mail-hist-enable" function (:prototype-flag t) nil [640955 641015])
            ("mail-hist-keep-history" variable (:default-value t) nil [641017 641122])
            ("custom-autoload" code nil nil [641124 641179])
            ("mail-hist-put-headers-into-history" function (:prototype-flag t) nil [641181 641469])
            ("mail-use-rfc822" variable nil nil [641621 641799])
            ("custom-autoload" code nil nil [641801 641850])
            ("mail-dont-reply-to-names" variable nil nil [641852 642193])
            ("custom-autoload" code nil nil [642195 642253])
            ("mail-file-babyl-p" function (:prototype-flag t) nil [642255 642361])
            ("mail-quote-printable" function (:prototype-flag t) nil [642363 642717])
            ("mail-quote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642719 642971])
            ("mail-unquote-printable" function (:prototype-flag t) nil [642973 643224])
            ("mail-unquote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [643226 643872])
            ("mail-fetch-field" function (:prototype-flag t) nil [643874 644350])
            ("mail-abbrevs-mode" variable nil nil [644502 644807])
            ("custom-autoload" code nil nil [644809 644862])
            ("mail-abbrevs-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644864 645393])
            ("mail-abbrevs-setup" function (:prototype-flag t) nil [645395 645501])
            ("build-mail-abbrevs" function (:prototype-flag t) nil [645503 645732])
            ("define-mail-abbrev" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [645734 646176])
            ("mail-complete-style" variable (:default-value (quote angles)) nil [646325 646639])
            ("custom-autoload" code nil nil [646641 646693])
            ("expand-mail-aliases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [646695 647106])
            ("define-mail-alias" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [647108 647567])
            ("mail-completion-at-point-function" function (:prototype-flag t) nil [647569 647731])
            ("mail-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [647733 648005])
            ("make-obsolete" code nil nil [648007 648080])
            ("mailclient-send-it" function (:prototype-flag t) nil [648232 648446])
            ("makefile-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [648605 651906])
            ("makefile-automake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [651908 652025])
            ("makefile-gmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [652027 652138])
            ("makefile-makepp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [652140 652253])
            ("makefile-bsdmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [652255 652371])
            ("makefile-imake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [652373 652484])
            ("make-command-summary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [652609 652783])
            ("defalias" code nil nil [652896 652925])
            ("man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [652927 654255])
            ("man-follow" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [654257 654382])
            ("Man-bookmark-jump" function (:prototype-flag t) nil [654384 654489])
            ("push" code nil nil [654631 654685])
            ("push" code nil nil [654805 654864])
            ("master-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [654866 655421])
            ("minibuffer-depth-indicate-mode" variable nil nil [655557 655914])
            ("custom-autoload" code nil nil [655916 655980])
            ("minibuffer-depth-indicate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [655982 656517])
            ("push" code nil nil [656629 656683])
            ("define-mail-user-agent" code nil nil [656826 656947])
            ("message-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [656949 659363])
            ("message-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659365 659774])
            ("message-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659776 659897])
            ("message-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [659899 660053])
            ("message-wide-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660055 660193])
            ("message-followup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660195 660377])
            ("message-cancel-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660379 660532])
            ("message-supersede" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660534 660757])
            ("message-recover" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660759 660877])
            ("message-forward" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660879 661093])
            ("message-forward-make-body" function (:prototype-flag t) nil [661095 661194])
            ("message-forward-rmail-make-body" function (:prototype-flag t) nil [661196 661284])
            ("message-insinuate-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661286 661382])
            ("message-resend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661384 661484])
            ("message-bounce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661486 661710])
            ("message-mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661712 661869])
            ("message-mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661871 662026])
            ("message-news-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [662028 662162])
            ("message-news-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [662164 662297])
            ("message-bold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [662299 662539])
            ("message-unbold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [662541 662764])
            ("push" code nil nil [662922 662982])
            ("metafont-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [662984 663079])
            ("metapost-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [663081 663176])
            ("metamail-interpret-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [663322 663489])
            ("metamail-interpret-body" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [663491 663885])
            ("metamail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [663887 664299])
            ("metamail-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [664301 664721])
            ("mh-smail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [664864 665004])
            ("mh-smail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [665006 665175])
            ("mh-smail-batch" function (:prototype-flag t) nil [665177 665735])
            ("define-mail-user-agent" code nil nil [665737 665866])
            ("mh-user-agent-compose" function (:prototype-flag t) nil [665868 666668])
            ("mh-send-letter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [666670 667753])
            ("mh-fully-kill-draft" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [667755 668065])
            ("push" code nil nil [668190 668245])
            ("put" code nil nil [668247 668286])
            ("put" code nil nil [668288 668325])
            ("put" code nil nil [668327 668370])
            ("mh-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [668372 668490])
            ("mh-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [668639 668854])
            ("mh-nmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [668856 669077])
            ("mh-folder-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [669079 670820])
            ("midnight-mode" variable nil nil [670956 671245])
            ("custom-autoload" code nil nil [671247 671294])
            ("midnight-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671296 671410])
            ("clean-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671412 672034])
            ("midnight-delay-set" function (:prototype-flag t) nil [672036 672255])
            ("minibuffer-electric-default-mode" variable nil nil [672406 672771])
            ("custom-autoload" code nil nil [672773 672844])
            ("minibuffer-electric-default-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [672846 673521])
            ("butterfly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [673637 674211])
            ("list-dynamic-libraries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [674213 674657])
            ("add-hook" code nil nil [674793 674843])
            ("multi-isearch-next-buffer-function" variable nil nil [674845 675884])
            ("multi-isearch-next-buffer-current-function" variable nil nil [675886 676084])
            ("multi-isearch-current-buffer" variable nil nil [676086 676248])
            ("multi-isearch-buffer-list" variable nil nil [676250 676421])
            ("multi-isearch-file-list" variable nil nil [676423 676523])
            ("multi-isearch-setup" function (:prototype-flag t) nil [676525 676674])
            ("multi-isearch-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676676 677020])
            ("multi-isearch-buffers-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677022 677380])
            ("multi-isearch-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677382 677807])
            ("multi-isearch-files-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677809 678248])
            ("push" code nil nil [678409 678470])
            ("mixal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [678472 678563])
            ("mm-default-file-encoding" function (:prototype-flag t) nil [678712 678820])
            ("mm-extern-cache-contents" function (:prototype-flag t) nil [678969 679096])
            ("mm-inline-external-body" function (:prototype-flag t) nil [679098 679391])
            ("mm-inline-partial" function (:prototype-flag t) nil [679543 679825])
            ("mm-url-insert-file-contents" function (:prototype-flag t) nil [679965 680124])
            ("mm-url-insert-file-contents-external" function (:prototype-flag t) nil [680126 680258])
            ("mm-uu-dissect" function (:prototype-flag t) nil [680395 680701])
            ("mm-uu-dissect-text-parts" function (:prototype-flag t) nil [680703 680894])
            ("mml-to-mime" function (:prototype-flag t) nil [681017 681112])
            ("mml-attach-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [681114 681811])
            ("mml1991-encrypt" function (:prototype-flag t) nil [681954 682031])
            ("mml1991-sign" function (:prototype-flag t) nil [682033 682092])
            ("mml2015-decrypt" function (:prototype-flag t) nil [682235 682303])
            ("mml2015-decrypt-test" function (:prototype-flag t) nil [682305 682378])
            ("mml2015-verify" function (:prototype-flag t) nil [682380 682447])
            ("mml2015-verify-test" function (:prototype-flag t) nil [682449 682521])
            ("mml2015-encrypt" function (:prototype-flag t) nil [682523 682600])
            ("mml2015-sign" function (:prototype-flag t) nil [682602 682661])
            ("mml2015-self-encrypt" function (:prototype-flag t) nil [682663 682725])
            ("put" code nil nil [682879 682932])
            ("defalias" code nil nil [683085 683119])
            ("m2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [683121 684267])
            ("morse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684404 684511])
            ("unmorse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684513 684631])
            ("nato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684633 684751])
            ("denato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [684753 684876])
            ("mouse-drag-throw" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [685018 685958])
            ("mouse-drag-drag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [685960 686580])
            ("mpc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686692 686756])
            ("mpuz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686882 686960])
            ("msb-mode" variable nil nil [687073 687342])
            ("custom-autoload" code nil nil [687344 687381])
            ("msb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687383 687731])
            ("list-character-sets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687898 688392])
            ("read-charset" function (:prototype-flag t) nil [688394 688924])
            ("list-charset-chars" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [688926 689048])
            ("describe-character-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [689050 689179])
            ("describe-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [689181 689299])
            ("describe-current-coding-system-briefly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [689301 690475])
            ("describe-current-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [690477 690598])
            ("list-coding-systems" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [690600 690906])
            ("list-coding-categories" function (:prototype-flag t) nil [690908 691014])
            ("describe-font" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691016 691176])
            ("describe-fontset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691178 691332])
            ("list-fontsets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691334 691606])
            ("list-input-methods" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691608 691712])
            ("mule-diag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [691714 692047])
            ("font-show-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [692049 692288])
            ("string-to-list" function (:arguments ("string")) nil [692454 692551])
            ("string-to-vector" function (:arguments ("string")) nil [692553 692651])
            ("store-substring" function (:prototype-flag t) nil [692653 692782])
            ("truncate-string-to-width" function (:prototype-flag t) nil [692784 694050])
            ("nested-alist-p" function (:arguments ("obj")) nil [694052 694507])
            ("set-nested-alist" function (:prototype-flag t) nil [694509 694887])
            ("lookup-nested-alist" function (:prototype-flag t) nil [694889 695532])
            ("coding-system-post-read-conversion" function (:prototype-flag t) nil [695534 695694])
            ("coding-system-pre-write-conversion" function (:prototype-flag t) nil [695696 695856])
            ("coding-system-translation-table-for-decode" function (:prototype-flag t) nil [695858 696030])
            ("coding-system-translation-table-for-encode" function (:prototype-flag t) nil [696032 696204])
            ("with-coding-priority" function (:prototype-flag t) nil [696206 696571])
            ("put" code nil nil [696572 696623])
            ("detect-coding-with-priority" function (:prototype-flag t) nil [696625 696894])
            ("make-obsolete" code nil nil [696896 696970])
            ("detect-coding-with-language-environment" function (:prototype-flag t) nil [696972 697243])
            ("char-displayable-p" function (:prototype-flag t) nil [697245 697597])
            ("filepos-to-bufferpos" function (:prototype-flag t) nil [697599 698203])
            ("bufferpos-to-filepos" function (:prototype-flag t) nil [698205 698815])
            ("ifconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [698962 699055])
            ("iwconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [699057 699150])
            ("netstat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [699152 699243])
            ("arp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [699245 699328])
            ("route" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [699330 699417])
            ("traceroute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [699419 699512])
            ("ping" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [699514 699670])
            ("nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [699672 699768])
            ("nslookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [699770 699841])
            ("dns-lookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [699843 699962])
            ("run-dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [699964 700034])
            ("ftp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [700036 700102])
            ("finger" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [700104 700182])
            ("whois" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [700184 700457])
            ("whois-reverse-lookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [700459 700521])
            ("network-connection-to-service" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [700523 700652])
            ("network-connection" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [700654 700766])
            ("netrc-credentials" function (:prototype-flag t) nil [700893 701091])
            ("open-network-stream" function (:prototype-flag t) nil [701253 705229])
            ("defalias" code nil nil [705231 705284])
            ("newsticker-running-p" function (:prototype-flag t) nil [705443 705680])
            ("newsticker-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705682 706045])
            ("newsticker-plainview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706210 706305])
            ("newsticker-show-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706461 706582])
            ("newsticker-ticker-running-p" function (:prototype-flag t) nil [706737 706992])
            ("newsticker-start-ticker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706994 707194])
            ("newsticker-treeview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [707356 707448])
            ("nndiary-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [707591 707728])
            ("nndoc-add-type" function (:prototype-flag t) nil [707865 708213])
            ("nnfolder-generate-active-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [708359 708560])
            ("nnml-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [708685 708813])
            ("define-obsolete-variable-alias" code nil nil [708935 709024])
            ("disabled-command-function" variable (:default-value (quote disabled-command-function)) nil [709026 709204])
            ("disabled-command-function" function (:prototype-flag t) nil [709206 709291])
            ("enable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [709293 709537])
            ("disable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [709539 709770])
            ("nroff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [709932 710253])
            ("push" code nil nil [710376 710433])
            ("nxml-glyph-display-string" function (:prototype-flag t) nil [710585 710846])
            ("nxml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710995 713543])
            ("defalias" code nil nil [713544 713575])
            ("nxml-enable-unicode-char-name-sets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [713727 713968])
            ("octave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [714118 714564])
            ("inferior-octave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [714566 715133])
            ("defalias" code nil nil [715135 715174])
            ("define-obsolete-function-alias" code nil nil [715327 715393])
            ("opascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [715395 716458])
            ("org-babel-do-load-languages" function (:prototype-flag t) nil [716579 716711])
            ("org-babel-load-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [716713 717078])
            ("org-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [717080 717358])
            ("turn-on-orgtbl" function (:prototype-flag t) nil [717360 717450])
            ("org-clock-persistence-insinuate" function (:prototype-flag t) nil [717452 717556])
            ("org-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [717558 718437])
            ("org-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [718439 720766])
            ("org-global-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [720768 721022])
            ("put" code nil nil [721023 721091])
            ("orgstruct-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [721093 721405])
            ("turn-on-orgstruct" function (:prototype-flag t) nil [721407 721503])
            ("turn-on-orgstruct++" function (:prototype-flag t) nil [721505 721605])
            ("org-run-like-in-org-mode" function (:prototype-flag t) nil [721607 721888])
            ("org-store-link" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [721890 722458])
            ("org-insert-link-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722460 722627])
            ("org-open-at-point-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722629 722804])
            ("org-open-link-from-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722806 722954])
            ("org-switchb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722956 723287])
            ("defalias" code nil nil [723289 723329])
            ("defalias" code nil nil [723331 723368])
            ("org-cycle-agenda-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [723370 723610])
            ("org-submit-bug-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [723612 723969])
            ("org-reload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [723971 724122])
            ("org-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [724124 724222])
            ("org-toggle-sticky-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [724372 724480])
            ("org-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [724482 726260])
            ("org-batch-agenda" function (:prototype-flag t) nil [726262 726700])
            ("org-batch-agenda-csv" function (:prototype-flag t) nil [726702 728484])
            ("org-store-agenda-views" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [728486 728587])
            ("org-batch-store-agenda-views" function (:prototype-flag t) nil [728589 728734])
            ("org-agenda-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [728736 729456])
            ("org-search-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [729458 731780])
            ("org-todo-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [731782 732162])
            ("org-tags-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [732164 732378])
            ("org-agenda-list-stuck-projects" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [732380 732684])
            ("org-diary" function (:prototype-flag t) nil [732686 733849])
            ("org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item" function (:prototype-flag t) nil [733851 734044])
            ("org-agenda-set-restriction-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [734046 734400])
            ("org-calendar-goto-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [734402 734610])
            ("org-agenda-to-appt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [734612 735852])
            ("org-capture-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [736005 736139])
            ("org-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [736141 737357])
            ("org-capture-import-remember-templates" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [737359 737510])
            ("org-columns-remove-overlays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [737663 737778])
            ("org-columns-get-format-and-top-level" function (:prototype-flag t) nil [737780 737862])
            ("org-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [737864 738053])
            ("org-columns-compute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [738055 738201])
            ("org-columns-number-to-string" function (:prototype-flag t) nil [738203 738369])
            ("org-dblock-write:columnview" function (:prototype-flag t) nil [738371 739409])
            ("org-insert-columns-dblock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [739411 739533])
            ("org-agenda-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [739535 739641])
            ("org-check-version" function (:prototype-flag t) nil [739791 739901])
            ("org-load-noerror-mustsuffix" function (:prototype-flag t) nil [740045 740245])
            ("org-release" function (:prototype-flag t) nil [740398 740548])
            ("org-git-version" function (:prototype-flag t) nil [740550 740700])
            ("put" code nil nil [740824 740875])
            ("put" code nil nil [740876 740939])
            ("outline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [740941 742053])
            ("outline-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [742055 742384])
            ("put" code nil nil [742385 742429])
            ("push" code nil nil [742584 742644])
            ("package-enable-at-startup" variable (:default-value t) nil [742646 743033])
            ("custom-autoload" code nil nil [743035 743091])
            ("package-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743093 743728])
            ("package-import-keyring" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743730 743829])
            ("package-refresh-contents" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743831 744219])
            ("package-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744221 744673])
            ("package-install-from-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744675 745170])
            ("package-install-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745172 745338])
            ("package-install-selected-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745340 745534])
            ("package-reinstall" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745536 745694])
            ("package-autoremove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745696 745917])
            ("describe-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745919 746036])
            ("list-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746038 746306])
            ("defalias" code nil nil [746308 746356])
            ("show-paren-mode" variable nil nil [746475 746772])
            ("custom-autoload" code nil nil [746774 746820])
            ("show-paren-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746822 747279])
            ("put" code nil nil [747438 747485])
            ("parse-time-string" function (:prototype-flag t) nil [747487 747734])
            ("pascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [747884 749876])
            ("password-cache" variable (:default-value t) nil [750030 750087])
            ("custom-autoload" code nil nil [750089 750141])
            ("password-cache-expiry" variable (:default-value 16) nil [750143 750318])
            ("custom-autoload" code nil nil [750320 750379])
            ("password-in-cache-p" function (:prototype-flag t) nil [750381 750482])
            ("pcase" function (:prototype-flag t) nil [750630 753128])
            ("function-put" code nil nil [753130 753176])
            ("pcase-exhaustive" function (:prototype-flag t) nil [753178 753294])
            ("function-put" code nil nil [753296 753353])
            ("pcase-lambda" function (:prototype-flag t) nil [753355 753655])
            ("function-put" code nil nil [753657 753704])
            ("function-put" code nil nil [753706 753763])
            ("pcase-let*" function (:prototype-flag t) nil [753765 753992])
            ("function-put" code nil nil [753994 754045])
            ("pcase-let" function (:prototype-flag t) nil [754047 754435])
            ("function-put" code nil nil [754437 754487])
            ("pcase-dolist" function (:prototype-flag t) nil [754489 754555])
            ("function-put" code nil nil [754557 754610])
            ("pcase-defmacro" function (:prototype-flag t) nil [754612 754814])
            ("function-put" code nil nil [754816 754871])
            ("function-put" code nil nil [754873 754922])
            ("pcomplete/cvs" function (:prototype-flag t) nil [755061 755157])
            ("pcomplete/gzip" function (:prototype-flag t) nil [755296 755376])
            ("pcomplete/bzip2" function (:prototype-flag t) nil [755378 755460])
            ("pcomplete/make" function (:prototype-flag t) nil [755462 755546])
            ("pcomplete/tar" function (:prototype-flag t) nil [755548 755640])
            ("defalias" code nil nil [755642 755684])
            ("pcomplete/kill" function (:prototype-flag t) nil [755829 755945])
            ("pcomplete/umount" function (:prototype-flag t) nil [755947 756043])
            ("pcomplete/mount" function (:prototype-flag t) nil [756045 756139])
            ("pcomplete/rpm" function (:prototype-flag t) nil [756278 756368])
            ("pcomplete/cd" function (:prototype-flag t) nil [756510 756587])
            ("defalias" code nil nil [756589 756630])
            ("pcomplete/rmdir" function (:prototype-flag t) nil [756632 756715])
            ("pcomplete/rm" function (:prototype-flag t) nil [756717 756794])
            ("pcomplete/xargs" function (:prototype-flag t) nil [756796 756879])
            ("defalias" code nil nil [756881 756924])
            ("pcomplete/which" function (:prototype-flag t) nil [756926 757009])
            ("pcomplete/chown" function (:prototype-flag t) nil [757011 757106])
            ("pcomplete/chgrp" function (:prototype-flag t) nil [757108 757203])
            ("pcomplete/ssh" function (:prototype-flag t) nil [757205 757302])
            ("pcomplete/scp" function (:prototype-flag t) nil [757304 757459])
            ("pcomplete/tlmgr" function (:prototype-flag t) nil [757584 757676])
            ("pcomplete/ack" function (:prototype-flag t) nil [757678 757846])
            ("defalias" code nil nil [757848 757893])
            ("pcomplete/ag" function (:prototype-flag t) nil [757895 757981])
            ("pcomplete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758120 758377])
            ("pcomplete-reverse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758379 758487])
            ("pcomplete-expand-and-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758489 758646])
            ("pcomplete-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758648 758762])
            ("pcomplete-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758764 758908])
            ("pcomplete-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758910 759028])
            ("pcomplete-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [759030 759149])
            ("pcomplete-comint-setup" function (:prototype-flag t) nil [759151 759422])
            ("pcomplete-shell-setup" function (:prototype-flag t) nil [759424 759525])
            ("cvs-checkout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [759647 759914])
            ("cvs-quickdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [759916 760296])
            ("cvs-examine" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [760298 760806])
            ("cvs-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [760808 761260])
            ("cvs-status" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [761262 761707])
            ("cvs-dired-action" variable (:default-value (quote cvs-quickdir)) nil [761709 761877])
            ("custom-autoload" code nil nil [761879 761923])
            ("cvs-dired-use-hook" variable (:default-value (quote (4))) nil [761925 762256])
            ("custom-autoload" code nil nil [762258 762304])
            ("cvs-dired-noselect" function (:arguments ("dir")) nil [762306 762840])
            ("cvs-global-menu" variable (:default-value (let ((m (make-sparse-keymap "PCL-CVS"))) (define-key m [status] (\` (menu-item (\, (purecopy "Directory Status")) cvs-status :help (\, (purecopy "A more verbose status of a workarea"))))) (define-key m [checkout] (\` (menu-item (\, (purecopy "Checkout Module")) cvs-checkout :help (\, (purecopy "Check out a module from the repository"))))) (define-key m [update] (\` (menu-item (\, (purecopy "Update Directory")) cvs-update :help (\, (purecopy "Fetch updates from the repository"))))) (define-key m [examine] (\` (menu-item (\, (purecopy "Examine Directory")) cvs-examine :help (\, (purecopy "Examine the current state of a workarea"))))) (fset (quote cvs-global-menu) m))) nil [762985 763662])
            ("put" code nil nil [763820 763875])
            ("put" code nil nil [763876 763945])
            ("put" code nil nil [763946 764011])
            ("put" code nil nil [764012 764067])
            ("put" code nil nil [764068 764133])
            ("put" code nil nil [764134 764189])
            ("perl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [764191 766397])
            ("picture-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [766550 770308])
            ("defalias" code nil nil [770310 770348])
            ("push" code nil nil [770491 770550])
            ("pinentry-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770552 770859])
            ("plstore-open" function (:prototype-flag t) nil [771002 771108])
            ("plstore-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771110 771199])
            ("po-find-file-coding-system" function (:prototype-flag t) nil [771329 771549])
            ("pong" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771675 771925])
            ("pop3-movemail" function (:prototype-flag t) nil [772051 772186])
            ("pp-to-string" function (:prototype-flag t) nil [772325 772588])
            ("pp-buffer" function (:prototype-flag t) nil [772590 772709])
            ("pp" function (:prototype-flag t) nil [772711 773017])
            ("pp-eval-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773019 773200])
            ("pp-macroexpand-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773202 773323])
            ("pp-eval-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773325 773519])
            ("pp-macroexpand-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773521 773729])
            ("push" code nil nil [773864 773925])
            ("pr-interface" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773927 774147])
            ("pr-ps-directory-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774149 774998])
            ("pr-ps-directory-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [775000 775878])
            ("pr-ps-directory-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [775880 776734])
            ("pr-ps-directory-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [776736 777661])
            ("pr-ps-buffer-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [777663 778301])
            ("pr-ps-buffer-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778303 778961])
            ("pr-ps-buffer-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778963 779597])
            ("pr-ps-buffer-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [779599 780304])
            ("pr-ps-region-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780306 780456])
            ("pr-ps-region-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780458 780647])
            ("pr-ps-region-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780649 780802])
            ("pr-ps-region-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780804 780986])
            ("pr-ps-mode-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780988 781140])
            ("pr-ps-mode-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [781142 781333])
            ("pr-ps-mode-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [781335 781490])
            ("pr-ps-mode-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [781492 781668])
            ("pr-printify-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [781670 782233])
            ("pr-printify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [782235 782516])
            ("pr-printify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [782518 782799])
            ("pr-txt-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [782801 783169])
            ("pr-txt-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [783171 783257])
            ("pr-txt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [783259 783345])
            ("pr-txt-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [783347 783435])
            ("pr-despool-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [783437 783928])
            ("pr-despool-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [783930 784438])
            ("pr-despool-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [784440 784936])
            ("pr-despool-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [784938 785468])
            ("pr-ps-file-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785470 785571])
            ("pr-ps-file-up-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785573 785703])
            ("pr-ps-file-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785705 785832])
            ("pr-ps-file-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785834 785931])
            ("pr-ps-file-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785933 786074])
            ("pr-ps-file-up-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786076 786993])
            ("pr-toggle-file-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786995 787091])
            ("pr-toggle-file-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787093 787351])
            ("pr-toggle-file-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787353 787455])
            ("pr-toggle-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787457 787553])
            ("pr-toggle-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787555 787638])
            ("pr-toggle-spool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787640 787712])
            ("pr-toggle-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787714 787785])
            ("pr-toggle-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787787 788020])
            ("pr-toggle-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788022 788099])
            ("pr-toggle-upside-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788101 788182])
            ("pr-toggle-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788184 788258])
            ("pr-toggle-zebra" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788260 788337])
            ("pr-toggle-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788339 788419])
            ("pr-toggle-header-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788421 788513])
            ("pr-toggle-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788515 788587])
            ("pr-toggle-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788589 788698])
            ("pr-toggle-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788700 788772])
            ("pr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788774 788878])
            ("lpr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788880 788980])
            ("pr-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788982 789073])
            ("pr-ps-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789075 789168])
            ("pr-txt-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789170 789258])
            ("pr-ps-utility" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789260 789356])
            ("pr-show-ps-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789358 789459])
            ("pr-show-pr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789461 789562])
            ("pr-show-lpr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789564 789661])
            ("pr-ps-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [789663 792175])
            ("pr-txt-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [792177 793167])
            ("proced" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793289 793645])
            ("profiler-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [793782 794056])
            ("profiler-find-profile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794058 794151])
            ("profiler-find-profile-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794153 794259])
            ("profiler-find-profile-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794261 794366])
            ("project-current" function (:prototype-flag t) nil [794519 794888])
            ("project-find-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [794890 795136])
            ("project-or-external-find-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795138 795372])
            ("project-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795374 795564])
            ("project-or-external-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795566 795786])
            ("prolog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [795936 796343])
            ("mercury-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [796345 796484])
            ("run-prolog" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [796486 796680])
            ("bdf-directory-list" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt))) (list (expand-file-name "fonts/bdf" installation-directory)) (quote ("/usr/local/share/emacs/fonts/bdf")))) nil [796802 797090])
            ("custom-autoload" code nil nil [797092 797140])
            ("push" code nil nil [797292 797352])
            ("ps-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [797354 798431])
            ("push" code nil nil [798566 798627])
            ("ps-page-dimensions-database" variable (:default-value (purecopy (list (list (quote a4) (/ (* 72 21.0) 2.54) (/ (* 72 29.7) 2.54) "A4") (list (quote a3) (/ (* 72 29.7) 2.54) (/ (* 72 42.0) 2.54) "A3") (list (quote letter) (* 72 8.5) (* 72 11.0) "Letter") (list (quote legal) (* 72 8.5) (* 72 14.0) "Legal") (list (quote letter-small) (* 72 7.68) (* 72 10.16) "LetterSmall") (list (quote tabloid) (* 72 11.0) (* 72 17.0) "Tabloid") (list (quote ledger) (* 72 17.0) (* 72 11.0) "Ledger") (list (quote statement) (* 72 5.5) (* 72 8.5) "Statement") (list (quote executive) (* 72 7.5) (* 72 10.0) "Executive") (list (quote a4small) (* 72 7.47) (* 72 10.85) "A4Small") (list (quote b4) (* 72 10.125) (* 72 14.33) "B4") (list (quote b5) (* 72 7.16) (* 72 10.125) "B5") (quote (addresslarge 236.0 99.0 "AddressLarge")) (quote (addresssmall 236.0 68.0 "AddressSmall")) (quote (cuthanging13 90.0 222.0 "CutHanging13")) (quote (cuthanging15 90.0 114.0 "CutHanging15")) (quote (diskette 181.0 136.0 "Diskette")) (quote (eurofilefolder 139.0 112.0 "EuropeanFilefolder")) (quote (eurofoldernarrow 526.0 107.0 "EuroFolderNarrow")) (quote (eurofolderwide 526.0 136.0 "EuroFolderWide")) (quote (euronamebadge 189.0 108.0 "EuroNameBadge")) (quote (euronamebadgelarge 223.0 136.0 "EuroNameBadgeLarge")) (quote (filefolder 230.0 37.0 "FileFolder")) (quote (jewelry 76.0 136.0 "Jewelry")) (quote (mediabadge 180.0 136.0 "MediaBadge")) (quote (multipurpose 126.0 68.0 "MultiPurpose")) (quote (retaillabel 90.0 104.0 "RetailLabel")) (quote (shipping 271.0 136.0 "Shipping")) (quote (slide35mm 26.0 104.0 "Slide35mm")) (quote (spine8mm 187.0 26.0 "Spine8mm")) (quote (topcoated 425.19685 136.0 "TopCoatedPaper")) (quote (topcoatedpaper 396.0 136.0 "TopcoatedPaper150")) (quote (vhsface 205.0 127.0 "VHSFace")) (quote (vhsspine 400.0 50.0 "VHSSpine")) (quote (zipdisk 156.0 136.0 "ZipDisk"))))) nil [798629 800334])
            ("custom-autoload" code nil nil [800336 800395])
            ("ps-paper-type" variable (:default-value (quote letter)) nil [800397 800586])
            ("custom-autoload" code nil nil [800588 800633])
            ("ps-print-color-p" variable (:default-value (or (fboundp (quote x-color-values)) (fboundp (quote color-instance-rgb-components)))) nil [800635 800972])
            ("custom-autoload" code nil nil [800974 801022])
            ("ps-print-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [801024 801115])
            ("ps-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [801117 801632])
            ("ps-print-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [801634 801974])
            ("ps-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [801976 802171])
            ("ps-print-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [802173 802521])
            ("ps-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [802523 802820])
            ("ps-spool-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [802822 803228])
            ("ps-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803230 803487])
            ("ps-spool-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803489 803899])
            ("ps-despool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803901 804410])
            ("ps-line-lengths" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804412 804656])
            ("ps-nb-pages-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804658 804846])
            ("ps-nb-pages-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804848 805035])
            ("ps-setup" function (:prototype-flag t) nil [805037 805135])
            ("ps-extend-face-list" function (:prototype-flag t) nil [805137 805634])
            ("ps-extend-face" function (:prototype-flag t) nil [805636 806723])
            ("push" code nil nil [806861 806917])
            ("pulse-momentary-highlight-one-line" function (:prototype-flag t) nil [806919 807148])
            ("pulse-momentary-highlight-region" function (:prototype-flag t) nil [807150 807381])
            ("push" code nil nil [807530 807590])
            ("add-to-list" code nil nil [807592 807666])
            ("add-to-list" code nil nil [807668 807752])
            ("run-python" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [807754 808542])
            ("python-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808544 808651])
            ("quoted-printable-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808771 809313])
            ("quail-title" function (:prototype-flag t) nil [809468 809565])
            ("quail-use-package" function (:prototype-flag t) nil [809567 809862])
            ("quail-define-package" function (:prototype-flag t) nil [809864 814041])
            ("quail-set-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [814043 814481])
            ("quail-show-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [814483 814718])
            ("quail-define-rules" function (:prototype-flag t) nil [814720 816191])
            ("quail-install-map" function (:prototype-flag t) nil [816193 816477])
            ("quail-install-decode-map" function (:prototype-flag t) nil [816479 816805])
            ("quail-defrule" function (:prototype-flag t) nil [816807 818075])
            ("quail-defrule-internal" function (:prototype-flag t) nil [818077 818515])
            ("quail-update-leim-list-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [818517 819092])
            ("hangul-input-method-activate" function (:prototype-flag t) nil [819250 819506])
            ("ucs-input-activate" function (:prototype-flag t) nil [819673 819967])
            ("quickurl-reread-hook-postfix" variable
               (:constant-flag t
                :default-value "
;; Local Variables:
;; eval: (progn (require 'quickurl) (add-hook 'local-write-file-hooks (lambda () (quickurl-read) nil)))
;; End:
")
                nil [820111 820632])
            ("quickurl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820634 820882])
            ("quickurl-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820884 821005])
            ("quickurl-add-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821007 821237])
            ("quickurl-browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821239 821507])
            ("quickurl-browse-url-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821509 821650])
            ("quickurl-edit-urls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821652 821767])
            ("quickurl-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821769 821946])
            ("quickurl-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821948 822073])
            ("rcirc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822200 822412])
            ("defalias" code nil nil [822414 822436])
            ("rcirc-connect" function (:prototype-flag t) nil [822438 822575])
            ("rcirc-track-minor-mode" variable nil nil [822577 822902])
            ("custom-autoload" code nil nil [822904 822957])
            ("rcirc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822959 823244])
            ("defalias" code nil nil [823408 823446])
            ("re-builder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [823448 823836])
            ("recentf-mode" variable nil nil [823961 824246])
            ("custom-autoload" code nil nil [824248 824293])
            ("recentf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824295 824717])
            ("delete-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824834 825262])
            ("delete-extract-rectangle" function (:prototype-flag t) nil [825264 825639])
            ("extract-rectangle" function (:prototype-flag t) nil [825641 825842])
            ("kill-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [825844 826492])
            ("copy-rectangle-as-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [826494 826624])
            ("yank-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [826626 826740])
            ("insert-rectangle" function (:prototype-flag t) nil [826742 827113])
            ("open-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [827115 827549])
            ("defalias" code nil nil [827551 827607])
            ("delete-whitespace-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [827609 828100])
            ("string-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [828102 828355])
            ("defalias" code nil nil [828357 828404])
            ("string-insert-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [828406 828751])
            ("clear-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [828753 829097])
            ("rectangle-number-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [829099 829491])
            ("rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [829493 829673])
            ("refill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [829823 830338])
            ("reftex-citation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [830487 830534])
            ("reftex-all-document-files" function (:prototype-flag t) nil [830535 830587])
            ("reftex-isearch-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [830588 830647])
            ("reftex-index-phrases-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [830648 830706])
            ("turn-on-reftex" function (:prototype-flag t) nil [830708 830783])
            ("reftex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [830785 832196])
            ("reftex-reset-scanning-information" function (:prototype-flag t) nil [832198 832383])
            ("put" code nil nil [832547 832639])
            ("put" code nil nil [832640 832732])
            ("put" code nil nil [832733 832790])
            ("put" code nil nil [832791 832873])
            ("regexp-opt" function (:prototype-flag t) nil [833038 834579])
            ("regexp-opt-depth" function (:prototype-flag t) nil [834581 834776])
            ("push" code nil nil [834921 834976])
            ("push" code nil nil [835131 835190])
            ("remember" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [835192 835469])
            ("remember-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [835471 835583])
            ("remember-clipboard" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [835585 835751])
            ("remember-diary-extract-entries" function (:prototype-flag t) nil [835753 835864])
            ("remember-notes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [835866 836820])
            ("push" code nil nil [836941 836999])
            ("repeat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [837001 837689])
            ("reporter-submit-bug-report" function (:prototype-flag t) nil [837835 839041])
            ("reposition-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [839183 840313])
            ("reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [840435 840818])
            ("global-reveal-mode" variable nil nil [840820 841129])
            ("custom-autoload" code nil nil [841131 841181])
            ("global-reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [841183 841537])
            ("ring-p" function (:prototype-flag t) nil [841683 841769])
            ("make-ring" function (:prototype-flag t) nil [841771 841867])
            ("rlogin" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [842005 843730])
            ("rmail-file-name" variable (:default-value (purecopy "~/RMAIL")) nil [843866 843949])
            ("custom-autoload" code nil nil [843951 843995])
            ("put" code nil nil [843997 844230])
            ("rmail-spool-directory" variable (:default-value (purecopy (cond ((file-exists-p "/var/mail") "/var/mail/") ((file-exists-p "/var/spool/mail") "/var/spool/mail/") ((memq system-type (quote (hpux usg-unix-v irix))) "/usr/mail/") (t "/usr/spool/mail/")))) nil [844232 844562])
            ("custom-autoload" code nil nil [844564 844614])
            ("custom-initialize-delay" code nil nil [844615 844667])
            ("rmail-movemail-variant-p" function (:prototype-flag t) nil [844669 844862])
            ("rmail-user-mail-address-regexp" variable nil nil [844864 845484])
            ("custom-autoload" code nil nil [845486 845545])
            ("define-obsolete-variable-alias" code nil nil [845547 845639])
            ("rmail-default-dont-reply-to-names" variable nil nil [845641 845845])
            ("make-obsolete-variable" code nil nil [845847 845939])
            ("rmail-ignored-headers" variable (:default-value (purecopy (concat "^via:\\|^mail-from:\\|^origin:\\|^references:\\|^sender:" "\\|^status:\\|^received:\\|^x400-originator:\\|^x400-recipients:" "\\|^x400-received:\\|^x400-mts-identifier:\\|^x400-content-type:" "\\|^\\(resent-\\|\\)message-id:\\|^summary-line:\\|^resent-date:" "\\|^nntp-posting-host:\\|^path:\\|^x-char.*:\\|^x-face:\\|^face:" "\\|^x-mailer:\\|^delivered-to:\\|^lines:" "\\|^content-transfer-encoding:\\|^x-coding-system:" "\\|^return-path:\\|^errors-to:\\|^return-receipt-to:" "\\|^precedence:\\|^mime-version:" "\\|^list-owner:\\|^list-help:\\|^list-post:\\|^list-subscribe:" "\\|^list-id:\\|^list-unsubscribe:\\|^list-archive:" "\\|^content-length:\\|^nntp-posting-date:\\|^user-agent" "\\|^importance:\\|^envelope-to:\\|^delivery-date\\|^openpgp:" "\\|^mbox-line:\\|^cancel-lock:" "\\|^DomainKey-Signature:\\|^dkim-signature:" "\\|^resent-face:\\|^resent-x.*:\\|^resent-organization:\\|^resent-openpgp:" "\\|^x-.*:"))) nil [845941 847356])
            ("custom-autoload" code nil nil [847358 847408])
            ("rmail-displayed-headers" variable nil nil [847410 847590])
            ("custom-autoload" code nil nil [847592 847644])
            ("rmail-retry-ignored-headers" variable (:default-value (purecopy "^x-authentication-warning:\\|^x-detected-operating-system:\\|^x-spam[-a-z]*:\\|content-type:\\|content-transfer-encoding:\\|mime-version:\\|message-id:")) nil [847646 847915])
            ("custom-autoload" code nil nil [847917 847973])
            ("rmail-highlighted-headers" variable (:default-value (purecopy "^From:\\|^Subject:")) nil [847975 848185])
            ("custom-autoload" code nil nil [848187 848241])
            ("rmail-primary-inbox-list" variable nil nil [848243 848606])
            ("custom-autoload" code nil nil [848608 848661])
            ("rmail-secondary-file-directory" variable (:default-value (purecopy "~/")) nil [848663 848770])
            ("custom-autoload" code nil nil [848772 848831])
            ("rmail-secondary-file-regexp" variable (:default-value (purecopy "\\.xmail$")) nil [848833 848946])
            ("custom-autoload" code nil nil [848948 849004])
            ("rmail-mode-hook" variable nil nil [849006 849087])
            ("rmail-show-message-hook" variable nil nil [849089 849186])
            ("custom-autoload" code nil nil [849188 849240])
            ("rmail-file-coding-system" variable nil nil [849242 849349])
            ("rmail-insert-mime-forwarded-message-function" variable nil nil [849351 849723])
            ("rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [849725 850306])
            ("rmail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [850308 853651])
            ("rmail-input" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [853653 853738])
            ("rmail-set-remote-password" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [853740 853882])
            ("put" code nil nil [854027 854081])
            ("rmail-output" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [854083 855343])
            ("rmail-output-as-seen" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [855345 855895])
            ("rmail-output-body-to-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [855897 856481])
            ("rng-c-load-schema" function (:prototype-flag t) nil [856630 856773])
            ("rng-nxml-mode-init" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [856919 857162])
            ("rng-validate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [857311 858609])
            ("put" code nil nil [858752 858836])
            ("rng-xsd-compile" function (:prototype-flag t) nil [858838 859925])
            ("robin-define-package" function (:prototype-flag t) nil [860080 860523])
            ("robin-modify-package" function (:prototype-flag t) nil [860525 860811])
            ("robin-use-package" function (:prototype-flag t) nil [860813 860925])
            ("rot13" function (:prototype-flag t) nil [861044 861170])
            ("rot13-string" function (:prototype-flag t) nil [861172 861265])
            ("rot13-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [861267 861392])
            ("rot13-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [861394 861766])
            ("toggle-rot13-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [861768 861879])
            ("add-to-list" code nil nil [862019 862088])
            ("rst-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [862090 862352])
            ("rst-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [862354 862771])
            ("push" code nil nil [862929 862989])
            ("ruby-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [862991 863094])
            ("add-to-list" code nil nil [863096 863354])
            ("dolist" code nil nil [863356 863491])
            ("push" code nil nil [863632 863693])
            ("ruler-mode" variable nil nil [863695 863810])
            ("ruler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [863812 864087])
            ("rx-to-string" function (:prototype-flag t) nil [864227 864457])
            ("rx" function (:prototype-flag t) nil [864459 873068])
            ("push" code nil nil [873212 873267])
            ("push" code nil nil [873402 873460])
            ("savehist-mode" variable nil nil [873462 873751])
            ("custom-autoload" code nil nil [873753 873800])
            ("savehist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [873802 874483])
            ("save-place-mode" variable nil nil [874622 874919])
            ("custom-autoload" code nil nil [874921 874971])
            ("save-place-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [874973 875215])
            ("save-place-local-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [875217 875709])
            ("scheme-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [875859 876690])
            ("dsssl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [876692 877138])
            ("gnus-score-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [877290 877449])
            ("scroll-all-mode" variable nil nil [877591 877888])
            ("custom-autoload" code nil nil [877890 877941])
            ("scroll-all-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [877943 878363])
            ("scroll-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [878508 879004])
            ("when" code nil nil [879143 879220])
            ("push" code nil nil [879367 879426])
            ("semantic-default-submodes" variable (:default-value (quote (global-semantic-idle-scheduler-mode global-semanticdb-minor-mode))) nil [879428 880977])
            ("custom-autoload" code nil nil [880979 881036])
            ("semantic-mode" variable nil nil [881038 881327])
            ("custom-autoload" code nil nil [881329 881376])
            ("semantic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [881378 881939])
            ("bovine-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [882133 882247])
            ("wisent-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [882441 882555])
            ("mail-from-style" variable (:default-value (quote default)) nil [882701 883107])
            ("custom-autoload" code nil nil [883109 883156])
            ("mail-specify-envelope-from" variable nil nil [883158 883614])
            ("custom-autoload" code nil nil [883616 883674])
            ("mail-self-blind" variable nil nil [883676 883877])
            ("custom-autoload" code nil nil [883879 883926])
            ("mail-interactive" variable (:default-value t) nil [883928 884085])
            ("custom-autoload" code nil nil [884087 884135])
            ("send-mail-function" variable (:default-value (if (and (boundp (quote smtpmail-smtp-server)) smtpmail-smtp-server) (quote smtpmail-send-it) (quote sendmail-query-once))) nil [884137 884597])
            ("custom-autoload" code nil nil [884599 884649])
            ("mail-header-separator" variable (:default-value (purecopy "--text follows this line--")) nil [884651 884793])
            ("custom-autoload" code nil nil [884795 884848])
            ("mail-archive-file-name" variable nil nil [884850 885043])
            ("custom-autoload" code nil nil [885045 885099])
            ("mail-default-reply-to" variable nil nil [885101 885300])
            ("custom-autoload" code nil nil [885302 885355])
            ("mail-personal-alias-file" variable (:default-value (purecopy "~/.mailrc")) nil [885357 885619])
            ("custom-autoload" code nil nil [885621 885677])
            ("mail-setup-hook" variable nil nil [885679 885777])
            ("custom-autoload" code nil nil [885779 885826])
            ("mail-aliases" variable (:default-value t) nil [885828 886134])
            ("mail-yank-prefix" variable (:default-value "> ") nil [886136 886305])
            ("custom-autoload" code nil nil [886307 886355])
            ("mail-indentation-spaces" variable (:default-value 3) nil [886357 886516])
            ("custom-autoload" code nil nil [886518 886573])
            ("mail-citation-hook" variable nil nil [886575 887071])
            ("custom-autoload" code nil nil [887073 887123])
            ("mail-citation-prefix-regexp" variable (:default-value (purecopy "\\([ 	]*\\(\\w\\|[_.]\\)+>+\\|[ 	]*[]>|]\\)+")) nil [887125 887498])
            ("custom-autoload" code nil nil [887500 887559])
            ("mail-signature" variable (:default-value t) nil [887561 888009])
            ("custom-autoload" code nil nil [888011 888057])
            ("mail-signature-file" variable (:default-value (purecopy "~/.signature")) nil [888059 888174])
            ("custom-autoload" code nil nil [888176 888227])
            ("mail-default-directory" variable (:default-value (purecopy "~/")) nil [888229 888497])
            ("custom-autoload" code nil nil [888499 888553])
            ("mail-default-headers" variable nil nil [888555 888793])
            ("custom-autoload" code nil nil [888795 888847])
            ("sendmail-query-once" function (:prototype-flag t) nil [888849 889029])
            ("define-mail-user-agent" code nil nil [889031 889125])
            ("sendmail-user-agent-compose" function (:prototype-flag t) nil [889127 889310])
            ("mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [889312 890440])
            ("mail-mailing-lists" variable nil nil [890442 890654])
            ("custom-autoload" code nil nil [890656 890706])
            ("sendmail-coding-system" variable nil nil [890708 891027])
            ("default-sendmail-coding-system" variable (:default-value (quote iso-latin-1)) nil [891029 891505])
            ("mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [891507 893695])
            ("mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [893697 893886])
            ("mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [893888 894075])
            ("push" code nil nil [894218 894272])
            ("put" code nil nil [894394 894436])
            ("put" code nil nil [894438 894480])
            ("put" code nil nil [894482 894528])
            ("server-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [894530 895277])
            ("server-force-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [895279 895512])
            ("server-mode" variable nil nil [895514 895795])
            ("custom-autoload" code nil nil [895797 895840])
            ("server-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [895842 896229])
            ("server-save-buffers-kill-terminal" function (:prototype-flag t) nil [896231 896546])
            ("ses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [896660 898109])
            ("sgml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [898268 898989])
            ("html-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [898991 900800])
            ("push" code nil nil [900959 901021])
            ("put" code nil nil [901022 901067])
            ("sh-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [901069 903649])
            ("defalias" code nil nil [903651 903689])
            ("list-load-path-shadows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [903841 905782])
            ("shadow-define-cluster" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [905924 906364])
            ("shadow-define-literal-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [906366 906707])
            ("shadow-define-regexp-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [906709 907165])
            ("shadow-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [907167 907249])
            ("shell-dumb-shell-regexp" variable (:default-value (purecopy "cmd\\(proxy\\)?\\.exe")) nil [907368 907719])
            ("custom-autoload" code nil nil [907721 907773])
            ("shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [907775 909435])
            ("shr-render-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [909554 909697])
            ("shr-insert-document" function (:prototype-flag t) nil [909699 909897])
            ("sieve-manage" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910034 910106])
            ("sieve-upload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910108 910173])
            ("sieve-upload-and-bury" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910175 910249])
            ("sieve-upload-and-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910251 910325])
            ("sieve-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910477 910820])
            ("simula-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910970 913115])
            ("skeleton-filter-function" variable (:default-value (quote identity)) nil [913251 913368])
            ("define-skeleton" function (:prototype-flag t) nil [913370 913617])
            ("function-put" code nil nil [913619 913669])
            ("skeleton-proxy-new" function (:prototype-flag t) nil [913671 914253])
            ("skeleton-insert" function (:prototype-flag t) nil [914255 917750])
            ("skeleton-pair-insert-maybe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [917752 918478])
            ("smerge-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [918628 918844])
            ("smerge-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [918846 919150])
            ("smerge-start-session" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919152 919333])
            ("smiley-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919473 919643])
            ("smiley-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919645 919846])
            ("smtpmail-send-it" function (:prototype-flag t) nil [919992 920051])
            ("smtpmail-send-queued-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [920053 920190])
            ("snake" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [920326 920890])
            ("snmp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921037 921414])
            ("snmpv2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921416 921799])
            ("push" code nil nil [921951 922015])
            ("sunrise-sunset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922160 922554])
            ("solitaire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922702 924366])
            ("put" code nil nil [924481 924533])
            ("sort-subr" function (:prototype-flag t) nil [924535 926686])
            ("sort-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [926688 927028])
            ("sort-paragraphs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [927030 927380])
            ("sort-pages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [927382 927722])
            ("put" code nil nil [927723 927778])
            ("sort-numeric-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [927780 928357])
            ("sort-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [928359 928817])
            ("sort-regexp-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [928819 929937])
            ("sort-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [929939 930732])
            ("reverse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [930734 930897])
            ("delete-duplicate-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [930899 931844])
            ("spam-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [931970 932330])
            ("spam-report-process-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [932485 932814])
            ("spam-report-url-ping-mm-url" function (:prototype-flag t) nil [932816 933039])
            ("spam-report-url-to-file" function (:prototype-flag t) nil [933041 933246])
            ("spam-report-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [933248 933499])
            ("spam-report-deagentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [933501 933697])
            ("defalias" code nil nil [933833 933874])
            ("speedbar-frame-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [933876 934335])
            ("speedbar-get-focus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [934337 934583])
            ("spook" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [934720 934818])
            ("snarf-spooks" function (:prototype-flag t) nil [934820 934935])
            ("push" code nil nil [935075 935129])
            ("sql-add-product-keywords" function (:prototype-flag t) nil [935131 935869])
            ("sql-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [935871 936963])
            ("sql-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [936965 937291])
            ("sql-product-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [937293 937848])
            ("sql-oracle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [937850 939075])
            ("sql-sybase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939077 940313])
            ("sql-informix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [940315 941433])
            ("sql-sqlite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941435 942689])
            ("sql-mysql" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [942691 943967])
            ("sql-solid" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943969 945102])
            ("sql-ingres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945104 946207])
            ("sql-ms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [946209 947428])
            ("sql-postgres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947430 948925])
            ("sql-interbase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948927 950080])
            ("sql-db2" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [950082 951409])
            ("sql-linter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [951411 952622])
            ("sql-vertica" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [952624 952720])
            ("push" code nil nil [952863 952921])
            ("srecode-template-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [953092 953200])
            ("defalias" code nil nil [953202 953245])
            ("starttls-open-stream" function (:prototype-flag t) nil [953391 954260])
            ("strokes-global-set-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954385 954819])
            ("strokes-read-stroke" function (:prototype-flag t) nil [954821 955257])
            ("strokes-read-complex-stroke" function (:prototype-flag t) nil [955259 955738])
            ("strokes-do-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955740 955904])
            ("strokes-do-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955906 956079])
            ("strokes-describe-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [956081 956223])
            ("strokes-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [956225 956322])
            ("strokes-load-user-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [956324 956449])
            ("strokes-list-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [956451 956797])
            ("strokes-mode" variable nil nil [956799 957084])
            ("custom-autoload" code nil nil [957086 957131])
            ("strokes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [957133 957912])
            ("strokes-decode-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [957914 958183])
            ("strokes-compose-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958185 958322])
            ("studlify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958462 958551])
            ("studlify-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958553 958679])
            ("studlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958681 958768])
            ("define-obsolete-function-alias" code nil nil [958919 958996])
            ("subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958998 960095])
            ("global-subword-mode" variable nil nil [960097 960410])
            ("custom-autoload" code nil nil [960412 960464])
            ("global-subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960466 960873])
            ("superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960875 961401])
            ("global-superword-mode" variable nil nil [961403 961724])
            ("custom-autoload" code nil nil [961726 961780])
            ("global-superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961782 962203])
            ("sc-cite-original" function (:prototype-flag t) nil [962350 963351])
            ("define-obsolete-function-alias" code nil nil [963476 963545])
            ("gpm-mouse-mode" variable (:default-value t) nil [963547 963838])
            ("custom-autoload" code nil nil [963840 963887])
            ("gpm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [963889 964541])
            ("untabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [964663 965058])
            ("tabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [965060 965554])
            ("table-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [965701 970801])
            ("table-insert-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [970803 971130])
            ("table-insert-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [971132 971484])
            ("table-insert-row-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [971486 971637])
            ("table-recognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [971639 972008])
            ("table-unrecognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972010 972065])
            ("table-recognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972067 972405])
            ("table-unrecognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972407 972477])
            ("table-recognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972479 972743])
            ("table-unrecognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972745 972806])
            ("table-recognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972808 973273])
            ("table-unrecognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [973275 973335])
            ("table-heighten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [973337 973775])
            ("table-shorten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [973777 974269])
            ("table-widen-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [974271 974518])
            ("table-narrow-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [974520 974744])
            ("table-forward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [974746 976620])
            ("table-backward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976622 976838])
            ("table-span-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976840 977011])
            ("table-split-cell-vertically" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977013 977174])
            ("table-split-cell-horizontally" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977176 977357])
            ("table-split-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977359 977518])
            ("table-justify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977520 977777])
            ("table-justify-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977779 978146])
            ("table-justify-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978148 978351])
            ("table-justify-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978353 978562])
            ("table-fixed-width-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978564 979093])
            ("table-query-dimension" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979095 979851])
            ("table-generate-source" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [979853 981020])
            ("table-insert-sequence" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [981022 982657])
            ("table-delete-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [982659 982910])
            ("table-delete-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [982912 983183])
            ("table-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [983185 988326])
            ("table-release" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [988328 988636])
            ("talk-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [988752 988861])
            ("talk" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [988863 988976])
            ("tar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [989112 989891])
            ("tcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990031 991095])
            ("inferior-tcl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991097 991298])
            ("tcl-help-on-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991300 991492])
            ("telnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991630 992233])
            ("rsh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992235 992467])
            ("make-term" function (:prototype-flag t) nil [992584 993003])
            ("term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [993005 993252])
            ("ansi-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [993254 993376])
            ("serial-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [993378 993952])
            ("testcover-this-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [994113 994214])
            ("push" code nil nil [994353 994410])
            ("tetris" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [994412 995149])
            ("tex-shell-file-name" variable nil nil [995305 995413])
            ("custom-autoload" code nil nil [995415 995466])
            ("tex-directory" variable (:default-value (purecopy ".")) nil [995468 995755])
            ("custom-autoload" code nil nil [995757 995802])
            ("tex-first-line-header-regexp" variable nil nil [995804 996081])
            ("custom-autoload" code nil nil [996083 996143])
            ("tex-main-file" variable nil nil [996145 996336])
            ("custom-autoload" code nil nil [996338 996383])
            ("tex-offer-save" variable (:default-value t) nil [996385 996488])
            ("custom-autoload" code nil nil [996490 996536])
            ("tex-run-command" variable (:default-value (purecopy "tex")) nil [996538 996699])
            ("custom-autoload" code nil nil [996701 996748])
            ("latex-run-command" variable (:default-value (purecopy "latex")) nil [996750 996919])
            ("custom-autoload" code nil nil [996921 996970])
            ("slitex-run-command" variable (:default-value (purecopy "slitex")) nil [996972 997145])
            ("custom-autoload" code nil nil [997147 997197])
            ("tex-start-options" variable (:default-value (purecopy "")) nil [997199 997495])
            ("custom-autoload" code nil nil [997497 997546])
            ("tex-start-commands" variable (:default-value (purecopy "\\nonstopmode\\input")) nil [997548 997803])
            ("custom-autoload" code nil nil [997805 997855])
            ("latex-block-names" variable nil nil [997857 997993])
            ("custom-autoload" code nil nil [997995 998044])
            ("tex-bibtex-command" variable (:default-value (purecopy "bibtex")) nil [998046 998305])
            ("custom-autoload" code nil nil [998307 998357])
            ("tex-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [998359 998609])
            ("custom-autoload" code nil nil [998611 998664])
            ("tex-alt-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [998666 999278])
            ("custom-autoload" code nil nil [999280 999337])
            ("tex-dvi-view-command" variable (:default-value (\` (cond ((eq window-system (quote x)) (\, (purecopy "xdvi"))) ((eq window-system (quote w32)) (\, (purecopy "yap"))) (t (\, (purecopy "dvi2tty * | cat -s")))))) nil [999339 999829])
            ("custom-autoload" code nil nil [999831 999883])
            ("tex-show-queue-command" variable (:default-value (purecopy "lpq")) nil [999885 1000061])
            ("custom-autoload" code nil nil [1000063 1000117])
            ("tex-default-mode" variable (:default-value (quote latex-mode)) nil [1000119 1000417])
            ("custom-autoload" code nil nil [1000419 1000467])
            ("tex-open-quote" variable (:default-value (purecopy "``")) nil [1000469 1000580])
            ("custom-autoload" code nil nil [1000582 1000628])
            ("tex-close-quote" variable (:default-value (purecopy "''")) nil [1000630 1000743])
            ("custom-autoload" code nil nil [1000745 1000792])
            ("tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1000794 1001226])
            ("defalias" code nil nil [1001228 1001258])
            ("defalias" code nil nil [1001260 1001302])
            ("defalias" code nil nil [1001304 1001338])
            ("plain-tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1001340 1003085])
            ("latex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1003087 1004791])
            ("slitex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1004793 1006566])
            ("tex-start-shell" function (:prototype-flag t) nil [1006568 1006626])
            ("doctex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1006628 1006712])
            ("texinfo-format-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1006868 1007294])
            ("texinfo-format-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1007296 1007637])
            ("texi2info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1007639 1008266])
            ("texinfo-open-quote" variable (:default-value (purecopy "``")) nil [1008419 1008538])
            ("custom-autoload" code nil nil [1008540 1008589])
            ("texinfo-close-quote" variable (:default-value (purecopy "''")) nil [1008591 1008712])
            ("custom-autoload" code nil nil [1008714 1008764])
            ("texinfo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1008766 1011589])
            ("thai-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011746 1011959])
            ("thai-compose-string" function (:prototype-flag t) nil [1011961 1012097])
            ("thai-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1012099 1012206])
            ("thai-composition-function" function (:prototype-flag t) nil [1012208 1012285])
            ("forward-thing" function (:prototype-flag t) nil [1012424 1012748])
            ("bounds-of-thing-at-point" function (:prototype-flag t) nil [1012750 1013263])
            ("thing-at-point" function (:prototype-flag t) nil [1013265 1013782])
            ("sexp-at-point" function (:prototype-flag t) nil [1013784 1013891])
            ("symbol-at-point" function (:prototype-flag t) nil [1013893 1014004])
            ("number-at-point" function (:prototype-flag t) nil [1014006 1014117])
            ("list-at-point" function (:prototype-flag t) nil [1014119 1014231])
            ("thumbs-find-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1014353 1014443])
            ("thumbs-show-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1014445 1014685])
            ("thumbs-dired-show-marked" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1014687 1014799])
            ("thumbs-dired-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1014801 1014924])
            ("defalias" code nil nil [1014926 1014966])
            ("thumbs-dired-setroot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1014968 1015084])
            ("push" code nil nil [1015232 1015288])
            ("tibetan-char-p" function (:prototype-flag t) nil [1015448 1015606])
            ("tibetan-tibetan-to-transcription" function (:prototype-flag t) nil [1015608 1015761])
            ("tibetan-transcription-to-tibetan" function (:prototype-flag t) nil [1015763 1015957])
            ("tibetan-compose-string" function (:prototype-flag t) nil [1015959 1016057])
            ("tibetan-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1016059 1016176])
            ("tibetan-decompose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1016178 1016437])
            ("tibetan-decompose-string" function (:prototype-flag t) nil [1016439 1016676])
            ("tibetan-decompose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1016678 1016882])
            ("tibetan-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1016884 1017060])
            ("tibetan-post-read-conversion" function (:prototype-flag t) nil [1017062 1017139])
            ("tibetan-pre-write-conversion" function (:prototype-flag t) nil [1017141 1017222])
            ("tibetan-pre-write-canonicalize-for-unicode" function (:prototype-flag t) nil [1017224 1017319])
            ("push" code nil nil [1017471 1017531])
            ("tildify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1017533 1017995])
            ("tildify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1017997 1018439])
            ("tildify-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1018441 1019298])
            ("tildify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1019300 1019913])
            ("display-time-day-and-date" variable nil nil [1020029 1020147])
            ("custom-autoload" code nil nil [1020149 1020202])
            ("put" code nil nil [1020203 1020253])
            ("display-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1020255 1020573])
            ("display-time-mode" variable nil nil [1020575 1020880])
            ("custom-autoload" code nil nil [1020882 1020929])
            ("display-time-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1020931 1021534])
            ("display-time-world" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1021536 1021761])
            ("emacs-uptime" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1021763 1022021])
            ("emacs-init-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1022023 1022139])
            ("date-to-time" function (:prototype-flag t) nil [1022296 1022481])
            ("if" code nil nil [1022482 1022678])
            ("seconds-to-time" function (:prototype-flag t) nil [1022680 1022779])
            ("days-to-time" function (:prototype-flag t) nil [1022781 1022873])
            ("time-since" function (:prototype-flag t) nil [1022875 1023027])
            ("defalias" code nil nil [1023029 1023069])
            ("time-add" function (:prototype-flag t) nil [1023070 1023102])
            ("time-subtract" function (:prototype-flag t) nil [1023103 1023140])
            ("time-less-p" function (:prototype-flag t) nil [1023141 1023176])
            ("date-to-day" function (:prototype-flag t) nil [1023178 1023323])
            ("days-between" function (:prototype-flag t) nil [1023325 1023488])
            ("date-leap-year-p" function (:prototype-flag t) nil [1023490 1023587])
            ("time-to-day-in-year" function (:prototype-flag t) nil [1023589 1023717])
            ("time-to-days" function (:prototype-flag t) nil [1023719 1023937])
            ("safe-date-to-time" function (:prototype-flag t) nil [1023939 1024129])
            ("format-seconds" function (:prototype-flag t) nil [1024131 1025085])
            ("seconds-to-string" function (:prototype-flag t) nil [1025087 1025209])
            ("put" code nil nil [1025350 1025404])
            ("put" code nil nil [1025405 1025471])
            ("put" code nil nil [1025472 1025531])
            ("put" code nil nil [1025532 1025585])
            ("put" code nil nil [1025586 1025637])
            ("put" code nil nil [1025638 1025699])
            ("put" code nil nil [1025700 1025754])
            ("put" code nil nil [1025755 1025810])
            ("time-stamp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1025812 1026754])
            ("time-stamp-toggle-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1026756 1026977])
            ("push" code nil nil [1027133 1027195])
            ("timeclock-mode-line-display" variable nil nil [1027197 1027547])
            ("custom-autoload" code nil nil [1027549 1027611])
            ("timeclock-mode-line-display" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1027613 1028178])
            ("timeclock-in" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1028180 1028946])
            ("timeclock-out" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1028948 1029423])
            ("timeclock-status-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1029425 1029762])
            ("timeclock-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1029764 1030104])
            ("timeclock-query-out" function (:prototype-flag t) nil [1030106 1030273])
            ("timeclock-reread-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1030275 1030442])
            ("timeclock-workday-remaining-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1030444 1030840])
            ("timeclock-workday-elapsed-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1030842 1031138])
            ("timeclock-when-to-leave-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1031140 1031557])
            ("titdic-convert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1031727 1031980])
            ("batch-titdic-convert" function (:prototype-flag t) nil [1031982 1032438])
            ("define-key" code nil nil [1032551 1032594])
            ("define-key" code nil nil [1032596 1032657])
            ("tmm-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1032659 1033154])
            ("tmm-menubar-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1033156 1033438])
            ("tmm-prompt" function (:prototype-flag t) nil [1033440 1034069])
            ("todo-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1034227 1036108])
            ("todo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1036110 1036241])
            ("todo-archive-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1036243 1036369])
            ("todo-filtered-items-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1036371 1036528])
            ("toggle-tool-bar-mode-from-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1036664 1036860])
            ("tool-bar-add-item" function (:prototype-flag t) nil [1036862 1037627])
            ("tool-bar-local-item" function (:prototype-flag t) nil [1037629 1038270])
            ("tool-bar-add-item-from-menu" function (:prototype-flag t) nil [1038272 1038981])
            ("tool-bar-local-item-from-menu" function (:prototype-flag t) nil [1038983 1039549])
            ("tq-create" function (:prototype-flag t) nil [1039689 1039977])
            ("trace-buffer" variable (:default-value "*trace-output*") nil [1040126 1040216])
            ("custom-autoload" code nil nil [1040218 1040259])
            ("trace-values" function (:prototype-flag t) nil [1040261 1040436])
            ("trace-function-foreground" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040438 1041322])
            ("trace-function-background" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1041324 1041584])
            ("defalias" code nil nil [1041586 1041639])
            ("tramp-mode" variable (:default-value t) nil [1041775 1041889])
            ("custom-autoload" code nil nil [1041891 1041930])
            ("tramp-syntax" variable (:default-value (if (featurep (quote xemacs)) (quote sep) (quote ftp))) nil [1041932 1042169])
            ("custom-autoload" code nil nil [1042171 1042212])
            ("tramp-file-name-regexp-unified" variable
               (:constant-flag t
                :default-value (if (memq system-type (quote (cygwin windows-nt))) "\\`/\\(\\[.*\\]\\|[^/|:]\\{2,\\}[^/|]*\\):" "\\`/[^/|:][^/|]*:"))
                nil [1042214 1042608])
            ("tramp-file-name-regexp-separate" variable
               (:constant-flag t
                :default-value "\\`/\\[.*\\]")
                nil [1042610 1042842])
            ("tramp-file-name-regexp" variable
               (:constant-flag t
                :default-value (cond ((equal tramp-syntax (quote ftp)) tramp-file-name-regexp-unified) ((equal tramp-syntax (quote sep)) tramp-file-name-regexp-separate) (t (error "Wrong `tramp-syntax' defined"))))
                nil [1042844 1043785])
            ("tramp-completion-file-name-regexp-unified" variable
               (:constant-flag t
                :default-value (if (memq system-type (quote (cygwin windows-nt))) "\\`/[^/]\\{2,\\}\\'" "\\`/[^/]*\\'"))
                nil [1043787 1044165])
            ("tramp-completion-file-name-regexp-separate" variable
               (:constant-flag t
                :default-value "\\`/\\([[][^]]*\\)?\\'")
                nil [1044167 1044431])
            ("tramp-completion-file-name-regexp" variable
               (:constant-flag t
                :default-value (cond ((equal tramp-syntax (quote ftp)) tramp-completion-file-name-regexp-unified) ((equal tramp-syntax (quote sep)) tramp-completion-file-name-regexp-separate) (t (error "Wrong `tramp-syntax' defined"))))
                nil [1044433 1045092])
            ("tramp-completion-file-name-handler-alist" variable
               (:constant-flag t
                :default-value (quote ((file-name-all-completions . tramp-completion-handle-file-name-all-completions) (file-name-completion . tramp-completion-handle-file-name-completion))))
                nil [1045094 1045513])
            ("tramp-completion-run-real-handler" function (:arguments ("operation" "args")) nil [1045515 1046011])
            ("tramp-completion-file-name-handler" function (:arguments ("operation" "args")) nil [1046013 1046618])
            ("tramp-autoload-file-name-handler" function (:arguments ("operation" "args")) nil [1046620 1046816])
            ("tramp-register-autoload-file-name-handlers" function nil nil [1046818 1047336])
            ("tramp-register-autoload-file-name-handlers" code nil nil [1047338 1047382])
            ("tramp-unload-file-name-handlers" function (:prototype-flag t) nil [1047384 1047455])
            ("tramp-completion-handle-file-name-all-completions" function (:prototype-flag t) nil [1047457 1047622])
            ("tramp-completion-handle-file-name-completion" function (:prototype-flag t) nil [1047624 1047791])
            ("tramp-unload-tramp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1047793 1047889])
            ("tramp-ftp-enable-ange-ftp" function (:prototype-flag t) nil [1048036 1048105])
            ("push" code nil nil [1048248 1048312])
            ("help-with-tutorial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1048448 1049234])
            ("tai-viet-composition-function" function (:prototype-flag t) nil [1049385 1049483])
            ("2C-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1049645 1049693])
            ("global-set-key" code nil nil [1049695 1049731])
            ("global-set-key" code nil nil [1049733 1049766])
            ("2C-two-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1049768 1050231])
            ("2C-associate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1050233 1050492])
            ("2C-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1050494 1051280])
            ("type-break-mode" variable nil nil [1051421 1051718])
            ("custom-autoload" code nil nil [1051720 1051771])
            ("type-break-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1051773 1055370])
            ("type-break" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1055372 1055653])
            ("type-break-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1055655 1055927])
            ("type-break-guesstimate-keystroke-threshold" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1055929 1057208])
            ("uce-reply-to-uce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1057330 1057641])
            ("ucs-normalize-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1057820 1057946])
            ("ucs-normalize-NFD-string" function (:prototype-flag t) nil [1057948 1058068])
            ("ucs-normalize-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1058070 1058196])
            ("ucs-normalize-NFC-string" function (:prototype-flag t) nil [1058198 1058318])
            ("ucs-normalize-NFKD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1058320 1058448])
            ("ucs-normalize-NFKD-string" function (:prototype-flag t) nil [1058450 1058572])
            ("ucs-normalize-NFKC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1058574 1058702])
            ("ucs-normalize-NFKC-string" function (:prototype-flag t) nil [1058704 1058826])
            ("ucs-normalize-HFS-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1058828 1058980])
            ("ucs-normalize-HFS-NFD-string" function (:prototype-flag t) nil [1058982 1059128])
            ("ucs-normalize-HFS-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1059130 1059282])
            ("ucs-normalize-HFS-NFC-string" function (:prototype-flag t) nil [1059284 1059430])
            ("underline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1059589 1059834])
            ("ununderline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1059836 1060062])
            ("batch-unrmail" function (:prototype-flag t) nil [1060204 1060531])
            ("unrmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1060533 1060731])
            ("unsafep" function (:prototype-flag t) nil [1060886 1061127])
            ("url-retrieve" function (:prototype-flag t) nil [1061248 1062736])
            ("url-retrieve-synchronously" function (:prototype-flag t) nil [1062738 1063230])
            ("url-get-authentication" function (:prototype-flag t) nil [1063374 1064541])
            ("url-register-auth-scheme" function (:prototype-flag t) nil [1064543 1065224])
            ("url-store-in-cache" function (:prototype-flag t) nil [1065371 1065479])
            ("url-is-cached" function (:prototype-flag t) nil [1065481 1065651])
            ("url-cache-extract" function (:prototype-flag t) nil [1065653 1065758])
            ("url-cid" function (:prototype-flag t) nil [1065899 1065952])
            ("url-dav-supported-p" function (:prototype-flag t) nil [1066093 1066246])
            ("url-dav-request" function (:prototype-flag t) nil [1066248 1067031])
            ("url-dav-vc-registered" function (:prototype-flag t) nil [1067033 1067100])
            ("url-file" function (:prototype-flag t) nil [1067244 1067342])
            ("url-gateway-nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067480 1067610])
            ("url-open-stream" function (:prototype-flag t) nil [1067612 1068038])
            ("url-handler-mode" variable nil nil [1068194 1068495])
            ("custom-autoload" code nil nil [1068497 1068551])
            ("url-handler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068553 1068854])
            ("url-file-handler" function (:prototype-flag t) nil [1068856 1069125])
            ("url-copy-file" function (:prototype-flag t) nil [1069127 1069781])
            ("url-file-local-copy" function (:prototype-flag t) nil [1069783 1069990])
            ("url-insert-buffer-contents" function (:prototype-flag t) nil [1069992 1070271])
            ("url-insert-file-contents" function (:prototype-flag t) nil [1070273 1070380])
            ("url-default-expander" function (:prototype-flag t) nil [1070525 1070570])
            ("defalias" code nil nil [1070572 1070632])
            ("url-https" function (:prototype-flag t) nil [1070634 1070666])
            ("url-https-file-exists-p" function (:prototype-flag t) nil [1070668 1070714])
            ("url-https-file-readable-p" function (:prototype-flag t) nil [1070716 1070764])
            ("url-https-file-attributes" function (:prototype-flag t) nil [1070766 1070814])
            ("url-irc" function (:prototype-flag t) nil [1070955 1071008])
            ("url-ldap" function (:prototype-flag t) nil [1071152 1071405])
            ("url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1071555 1071617])
            ("url-mailto" function (:prototype-flag t) nil [1071619 1071708])
            ("url-man" function (:prototype-flag t) nil [1071852 1071935])
            ("url-info" function (:prototype-flag t) nil [1071937 1072013])
            ("url-generic-emulator-loader" function (:prototype-flag t) nil [1072015 1072089])
            ("defalias" code nil nil [1072091 1072142])
            ("defalias" code nil nil [1072144 1072195])
            ("defalias" code nil nil [1072197 1072248])
            ("url-data" function (:prototype-flag t) nil [1072250 1072333])
            ("url-news" function (:prototype-flag t) nil [1072477 1072532])
            ("url-snews" function (:prototype-flag t) nil [1072534 1072590])
            ("isPlainHostName" function (:prototype-flag t) nil [1072728 1072789])
            ("dnsDomainIs" function (:prototype-flag t) nil [1072791 1072852])
            ("dnsResolve" function (:prototype-flag t) nil [1072854 1072910])
            ("isResolvable" function (:prototype-flag t) nil [1072912 1072970])
            ("isInNet" function (:prototype-flag t) nil [1072972 1073032])
            ("url-ns-prefs" function (:prototype-flag t) nil [1073034 1073102])
            ("url-ns-user-pref" function (:prototype-flag t) nil [1073104 1073183])
            ("url-recreate-url" function (:prototype-flag t) nil [1073330 1073442])
            ("url-generic-parse-url" function (:prototype-flag t) nil [1073444 1074891])
            ("url-setup-privacy-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1075044 1075169])
            ("url-queue-retrieve" function (:prototype-flag t) nil [1075316 1075754])
            ("url-tramp-protocols" variable (:default-value (quote ("ftp" "ssh" "scp" "rsync" "telnet"))) nil [1075901 1076084])
            ("custom-autoload" code nil nil [1076086 1076138])
            ("url-tramp-file-handler" function (:prototype-flag t) nil [1076140 1076389])
            ("url-debug" variable nil nil [1076533 1076841])
            ("custom-autoload" code nil nil [1076843 1076884])
            ("url-debug" function (:prototype-flag t) nil [1076886 1076953])
            ("url-parse-args" function (:prototype-flag t) nil [1076955 1077037])
            ("url-insert-entities-in-string" function (:prototype-flag t) nil [1077039 1077456])
            ("url-normalize-url" function (:prototype-flag t) nil [1077458 1077599])
            ("url-lazy-message" function (:prototype-flag t) nil [1077601 1077791])
            ("url-get-normalized-date" function (:prototype-flag t) nil [1077793 1077943])
            ("url-eat-trailing-space" function (:prototype-flag t) nil [1077945 1078054])
            ("url-strip-leading-spaces" function (:prototype-flag t) nil [1078056 1078164])
            ("url-display-percentage" function (:prototype-flag t) nil [1078166 1078251])
            ("url-percentage" function (:prototype-flag t) nil [1078253 1078314])
            ("defalias" code nil nil [1078316 1078360])
            ("url-file-directory" function (:prototype-flag t) nil [1078362 1078473])
            ("url-file-nondirectory" function (:prototype-flag t) nil [1078475 1078592])
            ("url-parse-query-string" function (:prototype-flag t) nil [1078594 1078699])
            ("url-build-query-string" function (:prototype-flag t) nil [1078701 1079324])
            ("url-unhex-string" function (:prototype-flag t) nil [1079326 1079629])
            ("url-hexify-string" function (:prototype-flag t) nil [1079631 1080256])
            ("url-encode-url" function (:prototype-flag t) nil [1080258 1080571])
            ("url-file-extension" function (:prototype-flag t) nil [1080573 1080790])
            ("url-truncate-url-for-viewing" function (:prototype-flag t) nil [1080792 1080998])
            ("url-view-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1081000 1081249])
            ("ask-user-about-lock" function (:prototype-flag t) nil [1081385 1081862])
            ("ask-user-about-supersession-threat" function (:prototype-flag t) nil [1081864 1082370])
            ("utf-7-post-read-conversion" function (:prototype-flag t) nil [1082525 1082595])
            ("utf-7-imap-post-read-conversion" function (:prototype-flag t) nil [1082597 1082672])
            ("utf-7-pre-write-conversion" function (:prototype-flag t) nil [1082674 1082748])
            ("utf-7-imap-pre-write-conversion" function (:prototype-flag t) nil [1082750 1082829])
            ("utf7-encode" function (:prototype-flag t) nil [1082955 1083098])
            ("uudecode-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1083244 1083524])
            ("uudecode-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1083526 1083755])
            ("uudecode-decode-region" function (:prototype-flag t) nil [1083757 1083945])
            ("vc-checkout-hook" variable nil nil [1084061 1084174])
            ("custom-autoload" code nil nil [1084176 1084218])
            ("vc-checkin-hook" variable nil nil [1084220 1084349])
            ("custom-autoload" code nil nil [1084351 1084392])
            ("vc-before-checkin-hook" variable nil nil [1084394 1084521])
            ("custom-autoload" code nil nil [1084523 1084571])
            ("vc-responsible-backend" function (:prototype-flag t) nil [1084573 1084893])
            ("vc-next-action" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1084895 1086032])
            ("vc-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1086034 1086699])
            ("vc-version-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1086701 1086839])
            ("vc-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1086841 1087230])
            ("vc-version-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1087232 1087387])
            ("vc-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1087389 1087791])
            ("vc-root-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1087793 1088221])
            ("vc-root-dir" function (:prototype-flag t) nil [1088223 1088376])
            ("vc-revision-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1088378 1088635])
            ("vc-insert-headers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1088637 1088847])
            ("vc-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1088849 1089528])
            ("vc-message-unresolved-conflicts" function (:prototype-flag t) nil [1089530 1089669])
            ("defalias" code nil nil [1089671 1089717])
            ("vc-create-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1089719 1090052])
            ("vc-retrieve-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1090054 1090653])
            ("vc-print-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1090655 1091073])
            ("vc-print-root-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1091075 1091409])
            ("vc-log-incoming" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1091411 1091652])
            ("vc-log-outgoing" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1091654 1091889])
            ("vc-region-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1091891 1091991])
            ("vc-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1091993 1092236])
            ("define-obsolete-function-alias" code nil nil [1092238 1092306])
            ("vc-pull" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1092308 1092991])
            ("defalias" code nil nil [1092993 1093023])
            ("vc-push" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1093025 1093513])
            ("vc-switch-backend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1093515 1093939])
            ("vc-transfer-file" function (:prototype-flag t) nil [1093941 1094552])
            ("vc-delete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1094554 1094782])
            ("vc-rename-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1094784 1095020])
            ("vc-update-change-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1095022 1095635])
            ("vc-branch-part" function (:prototype-flag t) nil [1095637 1095740])
            ("vc-annotate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1095891 1097469])
            ("vc-bzr-admin-dirname" variable
               (:constant-flag t
                :default-value ".bzr")
                nil [1097605 1097709])
            ("vc-bzr-admin-checkout-format-file" variable
               (:constant-flag t
                :default-value (concat vc-bzr-admin-dirname "/checkout/format"))
                nil [1097711 1097853])
            ("vc-bzr-registered" function (:arguments ("file")) nil [1097855 1098025])
            ("vc-cvs-registered" function (:arguments ("f")) nil [1098160 1098388])
            ("vc-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1098524 1099245])
            ("vc-do-command" function (:prototype-flag t) nil [1099402 1100371])
            ("vc-git-registered" function (:arguments ("file")) nil [1100508 1100721])
            ("vc-hg-registered" function (:arguments ("file")) nil [1100846 1101053])
            ("vc-mtn-admin-dir" variable
               (:constant-flag t
                :default-value "_MTN")
                nil [1101189 1101259])
            ("vc-mtn-admin-format" variable
               (:constant-flag t
                :default-value (concat vc-mtn-admin-dir "/format"))
                nil [1101261 1101377])
            ("vc-mtn-registered" function (:arguments ("file")) nil [1101379 1101535])
            ("vc-rcs-master-templates" variable (:default-value (purecopy (quote ("%sRCS/%s,v" "%s%s,v" "%sRCS/%s")))) nil [1101671 1101861])
            ("custom-autoload" code nil nil [1101863 1101916])
            ("vc-rcs-registered" function (:arguments ("f")) nil [1101918 1101978])
            ("vc-sccs-master-templates" variable (:default-value (purecopy (quote ("%sSCCS/s.%s" "%ss.%s" vc-sccs-search-project-dir)))) nil [1102117 1102326])
            ("custom-autoload" code nil nil [1102328 1102383])
            ("vc-sccs-registered" function (:arguments ("f")) nil [1102385 1102447])
            ("vc-sccs-search-project-dir" function (:arguments ("_dirname" "basename")) nil [1102449 1103146])
            ("vc-src-master-templates" variable (:default-value (purecopy (quote ("%s.src/%s,v")))) nil [1103282 1103453])
            ("custom-autoload" code nil nil [1103455 1103508])
            ("vc-src-registered" function (:arguments ("f")) nil [1103510 1103570])
            ("vc-svn-registered" function (:arguments ("f")) nil [1103706 1104027])
            ("push" code nil nil [1104184 1104245])
            ("add-to-list" code nil nil [1104247 1104323])
            ("vera-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1104325 1106047])
            ("verilog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1106215 1112837])
            ("vhdl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1112996 1138616])
            ("viet-encode-viscii-char" function (:prototype-flag t) nil [1138773 1138897])
            ("viet-decode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1138899 1139165])
            ("viet-decode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1139167 1139304])
            ("viet-encode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1139306 1139572])
            ("viet-encode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1139574 1139711])
            ("viqr-post-read-conversion" function (:prototype-flag t) nil [1139713 1139786])
            ("viqr-pre-write-conversion" function (:prototype-flag t) nil [1139788 1139865])
            ("view-remove-frame-by-deleting" variable (:default-value t) nil [1139981 1140149])
            ("custom-autoload" code nil nil [1140151 1140208])
            ("view-mode" variable nil nil [1140210 1140383])
            ("make-variable-buffer-local" code nil nil [1140385 1140424])
            ("kill-buffer-if-not-modified" function (:prototype-flag t) nil [1140426 1140559])
            ("view-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1140561 1141011])
            ("view-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1141013 1141590])
            ("view-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1141592 1142185])
            ("view-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1142187 1143277])
            ("view-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1143279 1144167])
            ("view-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1144169 1145055])
            ("view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1145057 1149927])
            ("view-return-to-alist-update" function (:prototype-flag t) nil [1149929 1150473])
            ("make-obsolete" code nil nil [1150475 1150559])
            ("view-mode-enter" function (:prototype-flag t) nil [1150561 1151229])
            ("View-exit-and-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1151231 1151338])
            ("push" code nil nil [1151483 1151542])
            ("toggle-viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1151544 1151677])
            ("viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1151679 1151794])
            ("warning-prefix-function" variable nil nil [1151952 1152349])
            ("warning-series" variable nil nil [1152351 1152789])
            ("warning-fill-prefix" variable nil nil [1152791 1152900])
            ("warning-type-format" variable (:default-value (purecopy " (%s)")) nil [1152902 1153141])
            ("display-warning" function (:prototype-flag t) nil [1153143 1154389])
            ("lwarn" function (:prototype-flag t) nil [1154391 1155250])
            ("warn" function (:prototype-flag t) nil [1155252 1155540])
            ("push" code nil nil [1155661 1155718])
            ("wdired-change-to-wdired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1155720 1156110])
            ("webjump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1156251 1156529])
            ("put" code nil nil [1156691 1156739])
            ("put" code nil nil [1156741 1156790])
            ("define-obsolete-function-alias" code nil nil [1156792 1156869])
            ("which-function-mode" variable nil nil [1156871 1157184])
            ("custom-autoload" code nil nil [1157186 1157241])
            ("which-function-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1157243 1157705])
            ("push" code nil nil [1157846 1157910])
            ("whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1157912 1158281])
            ("whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1158283 1158859])
            ("global-whitespace-mode" variable nil nil [1158861 1159186])
            ("custom-autoload" code nil nil [1159188 1159246])
            ("global-whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1159248 1159641])
            ("global-whitespace-newline-mode" variable nil nil [1159643 1160000])
            ("custom-autoload" code nil nil [1160002 1160068])
            ("global-whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1160070 1160681])
            ("whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1160683 1163499])
            ("global-whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1163501 1166331])
            ("whitespace-cleanup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1166333 1168439])
            ("whitespace-cleanup-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1168441 1170018])
            ("whitespace-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1170020 1170213])
            ("whitespace-report-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1170215 1171649])
            ("widget-browse-at" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1171791 1171884])
            ("widget-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1171886 1171984])
            ("widget-browse-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1171986 1172119])
            ("widget-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1172121 1172383])
            ("widgetp" function (:prototype-flag t) nil [1172518 1172612])
            ("widget-prompt-value" function (:prototype-flag t) nil [1172614 1172832])
            ("widget-create" function (:prototype-flag t) nil [1172834 1172980])
            ("widget-delete" function (:prototype-flag t) nil [1172982 1173059])
            ("widget-insert" function (:prototype-flag t) nil [1173061 1173190])
            ("widget-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote widget-forward)) (define-key map "	" (quote widget-backward)) (define-key map [(shift tab)] (quote widget-backward)) (put (quote widget-backward) :advertised-binding [(shift tab)]) (define-key map [backtab] (quote widget-backward)) (define-key map [down-mouse-2] (quote widget-button-click)) (define-key map [down-mouse-1] (quote widget-button-click)) (define-key map [(control 109)] (quote widget-button-press)) map)) nil [1173192 1173815])
            ("widget-setup" function (:prototype-flag t) nil [1173817 1173925])
            ("windmove-left" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1174061 1174488])
            ("windmove-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1174490 1174903])
            ("windmove-right" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1174905 1175334])
            ("windmove-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1175336 1175754])
            ("windmove-default-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1175756 1175966])
            ("winner-mode" variable nil nil [1176087 1176368])
            ("custom-autoload" code nil nil [1176370 1176413])
            ("winner-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1176415 1177069])
            ("push" code nil nil [1177186 1177244])
            ("woman-locale" variable nil nil [1177246 1177521])
            ("custom-autoload" code nil nil [1177523 1177564])
            ("woman" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1177566 1178226])
            ("woman-dired-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1178228 1178341])
            ("woman-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1178343 1178857])
            ("woman-bookmark-jump" function (:prototype-flag t) nil [1178859 1178970])
            ("xml-parse-file" function (:prototype-flag t) nil [1179083 1179819])
            ("xml-parse-region" function (:prototype-flag t) nil [1179821 1180788])
            ("xmltok-get-declared-encoding-position" function (:prototype-flag t) nil [1180927 1181584])
            ("xref-find-backend" function (:prototype-flag t) nil [1181728 1181784])
            ("xref-pop-marker-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1181786 1181905])
            ("xref-marker-stack-empty-p" function (:prototype-flag t) nil [1181907 1182024])
            ("xref-find-definitions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1182026 1182451])
            ("xref-find-definitions-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1182453 1182595])
            ("xref-find-definitions-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1182597 1182737])
            ("xref-find-references" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1182739 1182899])
            ("xref-find-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1182901 1183061])
            ("define-key" code nil nil [1183063 1183111])
            ("define-key" code nil nil [1183113 1183161])
            ("define-key" code nil nil [1183163 1183210])
            ("define-key" code nil nil [1183212 1183260])
            ("define-key" code nil nil [1183262 1183327])
            ("define-key" code nil nil [1183329 1183393])
            ("xref-collect-matches" function (:prototype-flag t) nil [1183395 1183620])
            ("xterm-mouse-mode" variable nil nil [1183755 1184056])
            ("custom-autoload" code nil nil [1184058 1184108])
            ("xterm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1184110 1184757])
            ("xwidget-webkit-browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1184881 1185150])
            ("yenc-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1185276 1185408])
            ("yenc-extract-filename" function (:prototype-flag t) nil [1185410 1185508])
            ("zone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1185634 1185696])
            ("loaddefs" package nil nil [1202307 1202326]))          
      :file "loaddefs.el"
      :pointmax 1202472
      :fsize 1202498
      :lastmodtime '(22491 44839 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [3469 3556])
            ("overlay" include nil nil [3581 3599])
            ("cl" include nil nil [3844 3857])
            ("allout" customgroup (:user-visible-flag t) nil [3943 4133])
            ("allout-keybindings" customgroup (:user-visible-flag t) nil [4134 4241])
            ("allout-command-prefix" variable nil nil [4296 4326])
            ("allout-mode-map" variable (:default-value (quote allout-mode-map)) nil [4489 4745])
            ("allout-mode-map-value" variable nil nil [4778 5007])
            ("defalias" code nil nil [5136 5185])
            ("allout-compose-and-institute-keymap" function (:arguments ("varname" "value")) nil [5257 6771])
            ("allout-institute-keymap" function (:arguments ("map")) nil [6810 7519])
            ("allout-compose-and-institute-keymap" code nil nil [7645 7682])
            ("allout-command-prefix" variable (:default-value " ") nil [7714 8050])
            ("define-widget" code nil nil [8087 8393])
            ("allout-prefixed-keybindings" variable (:default-value (quote (("[(control ?n)]" allout-next-visible-heading) ("[(control ?p)]" allout-previous-visible-heading) ("[(control ?u)]" allout-up-current-level) ("[(control ?f)]" allout-forward-current-level) ("[(control ?b)]" allout-backward-current-level) ("[(control ?a)]" allout-beginning-of-current-entry) ("[(control ?e)]" allout-end-of-entry) ("[(control ?i)]" allout-show-children) ("[(control ?s)]" allout-show-current-subtree) ("[(control ?t)]" allout-toggle-current-subtree-exposure) ("[?h]" allout-hide-current-subtree) ("[(control ?o)]" allout-show-current-entry) ("[?!]" allout-show-all) ("[?x]" allout-toggle-current-subtree-encryption) ("[? ]" allout-open-sibtopic) ("[?.]" allout-open-subtopic) ("[?,]" allout-open-supertopic) ("[?']" allout-shift-in) ("[?>]" allout-shift-in) ("[?<]" allout-shift-out) ("[(control ?m)]" allout-rebullet-topic) ("[?*]" allout-rebullet-current-heading) ("[?#]" allout-number-siblings) ("[(control ?k)]" allout-kill-topic) ("[(meta ?k)]" allout-copy-topic-as-kill) ("[?@]" allout-resolve-xref) ("[?=?c]" allout-copy-exposed-to-buffer) ("[?=?i]" allout-indented-exposed-to-buffer) ("[?=?t]" allout-latexify-exposed) ("[?=?p]" allout-flatten-exposed-to-buffer)))) nil [8431 10659])
            ("allout-unprefixed-keybindings" variable (:default-value (quote (("[(control ?k)]" allout-kill-line) ("[(meta ?k)]" allout-copy-line-as-kill) ("[(control ?y)]" allout-yank) ("[(meta ?y)]" allout-yank-pop)))) nil [10699 11563])
            ("allout-auto-activation-helper" function (:arguments ("var" "value")) nil [11630 11830])
            ("allout-setup" function nil nil [11870 12320])
            ("allout-auto-activation" variable nil nil [12367 13347])
            ("allout-setup" code nil nil [13348 13362])
            ("allout-default-layout" variable (:default-value (quote (-2 : 0))) nil [13393 16008])
            ("define-widget" code nil nil [16036 16543])
            ("allout-inhibit-auto-fill" variable nil nil [16578 17222])
            ("make-variable-buffer-local" code nil nil [17223 17277])
            ("allout-inhibit-auto-fill-on-headline" variable nil nil [17323 17501])
            ("make-variable-buffer-local" code nil nil [17502 17568])
            ("allout-use-hanging-indents" variable (:default-value t) nil [17604 17914])
            ("make-variable-buffer-local" code nil nil [17915 17971])
            ("put" code nil nil [17987 18114])
            ("allout-reindent-bodies" variable (:default-value (if allout-use-hanging-indents (quote text))) nil [18146 18740])
            ("make-variable-buffer-local" code nil nil [18742 18794])
            ("put" code nil nil [18810 18907])
            ("allout-show-bodies" variable nil nil [18936 19089])
            ("make-variable-buffer-local" code nil nil [19090 19138])
            ("put" code nil nil [19154 19273])
            ("allout-beginning-of-line-cycles" variable (:default-value t) nil [19315 20670])
            ("allout-end-of-line-cycles" variable (:default-value t) nil [20705 21615])
            ("allout-header-prefix" variable (:default-value ".") nil [21646 22182])
            ("make-variable-buffer-local" code nil nil [22183 22233])
            ("put" code nil nil [22249 22306])
            ("allout-primary-bullet" variable (:default-value "*") nil [22337 22863])
            ("make-variable-buffer-local" code nil nil [22864 22915])
            ("put" code nil nil [22931 22989])
            ("allout-plain-bullets-string" variable (:default-value ".,") nil [23026 23390])
            ("make-variable-buffer-local" code nil nil [23391 23448])
            ("put" code nil nil [23464 23528])
            ("allout-distinctive-bullets-string" variable (:default-value "*+-=>()[{}&!?#%\"X@$~_\\:;^") nil [23571 25344])
            ("make-variable-buffer-local" code nil nil [25345 25408])
            ("put" code nil nil [25424 25494])
            ("allout-use-mode-specific-leader" variable (:default-value t) nil [25536 27009])
            ("put" code nil nil [27025 27193])
            ("allout-mode-leaders" variable (:default-value (quote nil)) nil [27222 27741])
            ("allout-old-style-prefixes" variable nil nil [27777 28220])
            ("make-variable-buffer-local" code nil nil [28221 28276])
            ("put" code nil nil [28292 28418])
            ("allout-stylish-prefixes" variable (:default-value t) nil [28474 29981])
            ("make-variable-buffer-local" code nil nil [29982 30035])
            ("put" code nil nil [30051 30175])
            ("allout-numbered-bullet" variable (:default-value "#") nil [30208 30615])
            ("make-variable-buffer-local" code nil nil [30616 30668])
            ("put" code nil nil [30684 30845])
            ("allout-file-xref-bullet" variable (:default-value "@") nil [30878 31114])
            ("put" code nil nil [31130 31292])
            ("allout-presentation-padding" variable (:default-value 2) nil [31329 31476])
            ("make-variable-buffer-local" code nil nil [31478 31535])
            ("put" code nil nil [31551 31616])
            ("define-obsolete-variable-alias" code nil nil [31666 31787])
            ("allout-flattened-numbering-abbreviation" variable nil nil [31788 32053])
            ("allout-number-pages" variable nil nil [32107 32248])
            ("allout-label-style" variable (:default-value "\\large\\bf") nil [32276 32417])
            ("allout-head-line-style" variable (:default-value "\\large\\sl ") nil [32449 32596])
            ("allout-body-line-style" variable (:default-value " ") nil [32628 32764])
            ("allout-title-style" variable (:default-value "\\Large\\bf") nil [32792 32933])
            ("allout-title" variable (:default-value (quote (or buffer-file-name (buffer-name)))) nil [32955 33134])
            ("allout-line-skip" variable (:default-value ".05cm") nil [33160 33289])
            ("allout-indent" variable (:default-value ".3cm") nil [33312 33419])
            ("allout-encryption" customgroup (:user-visible-flag t) nil [33477 33589])
            ("allout-topic-encryption-bullet" variable (:default-value "~") nil [33629 33812])
            ("allout-encrypt-unencrypted-on-saves" variable (:default-value t) nil [33857 34546])
            ("make-variable-buffer-local" code nil nil [34547 34612])
            ("allout-auto-save-temporarily-disabled" variable nil nil [34613 34855])
            ("allout-just-did-undo" variable nil nil [34856 34960])
            ("make-variable-buffer-local" code nil nil [34961 35011])
            ("allout-developer" customgroup (:user-visible-flag t) nil [35061 35189])
            ("allout-run-unit-tests-on-load" variable nil nil [35228 35679])
            ("allout-enable-file-variable-adjustment" variable (:default-value t) nil [35764 36295])
            ("make-variable-buffer-local" code nil nil [36296 36364])
            ("allout-version" variable (:default-value "2.3") nil [36505 36596])
            ("allout-version" function
               (:user-visible-flag t
                :arguments ("here"))
                nil [36621 36860])
            ("allout-mode" variable nil nil [36951 37014])
            ("make-variable-buffer-local" code nil nil [37015 37056])
            ("allout-layout" variable nil nil [37084 38216])
            ("make-variable-buffer-local" code nil nil [38217 38260])
            ("put" code nil nil [38276 38382])
            ("allout-regexp" variable nil nil [38435 38678])
            ("make-variable-buffer-local" code nil nil [38679 38722])
            ("allout-bullets-string" variable nil nil [38754 39037])
            ("make-variable-buffer-local" code nil nil [39038 39089])
            ("allout-bullets-string-len" variable nil nil [39125 39223])
            ("make-variable-buffer-local" code nil nil [39224 39279])
            ("allout-depth-specific-regexp" variable nil nil [39318 39815])
            ("make-variable-buffer-local" code nil nil [39816 39874])
            ("allout-depth-one-regexp" variable nil nil [39908 40235])
            ("make-variable-buffer-local" code nil nil [40236 40289])
            ("allout-line-boundary-regexp" variable nil nil [40327 40480])
            ("make-variable-buffer-local" code nil nil [40481 40538])
            ("allout-bob-regexp" variable nil nil [40566 40671])
            ("make-variable-buffer-local" code nil nil [40672 40719])
            ("allout-header-subtraction" variable (:default-value (1- (length allout-header-prefix))) nil [40755 40896])
            ("make-variable-buffer-local" code nil nil [40897 40952])
            ("allout-plain-bullets-string-len" variable (:default-value (length allout-plain-bullets-string)) nil [40994 41148])
            ("make-variable-buffer-local" code nil nil [41149 41210])
            ("allout-doublecheck-at-and-shallower" variable
               (:constant-flag t
                :default-value 3)
                nil [41257 42580])
            ("allout-reset-header-lead" function
               (:user-visible-flag t
                :arguments ("header-lead"))
                nil [42629 42907])
            ("allout-lead-with-comment-string" function
               (:user-visible-flag t
                :arguments ("header-lead"))
                nil [42963 43441])
            ("allout-infer-header-lead-and-primary-bullet" function nil nil [43498 45326])
            ("defalias" code nil nil [45327 45410])
            ("allout-infer-body-reindent" function nil nil [45450 45844])
            ("set-allout-regexp" function (:user-visible-flag t) nil [45875 51201])
            ("allout-mode-exposure-menu" variable nil nil [51219 51253])
            ("allout-mode-editing-menu" variable nil nil [51254 51287])
            ("allout-mode-navigation-menu" variable nil nil [51288 51324])
            ("allout-mode-misc-menu" variable nil nil [51325 51355])
            ("produce-allout-mode-menubar-entries" function nil nil [51356 53831])
            ("allout-mode-prior-settings" variable nil nil [53909 54084])
            ("make-variable-buffer-local" code nil nil [54085 54141])
            ("allout-add-resumptions" function (:arguments ("pairs")) nil [54188 57002])
            ("allout-do-resumptions" function nil nil [57037 57614])
            ("allout-unprotected" function (:arguments ("expr")) nil [57684 57895])
            ("allout-mode-hook" variable nil nil [57922 57989])
            ("define-obsolete-variable-alias" code nil nil [58027 58119])
            ("allout-mode-deactivate-hook" variable nil nil [58120 58196])
            ("allout-exposure-category" variable nil nil [58231 58330])
            ("define-obsolete-variable-alias" code nil nil [58374 58478])
            ("allout-exposure-change-functions" variable nil nil [58479 59010])
            ("define-obsolete-variable-alias" code nil nil [59054 59158])
            ("allout-structure-added-functions" variable nil nil [59159 59580])
            ("define-obsolete-variable-alias" code nil nil [59626 59734])
            ("allout-structure-deleted-functions" variable nil nil [59735 60304])
            ("define-obsolete-variable-alias" code nil nil [60350 60458])
            ("allout-structure-shifted-functions" variable nil nil [60459 61008])
            ("allout-after-copy-or-kill-hook" variable nil nil [61050 61194])
            ("allout-post-undo-hook" variable nil nil [61227 61448])
            ("allout-outside-normal-auto-fill-function" variable nil nil [61500 61750])
            ("make-variable-buffer-local" code nil nil [61751 61821])
            ("add-to-list" code nil nil [61877 61940])
            ("allout-passphrase-verifier-string" variable nil nil [61984 62657])
            ("make-variable-buffer-local" code nil nil [62658 62721])
            ("make-obsolete-variable" code nil nil [62722 62826])
            ("put" code nil nil [62842 62912])
            ("allout-passphrase-hint-string" variable nil nil [62952 63376])
            ("make-variable-buffer-local" code nil nil [63377 63436])
            ("setq-default" code nil nil [63437 63484])
            ("make-obsolete-variable" code nil nil [63485 63581])
            ("put" code nil nil [63597 63663])
            ("allout-after-save-decrypt" variable nil nil [63699 64068])
            ("make-variable-buffer-local" code nil nil [64069 64124])
            ("allout-encryption-plaintext-sanitization-regexps" variable nil nil [64183 64842])
            ("make-variable-buffer-local" code nil nil [64843 64921])
            ("allout-encryption-ciphertext-rejection-regexps" variable nil nil [64978 65467])
            ("make-variable-buffer-local" code nil nil [65469 65545])
            ("allout-encryption-ciphertext-rejection-ceiling" variable (:default-value 5) nil [65602 65800])
            ("make-variable-buffer-local" code nil nil [65801 65877])
            ("allout-mode-p" function nil nil [66054 66155])
            ("allout-write-contents-hook-handler" function nil nil [66203 67699])
            ("allout-after-saves-handler" function nil nil [67739 68499])
            ("allout-called-interactively-p" function nil nil [68542 68865])
            ("allout-inhibit-aberrance-doublecheck" variable nil nil [69323 69526])
            ("allout-explicitly-deactivated" variable nil nil [69606 69769])
            ("make-variable-buffer-local" code nil nil [69770 69829])
            ("allout-init" function (:arguments ("mode")) nil [69857 70289])
            ("allout-setup-menubar" function nil nil [70323 70670])
            ("allout-overlay-preparations" function nil nil [70707 71770])
            ("define-minor-mode" code nil nil [71840 90035])
            ("defalias" code nil nil [90094 90136])
            ("allout-unload-function" function nil nil [90168 90411])
            ("allout-hidden-p" function (:arguments ("pos")) nil [90482 90658])
            ("allout-overlay-insert-in-front-handler" function (:arguments ("ol" "after" "beg" "_end" "_prelen")) nil [90794 91197])
            ("allout-overlay-interior-modification-handler" function (:arguments ("ol" "after" "beg" "end" "_prelen")) nil [91344 93164])
            ("allout-before-change-handler" function (:arguments ("beg" "end")) nil [93212 93975])
            ("allout-isearch-end-handler" function (:arguments ("_overlay")) nil [94031 94444])
            ("allout-recent-prefix-beginning" variable nil nil [95008 95117])
            ("make-variable-buffer-local" code nil nil [95118 95178])
            ("allout-recent-prefix-end" variable nil nil [95212 95313])
            ("make-variable-buffer-local" code nil nil [95314 95368])
            ("allout-recent-depth" variable nil nil [95397 95475])
            ("make-variable-buffer-local" code nil nil [95476 95525])
            ("allout-recent-end-of-subtree" variable nil nil [95563 95669])
            ("make-variable-buffer-local" code nil nil [95670 95728])
            ("allout-prefix-data" function nil nil [95759 96432])
            ("nullify-allout-prefix-data" function nil nil [96471 96715])
            ("allout-recent-depth" function nil nil [96747 97120])
            ("allout-recent-prefix" function nil nil [97153 97626])
            ("allout-recent-bullet" function nil nil [97659 98170])
            ("allout-do-doublecheck" function nil nil [98284 98732])
            ("allout-aberrant-container-p" function nil nil [98775 100649])
            ("allout-on-current-heading-p" function nil nil [100691 101091])
            ("defalias" code nil nil [101125 101185])
            ("allout-e-o-prefix-p" function nil nil [101219 101579])
            ("allout-depth" function nil nil [101635 102201])
            ("allout-current-depth" function nil nil [102236 102599])
            ("allout-get-current-prefix" function nil nil [102639 102787])
            ("allout-get-bullet" function nil nil [102819 102978])
            ("allout-current-bullet" function nil nil [103014 103429])
            ("allout-get-prefix-bullet" function (:arguments ("prefix")) nil [103474 103793])
            ("allout-sibling-index" function (:arguments ("depth")) nil [103843 104509])
            ("allout-topic-flat-index" function nil nil [104547 104952])
            ("allout-beginning-of-current-line" function nil nil [105027 105525])
            ("allout-end-of-current-line" function nil nil [105565 105972])
            ("allout-beginning-of-line" function (:user-visible-flag t) nil [106010 107288])
            ("allout-end-of-line" function (:user-visible-flag t) nil [107320 108336])
            ("allout-mark-active-p" function nil nil [108370 108755])
            ("allout-next-heading" function nil nil [108788 109657])
            ("allout-this-or-next-heading" function nil nil [109695 109952])
            ("allout-previous-heading" function nil nil [109989 110909])
            ("allout-get-invisibility-overlay" function nil nil [110954 111289])
            ("allout-back-to-visible-text" function nil nil [111330 111550])
            ("allout-chart-subtree" function (:arguments ("levels" "visible" "orig-depth" "prev-depth")) nil [111935 115971])
            ("allout-chart-siblings" function (:arguments ("_start" "_end")) nil [116025 116483])
            ("allout-chart-to-reveal" function (:arguments ("chart" "depth")) nil [116530 117423])
            ("allout-goto-prefix" function nil nil [118753 119458])
            ("allout-goto-prefix-doublechecked" function nil nil [119504 119991])
            ("allout-end-of-prefix" function (:arguments ("ignore-decorations")) nil [120026 120608])
            ("allout-current-bullet-pos" function nil nil [120647 120821])
            ("allout-back-to-current-heading" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [120886 121730])
            ("defalias" code nil nil [121766 121832])
            ("allout-pre-next-prefix" function nil nil [121868 122074])
            ("allout-end-of-subtree" function
               (:user-visible-flag t
                :arguments ("current" "include-trailing-blank"))
                nil [122149 123083])
            ("allout-end-of-current-subtree" function
               (:user-visible-flag t
                :arguments ("include-trailing-blank"))
                nil [123158 123592])
            ("allout-beginning-of-current-entry" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [123660 124259])
            ("allout-end-of-entry" function
               (:user-visible-flag t
                :arguments ("inclusive"))
                nil [124311 124724])
            ("allout-end-of-current-heading" function nil nil [124767 124911])
            ("defalias" code nil nil [124912 124976])
            ("allout-get-body-text" function nil nil [125010 125490])
            ("allout-ascend-to-depth" function (:arguments ("depth")) nil [125551 126013])
            ("allout-ascend" function (:arguments ("dont-move-if-unsuccessful")) nil [126075 127236])
            ("allout-descend-to-depth" function (:arguments ("depth")) nil [127278 127857])
            ("allout-up-current-level" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [127897 128309])
            ("allout-next-sibling" function (:arguments ("depth" "backward")) nil [128382 130178])
            ("allout-next-sibling-leap" function (:arguments ("depth" "backward")) nil [130240 132751])
            ("allout-previous-sibling" function (:arguments ("depth" "backward")) nil [132812 133149])
            ("allout-snug-back" function nil nil [133179 133446])
            ("allout-beginning-of-level" function nil nil [133485 133619])
            ("allout-end-of-level" function (:arguments ("_backward")) nil [133670 133957])
            ("allout-next-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [134001 136272])
            ("allout-previous-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [136320 136673])
            ("allout-forward-current-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [136718 137713])
            ("allout-backward-current-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [137759 138052])
            ("allout-post-goto-bullet" variable nil nil [138127 138544])
            ("make-variable-buffer-local" code nil nil [138545 138598])
            ("allout-command-counter" variable nil nil [138631 138831])
            ("make-variable-buffer-local" code nil nil [138832 138884])
            ("allout-this-command-hid-text" variable nil nil [138923 139026])
            ("make-variable-buffer-local" code nil nil [139027 139085])
            ("allout-post-command-business" function nil nil [139127 140826])
            ("allout-pre-command-business" function nil nil [140867 142048])
            ("allout-hotspot-key-handler" function (:user-visible-flag t) nil [142088 144163])
            ("allout-find-file-hook" function nil nil [144199 144466])
            ("allout-solicit-alternate-bullet" function (:arguments ("depth" "current-bullet")) nil [144574 145428])
            ("allout-distinctive-bullet" function (:arguments ("bullet")) nil [145473 145663])
            ("allout-numbered-type-prefix" function (:arguments ("prefix")) nil [145720 146030])
            ("allout-encrypted-type-prefix" function (:arguments ("prefix")) nil [146088 146429])
            ("allout-bullet-for-depth" function (:arguments ("depth")) nil [146481 146894])
            ("allout-make-topic-prefix" function (:arguments ("prior-bullet" "new" "depth" "instead" "number-control" "index")) nil [146979 153976])
            ("allout-open-topic" function (:arguments ("relative-depth" "before" "offer-recent-bullet")) nil [154058 162657])
            ("allout-open-subtopic" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [162694 162952])
            ("allout-open-sibtopic" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [162989 163302])
            ("allout-open-supertopic" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163341 163609])
            ("allout-former-auto-filler" variable nil nil [163702 163809])
            ("allout-auto-fill" function nil nil [163840 165267])
            ("allout-reindent-body" function (:arguments ("old-depth" "new-depth" "_number")) nil [165338 166863])
            ("allout-rebullet-current-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [166912 168084])
            ("allout-rebullet-heading" function (:arguments ("instead" "new-depth" "number-control" "index" "do-successors")) nil [168143 172453])
            ("allout-rebullet-topic" function
               (:user-visible-flag t
                :arguments ("arg" "sans-offspring"))
                nil [172500 173670])
            ("allout-rebullet-topic-grunt" function (:arguments ("relative-depth" "starting-depth" "starting-point" "index" "do-successors" "sans-offspring")) nil [173740 178873])
            ("allout-renumber-to-depth" function (:arguments ("depth")) nil [178927 180226])
            ("allout-number-siblings" function
               (:user-visible-flag t
                :arguments ("denumber"))
                nil [180281 181234])
            ("allout-shift-in" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [181267 183164])
            ("allout-shift-out" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [183198 184854])
            ("allout-kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [184975 186271])
            ("allout-copy-line-as-kill" function (:user-visible-flag t) nil [186310 186546])
            ("allout-kill-topic" function (:user-visible-flag t) nil [186578 188106])
            ("allout-copy-topic-as-kill" function (:user-visible-flag t) nil [188146 188408])
            ("allout-annotate-hidden" function (:arguments ("begin" "end")) nil [188454 190011])
            ("allout-deannotate-hidden" function (:arguments ("begin" "end")) nil [190059 190364])
            ("allout-hide-by-annotation" function (:arguments ("begin" "end")) nil [190413 191779])
            ("allout-yank-processing" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [191816 198042])
            ("allout-yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [198081 199370])
            ("allout-yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [199413 199814])
            ("allout-resolve-xref" function (:user-visible-flag t) nil [199915 201414])
            ("allout-flag-region" function (:arguments ("from" "to" "flag")) nil [201505 202441])
            ("allout-flag-current-subtree" function (:arguments ("flag")) nil [202486 203115])
            ("allout-show-entry" function (:user-visible-flag t) nil [203170 203771])
            ("allout-show-children" function
               (:user-visible-flag t
                :arguments ("level" "strict"))
                nil [203827 207539])
            ("allout-show-to-offshoot" function (:user-visible-flag t) nil [207576 208768])
            ("allout-hide-current-entry" function (:user-visible-flag t) nil [208807 209147])
            ("allout-show-current-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [209199 209600])
            ("allout-show-current-subtree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [209654 210329])
            ("allout-current-topic-collapsed-p" function (:arguments ("include-single-liners")) nil [210406 211261])
            ("allout-hide-current-subtree" function
               (:user-visible-flag t
                :arguments ("just-close"))
                nil [211322 212226])
            ("allout-toggle-current-subtree-exposure" function (:user-visible-flag t) nil [212275 212617])
            ("allout-show-current-branches" function (:user-visible-flag t) nil [212659 212869])
            ("allout-hide-current-leaves" function (:user-visible-flag t) nil [212909 213188])
            ("allout-show-all" function (:user-visible-flag t) nil [213244 213464])
            ("allout-hide-bodies" function (:user-visible-flag t) nil [213496 213633])
            ("allout-hide-region-body" function (:arguments ("start" "end")) nil [213679 214210])
            ("allout-expose-topic" function
               (:user-visible-flag t
                :arguments ("spec"))
                nil [214248 218990])
            ("allout-old-expose-topic" function
               (:user-visible-flag t
                :arguments ("spec" "followers"))
                nil [219047 222056])
            ("allout-new-exposure" function (:arguments ("spec")) nil [222090 223272])
            ("allout-stringify-flat-index" function (:arguments ("flat-index" "context")) nil [223496 224525])
            ("allout-stringify-flat-index-plain" function (:arguments ("flat-index")) nil [224582 224926])
            ("allout-stringify-flat-index-indented" function (:arguments ("flat-index")) nil [224986 225806])
            ("allout-listify-exposed" function
               (:user-visible-flag t
                :arguments ("start" "end" "format"))
                nil [225868 230010])
            ("allout-region-active-p" function nil nil [230046 230214])
            ("allout-process-exposed" function (:arguments ("func" "from" "to" "frombuf" "tobuf" "format" "_start-num")) nil [230304 232403])
            ("allout-insert-listified" function (:arguments ("listified")) nil [232471 233193])
            ("allout-copy-exposed-to-buffer" function
               (:user-visible-flag t
                :arguments ("arg" "tobuf" "format"))
                nil [233262 234793])
            ("allout-flatten-exposed-to-buffer" function
               (:user-visible-flag t
                :arguments ("arg" "tobuf"))
                nil [234858 235476])
            ("allout-indented-exposed-to-buffer" function
               (:user-visible-flag t
                :arguments ("arg" "tobuf"))
                nil [235542 236172])
            ("allout-latex-verb-quote" function (:arguments ("string" "_flow")) nil [236256 236740])
            ("allout-latex-verbatim-quote-curr-line" function nil nil [236791 237627])
            ("allout-insert-latex-header" function (:arguments ("buffer")) nil [237673 239707])
            ("allout-insert-latex-trailer" function (:arguments ("buffer")) nil [239754 239910])
            ("allout-latexify-one-item" function (:arguments ("depth" "_prefix" "bullet" "text")) nil [239972 241547])
            ("allout-latexify-exposed" function
               (:user-visible-flag t
                :arguments ("arg" "tobuf"))
                nil [241603 242580])
            ("allout-toggle-current-subtree-encryption" function
               (:user-visible-flag t
                :arguments ("keymode-cue"))
                nil [242674 244693])
            ("allout-toggle-subtree-encryption" function
               (:user-visible-flag t
                :arguments ("keymode-cue"))
                nil [244759 250467])
            ("declare-function" code nil nil [250469 250577])
            ("declare-function" code nil nil [250578 250646])
            ("declare-function" code nil nil [250647 250707])
            ("declare-function" code nil nil [250708 250824])
            ("declare-function" code nil nil [250825 250880])
            ("declare-function" code nil nil [250881 250934])
            ("allout-encrypt-string" function (:arguments ("text" "decrypt" "allout-buffer" "keymode-cue" "rejected")) nil [251062 258622])
            ("allout-inhibit-auto-save-info-for-decryption" function (:arguments ("was-buffer-saved-size")) nil [258676 259089])
            ("allout-maybe-resume-auto-save-info-after-encryption" function nil nil [259153 259690])
            ("allout-encrypted-topic-p" function nil nil [259728 260048])
            ("allout-next-topic-pending-encryption" function nil nil [260097 261562])
            ("allout-encrypt-decrypted" function (:user-visible-flag t) nil [261599 263578])
            ("defalias" code nil nil [263736 263783])
            ("outlineify-sticky" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [263799 264538])
            ("allout-file-vars-section-data" function nil nil [264581 265655])
            ("allout-adjust-file-variable" function (:arguments ("varname" "value")) nil [265709 268252])
            ("allout-get-configvar-values" function (:arguments ("configvar-name")) nil [268300 268972])
            ("allout-mark-topic" function (:user-visible-flag t) nil [269019 269308])
            ("solicit-char-in-string" function (:arguments ("prompt" "string" "do-defaulting")) nil [269393 270350])
            ("regexp-sans-escapes" function (:arguments ("regexp" "successive-backslashes")) nil [270406 271272])
            ("count-trailing-whitespace-region" function (:arguments ("beg" "end")) nil [271325 271763])
            ("allout-format-quote" function (:arguments ("string")) nil [271802 272021])
            ("allout-flatten" function (:arguments ("list")) nil [272067 272328])
            ("unless" code nil nil [272396 272700])
            ("allout-mark-marker" function (:arguments ("force" "buffer")) nil [272764 273065])
            ("if" code nil nil [273109 273606])
            ("if" code nil nil [273639 273705])
            ("if" code nil nil [273744 274944])
            ("if" code nil nil [274997 275480])
            ("if" code nil nil [275545 275966])
            ("if" code nil nil [276036 276372])
            ("if" code nil nil [276441 277708])
            ("if" code nil nil [277772 279956])
            ("defalias" code nil nil [280030 280270])
            ("defalias" code nil nil [280348 280604])
            ("defalias" code nil nil [280647 280796])
            ("defalias" code nil nil [280890 280957])
            ("if" code nil nil [281019 281177])
            ("allout-bullet-isearch" function
               (:user-visible-flag t
                :arguments ("bullet"))
                nil [281248 281679])
            ("allout-run-unit-tests" function nil nil [281779 281976])
            ("allout-tests-obliterate-variable" function (:arguments ("name")) nil [282052 282258])
            ("allout-tests-globally-unbound" variable nil nil [282295 282411])
            ("allout-tests-globally-true" variable nil nil [282412 282525])
            ("allout-tests-locally-true" variable nil nil [282526 282638])
            ("allout-test-resumptions" function nil nil [282639 288248])
            ("when" code nil nil [288319 288381])
            ("allout" package nil nil [288400 288417]))          
      :file "allout.el.gz"
      :pointmax 288830
      :fsize 70634
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax '((close-paren 3860 . 3861) (symbol 3601 . 3618) (open-paren 3600 . 3601)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1131 1167])
            ("command-line-processed" variable nil nil [1169 1254])
            ("initialization" customgroup (:user-visible-flag t) nil [1256 1337])
            ("initial-buffer-choice" variable nil nil [1339 2310])
            ("inhibit-startup-screen" variable nil nil [2312 2565])
            ("defvaralias" code nil nil [2567 2627])
            ("defvaralias" code nil nil [2628 2690])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2692 2742])
            ("inhibit-startup-echo-area-message" variable nil nil [3042 4096])
            ("inhibit-default-init" variable nil nil [4098 4228])
            ("inhibit-startup-buffer-menu" variable nil nil [4230 4394])
            ("command-switch-alist" variable nil nil [4396 4664])
            ("command-line-args-left" variable nil nil [4666 4750])
            ("defvaralias" code nil nil [4752 4987])
            ("internal-make-var-non-special" code nil nil [4988 5025])
            ("argi" variable nil nil [5027 5079])
            ("internal-make-var-non-special" code nil nil [5080 5117])
            ("command-line-functions" variable nil nil [5119 5573])
            ("command-line-default-directory" variable nil nil [5575 5743])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [5851 9035])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [9037 11989])
            ("before-init-hook" variable nil nil [11992 12102])
            ("after-init-hook" variable nil nil [12104 12520])
            ("emacs-startup-hook" variable nil nil [12522 12629])
            ("term-setup-hook" variable nil nil [12631 12946])
            ("make-obsolete-variable" code nil nil [12948 13064])
            ("inhibit-startup-hooks" variable nil nil [13066 13265])
            ("keyboard-type" variable nil nil [13267 13488])
            ("window-setup-hook" variable nil nil [13490 13937])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [13939 14108])
            ("init-file-user" variable nil nil [14110 14757])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [14759 16030])
            ("make-obsolete-variable" code nil nil [16032 16104])
            ("mail-host-address" variable nil nil [16106 16335])
            ("user-mail-address" variable (:default-value (if command-line-processed (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name)))) "")) nil [16337 16826])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [16828 17581])
            ("emacs-basic-display" variable nil nil [17583 17615])
            ("init-file-debug" variable nil nil [17617 17645])
            ("init-file-had-error" variable nil nil [17647 17743])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [17745 17797])
            ("no-blinking-cursor" variable nil nil [17799 17830])
            ("pure-space-overflow" variable nil nil [17832 17917])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [17919 18095])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [18097 18333])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [18335 20087])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [20089 20858])
            ("normal-top-level" function nil nil [20860 30646])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [30754 30980])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [30982 31072])
            ("cl-defgeneric" code nil nil [31074 31415])
            ("cl-defmethod" code nil nil [31416 31512])
            ("cl-defgeneric" code nil nil [31514 31852])
            ("tty-handle-args" function (:arguments ("args")) nil [31854 34601])
            ("declare-function" code nil nil [34603 34697])
            ("declare-function" code nil nil [34698 34757])
            ("declare-function" code nil nil [34758 34802])
            ("server-name" variable nil nil [34804 34824])
            ("server-process" variable nil nil [34825 34848])
            ("startup--setup-quote-display" function (:arguments ("style")) nil [34850 37828])
            ("command-line" function nil nil [37830 58918])
            ("x-apply-session-resources" function nil nil [58920 59947])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with \\[find-file] and enter text in its buffer.

")) nil [59949 60357])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/thegnuproject.html"))) "Browse http://www.gnu.org/gnu/thegnuproject.html"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [60532 63308])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (info "(emacs)Contributing")))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [63310 66462])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [66465 66584])
            ("fancy-splash-image" variable nil nil [66586 66783])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [66786 67158])
            ("fancy-splash-insert" function (:arguments ("args")) nil [67229 68625])
            ("declare-function" code nil nil [68627 68696])
            ("fancy-splash-image-file" function nil nil [68698 69177])
            ("fancy-splash-head" function nil nil [69179 70195])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [70197 73336])
            ("exit-splash-screen" function (:user-visible-flag t) nil [73338 73447])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [73449 74880])
            ("fancy-about-screen" function nil nil [74882 75640])
            ("fancy-splash-frame" function nil nil [75642 76238])
            ("use-fancy-splash-screens-p" function nil nil [76240 77055])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [77058 79564])
            ("normal-mouse-startup-screen" function nil nil [79566 81372])
            ("normal-no-mouse-startup-screen" function nil nil [81374 85503])
            ("normal-about-screen" function nil nil [85505 86966])
            ("startup-echo-area-message" function nil nil [86968 87165])
            ("display-startup-echo-area-message" function nil nil [87167 88431])
            ("display-startup-screen" function (:arguments ("concise")) nil [88433 88885])
            ("display-about-screen" function (:user-visible-flag t) nil [88887 89133])
            ("defalias" code nil nil [89135 89180])
            ("defalias" code nil nil [89181 89238])
            ("command-line-1" function (:arguments ("args-left")) nil [89240 105981])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [105983 106715]))          
      :file "startup.el.gz"
      :pointmax 106742
      :fsize 29168
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dbus" include nil nil [1262 1277])
            ("notifications-specification-version" variable
               (:constant-flag t
                :default-value "1.2")
                nil [1279 1403])
            ("notifications-application-name" variable
               (:constant-flag t
                :default-value "Emacs")
                nil [1405 1484])
            ("notifications-application-icon" variable
               (:constant-flag t
                :default-value (expand-file-name "images/icons/hicolor/scalable/apps/emacs.svg" data-directory))
                nil [1486 1646])
            ("notifications-service" variable
               (:constant-flag t
                :default-value "org.freedesktop.Notifications")
                nil [1648 1750])
            ("notifications-path" variable
               (:constant-flag t
                :default-value "/org/freedesktop/Notifications")
                nil [1752 1852])
            ("notifications-interface" variable
               (:constant-flag t
                :default-value "org.freedesktop.Notifications")
                nil [1854 1963])
            ("notifications-notify-method" variable
               (:constant-flag t
                :default-value "Notify")
                nil [1965 2051])
            ("notifications-close-notification-method" variable
               (:constant-flag t
                :default-value "CloseNotification")
                nil [2053 2174])
            ("notifications-get-capabilities-method" variable
               (:constant-flag t
                :default-value "GetCapabilities")
                nil [2176 2291])
            ("notifications-get-server-information-method" variable
               (:constant-flag t
                :default-value "GetServerInformation")
                nil [2293 2425])
            ("notifications-action-signal" variable
               (:constant-flag t
                :default-value "ActionInvoked")
                nil [2427 2520])
            ("notifications-closed-signal" variable
               (:constant-flag t
                :default-value "NotificationClosed")
                nil [2522 2620])
            ("notifications-closed-reason" variable
               (:constant-flag t
                :default-value (quote ((1 expired) (2 dismissed) (3 close-notification) (4 undefined))))
                nil [2622 2796])
            ("notifications-on-action-map" variable nil nil [2798 2902])
            ("notifications-on-action-object" variable nil nil [2904 2991])
            ("notifications-on-close-map" variable nil nil [2993 3095])
            ("notifications-on-close-object" variable nil nil [3097 3182])
            ("notifications-on-action-signal" function (:arguments ("id" "action")) nil [3184 3800])
            ("notifications-on-closed-signal" function (:arguments ("id" "reason")) nil [3802 4624])
            ("notifications-notify" function (:arguments ("params")) nil [4626 13580])
            ("notifications-close-notification" function (:arguments ("id" "bus")) nil [13582 14017])
            ("dbus-debug" variable nil nil [14019 14038])
            ("notifications-get-capabilities" function (:arguments ("bus")) nil [14091 15529])
            ("notifications-get-server-information" function (:arguments ("bus")) nil [15531 16416])
            ("notifications" package nil nil [16418 16442]))          
      :file "notifications.el.gz"
      :pointmax 16443
      :fsize 4606
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("name-last-kbd-macro" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [1198 1910])
            ("insert-kbd-macro" function
               (:user-visible-flag t
                :arguments ("macroname" "keys"))
                nil [1927 5347])
            ("kbd-macro-query" function
               (:user-visible-flag t
                :arguments ("flag"))
                nil [5364 7635])
            ("apply-macro-to-region-lines" function
               (:user-visible-flag t
                :arguments ("top" "bottom" "macro"))
                nil [7652 9757])
            ("macros" package nil nil [9819 9836]))          
      :file "macros.el.gz"
      :pointmax 9862
      :fsize 3404
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("button" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [2216 2310])
            ("button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(control 109)] (quote push-button)) (define-key map [mouse-2] (quote push-button)) (define-key map [mode-line mouse-2] (quote push-button)) (define-key map [header-line mouse-2] (quote push-button)) map)) nil [2312 2923])
            ("button-buffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [9] (quote forward-button)) (define-key map "	" (quote backward-button)) (define-key map [backtab] (quote backward-button)) map)) nil [2925 3249])
            ("put" code nil nil [3285 3320])
            ("put" code nil nil [3321 3365])
            ("put" code nil nil [3366 3406])
            ("put" code nil nil [3407 3442])
            ("put" code nil nil [3508 3545])
            ("put" code nil nil [3546 3622])
            ("put" code nil nil [3692 3726])
            ("put" code nil nil [3822 3861])
            ("put" code nil nil [3923 3976])
            ("button-category-symbol" function (:arguments ("type")) nil [4537 4807])
            ("define-button-type" function (:arguments ("name" "properties")) nil [4809 6447])
            ("button-type-put" function (:arguments ("type" "prop" "val")) nil [6449 6588])
            ("button-type-get" function (:arguments ("type" "prop")) nil [6590 6721])
            ("button-type-subtype-p" function (:arguments ("type" "supertype")) nil [6723 6951])
            ("button-start" function (:arguments ("button")) nil [6998 7244])
            ("button-end" function (:arguments ("button")) nil [7246 7477])
            ("button-get" function (:arguments ("button" "prop")) nil [7479 7808])
            ("button-put" function (:arguments ("button" "prop" "val")) nil [7810 8779])
            ("button-activate" function (:arguments ("button" "use-mouse-action")) nil [8781 9611])
            ("button-label" function (:arguments ("button")) nil [9613 9867])
            ("button-type" function (:arguments ("button")) nil [9869 9961])
            ("button-has-type-p" function (:arguments ("button" "type")) nil [9963 10131])
            ("button--area-button-p" function (:arguments ("b")) nil [10133 10312])
            ("defalias" code nil nil [10314 10405])
            ("make-button" function (:arguments ("beg" "end" "properties")) nil [10437 11365])
            ("insert-button" function (:arguments ("label" "properties")) nil [11367 11834])
            ("make-text-button" function (:arguments ("beg" "end" "properties")) nil [11873 14084])
            ("insert-text-button" function (:arguments ("label" "properties")) nil [14086 14771])
            ("button-at" function (:arguments ("pos")) nil [14807 15197])
            ("next-button" function (:arguments ("pos" "count-current")) nil [15199 15765])
            ("previous-button" function (:arguments ("pos" "count-current")) nil [15767 16774])
            ("push-button" function
               (:user-visible-flag t
                :arguments ("pos" "use-mouse-action"))
                nil [16796 18128])
            ("forward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [18130 19649])
            ("backward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [19651 20155])
            ("button" package nil nil [20158 20175]))          
      :file "button.el.gz"
      :pointmax 20201
      :fsize 6041
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("thingatpt" package nil nil [2019 2039])
            ("forward-thing" function (:arguments ("thing" "n")) nil [2075 2590])
            ("bounds-of-thing-at-point" function (:arguments ("thing")) nil [2628 4662])
            ("thing-at-point" function (:arguments ("thing" "no-properties")) nil [4679 5540])
            ("beginning-of-thing" function (:arguments ("thing")) nil [5566 5832])
            ("end-of-thing" function (:arguments ("thing")) nil [5834 6088])
            ("put" code nil nil [6221 6313])
            ("in-string-p" function nil nil [6326 6580])
            ("thing-at-point--end-of-sexp" function nil nil [6582 6844])
            ("define-obsolete-function-alias" code nil nil [6846 6996])
            ("put" code nil nil [6998 7046])
            ("thing-at-point--beginning-of-sexp" function nil nil [7048 7329])
            ("define-obsolete-function-alias" code nil nil [7331 7493])
            ("put" code nil nil [7495 7555])
            ("put" code nil nil [7568 7645])
            ("thing-at-point-bounds-of-list-at-point" function nil nil [7647 8149])
            ("put" code nil nil [8162 8208])
            ("put" code nil nil [8209 8249])
            ("put" code nil nil [8250 8290])
            ("thing-at-point-file-name-chars" variable (:default-value "-~/[:alnum:]_.${}#%,:") nil [8307 8409])
            ("put" code nil nil [8411 8541])
            ("put" code nil nil [8542 8731])
            ("thing-at-point-beginning-of-url-regexp" variable nil nil [8743 8914])
            ("thing-at-point-url-path-regexp" variable (:default-value "[^]	
 \"'<>[^`{}]*[^]	
 \"'<>[^`{}.,;]+") nil [8916 9070])
            ("thing-at-point-short-url-regexp" variable (:default-value (concat "[-A-Za-z0-9]+\\.[-A-Za-z0-9.]+" thing-at-point-url-path-regexp)) nil [9072 9241])
            ("thing-at-point-uri-schemes" variable (:default-value (quote ("aaa://" "about:" "acap://" "apt:" "bzr://" "bzr+ssh://" "attachment:/" "chrome://" "cid:" "content://" "crid://" "cvs://" "data:" "dav:" "dict://" "doi:" "dns:" "dtn:" "feed:" "file:/" "finger://" "fish://" "ftp://" "geo:" "git://" "go:" "gopher://" "h323:" "http://" "https://" "im:" "imap://" "info:" "ipp:" "irc://" "irc6://" "ircs://" "iris.beep:" "jar:" "ldap://" "ldaps://" "magnet:" "mailto:" "mid:" "mtqp://" "mupdate://" "news:" "nfs://" "nntp://" "opaquelocktoken:" "pop://" "pres:" "resource://" "rmi://" "rsync://" "rtsp://" "rtspu://" "service:" "sftp://" "sip:" "sips:" "smb://" "sms:" "snmp://" "soap.beep://" "soap.beeps://" "ssh://" "svn://" "svn+ssh://" "tag:" "tel:" "telnet://" "tftp://" "tip://" "tn3270://" "udp://" "urn:" "uuid:" "vemmi://" "webcal://" "xri://" "xmlrpc.beep://" "xmlrpc.beeps://" "z39.50r://" "z39.50s://" "xmpp:" "fax:" "man:" "mms://" "mmsh://" "modem:" "prospero:" "snews:" "wais://"))) nil [9243 10597])
            ("thing-at-point-markedup-url-regexp" variable (:default-value "<URL:\\([^<>
]+\\)>") nil [10599 10884])
            ("thing-at-point-newsgroup-regexp" variable (:default-value "\\`[[:lower:]]+\\.[-+[:lower:]_0-9.]+\\'") nil [10886 11009])
            ("thing-at-point-newsgroup-heads" variable (:default-value (quote ("alt" "comp" "gnu" "misc" "news" "sci" "soc" "talk"))) nil [11011 11172])
            ("thing-at-point-default-mail-uri-scheme" variable (:default-value "mailto") nil [11174 11343])
            ("put" code nil nil [11345 11420])
            ("thing-at-point-bounds-of-url-at-point" function (:arguments ("lax")) nil [11422 12623])
            ("thing-at-point--bounds-of-markedup-url" function nil nil [12625 13134])
            ("thing-at-point--bounds-of-well-formed-url" function (:arguments ("beg" "end" "pt")) nil [13136 14413])
            ("put" code nil nil [14415 14470])
            ("thing-at-point-url-at-point" function (:arguments ("lax" "bounds")) nil [14472 16906])
            ("thing-at-point-newsgroup-p" function (:arguments ("string")) nil [16908 17801])
            ("put" code nil nil [17803 17853])
            ("put" code nil nil [17855 17911])
            ("thing-at-point-looking-at" function (:arguments ("regexp" "distance")) nil [18316 19837])
            ("thing-at-point-email-regexp" variable (:default-value "<?[-+_.~a-zA-Z][-+_.~:a-zA-Z0-9]*@[-.a-zA-Z0-9]+>?") nil [19860 20105])
            ("put" code nil nil [20348 20641])
            ("put" code nil nil [20643 20881])
            ("put" code nil nil [20895 20952])
            ("put" code nil nil [20953 21016])
            ("word-at-point" function nil nil [21031 21133])
            ("sentence-at-point" function nil nil [21135 21249])
            ("thing-at-point--read-from-whole-string" function (:arguments ("str")) nil [21251 21720])
            ("define-obsolete-function-alias" code nil nil [21722 21894])
            ("form-at-point" function (:arguments ("thing" "pred")) nil [21896 22103])
            ("sexp-at-point" function nil nil [22120 22223])
            ("symbol-at-point" function nil nil [22239 22395])
            ("number-at-point" function nil nil [22411 22527])
            ("put" code nil nil [22528 22574])
            ("list-at-point" function nil nil [22590 22705]))          
      :file "thingatpt.el.gz"
      :pointmax 22734
      :fsize 7340
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("password-cache" variable (:default-value t) nil [1646 1742])
            ("password-cache-expiry" variable (:default-value 16) nil [1759 2027])
            ("password-data" variable (:default-value (make-vector 7 0)) nil [2029 2069])
            ("password-read-from-cache" function (:arguments ("key")) nil [2071 2350])
            ("password-in-cache-p" function (:arguments ("key")) nil [2367 2507])
            ("password-read" function (:arguments ("prompt" "key")) nil [2509 2900])
            ("password-read-and-add" function (:arguments ("prompt" "key")) nil [2902 3601])
            ("password-cache-remove" function (:arguments ("key")) nil [3603 4249])
            ("password-cache-add" function (:arguments ("key" "password")) nil [4251 4597])
            ("password-reset" function (:user-visible-flag t) nil [4599 4700])
            ("password-cache" package nil nil [4702 4727]))          
      :file "password-cache.el.gz"
      :pointmax 4761
      :fsize 1808
      :lastmodtime '(22387 39326 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs!25.1!share!emacs!25.1!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
