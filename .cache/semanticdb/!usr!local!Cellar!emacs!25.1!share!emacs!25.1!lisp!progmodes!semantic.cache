;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subword-forward-function" variable (:default-value (quote subword-forward-internal)) nil [2556 2666])
            ("subword-backward-function" variable (:default-value (quote subword-backward-internal)) nil [2668 2781])
            ("subword-forward-regexp" variable (:default-value "\\W*\\(\\([[:upper:]]*\\(\\W\\)?\\)[[:lower:][:digit:]]*\\)") nil [2783 2925])
            ("subword-backward-regexp" variable (:default-value "\\(\\(\\W\\|[[:lower:][:digit:]]\\)\\([[:upper:]]+\\W*\\)\\|\\W\\w+\\)") nil [2927 3082])
            ("subword-mode-map" variable (:default-value (make-sparse-keymap)) nil [3084 3333])
            ("define-obsolete-function-alias" code nil nil [3350 3429])
            ("define-minor-mode" code nil nil [3446 4603])
            ("define-obsolete-function-alias" code nil nil [4605 4674])
            ("define-global-minor-mode" code nil nil [4691 4803])
            ("subword-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5191 5656])
            ("put" code nil nil [5658 5691])
            ("subword-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5693 5961])
            ("subword-right" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5963 6187])
            ("subword-left" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6189 6411])
            ("subword-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6413 6928])
            ("put" code nil nil [6930 6964])
            ("subword-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6966 7222])
            ("subword-backward-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7224 7486])
            ("subword-transpose" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7488 7756])
            ("subword-downcase" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7758 8103])
            ("subword-upcase" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8105 8442])
            ("subword-capitalize" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8444 9280])
            ("superword-mode-map" variable (:default-value subword-mode-map) nil [9285 9377])
            ("define-minor-mode" code nil nil [9394 9980])
            ("define-global-minor-mode" code nil nil [9997 10115])
            ("subword-forward-internal" function nil nil [10147 10867])
            ("subword-backward-internal" function nil nil [10869 11364])
            ("subword-find-word-boundary-function-table" variable
               (:constant-flag t
                :default-value (let ((tab (make-char-table nil))) (set-char-table-range tab t (function subword-find-word-boundary)) tab))
                nil [11366 11658])
            ("subword-empty-char-table" variable
               (:constant-flag t
                :default-value (make-char-table nil))
                nil [11660 11841])
            ("subword-setup-buffer" function nil nil [11843 12071])
            ("subword-find-word-boundary" function (:arguments ("pos" "limit")) nil [12073 12667])
            ("subword" package nil nil [12672 12690])
            ("superword" package nil nil [12691 12711])
            ("cap-words" package nil nil [12712 12732]))          
      :file "subword.el.gz"
      :pointmax 12776
      :fsize 3687
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subr-x" include nil nil [1195 1212])
            ("cl-lib" include nil nil [1158 1175])
            ("prog-mode" customgroup (:user-visible-flag t) nil [1215 1315])
            ("prog-mode-hook" variable nil nil [1317 1557])
            ("prog-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [134217745] (quote prog-indent-sexp)) map)) nil [1559 1715])
            ("prog-indent-sexp" function
               (:user-visible-flag t
                :arguments ("defun"))
                nil [1717 2082])
            ("defvar-local" code nil nil [2084 2467])
            ("prettify-symbols-default-compose-p" function (:arguments ("start" "end" "_match")) nil [2469 3280])
            ("defvar-local" code nil nil [3282 3623])
            ("prettify-symbols--compose-symbol" function (:arguments ("alist")) nil [3625 4788])
            ("prettify-symbols--make-keywords" function nil nil [4790 5007])
            ("defvar-local" code nil nil [5009 5054])
            ("defvar-local" code nil nil [5056 5114])
            ("prettify-symbols-unprettify-at-point" variable nil nil [5116 5753])
            ("prettify-symbols--post-command-hook" function nil nil [5755 7069])
            ("define-minor-mode" code nil nil [7086 9135])
            ("turn-on-prettify-symbols-mode" function nil nil [9137 9306])
            ("define-globalized-minor-mode" code nil nil [9323 9436])
            ("define-derived-mode" code nil nil [9453 9789])
            ("prog-mode" package nil nil [9791 9811]))          
      :file "prog-mode.el.gz"
      :pointmax 9840
      :fsize 3313
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax '((close-paren 1212 . 1213) (symbol 1140 . 1157) (open-paren 1139 . 1140)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("custom" include nil nil [3700 3717])
            ("font-lock" include nil nil [3718 3738])
            ("cc-mode" include nil nil [3739 3757])
            ("cwarn" customgroup (:user-visible-flag t) nil [3782 3886])
            ("cwarn-configuration" variable (:default-value (quote ((c-mode (not reference)) (c++-mode t)))) nil [3888 4428])
            ("cwarn-font-lock-feature-keywords-alist" variable (:default-value (quote ((assign . cwarn-font-lock-assignment-keywords) (semicolon . cwarn-font-lock-semicolon-keywords) (reference . cwarn-font-lock-reference-keywords)))) nil [4430 5000])
            ("cwarn-verbose" variable (:default-value t) nil [5002 5198])
            ("cwarn-mode-text" variable (:default-value " CWarn") nil [5200 5482])
            ("cwarn-load-hook" variable nil nil [5484 5618])
            ("define-minor-mode" code nil nil [5658 6243])
            ("define-obsolete-function-alias" code nil nil [6260 6331])
            ("cwarn-is-enabled" function (:arguments ("mode" "feature")) nil [6361 7001])
            ("cwarn-inside-macro" function nil nil [7003 7248])
            ("cwarn-font-lock-keywords" function (:arguments ("addp")) nil [7250 7712])
            ("cwarn-font-lock-match" function (:arguments ("re" "body")) nil [8618 9014])
            ("cwarn-font-lock-assignment-keywords" variable
               (:constant-flag t
                :default-value (quote ((cwarn-font-lock-match-assignment-in-expression (1 font-lock-warning-face)))))
                nil [9049 9181])
            ("cwarn-font-lock-match-assignment-in-expression" function (:arguments ("limit")) nil [9183 9617])
            ("cwarn-font-lock-semicolon-keywords" variable
               (:constant-flag t
                :default-value (quote ((cwarn-font-lock-match-dangerous-semicolon (0 font-lock-warning-face)))))
                nil [9642 9763])
            ("cwarn-font-lock-match-dangerous-semicolon" function (:arguments ("limit")) nil [9765 10242])
            ("cwarn-font-lock-reference-keywords" variable
               (:constant-flag t
                :default-value (quote ((cwarn-font-lock-match-reference (1 font-lock-warning-face)))))
                nil [10267 10378])
            ("cwarn-font-lock-match-reference" function (:arguments ("limit")) nil [10380 10633])
            ("turn-on-cwarn-mode-if-enabled" function nil nil [10663 10918])
            ("define-globalized-minor-mode" code nil nil [10935 11026])
            ("cwarn" package nil nil [11028 11044])
            ("run-hooks" code nil nil [11046 11074]))          
      :file "cwarn.el.gz"
      :pointmax 11106
      :fsize 4286
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("glasses" customgroup (:user-visible-flag t) nil [2364 2469])
            ("glasses-separator" variable (:default-value "_") nil [2472 2982])
            ("glasses-original-separator" variable (:default-value "_") nil [2985 3433])
            ("glasses-face" variable nil nil [3436 3915])
            ("glasses-separate-parentheses-p" variable (:default-value t) nil [3918 4076])
            ("glasses-separate-parentheses-exceptions" variable (:default-value (quote ("^#[	 ]*define[	 ]*[A-Za-z0-9_-]* ?($"))) nil [4078 4396])
            ("glasses-separate-capital-groups" variable (:default-value t) nil [4398 4724])
            ("glasses-uncapitalize-p" variable nil nil [4726 5045])
            ("glasses-uncapitalize-regexp" variable (:default-value "[a-z]") nil [5048 5409])
            ("glasses-convert-on-write-p" variable nil nil [5412 5833])
            ("glasses-custom-set" function (:arguments ("symbol" "value")) nil [5836 6079])
            ("glasses-parenthesis-exception-p" function (:arguments ("beg" "end")) nil [6105 6466])
            ("glasses-set-overlay-properties" function nil nil [6468 6955])
            ("glasses-set-overlay-properties" code nil nil [6957 6989])
            ("glasses-overlay-p" function (:arguments ("overlay")) nil [6992 7171])
            ("glasses-make-overlay" function (:arguments ("beg" "end" "category")) nil [7174 7497])
            ("glasses-make-readable" function (:arguments ("beg" "end")) nil [7500 9566])
            ("glasses-make-unreadable" function (:arguments ("beg" "end")) nil [9569 9785])
            ("glasses-convert-to-unreadable" function nil nil [9788 11118])
            ("glasses-change" function (:arguments ("beg" "end" "_old-len")) nil [11121 11462])
            ("define-minor-mode" code nil nil [11508 12377])
            ("glasses" package nil nil [12394 12412]))          
      :file "glasses.el.gz"
      :pointmax 12440
      :fsize 4089
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [1829 1846])
            ("gdb-active-process" variable nil nil [1848 1875])
            ("gdb-define-alist" variable nil nil [1876 1901])
            ("gdb-macro-info" variable nil nil [1902 1925])
            ("gdb-show-changed-values" variable nil nil [1926 1958])
            ("gdb-source-window" variable nil nil [1959 1985])
            ("gdb-var-list" variable nil nil [1986 2007])
            ("hl-line-mode" variable nil nil [2008 2029])
            ("hl-line-sticky-flag" variable nil nil [2030 2058])
            ("gud" customgroup (:user-visible-flag t) nil [2196 2375])
            ("gud-key-prefix" variable (:default-value "") nil [2378 2502])
            ("global-set-key" code nil nil [2504 2565])
            ("gud-marker-filter" variable nil nil [2637 2667])
            ("put" code nil nil [2668 2711])
            ("gud-find-file" variable nil nil [2712 2738])
            ("put" code nil nil [2739 2778])
            ("gud-marker-filter" function (:arguments ("args")) nil [2780 2851])
            ("gud-minor-mode" variable nil nil [2853 2880])
            ("put" code nil nil [2881 2921])
            ("gud-comint-buffer" variable nil nil [2923 2953])
            ("gud-keep-buffer" variable nil nil [2955 2983])
            ("gud-symbol" function (:arguments ("sym" "soft" "minor-mode")) nil [2985 3418])
            ("gud-val" function (:arguments ("sym" "minor-mode")) nil [3420 3608])
            ("gud-running" variable nil nil [3610 3719])
            ("gud-target-name" variable (:default-value "--unknown--") nil [3721 3828])
            ("gud-goto-info" function (:user-visible-flag t) nil [3872 4084])
            ("gud-tool-bar-item-visible-no-fringe" function nil nil [4086 4357])
            ("declare-function" code nil nil [4359 4413])
            ("gud-stop-subjob" function nil nil [4415 4808])
            ("easy-mmode-defmap" code nil nil [4810 8191])
            ("easy-mmode-defmap" code nil nil [8193 9994])
            ("setf" code nil nil [9996 10076])
            ("gud-mode-map" variable (:default-value (make-sparse-keymap)) nil [10078 10205])
            ("gud-tool-bar-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (x (quote ((gud-break . "gud/break") (gud-remove . "gud/remove") (gud-print . "gud/print") (gud-pstar . "gud/pstar") (gud-pp . "gud/pp") (gud-watch . "gud/watch") (gud-run . "gud/run") (gud-go . "gud/go") (gud-stop-subjob . "gud/stop") (gud-cont . "gud/cont") (gud-until . "gud/until") (gud-next . "gud/next") (gud-step . "gud/step") (gud-finish . "gud/finish") (gud-nexti . "gud/nexti") (gud-stepi . "gud/stepi") (gud-up . "gud/up") (gud-down . "gud/down") (gud-goto-info . "info"))) map) (tool-bar-local-item-from-menu (car x) (cdr x) map gud-minor-mode-map)))) nil [10207 10911])
            ("gud-file-name" function (:arguments ("f")) nil [10913 11666])
            ("declare-function" code nil nil [11668 11722])
            ("gud-find-file" function (:arguments ("file")) nil [11724 12638])
            ("gud-def" function (:arguments ("func" "cmd" "key" "doc")) nil [13208 14598])
            ("gud-last-frame" variable nil nil [14818 14845])
            ("gud-last-last-frame" variable nil nil [15015 15047])
            ("dframe" include nil nil [16159 16176])
            ("gud-last-speedbar-stackframe" variable nil nil [16213 16383])
            ("gud-speedbar-key-map" variable nil nil [16385 16468])
            ("declare-function" code nil nil [16529 16588])
            ("gud-speedbar-item-info" function nil nil [16590 16864])
            ("declare-function" code nil nil [16866 16931])
            ("declare-function" code nil nil [16932 17000])
            ("speedbar-mode-functions-list" variable nil nil [17001 17038])
            ("gud-install-speedbar-variables" function nil nil [17040 17892])
            ("gud-speedbar-menu-items" variable (:default-value (quote (["Jump to stack frame" speedbar-edit-line :visible (not (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi)))] ["Edit value" speedbar-edit-line :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi))] ["Delete expression" gdb-var-delete :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi))] ["Auto raise frame" gdb-speedbar-auto-raise :style toggle :selected gdb-speedbar-auto-raise :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi))] ("Output Format" :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi)) ["Binary" (gdb-var-set-format "binary") t] ["Natural" (gdb-var-set-format "natural") t] ["Hexadecimal" (gdb-var-set-format "hexadecimal") t])))) nil [17894 18831])
            ("if" code nil nil [18882 19009])
            ("gud-expansion-speedbar-buttons" function (:arguments ("_directory" "_zero")) nil [19011 19231])
            ("declare-function" code nil nil [19233 19353])
            ("declare-function" code nil nil [19354 19453])
            ("declare-function" code nil nil [19454 19562])
            ("gud-speedbar-buttons" function (:arguments ("buffer")) nil [19564 23289])
            ("gud-gdb-history" variable nil nil [23429 23457])
            ("gud-gud-gdb-command-name" variable (:default-value "gdb --fullname") nil [23459 23675])
            ("gud-gdb-marker-regexp" variable (:default-value (concat "\\(.:?[^" ":" "
]*\\)" ":" "\\([0-9]*\\)" ":" ".*
")) nil [23677 23924])
            ("gud-marker-acc" variable nil nil [24270 24296])
            ("make-variable-buffer-local" code nil nil [24297 24341])
            ("gud-gdb-marker-filter" function (:arguments ("string")) nil [24343 26266])
            ("easy-mmode-defmap" code nil nil [26268 26453])
            ("gud-query-cmdline" function (:arguments ("minor-mode" "init")) nil [26455 27148])
            ("gdb-first-prompt" variable (:default-value t) nil [27150 27177])
            ("gud-filter-pending-text" variable nil nil [27179 27293])
            ("gud-gdb-completion-function" variable nil nil [27497 27753])
            ("declare-function" code nil nil [27792 27842])
            ("gud-gdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [27933 30768])
            ("gud-gdb-fetch-lines-in-progress" variable nil nil [30834 30874])
            ("gud-gdb-fetch-lines-string" variable nil nil [30953 30988])
            ("gud-gdb-fetch-lines-break" variable nil nil [31049 31083])
            ("gud-gdb-fetched-lines" variable nil nil [31146 31176])
            ("gud-gdb-completions" function (:arguments ("context" "command")) nil [31178 31802])
            ("gud-gdb-completions-1" function (:arguments ("complete-list")) nil [31862 32696])
            ("gud-gdb-completion-at-point" function nil nil [32698 33708])
            ("gud-gdb-fetch-lines-filter" function (:arguments ("string")) nil [34147 34831])
            ("declare-function" code nil nil [34982 35056])
            ("declare-function" code nil nil [35057 35124])
            ("gud-gdb-goto-stackframe" function (:arguments ("_text" "token" "_indent")) nil [35126 35347])
            ("gud-gdb-fetched-stack-frame" variable nil nil [35349 35432])
            ("gud-gdb-get-stackframe" function (:arguments ("buffer")) nil [35434 36547])
            ("gud-gdb-run-command-fetch-lines" function (:arguments ("command" "buffer" "skip")) nil [36677 37594])
            ("gud-sdb-history" variable nil nil [37734 37762])
            ("gud-sdb-needs-tags" variable (:default-value (not (file-exists-p "/var"))) nil [37764 37892])
            ("gud-sdb-lastfile" variable nil nil [37894 37923])
            ("gud-sdb-marker-filter" function (:arguments ("string")) nil [37925 39540])
            ("gud-sdb-find-file" function (:arguments ("f")) nil [39542 39642])
            ("sdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [39659 41004])
            ("gud-dbx-history" variable nil nil [41143 41171])
            ("gud-dbx-directories" variable nil nil [41173 41561])
            ("gud-dbx-massage-args" function (:arguments ("_file" "args")) nil [41563 41837])
            ("gud-dbx-marker-filter" function (:arguments ("string")) nil [41839 42919])
            ("gud-mips-p" variable (:default-value (or (string-match "^mips-[^-]*-ultrix" system-configuration) (string-match "^mips-[^-]*-riscos" system-configuration) (string-match "^mips-[^-]*-osf1" system-configuration) (string-match "^alpha[^-]*-[^-]*-osf" system-configuration))) nil [43070 43498])
            ("gud-dbx-command-name" variable (:default-value (concat "dbx" (if gud-mips-p " -emacs"))) nil [43500 43572])
            ("gud-mipsdbx-marker-filter" function (:arguments ("string")) nil [43712 45369])
            ("gud-irix-p" variable (:default-value (and (string-match "^mips-[^-]*-irix" system-configuration) (not (string-match "irix[6-9]\\.[1-9]" system-configuration)))) nil [46361 46679])
            ("gud-dbx-use-stopformat-p" variable (:default-value (string-match "irix[6-9]\\.[1-9]" system-configuration)) nil [46680 46926])
            ("gud-irixdbx-marker-filter" function (:arguments ("string")) nil [48172 49888])
            ("gud-dguxdbx-marker-filter" function (:arguments ("string")) nil [50515 51549])
            ("dbx" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [51566 54186])
            ("gud-xdb-history" variable nil nil [54347 54375])
            ("gud-xdb-directories" variable nil nil [54377 54765])
            ("gud-xdb-massage-args" function (:arguments ("_file" "args")) nil [54767 55041])
            ("gud-xdb-marker-filter" function (:arguments ("string")) nil [55118 55852])
            ("xdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [55869 57281])
            ("gud-perldb-history" variable nil nil [57426 57457])
            ("gud-perldb-massage-args" function (:arguments ("_file" "args")) nil [57459 58770])
            ("gud-perldb-marker-filter" function (:arguments ("string")) nil [59116 61610])
            ("gud-perldb-command-name" variable (:default-value "perl -d") nil [61612 61748])
            ("perldb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [61765 63128])
            ("gud-pdb-history" variable nil nil [63285 63313])
            ("gud-pdb-marker-regexp" variable (:default-value "^> \\([-a-zA-Z0-9_/.:\\]*\\|<string>\\)(\\([0-9]+\\))\\([a-zA-Z0-9_]*\\|\\?\\|<module>\\)()\\(->[^
]*\\)?[
]") nil [63448 63597])
            ("gud-pdb-marker-regexp-file-group" variable (:default-value 1) nil [63599 63642])
            ("gud-pdb-marker-regexp-line-group" variable (:default-value 2) nil [63643 63686])
            ("gud-pdb-marker-regexp-fnname-group" variable (:default-value 3) nil [63687 63732])
            ("gud-pdb-marker-regexp-start" variable (:default-value "^> ") nil [63734 63776])
            ("gud-pdb-marker-filter" function (:arguments ("string")) nil [64122 65932])
            ("gud-pdb-command-name" variable (:default-value "pdb") nil [65934 66120])
            ("pdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [66137 67452])
            ("gud-guiler-history" variable nil nil [67610 67641])
            ("gud-guiler-lastfile" variable nil nil [67643 67675])
            ("gud-guiler-marker-filter" function (:arguments ("string")) nil [67677 69015])
            ("gud-guiler-command-name" variable (:default-value "guile") nil [69018 69226])
            ("guiler" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [69243 70744])
            ("gud-jdb-command-name" variable (:default-value "jdb") nil [74102 74215])
            ("gud-jdb-use-classpath" variable (:default-value t) nil [74217 74931])
            ("gud-jdb-classpath" variable nil nil [74933 75872])
            ("gud-jdb-sourcepath" variable nil nil [75874 76095])
            ("gud-marker-acc-max-length" variable (:default-value 4000) nil [76097 76341])
            ("gud-jdb-history" variable nil nil [76343 76416])
            ("gud-jdb-directories" variable (:default-value (list ".")) nil [76460 77042])
            ("gud-jdb-source-files" variable nil nil [77044 77139])
            ("gud-jdb-class-source-alist" variable nil nil [77242 77351])
            ("gud-jdb-analysis-buffer" variable nil nil [77408 77444])
            ("gud-jdb-classpath-string" variable nil nil [77446 77521])
            ("gud-jdb-build-source-files-list" function (:arguments ("path" "extn")) nil [77523 77892])
            ("gud-jdb-skip-whitespace" function nil nil [77925 77996])
            ("gud-jdb-skip-single-line-comment" function nil nil [78047 78106])
            ("gud-jdb-skip-traditional-or-documentation-comment" function nil nil [78166 78489])
            ("gud-jdb-skip-whitespace-and-comments" function nil nil [78570 78916])
            ("gud-jdb-skip-id-ish-thing" function nil nil [79078 79156])
            ("gud-jdb-skip-string-literal" function nil nil [79195 79400])
            ("gud-jdb-skip-character-literal" function nil nil [79442 79647])
            ("gud-jdb-skip-block" function nil nil [79827 81088])
            ("gud-jdb-analyze-source" function (:arguments ("buf" "file")) nil [81280 83480])
            ("gud-jdb-build-class-source-alist-for-file" function (:arguments ("file")) nil [83482 83641])
            ("gud-jdb-build-class-source-alist" function (:arguments ("sources")) nil [83801 84113])
            ("gud-jdb-massage-args" function (:arguments ("_file" "args")) nil [84215 85878])
            ("gud-jdb-find-source-file" function (:arguments ("p")) nil [86082 86163])
            ("gud-jdb-lowest-stack-level" variable (:default-value 999) nil [86222 86261])
            ("gud-jdb-find-source-using-classpath" function (:arguments ("p")) nil [86263 87190])
            ("gud-jdb-find-source" function (:arguments ("_string")) nil [87192 87439])
            ("gud-jdb-parse-classpath-string" function (:arguments ("string")) nil [87441 87761])
            ("gud-jdb-marker-filter" function (:arguments ("string")) nil [87872 92003])
            ("gud-jdb-command-name" variable (:default-value "jdb") nil [92005 92083])
            ("jdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [92100 95306])
            ("gud-delete-prompt-marker" variable nil nil [97282 97319])
            ("put" code nil nil [97323 97359])
            ("define-derived-mode" code nil nil [97361 100236])
            ("gud-chdir-before-run" variable (:default-value t) nil [100238 100362])
            ("declare-function" code nil nil [100364 100422])
            ("declare-function" code nil nil [100423 100500])
            ("gud-common-init" function (:arguments ("command-line" "massage-args" "marker-filter" "find-file")) nil [100742 103698])
            ("gud-set-buffer" function nil nil [103700 103807])
            ("gud-filter-defer-flag" variable nil nil [103809 103956])
            ("gud-filter" function (:arguments ("proc" "string")) nil [104134 106429])
            ("gud-minor-mode-type" variable nil nil [106431 106463])
            ("gud-overlay-arrow-position" variable nil nil [106464 106503])
            ("add-to-list" code nil nil [106504 106574])
            ("declare-function" code nil nil [106576 106616])
            ("declare-function" code nil nil [106617 106691])
            ("speedbar-previously-used-expansion-list-name" variable nil nil [106692 106745])
            ("gud-sentinel" function (:arguments ("proc" "msg")) nil [106747 108367])
            ("gud-kill-buffer-hook" function nil nil [108369 108598])
            ("gud-reset" function nil nil [108600 108823])
            ("gud-display-frame" function (:user-visible-flag t) nil [108825 109193])
            ("declare-function" code nil nil [109195 109252])
            ("declare-function" code nil nil [109253 109310])
            ("declare-function" code nil nil [109311 109374])
            ("gud-display-line" function (:arguments ("true-file" "line")) nil [109778 111173])
            ("gud-format-command" function (:arguments ("str" "arg")) nil [111422 113323])
            ("gud-read-address" function nil nil [113325 113936])
            ("gud-call" function (:arguments ("fmt" "arg")) nil [113938 114092])
            ("gud-basic-call" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [114094 115018])
            ("gud-refresh" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [115020 115239])
            ("gud-find-expr-function" variable (:default-value (quote gud-find-c-expr)) nil [115411 115459])
            ("gud-find-expr" function (:arguments ("args")) nil [115461 116194])
            ("gud-find-c-expr" function (:user-visible-flag t) nil [116356 117218])
            ("gud-innermost-expr" function nil nil [117220 117805])
            ("gud-backward-sexp" function nil nil [117807 117946])
            ("gud-forward-sexp" function nil nil [117948 118083])
            ("gud-prev-expr" function nil nil [118085 118537])
            ("gud-next-expr" function nil nil [118539 118994])
            ("gud-expr-compound-sep" function (:arguments ("span-start" "span-end")) nil [118996 119761])
            ("gud-expr-compound" function (:arguments ("first" "second")) nil [119763 120729])
            ("declare-function" code nil nil [120732 120786])
            ("declare-function" code nil nil [120787 120841])
            ("gud-find-class" function (:arguments ("f" "_line")) nil [120843 125219])
            ("gdb-script-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 39 "\"" st) (modify-syntax-entry 35 "<" st) (modify-syntax-entry 10 ">" st) st)) nil [125437 125626])
            ("gdb-script-font-lock-keywords" variable (:default-value (quote (("^define\\s-+\\(\\(\\w\\|\\s_\\)+\\)" (1 font-lock-function-name-face)) ("\\$\\(\\w+\\)" (1 font-lock-variable-name-face)) ("^\\s-*\\(\\w\\(\\w\\|\\s_\\)*\\)" (1 font-lock-keyword-face))))) nil [125628 125867])
            ("gdb-script-syntax-propertize-function" variable
               (:constant-flag t
                :default-value (syntax-propertize-rules ("^document\\s-.*\\(
\\)" (1 "< b")) ("^end\\(\\>\\)" (1 (ignore (when (and (> (match-beginning 0) (point-min)) (eq 1 (nth 7 (save-excursion (syntax-ppss (1- (match-beginning 0))))))) (put-text-property (1- (match-beginning 0)) (match-beginning 0) (quote syntax-table) (eval-when-compile (string-to-syntax "> b"))) (put-text-property (1- (match-beginning 0)) (match-end 0) (quote syntax-multiline) t)))))))
                nil [125869 127186])
            ("gdb-script-font-lock-syntactic-face" function (:arguments ("state")) nil [127188 127357])
            ("gdb-script-basic-indent" variable (:default-value 2) nil [127359 127393])
            ("gdb-script-skip-to-head" function nil nil [127395 127665])
            ("gdb-script-calculate-indentation" function nil nil [127667 128216])
            ("gdb-script-indent-line" function (:user-visible-flag t) nil [128218 128840])
            ("gdb-script-beginning-of-defun" function nil nil [128871 129181])
            ("gdb-script-end-of-defun" function nil nil [129212 129435])
            ("define-derived-mode" code nil nil [129452 130512])
            ("tooltip-mode" variable nil nil [130565 130586])
            ("define-minor-mode" code nil nil [130603 132155])
            ("define-obsolete-variable-alias" code nil nil [132157 132266])
            ("gud-tooltip-modes" variable (:default-value (quote (gud-mode c-mode c++-mode fortran-mode python-mode))) nil [132268 132484])
            ("define-obsolete-variable-alias" code nil nil [132486 132599])
            ("gud-tooltip-display" variable (:default-value (quote ((eq (tooltip-event-buffer gud-tooltip-event) (marker-buffer gud-overlay-arrow-position))))) nil [132601 132975])
            ("gud-tooltip-echo-area" variable nil nil [132977 133121])
            ("make-obsolete-variable" code nil nil [133123 133216])
            ("gud-tooltip-change-major-mode" function nil nil [133251 133442])
            ("gud-tooltip-activate-mouse-motions-if-enabled" function nil nil [133444 133891])
            ("gud-tooltip-mouse-motions-active" variable nil nil [133893 134014])
            ("gud-tooltip-activate-mouse-motions" function (:arguments ("activatep")) nil [134338 134815])
            ("tooltip-last-mouse-motion-event" variable nil nil [134817 134857])
            ("declare-function" code nil nil [134858 134923])
            ("declare-function" code nil nil [134924 134981])
            ("gud-tooltip-mouse-motion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [134983 135258])
            ("gud-tooltip-dereference" variable nil nil [135280 135432])
            ("gud-tooltip-event" variable nil nil [135434 135586])
            ("gud-tooltip-dereference" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [135588 135995])
            ("define-obsolete-function-alias" code nil nil [135997 136125])
            ("tooltip-use-echo-area" variable nil nil [136126 136156])
            ("declare-function" code nil nil [136157 136229])
            ("declare-function" code nil nil [136230 136296])
            ("gud-tooltip-process-output" function (:arguments ("process" "output")) nil [136620 136951])
            ("gud-tooltip-print-command" function (:arguments ("expr")) nil [136953 137263])
            ("declare-function" code nil nil [137265 137338])
            ("declare-function" code nil nil [137339 137397])
            ("declare-function" code nil nil [137398 137455])
            ("gud-tooltip-tips" function (:arguments ("event")) nil [137457 139793])
            ("gud" package nil nil [139795 139809]))          
      :file "gud.el.gz"
      :pointmax 139832
      :fsize 37576
      :lastmodtime '(22432 21609 0 0)
      :unmatched-syntax '((close-paren 16176 . 16177) (symbol 16141 . 16158) (open-paren 16140 . 16141)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("let" code nil nil [2619 2834])
            ("cc-require" code nil nil [2837 2858])
            ("cc-require-when-compile" code nil nil [2859 2894])
            ("cc-require" code nil nil [2895 2916])
            ("cc-require" code nil nil [2917 2940])
            ("cc-require-when-compile" code nil nil [2941 2974])
            ("cc-fonts" package nil nil [3211 3230])
            ("cc-external-require" code nil nil [3232 3264])
            ("cc-bytecomp-defvar" code nil nil [3266 3315])
            ("cc-bytecomp-defvar" code nil nil [3619 3664])
            ("cc-bytecomp-defvar" code nil nil [3665 3707])
            ("cc-bytecomp-defun" code nil nil [3708 3761])
            ("cc-bytecomp-defun" code nil nil [3762 3805])
            ("cc-bytecomp-defun" code nil nil [3806 3849])
            ("cc-bytecomp-defun" code nil nil [3850 3896])
            ("c-preprocessor-face-name" variable
               (:constant-flag t
                :default-value (cond ((c-face-name-p (quote font-lock-preprocessor-face)) (quote font-lock-preprocessor-face)) ((c-face-name-p (quote font-lock-builtin-face)) (quote font-lock-builtin-face)) (t (quote font-lock-reference-face))))
                nil [4081 4451])
            ("cc-bytecomp-defvar" code nil nil [4453 4497])
            ("c-label-face-name" variable
               (:constant-flag t
                :default-value (cond ((c-face-name-p (quote font-lock-label-face)) (quote font-lock-label-face)) ((and (c-face-name-p (quote font-lock-constant-face)) (eq font-lock-constant-face (quote font-lock-constant-face))) (quote font-lock-constant-face)) (t (quote font-lock-reference-face))))
                nil [4499 5081])
            ("c-constant-face-name" variable
               (:constant-flag t
                :default-value (if (and (c-face-name-p (quote font-lock-constant-face)) (eq font-lock-constant-face (quote font-lock-constant-face))) (quote font-lock-constant-face) c-label-face-name))
                nil [5083 5346])
            ("c-reference-face-name" variable
               (:constant-flag t
                :default-value (with-no-warnings (if (and (c-face-name-p (quote font-lock-reference-face)) (eq font-lock-reference-face (quote font-lock-reference-face))) (quote font-lock-reference-face) c-label-face-name)))
                nil [5348 5750])
            ("c-doc-face-name" variable
               (:constant-flag t
                :default-value (cond ((c-face-name-p (quote font-lock-doc-string-face)) (quote font-lock-doc-string-face)) ((c-face-name-p (quote font-lock-doc-face)) (quote font-lock-doc-face)) (t (quote font-lock-comment-face))))
                nil [5868 6107])
            ("c-doc-markup-face-name" variable
               (:constant-flag t
                :default-value (if (c-face-name-p (quote font-lock-doc-markup-face)) (quote font-lock-doc-markup-face) c-label-face-name))
                nil [6109 6374])
            ("c-negation-char-face-name" variable
               (:constant-flag t
                :default-value (if (c-face-name-p (quote font-lock-negation-char-face)) (quote font-lock-negation-char-face)))
                nil [6376 6558])
            ("cc-bytecomp-defun" code nil nil [6560 6600])
            ("c-make-inverse-face" function (:arguments ("oldface" "newface")) nil [6619 7281])
            ("c-annotation-face" variable (:default-value (quote c-annotation-face)) nil [7283 7328])
            ("c-annotation-face" variable
               (:default-value (quote ((default :inherit font-lock-constant-face)))
                :type "face")
                nil [7330 7505])
            ("def-edebug-spec" code nil nil [19721 19839])
            ("def-edebug-spec" code nil nil [19510 19554])
            ("def-edebug-spec" code nil nil [19460 19507])
            ("c-make-font-lock-context-search-function" function (:arguments ("normal" "state-stanzas")) nil [16885 19365])
            ("c-make-font-lock-BO-decl-search-function" function (:arguments ("regexp" "highlights")) nil [14381 16881])
            ("c-make-font-lock-search-function" function (:arguments ("regexp" "highlights")) nil [12525 14377])
            ("c-make-font-lock-search-form" function (:arguments ("regexp" "highlights")) nil [11136 12521])
            ("c-make-syntactic-matcher" function (:arguments ("regexp")) nil [10420 11132])
            ("c-skip-comments-and-strings" function (:arguments ("limit")) nil [9842 10416])
            ("put" code nil nil [9783 9838])
            ("c-fontify-types-and-refs" function (:arguments ("varlist" "body")) nil [9339 9780])
            ("c-put-font-lock-string-face" function (:arguments ("from" "to")) nil [8904 9335])
            ("c-remove-font-lock-face" function (:arguments ("from" "to")) nil [8613 8900])
            ("c-put-font-lock-face" function (:arguments ("from" "to" "face")) nil [8004 8609])
            ("make-variable-buffer-local" code nil nil [7951 8000])
            ("c-font-lock-context" variable nil nil [7916 7948])
            ("c-fontify-recorded-types-and-refs" function nil nil [19845 20652])
            ("c-lang-defconst" code nil nil [20654 26446])
            ("c-font-lock-invalid-string" function nil nil [26448 27565])
            ("c-lang-defconst" code nil nil [27567 33042])
            ("c-font-lock-complex-decl-prepare" function (:arguments ("limit")) nil [33044 35287])
            ("c-font-lock-<>-arglists" function (:arguments ("limit")) nil [35289 38155])
            ("c-font-lock-declarators" function (:arguments ("limit" "list" "types")) nil [38157 42592])
            ("c-font-lock-declarations" function (:arguments ("limit")) nil [42594 57527])
            ("c-font-lock-enum-tail" function (:arguments ("limit")) nil [57529 58508])
            ("c-font-lock-enclosing-decls" function (:arguments ("limit")) nil [58510 59794])
            ("c-lang-defconst" code nil nil [59796 62378])
            ("c-lang-defconst" code nil nil [62380 67883])
            ("c-font-lock-labels" function (:arguments ("limit")) nil [67885 69613])
            ("c-lang-defconst" code nil nil [69615 72524])
            ("c-lang-defconst" code nil nil [72526 72590])
            ("c-lang-defconst" code nil nil [72592 72793])
            ("c-lang-defconst" code nil nil [72795 72997])
            ("c-compose-keywords-list" function (:arguments ("base-list")) nil [72999 74419])
            ("c-override-default-keywords" function (:arguments ("def-var")) nil [74421 75321])
            ("c-override-default-keywords" code nil nil [75333 75384])
            ("c-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 c))
                nil [75386 75595])
            ("c-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 c))
                nil [75597 75950])
            ("c-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 c))
                nil [75952 76244])
            ("c-font-lock-keywords" variable (:default-value c-font-lock-keywords-3) nil [76246 76346])
            ("c-font-lock-keywords-2" function nil nil [76348 76432])
            ("c-font-lock-keywords-3" function nil nil [76433 76517])
            ("c-font-lock-keywords" function nil nil [76518 76598])
            ("c-font-lock-c++-new" function (:arguments ("limit")) nil [76612 81330])
            ("c-override-default-keywords" code nil nil [81332 81385])
            ("c++-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 c++))
                nil [81387 81602])
            ("c++-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 c++))
                nil [81604 81967])
            ("c++-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 c++))
                nil [81969 82271])
            ("c++-font-lock-keywords" variable (:default-value c++-font-lock-keywords-3) nil [82273 82379])
            ("c++-font-lock-keywords-2" function nil nil [82381 82469])
            ("c++-font-lock-keywords-3" function nil nil [82470 82558])
            ("c++-font-lock-keywords" function nil nil [82559 82643])
            ("c-font-lock-objc-method" function nil nil [82665 84168])
            ("c-font-lock-objc-methods" function (:arguments ("limit")) nil [84170 84720])
            ("c-override-default-keywords" code nil nil [84722 84776])
            ("objc-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 objc))
                nil [84778 84999])
            ("objc-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 objc))
                nil [85001 85376])
            ("objc-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 objc))
                nil [85378 85692])
            ("objc-font-lock-keywords" variable (:default-value objc-font-lock-keywords-3) nil [85694 85810])
            ("objc-font-lock-keywords-2" function nil nil [85812 85902])
            ("objc-font-lock-keywords-3" function nil nil [85903 85993])
            ("objc-font-lock-keywords" function nil nil [85994 86080])
            ("when" code nil nil [86353 86561])
            ("c-override-default-keywords" code nil nil [86576 86630])
            ("java-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 java))
                nil [86632 86819])
            ("java-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 java))
                nil [86821 87189])
            ("java-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 java))
                nil [87191 87494])
            ("java-font-lock-keywords" variable (:default-value java-font-lock-keywords-3) nil [87496 87605])
            ("java-font-lock-keywords-2" function nil nil [87607 87697])
            ("java-font-lock-keywords-3" function nil nil [87698 87788])
            ("java-font-lock-keywords" function nil nil [87789 87875])
            ("c-override-default-keywords" code nil nil [87895 87948])
            ("idl-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 idl))
                nil [87950 88140])
            ("idl-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 idl))
                nil [88142 88511])
            ("idl-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 idl))
                nil [88513 88821])
            ("idl-font-lock-keywords" variable (:default-value idl-font-lock-keywords-3) nil [88823 88935])
            ("idl-font-lock-keywords-2" function nil nil [88937 89025])
            ("idl-font-lock-keywords-3" function nil nil [89026 89114])
            ("idl-font-lock-keywords" function nil nil [89115 89199])
            ("c-override-default-keywords" code nil nil [89214 89268])
            ("pike-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-1 pike))
                nil [89270 89488])
            ("pike-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-2 pike))
                nil [89490 89858])
            ("pike-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (c-lang-const c-matchers-3 pike))
                nil [89860 90167])
            ("pike-font-lock-keywords" variable (:default-value pike-font-lock-keywords-3) nil [90169 90278])
            ("pike-font-lock-keywords-2" function nil nil [90280 90370])
            ("pike-font-lock-keywords-3" function nil nil [90371 90461])
            ("pike-font-lock-keywords" function nil nil [90462 90548])
            ("c-font-lock-doc-comments" function (:arguments ("prefix" "limit" "keywords")) nil [90571 93895])
            ("put" code nil nil [93896 93951])
            ("c-find-invalid-doc-markup" function (:arguments ("regexp" "limit")) nil [93953 94695])
            ("gtkdoc-font-lock-doc-comments" variable
               (:constant-flag t
                :default-value (let ((symbol "[a-zA-Z0-9_]+") (header "^ \\* ")) (\` (((\, (concat header "\\(" symbol "\\):[ 	]*$")) 1 (\, c-doc-markup-face-name) prepend nil) ((\, (concat symbol "()")) 0 (\, c-doc-markup-face-name) prepend nil) ((\, (concat header "\\(" "@" symbol "\\):")) 1 (\, c-doc-markup-face-name) prepend nil) ((\, (concat "[#%@]" symbol)) 0 (\, c-doc-markup-face-name) prepend nil)))))
                nil [94764 95233])
            ("gtkdoc-font-lock-doc-protection" variable
               (:constant-flag t
                :default-value (\` (("< \\(public\\|private\\|protected\\) >" 1 (\, c-doc-markup-face-name) prepend nil))))
                nil [95235 95368])
            ("gtkdoc-font-lock-keywords" variable
               (:constant-flag t
                :default-value (\` (((\, (lambda (limit) (c-font-lock-doc-comments "/\\*\\*$" limit gtkdoc-font-lock-doc-comments) (c-font-lock-doc-comments "/\\*< " limit gtkdoc-font-lock-doc-protection)))))))
                nil [95370 95589])
            ("javadoc-font-lock-doc-comments" variable
               (:constant-flag t
                :default-value (\` (("{@[a-z]+[^}
]*}" 0 (\, c-doc-markup-face-name) prepend nil) ("^\\(/\\*\\)?\\(\\s \\|\\*\\)*\\(@[a-z]+\\)" 3 (\, c-doc-markup-face-name) prepend nil) ((\, (concat "</?\\sw" "\\(" (concat "\\sw\\|\\s \\|[=
*.:]\\|" "\"[^\"]*\"\\|'[^']*'") "\\)*>")) 0 (\, c-doc-markup-face-name) prepend nil) ("&\\(\\sw\\|[.:]\\)+;" 0 (\, c-doc-markup-face-name) prepend nil) ((\, (lambda (limit) (c-find-invalid-doc-markup "[<>&]\\|{@" limit))) 0 (quote font-lock-warning-face) prepend nil))))
                nil [95604 96399])
            ("javadoc-font-lock-keywords" variable
               (:constant-flag t
                :default-value (\` (((\, (lambda (limit) (c-font-lock-doc-comments "/\\*\\*" limit javadoc-font-lock-doc-comments)))))))
                nil [96401 96541])
            ("autodoc-decl-keywords" variable
               (:constant-flag t
                :default-value (cc-eval-when-compile (c-make-keywords-re t (quote ("@decl" "@elem" "@index" "@member")) (quote pike-mode))))
                nil [96561 96786])
            ("autodoc-decl-type-keywords" variable
               (:constant-flag t
                :default-value (cc-eval-when-compile (c-make-keywords-re t (quote ("@elem" "@member")) (quote pike-mode))))
                nil [96788 96980])
            ("autodoc-font-lock-line-markup" function (:arguments ("limit")) nil [96982 99564])
            ("autodoc-font-lock-doc-comments" variable
               (:constant-flag t
                :default-value (\` (("@\\(\\w+{\\|\\[\\([^]@
]\\|@@\\)*\\]\\|[@}]\\|$\\)" 0 (\, c-doc-markup-face-name) prepend nil) (autodoc-font-lock-line-markup) ((\, (lambda (limit) (c-find-invalid-doc-markup "@" limit))) 0 (quote font-lock-warning-face) prepend nil))))
                nil [99566 99939])
            ("autodoc-font-lock-keywords" function nil nil [99941 100432])
            ("cc-provide" code nil nil [100509 100531]))          
      :file "cc-fonts.el.gz"
      :pointmax 100626
      :fsize 25561
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax '((close-paren 19839 . 19840) (symbol 7508 . 7524) (open-paren 7507 . 7508) (close-paren 2834 . 2835) (symbol 2599 . 2616) (open-paren 2598 . 2599)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("compile" include nil nil [1059 1077])
            ("grep" customgroup (:user-visible-flag t) nil [1080 1175])
            ("grep-host-defaults-alist" variable nil nil [1177 1483])
            ("grep-apply-setting" function (:arguments ("symbol" "value")) nil [1485 2133])
            ("grep-window-height" variable nil nil [2150 2353])
            ("grep-highlight-matches" variable (:default-value (quote auto-detect)) nil [2355 3886])
            ("grep-scroll-output" variable nil nil [3888 4197])
            ("grep-command" variable nil nil [4214 4752])
            ("grep-template" variable nil nil [4754 5406])
            ("grep-use-null-device" variable (:default-value (quote auto-detect)) nil [5408 6084])
            ("grep-find-command" variable nil nil [6101 6459])
            ("grep-find-template" variable nil nil [6461 7137])
            ("grep-files-aliases" variable (:default-value (quote (("all" . "* .[!.]* ..?*") ("el" . "*.el") ("ch" . "*.[ch]") ("c" . "*.c") ("cc" . "*.cc *.cxx *.cpp *.C *.CC *.c++") ("cchh" . "*.cc *.[ch]xx *.[ch]pp *.[CHh] *.CC *.HH *.[ch]++") ("hh" . "*.hxx *.hpp *.[Hh] *.HH *.h++") ("h" . "*.h") ("l" . "[Cc]hange[Ll]og*") ("m" . "[Mm]akefile*") ("tex" . "*.tex") ("texi" . "*.texi") ("asm" . "*.[sS]")))) nil [7139 7733])
            ("grep-find-ignored-directories" variable (:default-value vc-directory-exclusion-list) nil [7735 8128])
            ("grep-find-ignored-files" variable (:default-value (cons ".#*" (delq nil (mapcar (lambda (s) (unless (string-match-p "/\\'" s) (concat "*" s))) completion-ignored-extensions)))) nil [8130 8604])
            ("grep-error-screen-columns" variable nil nil [8606 8839])
            ("grep-setup-hook" variable nil nil [8856 8990])
            ("grep-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map compilation-minor-mode-map) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "" (quote next-error-follow-minor-mode)) (define-key map "" (quote compile-goto-error)) (define-key map "n" (quote next-error-no-select)) (define-key map "p" (quote previous-error-no-select)) (define-key map "{" (quote compilation-previous-file)) (define-key map "}" (quote compilation-next-file)) (define-key map "	" (quote compilation-next-error)) (define-key map [backtab] (quote compilation-previous-error)) (define-key map [menu-bar grep] (cons "Grep" (make-sparse-keymap "Grep"))) (define-key map [menu-bar grep compilation-kill-compilation] (quote (menu-item "Kill Grep" kill-compilation :help "Kill the currently running grep process"))) (define-key map [menu-bar grep compilation-separator2] (quote ("----"))) (define-key map [menu-bar grep compilation-compile] (quote (menu-item "Compile..." compile :help "Compile the program including the current buffer.  Default: run `make'"))) (define-key map [menu-bar grep compilation-rgrep] (quote (menu-item "Recursive grep..." rgrep :help "User-friendly recursive grep in directory tree"))) (define-key map [menu-bar grep compilation-lgrep] (quote (menu-item "Local grep..." lgrep :help "User-friendly grep in a directory"))) (define-key map [menu-bar grep compilation-grep-find] (quote (menu-item "Grep via Find..." grep-find :help "Run grep via find, with user-specified args"))) (define-key map [menu-bar grep compilation-grep] (quote (menu-item "Another grep..." grep :help "Run grep, with user-specified args, and collect output in a buffer."))) (define-key map [menu-bar grep compilation-recompile] (quote (menu-item "Repeat grep" recompile :help "Run grep again"))) (define-key map [menu-bar grep compilation-separator2] (quote ("----"))) (define-key map [menu-bar grep compilation-first-error] (quote (menu-item "First Match" first-error :help "Restart at the first match, visit corresponding location"))) (define-key map [menu-bar grep compilation-previous-error] (quote (menu-item "Previous Match" previous-error :help "Visit the previous match and corresponding location"))) (define-key map [menu-bar grep compilation-next-error] (quote (menu-item "Next Match" next-error :help "Visit the next match and corresponding location"))) map)) nil [8992 11641])
            ("grep-mode-tool-bar-map" variable (:default-value (when (keymapp (butlast tool-bar-map)) (let ((map (butlast (copy-keymap tool-bar-map))) (help (last tool-bar-map))) (tool-bar-local-item "left-arrow" (quote previous-error-no-select) (quote previous-error-no-select) map :rtl "right-arrow" :help "Goto previous match") (tool-bar-local-item "right-arrow" (quote next-error-no-select) (quote next-error-no-select) map :rtl "left-arrow" :help "Goto next match") (tool-bar-local-item "cancel" (quote kill-compilation) (quote kill-compilation) map :enable (quote (let ((buffer (compilation-find-buffer))) (get-buffer-process buffer))) :help "Stop grep") (tool-bar-local-item "refresh" (quote recompile) (quote recompile) map :help "Restart grep") (append map help)))) nil [11643 12570])
            ("defalias" code nil nil [12572 12611])
            ("grep-last-buffer" variable nil nil [13111 13366])
            ("grep-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^\\(.*?[^/
]\\):[ 	]*\\([1-9][0-9]*\\)[ 	]*:" 1 2 ((lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) grep-match-face))) (when mbeg (- mbeg beg))))) lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) grep-match-face)) (mend (and mbeg (next-single-property-change mbeg (quote font-lock-face) nil end)))) (when mend (- mend beg)))))) ("^Binary file \\(.+\\) matches$" 1 nil nil 0 1))))
                nil [13383 14471])
            ("grep-first-column" variable nil nil [14473 14579])
            ("grep-error" variable (:default-value "grep hit") nil [14581 14659])
            ("grep-hit-face" variable (:default-value compilation-info-face) nil [14800 14880])
            ("grep-error-face" variable (:default-value (quote compilation-error)) nil [14882 14971])
            ("grep-match-face" variable (:default-value (quote match)) nil [14973 15043])
            ("grep-context-face" variable (:default-value (quote shadow)) nil [15045 15124])
            ("grep-mode-font-lock-keywords" variable (:default-value (quote ((": \\(.+\\): \\(?:Permission denied\\|No such \\(?:file or directory\\|device or address\\)\\)$" 1 grep-error-face) ("^Grep[/a-zA-z]* started.*" (0 (quote (face nil compilation-message nil help-echo nil mouse-face nil)) t)) ("^Grep[/a-zA-z]* finished \\(?:(\\(matches found\\))\\|with \\(no matches found\\)\\).*" (0 (quote (face nil compilation-message nil help-echo nil mouse-face nil)) t) (1 compilation-info-face nil t) (2 compilation-warning-face nil t)) ("^Grep[/a-zA-z]* \\(exited abnormally\\|interrupt\\|killed\\|terminated\\)\\(?:.*with code \\([0-9]+\\)\\)?.*" (0 (quote (face nil compilation-message nil help-echo nil mouse-face nil)) t) (1 grep-error-face) (2 grep-error-face nil t)) ("^.+?[-=][0-9]+[-=].*
" (0 grep-context-face))))) nil [15126 16321])
            ("grep-program" variable (:default-value (purecopy "grep")) nil [16338 16525])
            ("find-program" variable (:default-value (purecopy "find")) nil [16542 16687])
            ("xargs-program" variable (:default-value (purecopy "xargs")) nil [16704 16902])
            ("grep-find-use-xargs" variable nil nil [16919 17233])
            ("grep-history" variable nil nil [17279 17329])
            ("grep-find-history" variable nil nil [17345 17405])
            ("grep-regexp-history" variable nil nil [17460 17492])
            ("grep-files-history" variable nil nil [17493 17524])
            ("grep-process-setup" function nil nil [17541 19023])
            ("grep-filter" function nil nil [19025 20025])
            ("grep-probe" function (:arguments ("command" "args" "func" "result")) nil [20027 20240])
            ("grep-compute-defaults" function nil nil [20257 25842])
            ("grep-tag-default" function nil nil [25844 26120])
            ("grep-default-command" function nil nil [26122 27617])
            ("define-compilation-mode" code nil nil [27635 28491])
            ("grep" function
               (:user-visible-flag t
                :arguments ("command-args"))
                nil [28509 30013])
            ("grep-find" function
               (:user-visible-flag t
                :arguments ("command-args"))
                nil [30031 30812])
            ("defalias" code nil nil [30829 30861])
            ("grep-expand-keywords" variable
               (:constant-flag t
                :default-value (quote (("<C>" mapconcat (function identity) opts " ") ("<D>" or dir ".") ("<F>" . files) ("<N>" . null-device) ("<X>" . excl) ("<R>" shell-quote-argument (or regexp "")))))
                nil [30899 31304])
            ("grep-expand-template" function (:arguments ("template" "regexp" "files" "dir" "excl")) nil [31306 32412])
            ("grep-read-regexp" function nil nil [32414 32571])
            ("grep-read-files" function (:arguments ("regexp")) nil [32573 33883])
            ("lgrep" function
               (:user-visible-flag t
                :arguments ("regexp" "files" "dir" "confirm"))
                nil [33900 36580])
            ("find-name-arg" variable nil nil [36583 36605])
            ("rgrep" function
               (:user-visible-flag t
                :arguments ("regexp" "files" "dir" "confirm"))
                nil [36669 39070])
            ("rgrep-default-command" function (:arguments ("regexp" "files" "dir")) nil [39072 41381])
            ("zrgrep" function
               (:user-visible-flag t
                :arguments ("regexp" "files" "dir" "confirm" "template"))
                nil [41398 43061])
            ("defalias" code nil nil [43078 43104])
            ("grep" package nil nil [43106 43121]))          
      :file "grep.el.gz"
      :pointmax 43145
      :fsize 11498
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [969 984])
            ("button" include nil nil [985 1002])
            ("xref" include nil nil [1003 1018])
            ("tags-file-name" variable nil nil [1035 1271])
            ("etags" customgroup (:user-visible-flag t) nil [1499 1550])
            ("tags-case-fold-search" variable (:default-value (quote default)) nil [1567 1959])
            ("tags-table-list" variable nil nil [2052 2433])
            ("tags-compression-info-list" variable (:default-value (purecopy (quote ("" ".Z" ".bz2" ".gz" ".xz" ".tgz")))) nil [2450 2739])
            ("tags-add-tables" variable (:default-value (quote ask-user)) nil [3232 3626])
            ("tags-revert-without-query" variable nil nil [3628 3777])
            ("tags-table-computed-list" variable nil nil [3779 4261])
            ("tags-table-computed-list-for" variable nil nil [4263 4509])
            ("tags-table-list-pointer" variable nil nil [4511 4700])
            ("tags-table-list-started-at" variable nil nil [4702 4820])
            ("tags-table-set-list" variable nil nil [4822 4984])
            ("find-tag-hook" variable nil nil [5001 5247])
            ("find-tag-default-function" variable nil nil [5264 5601])
            ("define-obsolete-variable-alias" code nil nil [5603 5698])
            ("tags-tag-face" variable (:default-value (quote default)) nil [5700 5833])
            ("tags-apropos-verbose" variable nil nil [5835 5997])
            ("tags-apropos-additional-actions" variable nil nil [5999 6916])
            ("defvaralias" code nil nil [6918 6972])
            ("make-obsolete-variable" code nil nil [6973 7096])
            ("default-tags-table-function" variable nil nil [7098 7322])
            ("tags-location-ring" variable (:default-value (make-ring xref-marker-ring-length)) nil [7324 7523])
            ("tags-table-files" variable nil nil [7600 7765])
            ("tags-completion-table" variable nil nil [7767 7854])
            ("tags-included-tables" variable nil nil [7856 7949])
            ("next-file-list" variable nil nil [7951 8026])
            ("tags-table-format-functions" variable (:default-value (quote (etags-recognize-tags-table tags-recognize-empty-tags-table))) nil [8057 8436])
            ("file-of-tag-function" variable nil nil [8438 8631])
            ("tags-table-files-function" variable nil nil [8632 8742])
            ("tags-completion-table-function" variable nil nil [8743 8837])
            ("snarf-tag-function" variable nil nil [8838 9046])
            ("goto-tag-location-function" variable nil nil [9047 9219])
            ("find-tag-regexp-search-function" variable nil nil [9220 9340])
            ("find-tag-regexp-tag-order" variable nil nil [9341 9449])
            ("find-tag-regexp-next-line-after-failure-p" variable nil nil [9450 9569])
            ("find-tag-search-function" variable nil nil [9570 9676])
            ("find-tag-tag-order" variable nil nil [9677 9771])
            ("find-tag-next-line-after-failure-p" variable nil nil [9772 9877])
            ("list-tags-function" variable nil nil [9878 9965])
            ("tags-apropos-function" variable nil nil [9966 10059])
            ("tags-included-tables-function" variable nil nil [10060 10178])
            ("verify-tags-table-function" variable nil nil [10179 10287])
            ("initialize-new-tags-table" function nil nil [10290 10961])
            ("tags-table-mode" function (:user-visible-flag t) nil [10978 11226])
            ("visit-tags-table" function
               (:user-visible-flag t
                :arguments ("file" "local"))
                nil [11243 12779])
            ("tags-table-check-computed-list" function nil nil [12781 14650])
            ("tags-table-extend-computed-list" function nil nil [14652 16363])
            ("tags-expand-table-name" function (:arguments ("file")) nil [16365 16576])
            ("tags-table-list-member" function (:arguments ("file" "list")) nil [16708 17178])
            ("tags-verify-table" function (:arguments ("file")) nil [17180 18889])
            ("tags-table-including" function (:arguments ("this-file" "core-only")) nil [19300 21342])
            ("tags-next-table" function nil nil [21344 22184])
            ("visit-tags-table-buffer" function (:arguments ("cont")) nil [22201 28509])
            ("tags-reset-tags-tables" function (:user-visible-flag t) nil [28511 29165])
            ("file-of-tag" function (:arguments ("relative")) nil [29168 29500])
            ("tags-table-files" function nil nil [29517 29865])
            ("tags-included-tables" function nil nil [29867 30110])
            ("tags-completion-table" function nil nil [30113 31117])
            ("tags-lazy-completion-table" function nil nil [31134 31522])
            ("tags-completion-at-point-function" function nil nil [31769 32554])
            ("find-tag-tag" function (:arguments ("string")) nil [32557 33125])
            ("find-tag--default" function nil nil [33127 33290])
            ("last-tag" variable nil nil [33292 33349])
            ("find-tag-interactive" function (:arguments ("prompt" "no-default")) nil [33351 33764])
            ("find-tag-history" variable nil nil [33766 33795])
            ("etags-case-fold-search" variable nil nil [33831 33862])
            ("etags-syntax-table" variable nil nil [33863 33890])
            ("local-find-tag-hook" variable nil nil [33891 33919])
            ("find-tag-noselect" function
               (:user-visible-flag t
                :arguments ("tagname" "next-p" "regexp-p"))
                nil [33936 37033])
            ("find-tag" function (:arguments ("tagname" "next-p" "regexp-p")) nil [37050 38301])
            ("find-tag-other-window" function (:arguments ("tagname" "next-p" "regexp-p")) nil [38318 40229])
            ("find-tag-other-frame" function (:arguments ("tagname" "next-p")) nil [40246 41403])
            ("find-tag-regexp" function (:arguments ("regexp" "next-p" "other-window")) nil [41420 42565])
            ("defalias" code nil nil [42582 42629])
            ("tag-lines-already-matched" variable nil nil [42633 42709])
            ("find-tag-in-order" function (:arguments ("pattern" "search-forward-func" "order" "next-line-after-failure-p" "matching" "first-search")) nil [42740 47084])
            ("tag-find-file-of-tag-noselect" function (:arguments ("file")) nil [47086 48930])
            ("tag-find-file-of-tag" function (:arguments ("file")) nil [48932 49117])
            ("etags-recognize-tags-table" function nil nil [49158 50787])
            ("etags-verify-tags-table" function nil nil [50789 50985])
            ("etags-file-of-tag" function (:arguments ("relative")) nil [50987 51319])
            ("etags-tags-completion-table" function nil nil [51322 52403])
            ("etags-snarf-tag" function (:arguments ("use-explicit")) nil [52405 53972])
            ("etags-goto-tag-location" function (:arguments ("tag-info")) nil [53974 56784])
            ("etags-list-tags" function (:arguments ("file")) nil [56786 58059])
            ("tags-with-face" function (:arguments ("face" "body")) nil [58061 58392])
            ("etags-tags-apropos-additional" function (:arguments ("regexp")) nil [58394 59631])
            ("etags-tags-apropos" function (:arguments ("string")) nil [59633 61900])
            ("etags-tags-table-files" function nil nil [61902 62297])
            ("etags-tags-included-tables" function nil nil [62338 62846])
            ("tags-recognize-empty-tags-table" function nil nil [62878 63477])
            ("tag-exact-file-name-match-p" function (:arguments ("tag")) nil [64024 64292])
            ("tag-file-name-match-p" function (:arguments ("tag")) nil [64417 64639])
            ("tag-exact-match-p" function (:arguments ("tag")) nil [64973 65424])
            ("tag-implicit-name-match-p" function (:arguments ("tag")) nil [65541 66097])
            ("tag-symbol-match-p" function (:arguments ("tag")) nil [66226 66544])
            ("tag-word-match-p" function (:arguments ("tag")) nil [66662 66922])
            ("tag-partial-file-name-match-p" function (:arguments ("_tag")) nil [67060 67429])
            ("tag-any-match-p" function (:arguments ("_tag")) nil [67504 67626])
            ("tag-re-match-p" function (:arguments ("re")) nil [67688 67934])
            ("tags-loop-revert-buffers" variable nil nil [67937 68329])
            ("next-file" function
               (:user-visible-flag t
                :arguments ("initialize" "novisit"))
                nil [68346 71250])
            ("tags-loop-operate" variable nil nil [71252 71344])
            ("tags-loop-scan" variable (:default-value (quote (user-error "%s" (substitute-command-keys "No \\[tags-search] or \\[tags-query-replace] in progress")))) nil [71346 71673])
            ("tags-loop-eval" function (:arguments ("form")) nil [71675 71986])
            ("tags-loop-continue" function
               (:user-visible-flag t
                :arguments ("first-time"))
                nil [72004 74272])
            ("tags-search" function
               (:user-visible-flag t
                :arguments ("regexp" "file-list-form"))
                nil [74289 75098])
            ("tags-query-replace" function
               (:user-visible-flag t
                :arguments ("from" "to" "delimited" "file-list-form"))
                nil [75115 76222])
            ("tags-complete-tags-table-file" function (:arguments ("string" "predicate" "what")) nil [76225 76587])
            ("list-tags" function
               (:user-visible-flag t
                :arguments ("file" "_next-match"))
                nil [76604 77592])
            ("tags-apropos" function (:arguments ("regexp")) nil [77609 78463])
            ("define-button-type" code nil nil [78492 78641])
            ("select-tags-table" function (:user-visible-flag t) nil [78731 80856])
            ("select-tags-table-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map button-buffer-map) (define-key map "t" (quote push-button)) (define-key map " " (quote next-line)) (define-key map "" (quote previous-line)) (define-key map "n" (quote next-line)) (define-key map "p" (quote previous-line)) (define-key map "q" (quote select-tags-table-quit)) map)) nil [80858 81239])
            ("define-derived-mode" code nil nil [81241 81423])
            ("select-tags-table-select" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [81425 81789])
            ("select-tags-table-quit" function (:user-visible-flag t) nil [81791 81928])
            ("complete-tag" function (:user-visible-flag t) nil [81946 82635])
            ("etags--xref-limit" variable
               (:constant-flag t
                :default-value 1000)
                nil [82887 82920])
            ("etags-xref-find-definitions-tag-order" variable (:default-value (quote (tag-exact-match-p tag-implicit-name-match-p))) nil [82922 83137])
            ("etags--xref-backend" function nil nil [83154 83191])
            ("cl-defmethod" code nil nil [83193 83287])
            ("cl-defmethod" code nil nil [83289 83400])
            ("cl-defmethod" code nil nil [83402 83513])
            ("cl-defmethod" code nil nil [83515 83624])
            ("etags--xref-find-definitions" function (:arguments ("pattern" "regexp?")) nil [83626 85338])
            ("xref-etags-location" type
               (:typemodifiers (":documentation" "\"Location of an etags tag.\"")
                :superclasses "xref-location"
                :members 
                  ( ("tag-info" variable (:type "list") nil nil)
                    ("file" variable (:type "string") nil nil))                  
                :type "class")
                nil [85340 85561])
            ("xref-make-etags-location" function (:arguments ("tag-info" "file")) nil [85563 85716])
            ("cl-defmethod" code nil nil [85718 85989])
            ("cl-defmethod" code nil nil [85991 86099])
            ("etags" package nil nil [86103 86119]))          
      :file "etags.el.gz"
      :pointmax 86144
      :fsize 22715
      :lastmodtime '(22490 22724 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("gud" include nil nil [3485 3499])
            ("json" include nil nil [3500 3515])
            ("bindat" include nil nil [3516 3533])
            ("cl-lib" include nil nil [3534 3551])
            ("declare-function" code nil nil [3553 3653])
            ("declare-function" code nil nil [3654 3704])
            ("declare-function" code nil nil [3705 3767])
            ("declare-function" code nil nil [3768 3839])
            ("declare-function" code nil nil [3840 3903])
            ("declare-function" code nil nil [3904 3967])
            ("tool-bar-map" variable nil nil [3969 3990])
            ("speedbar-initial-expansion-list-name" variable nil nil [3991 4036])
            ("speedbar-frame" variable nil nil [4037 4060])
            ("gdb-memory-address" variable (:default-value "main") nil [4062 4096])
            ("gdb-memory-last-address" variable nil nil [4097 4180])
            ("gdb-memory-next-page" variable nil nil [4181 4273])
            ("gdb-memory-prev-page" variable nil nil [4274 4370])
            ("gdb-thread-number" variable nil nil [4372 4755])
            ("gdb-frame-number" variable nil nil [4757 5082])
            ("gdb-frame-address" variable nil nil [5084 5156])
            ("gdb-selected-frame" variable nil nil [5345 5431])
            ("gdb-selected-file" variable nil nil [5432 5513])
            ("gdb-selected-line" variable nil nil [5514 5597])
            ("gdb-threads-list" variable nil nil [5599 5870])
            ("gdb-running-threads-count" variable nil nil [5872 6035])
            ("gdb-stopped-threads-count" variable nil nil [6037 6155])
            ("gdb-breakpoints-list" variable nil nil [6157 6472])
            ("gdb-current-language" variable nil nil [6474 6507])
            ("gdb-var-list" variable nil nil [6508 6764])
            ("gdb-main-file" variable nil nil [6765 6842])
            ("gdb-stack-position" variable nil nil [6869 6900])
            ("gdb-thread-position" variable nil nil [6901 6933])
            ("gdb-disassembly-position" variable nil nil [6934 6971])
            ("gdb-location-alist" variable nil nil [6973 7099])
            ("gdb-active-process" variable nil nil [7100 7213])
            ("gdb-error" variable (:default-value "Non-nil when GDB is reporting an error.") nil [7214 7274])
            ("gdb-macro-info" variable nil nil [7275 7379])
            ("gdb-register-names" variable nil nil [7380 7437])
            ("gdb-changed-registers" variable nil nil [7438 7520])
            ("gdb-buffer-fringe-width" variable nil nil [7521 7557])
            ("gdb-last-command" variable nil nil [7558 7587])
            ("gdb-prompt-name" variable nil nil [7588 7616])
            ("gdb-token-number" variable nil nil [7617 7644])
            ("gdb-handler-list" variable (:default-value (quote nil)) nil [7645 7741])
            ("gdb-source-file-list" variable nil nil [7742 7828])
            ("gdb-first-done-or-error" variable (:default-value t) nil [7829 7863])
            ("gdb-source-window" variable nil nil [7864 7894])
            ("gdb-inferior-status" variable nil nil [7895 7927])
            ("gdb-continuation" variable nil nil [7928 7957])
            ("gdb-supports-non-stop" variable nil nil [7958 7992])
            ("gdb-filter-output" variable nil nil [7993 8155])
            ("gdb-non-stop" variable nil nil [8157 8332])
            ("defvar-local" code nil nil [8334 8420])
            ("gdb-output-sink" variable (:default-value (quote nil)) nil [8422 8883])
            ("gdb-discard-unordered-replies" variable (:default-value t) nil [8885 9272])
            ("cl-defstruct" code nil nil [9274 9802])
            ("gdb-add-handler" function (:arguments ("token-number" "handler-function" "pending-trigger")) nil [9804 10467])
            ("gdb-delete-handler" function (:arguments ("token-number")) nil [10469 11452])
            ("gdb-get-handler-function" function (:arguments ("token-number")) nil [11454 11760])
            ("gdb-pending-handler-p" function (:arguments ("pending-trigger")) nil [11763 12053])
            ("gdb-handle-reply" function (:arguments ("token-number")) nil [12056 12461])
            ("gdb-remove-all-pending-triggers" function nil nil [12463 12885])
            ("gdb-wait-for-pending" function (:arguments ("body")) nil [12887 13360])
            ("gdb-add-subscriber" function (:arguments ("publisher" "subscriber")) nil [13384 13613])
            ("gdb-delete-subscriber" function (:arguments ("publisher" "subscriber")) nil [13615 13793])
            ("gdb-get-subscribers" function (:arguments ("publisher")) nil [13795 13846])
            ("gdb-emit-signal" function (:arguments ("publisher" "signal")) nil [13848 14065])
            ("gdb-buf-publisher" variable (:default-value (quote nil)) nil [14067 14257])
            ("gdb" customgroup (:user-visible-flag t) nil [14259 14393])
            ("gdb-non-stop" customgroup (:user-visible-flag t) nil [14395 14490])
            ("gdb-buffers" customgroup (:user-visible-flag t) nil [14492 14566])
            ("gdb-debug-log-max" variable (:default-value 128) nil [14568 14793])
            ("gdb-non-stop-setting" variable (:default-value t) nil [14795 15055])
            ("gdb-gud-control-all-threads" variable (:default-value t) nil [15149 15376])
            ("gdb-switch-reasons" variable (:default-value t) nil [15378 16924])
            ("gdb-stopped-functions" variable nil nil [16926 17863])
            ("gdb-switch-when-another-stopped" variable (:default-value t) nil [17865 18063])
            ("gdb-stack-buffer-locations" variable (:default-value t) nil [18065 18223])
            ("gdb-stack-buffer-addresses" variable nil nil [18225 18367])
            ("gdb-thread-buffer-verbose-names" variable (:default-value t) nil [18369 18517])
            ("gdb-thread-buffer-arguments" variable (:default-value t) nil [18519 18664])
            ("gdb-thread-buffer-locations" variable (:default-value t) nil [18666 18826])
            ("gdb-thread-buffer-addresses" variable nil nil [18828 18984])
            ("gdb-show-threads-by-default" variable nil nil [18986 19155])
            ("gdb-debug-log" variable nil nil [19157 19382])
            ("define-minor-mode" code nil nil [19399 19853])
            ("gdb-cpp-define-alist-program" variable (:default-value "gcc -E -dM -") nil [19855 20276])
            ("gdb-cpp-define-alist-flags" variable nil nil [20278 20426])
            ("gdb-create-source-file-list" variable (:default-value t) nil [20428 20998])
            ("gdb-show-main" variable nil nil [21000 21224])
            ("gdbmi-debug-mode" variable nil nil [21226 21333])
            ("gdb-force-mode-line-update" function (:arguments ("status")) nil [21335 21659])
            ("gdb-control-all-threads" function (:user-visible-flag t) nil [21704 21935])
            ("gdb-control-current-thread" function (:user-visible-flag t) nil [21937 22173])
            ("gdb-find-watch-expression" function nil nil [22175 22874])
            ("gdb-gud-context-command" function (:arguments ("command" "noall")) nil [22952 23507])
            ("gdb-gud-context-call" function (:arguments ("cmd1" "cmd2" "noall" "noarg")) nil [23509 23870])
            ("gdb--check-interpreter" function (:arguments ("filter" "proc" "string")) nil [23872 24644])
            ("gdb-control-level" variable nil nil [24646 24674])
            ("gdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [24691 34002])
            ("gdb-init-1" function nil nil [34004 35820])
            ("gdb-non-stop-handler" function nil nil [35822 36236])
            ("gdb-check-target-async" function nil nil [36238 36492])
            ("gdb-delchar-or-quit" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [36494 37192])
            ("gdb-define-alist" variable nil nil [37194 37271])
            ("gdb-create-define-alist" function nil nil [37273 38021])
            ("declare-function" code nil nil [38023 38095])
            ("gdb--string-regexp" variable
               (:constant-flag t
                :default-value "\"\\(?:[^\\\"]\\|\\\\.\\)*\"")
                nil [38097 38157])
            ("gdb-tooltip-print" function (:arguments ("expr")) nil [38159 38736])
            ("gdb-tooltip-print-1" function (:arguments ("expr")) nil [38938 39265])
            ("gdb-init-buffer" function nil nil [39267 39570])
            ("gdb--if-arrow" function (:arguments ("arrow-position" "start-posn" "end-posn" "body")) nil [39572 40124])
            ("gdb-mouse-until" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [40126 40874])
            ("gdb-mouse-jump" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [40876 41807])
            ("gdb-show-changed-values" variable (:default-value t) nil [41809 42101])
            ("gdb-max-children" variable (:default-value 40) nil [42103 42254])
            ("gdb-delete-out-of-scope" variable (:default-value t) nil [42256 42423])
            ("define-minor-mode" code nil nil [42425 42701])
            ("gdb-use-colon-colon-notation" variable nil nil [42703 42869])
            ("define-key" code nil nil [42871 42924])
            ("define-key" code nil nil [42925 42991])
            ("declare-function" code nil nil [42993 43059])
            ("gud-watch" function
               (:user-visible-flag t
                :arguments ("arg" "event"))
                nil [43061 44015])
            ("gdb-var-create-handler" function (:arguments ("expr")) nil [44017 44847])
            ("gdb-speedbar-update" function nil nil [44849 45114])
            ("gdb-speedbar-timer-fn" function nil nil [45116 45236])
            ("gdb-var-evaluate-expression-handler" function (:arguments ("varnum" "changed")) nil [45238 45610])
            ("gdb-var-list-children" function (:arguments ("varnum")) nil [45718 45933])
            ("gdb-var-list-children-handler" function (:arguments ("varnum")) nil [45935 46923])
            ("gdb-var-set-format" function (:arguments ("format")) nil [46925 47216])
            ("gdb-var-delete-1" function (:arguments ("var" "varnum")) nil [47218 47503])
            ("gdb-var-delete" function (:user-visible-flag t) nil [47505 47926])
            ("gdb-var-delete-children" function (:arguments ("varnum")) nil [47928 48091])
            ("gdb-edit-value" function (:arguments ("_text" "_token" "_indent")) nil [48093 48450])
            ("gdb-error-regexp" variable
               (:constant-flag t
                :default-value "\\^error,msg=\\(\".+\"\\)")
                nil [48452 48507])
            ("gdb-edit-value-handler" function (:arguments ("value")) nil [48509 48685])
            ("gdb-var-update" function nil nil [48786 48920])
            ("gdb-var-update-handler" function nil nil [48922 51805])
            ("gdb-speedbar-expand-node" function (:arguments ("text" "token" "indent")) nil [51807 52742])
            ("gdb-get-target-string" function nil nil [52744 52838])
            ("gdb-buffer-rules" variable (:default-value (quote nil)) nil [53184 53213])
            ("gdb-rules-name-maker" function (:arguments ("rules-entry")) nil [53215 53278])
            ("gdb-rules-buffer-mode" function (:arguments ("rules-entry")) nil [53279 53344])
            ("gdb-rules-update-trigger" function (:arguments ("rules-entry")) nil [53345 53413])
            ("gdb-update-buffer-name" function nil nil [53415 53699])
            ("gdb-current-buffer-rules" function nil nil [53701 53837])
            ("gdb-current-buffer-thread" function nil nil [53839 54060])
            ("gdb-current-buffer-frame" function nil nil [54062 54218])
            ("gdb-buffer-type" function (:arguments ("buffer")) nil [54220 54350])
            ("gdb-buffer-shows-main-thread-p" function nil nil [54352 54544])
            ("gdb-get-buffer" function (:arguments ("buffer-type" "thread")) nil [54546 55028])
            ("gdb-get-buffer-create" function (:arguments ("buffer-type" "thread")) nil [55030 56556])
            ("gdb-bind-function-to-buffer" function (:arguments ("expr" "buffer")) nil [56558 56752])
            ("def-gdb-preempt-display-buffer" function (:arguments ("name" "buffer" "doc" "split-horizontal")) nil [56807 57104])
            ("gdb-set-buffer-rules" function (:arguments ("buffer-type" "rules")) nil [57507 57719])
            ("gdb-parent-mode" function nil nil [57721 58454])
            ("gdb-set-buffer-rules" code nil nil [58580 58662])
            ("gdb-partial-output-name" function nil nil [58664 58763])
            ("gdb-set-buffer-rules" code nil nil [58767 58866])
            ("gdb-inferior-io-name" function nil nil [58868 58964])
            ("gdb-display-io-buffer" function (:user-visible-flag t) nil [58966 59135])
            ("gdb-inferior-io--init-proc" function (:arguments ("proc")) nil [59137 59570])
            ("gdb-inferior-io-sentinel" function (:arguments ("proc" "_str")) nil [59572 60212])
            ("gdb-display-buffer-other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . visible) (inhibit-same-window . t) (pop-up-frame-parameters (height . 14) (width . 80) (unsplittable . t) (tool-bar-lines) (menu-bar-lines) (minibuffer))))) nil [60214 60718])
            ("gdb-frame-io-buffer" function (:user-visible-flag t) nil [60720 60921])
            ("gdb-inferior-io-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote gdb-io-interrupt)) (define-key map "" (quote gdb-io-stop)) (define-key map "" (quote gdb-io-quit)) (define-key map "" (quote gdb-io-eof)) (define-key map "" (quote gdb-io-eof)) map)) nil [60923 61226])
            ("define-derived-mode" code nil nil [61305 61510])
            ("gdb-display-io-nopopup" variable nil nil [61512 61678])
            ("gdb-inferior-filter" function (:arguments ("proc" "string")) nil [61680 62105])
            ("gdb-io-interrupt" function (:user-visible-flag t) nil [62107 62268])
            ("gdb-io-quit" function (:user-visible-flag t) nil [62270 62431])
            ("gdb-io-stop" function (:user-visible-flag t) nil [62433 62579])
            ("gdb-io-eof" function (:user-visible-flag t) nil [62581 62733])
            ("gdb-clear-inferior-io" function nil nil [62735 62851])
            ("breakpoint-xpm-data" variable
               (:constant-flag t
                :default-value "/* XPM */
static char *magick[] = {
/* columns rows colors chars-per-pixel */
\"10 10 2 1\",
\"  c red\",
\"+ c None\",
/* pixels */
\"+++    +++\",
\"++      ++\",
\"+        +\",
\"          \",
\"          \",
\"          \",
\"          \",
\"+        +\",
\"++      ++\",
\"+++    +++\",
};")
                nil [62855 63224])
            ("breakpoint-enabled-pbm-data" variable
               (:constant-flag t
                :default-value "P1
10 10\",
0 0 0 0 1 1 1 1 0 0 0 0
0 0 0 1 1 1 1 1 1 0 0 0
0 0 1 1 1 1 1 1 1 1 0 0
0 1 1 1 1 1 1 1 1 1 1 0
0 1 1 1 1 1 1 1 1 1 1 0
0 1 1 1 1 1 1 1 1 1 1 0
0 1 1 1 1 1 1 1 1 1 1 0
0 0 1 1 1 1 1 1 1 1 0 0
0 0 0 1 1 1 1 1 1 0 0 0
0 0 0 0 1 1 1 1 0 0 0 0")
                nil [63226 63567])
            ("breakpoint-disabled-pbm-data" variable
               (:constant-flag t
                :default-value "P1
10 10\",
0 0 1 0 1 0 1 0 0 0
0 1 0 1 0 1 0 1 0 0
1 0 1 0 1 0 1 0 1 0
0 1 0 1 0 1 0 1 0 1
1 0 1 0 1 0 1 0 1 0
0 1 0 1 0 1 0 1 0 1
1 0 1 0 1 0 1 0 1 0
0 1 0 1 0 1 0 1 0 1
0 0 1 0 1 0 1 0 1 0
0 0 0 1 0 1 0 1 0 0")
                nil [63569 63872])
            ("breakpoint-enabled-icon" variable nil nil [63874 63961])
            ("breakpoint-disabled-icon" variable nil nil [63963 64052])
            ("declare-function" code nil nil [64054 64151])
            ("and" code nil nil [64153 64439])
            ("breakpoint-enabled" variable
               (:default-value (quote ((t :foreground "red1" :weight bold)))
                :type "face")
                nil [64441 64582])
            ("breakpoint-disabled" variable
               (:default-value (quote ((((class color) (min-colors 88)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "black") (((class color) (min-colors 8) (background dark)) :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [64584 65053])
            ("gdb-control-commands-regexp" variable (:default-value (concat "^\\(" "commands\\|if\\|while\\|define\\|document\\|" "python\\|python-interactive\\|pi\\|guile\\|guile-repl\\|gr\\|" "while-stepping\\|stepping\\|ws\\|actions" "\\)\\([[:blank:]]+.*\\)?$")) nil [65057 65504])
            ("gdb-strip-string-backslash" function (:arguments ("string")) nil [65506 65596])
            ("gdb-send" function (:arguments ("proc" "string")) nil [65598 67847])
            ("gdb-mi-quote" function (:arguments ("string")) nil [67849 68218])
            ("gdb-input" function (:arguments ("command" "handler-function" "trigger-name")) nil [68220 69151])
            ("gdb-current-context-command" function (:arguments ("command")) nil [69207 69420])
            ("gdb-current-context-buffer-name" function (:arguments ("name")) nil [69422 69753])
            ("gdb-current-context-mode-name" function (:arguments ("mode")) nil [69755 69990])
            ("gud-gdb-command-name" variable (:default-value "gdb -i=mi") nil [69994 70137])
            ("gdb-resync" function nil nil [70139 70251])
            ("gdb-update" function (:arguments ("no-proc")) nil [70253 71106])
            ("gdb-setq-thread-number" function (:arguments ("number")) nil [71287 71745])
            ("gdb-update-gud-running" function nil nil [71747 72591])
            ("gdb-show-run-p" function nil nil [72593 72921])
            ("gdb-show-stop-p" function nil nil [72923 73207])
            ("gdb-display-source-buffer" function (:arguments ("buffer")) nil [73405 73883])
            ("gdbmi-start-with" function (:arguments ("str" "offset" "match")) nil [73886 74258])
            ("gdbmi-same-start" function (:arguments ("str" "offset" "match")) nil [74260 74721])
            ("gdbmi-is-number" function (:arguments ("character")) nil [74723 74883])
            ("defvar-local" code nil nil [74886 75161])
            ("defvar-local" code nil nil [75163 75446])
            ("gdbmi-bnf-init" function nil nil [75448 75613])
            ("gdbmi-bnf-output" function nil nil [75616 75908])
            ("gdbmi-bnf-skip-unrecognized" function nil nil [75911 76983])
            ("gdbmi-bnf-gdb-prompt" function nil nil [76986 77527])
            ("gdbmi-bnf-result-record" function nil nil [77530 77790])
            ("gdbmi-bnf-out-of-band-record" function nil nil [77793 78023])
            ("gdbmi-bnf-async-record" function nil nil [78026 78496])
            ("gdbmi-bnf-stream-record" function nil nil [78499 79740])
            ("gdbmi-bnf-console-stream-output" function (:arguments ("c-string")) nil [79742 79887])
            ("gdbmi-bnf-target-stream-output" function (:arguments ("_c-string")) nil [79889 80036])
            ("gdbmi-bnf-log-stream-output" function (:arguments ("c-string")) nil [80038 80379])
            ("gdbmi-bnf-result-state-configs" variable
               (:constant-flag t
                :default-value (quote (("^" ("done" gdb-done . progressive) ("error" gdb-error . progressive) ("running" gdb-starting . atomic)) ("*" ("stopped" gdb-stopped . atomic) ("running" gdb-running . atomic)) ("+") ("=" ("thread-created" gdb-thread-created . atomic) ("thread-selected" gdb-thread-selected . atomic) ("thread-existed" gdb-ignored-notification . atomic) ((quote default) gdb-ignored-notification . atomic)))))
                nil [80382 81645])
            ("gdbmi-bnf-result-and-async-record-impl" function nil nil [81647 83684])
            ("gdbmi-bnf-incomplete-record-result" function (:arguments ("token" "class-command")) nil [83686 85659])
            ("gdb-mi-decode-strings" variable nil nil [86146 87047])
            ("gdb-mi-decode" function (:arguments ("string")) nil [87835 88679])
            ("gud-gdbmi-marker-filter" function (:arguments ("string")) nil [88681 89815])
            ("gdb-gdb" function (:arguments ("_output-field")) nil [89817 89848])
            ("gdb-shell" function (:arguments ("output-field")) nil [89850 89957])
            ("gdb-ignored-notification" function (:arguments ("_token" "_output-field")) nil [89959 90014])
            ("gdb-thread-created" function (:arguments ("_token" "_output-field")) nil [90086 90135])
            ("gdb-thread-exited" function (:arguments ("_token" "output-field")) nil [90136 90799])
            ("gdb-thread-selected" function (:arguments ("_token" "output-field")) nil [90801 91581])
            ("gdb-running" function (:arguments ("_token" "output-field")) nil [91583 92304])
            ("gdb-starting" function (:arguments ("_output-field" "_result")) nil [92306 92611])
            ("gdb-stopped" function (:arguments ("_token" "output-field")) nil [92670 95180])
            ("gdb-internals" function (:arguments ("output-field")) nil [95334 95674])
            ("gdb-console" function (:arguments ("output-field")) nil [95805 95925])
            ("gdb-done" function (:arguments ("token-number" "output-field" "is-complete")) nil [95927 96049])
            ("gdb-error" function (:arguments ("token-number" "output-field" "is-complete")) nil [96051 96175])
            ("gdb-done-or-error" function (:arguments ("token-number" "type" "output-field" "is-complete")) nil [96177 97670])
            ("gdb-concat-output" function (:arguments ("so-far" "new")) nil [97672 97854])
            ("gdb-append-to-partial-output" function (:arguments ("string")) nil [97856 98024])
            ("gdb-clear-partial-output" function nil nil [98026 98155])
            ("gdb-jsonify-buffer" function (:arguments ("fix-key" "fix-list")) nil [98157 99915])
            ("gdb-json-read-buffer" function (:arguments ("fix-key" "fix-list")) nil [99917 100242])
            ("gdb-json-string" function (:arguments ("string" "fix-key" "fix-list")) nil [100244 100515])
            ("gdb-json-partial-output" function (:arguments ("fix-key" "fix-list")) nil [100517 100816])
            ("gdb-line-posns" function (:arguments ("line")) nil [100818 101037])
            ("gdb-mark-line" function (:arguments ("line" "variable")) nil [101039 101601])
            ("gdb-pad-string" function (:arguments ("string" "padding")) nil [101603 101704])
            ("cl-defstruct" code nil nil [101856 101957])
            ("gdb-table-add-row" function (:arguments ("table" "row" "properties")) nil [101959 103124])
            ("gdb-table-string" function (:arguments ("table" "sep")) nil [103126 103699])
            ("gdb-get-many-fields" function (:arguments ("struct" "fields")) nil [103762 103980])
            ("def-gdb-auto-update-trigger" function (:arguments ("trigger-name" "gdb-command" "handler-name" "signal-list")) nil [103982 105364])
            ("def-gdb-auto-update-handler" function (:arguments ("handler-name" "custom-defun" "nopreserve")) nil [105446 106321])
            ("def-gdb-trigger-and-handler" function (:arguments ("trigger-name" "gdb-command" "handler-name" "custom-defun" "signal-list")) nil [106323 106938])
            ("def-gdb-trigger-and-handler" code nil nil [107009 107166])
            ("gdb-set-buffer-rules" code nil nil [107168 107297])
            ("gdb-breakpoints-list-handler-custom" function nil nil [107299 109895])
            ("gdb-place-breakpoints" function nil nil [109977 111570])
            ("gdb-source-file-regexp" variable
               (:constant-flag t
                :default-value (concat "fullname=\\(" gdb--string-regexp "\\)"))
                nil [111572 111656])
            ("gdb-get-location" function (:arguments ("bptno" "line" "flag")) nil [111658 112624])
            ("add-hook" code nil nil [112626 112672])
            ("gdb-find-file-hook" function nil nil [112674 113130])
            ("declare-function" code nil nil [113132 113174])
            ("declare-function" code nil nil [113185 113227])
            ("declare-function" code nil nil [113238 113312])
            ("gdb-mouse-set-clear-breakpoint" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [113314 113957])
            ("gdb-mouse-toggle-breakpoint-margin" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [113959 114577])
            ("gdb-mouse-toggle-breakpoint-fringe" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [114579 115292])
            ("gdb-breakpoints-buffer-name" function nil nil [115294 115390])
            ("gdb-display-breakpoints-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [115392 115572])
            ("gdb-frame-breakpoints-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [115574 115807])
            ("gdb-breakpoints-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu (make-sparse-keymap "Breakpoints"))) (define-key menu [quit] (quote ("Quit" . gdb-delete-frame-or-window))) (define-key menu [goto] (quote ("Goto" . gdb-goto-breakpoint))) (define-key menu [delete] (quote ("Delete" . gdb-delete-breakpoint))) (define-key menu [toggle] (quote ("Toggle" . gdb-toggle-breakpoint))) (suppress-keymap map) (define-key map [menu-bar breakpoints] (cons "Breakpoints" menu)) (define-key map " " (quote gdb-toggle-breakpoint)) (define-key map "D" (quote gdb-delete-breakpoint)) (define-key map "q" (quote gdb-delete-frame-or-window)) (define-key map "" (quote gdb-goto-breakpoint)) (define-key map "	" (lambda nil (interactive) (gdb-set-window-buffer (gdb-get-buffer-create (quote gdb-threads-buffer)) t))) (define-key map [mouse-2] (quote gdb-goto-breakpoint)) (define-key map [follow-link] (quote mouse-face)) map)) nil [115809 116870])
            ("gdb-delete-frame-or-window" function (:user-visible-flag t) nil [116872 117058])
            ("gdb-make-header-line-mouse-map" function (:arguments ("mouse" "function")) nil [117092 117502])
            ("gdb-propertize-header" function (:arguments ("name" "buffer" "help-echo" "mouse-face" "face")) nil [117504 117974])
            ("gdb-threads-buffer-name" function nil nil [118043 118131])
            ("gdb-display-threads-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [118133 118301])
            ("gdb-frame-threads-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [118303 118524])
            ("def-gdb-trigger-and-handler" code nil nil [118526 118715])
            ("gdb-set-buffer-rules" code nil nil [118717 118830])
            ("gdb-threads-font-lock-keywords" variable (:default-value (quote (("in \\([^ ]+\\)" (1 font-lock-function-name-face)) (" \\(stopped\\)" (1 font-lock-warning-face)) (" \\(running\\)" (1 font-lock-string-face)) ("\\(\\(\\sw\\|[_.]\\)+\\)=" (1 font-lock-variable-name-face))))) nil [118832 119149])
            ("gdb-threads-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote gdb-select-thread)) (define-key map "f" (quote gdb-display-stack-for-thread)) (define-key map "F" (quote gdb-frame-stack-for-thread)) (define-key map "l" (quote gdb-display-locals-for-thread)) (define-key map "L" (quote gdb-frame-locals-for-thread)) (define-key map "r" (quote gdb-display-registers-for-thread)) (define-key map "R" (quote gdb-frame-registers-for-thread)) (define-key map "d" (quote gdb-display-disassembly-for-thread)) (define-key map "D" (quote gdb-frame-disassembly-for-thread)) (define-key map "i" (quote gdb-interrupt-thread)) (define-key map "c" (quote gdb-continue-thread)) (define-key map "s" (quote gdb-step-thread)) (define-key map "	" (lambda nil (interactive) (gdb-set-window-buffer (gdb-get-buffer-create (quote gdb-breakpoints-buffer)) t))) (define-key map [mouse-2] (quote gdb-select-thread)) (define-key map [follow-link] (quote mouse-face)) map)) nil [119151 120113])
            ("gdb-threads-header" variable (:default-value (list (gdb-propertize-header "Breakpoints" gdb-breakpoints-buffer "mouse-1: select" mode-line-highlight mode-line-inactive) " " (gdb-propertize-header "Threads" gdb-threads-buffer nil nil mode-line))) nil [120115 120366])
            ("define-derived-mode" code nil nil [120368 120737])
            ("gdb-thread-list-handler-custom" function nil nil [120739 123214])
            ("def-gdb-thread-buffer-command" function (:arguments ("name" "custom-defun" "doc")) nil [123216 123894])
            ("def-gdb-thread-buffer-simple-command" function (:arguments ("name" "buffer-command" "doc")) nil [123896 124224])
            ("def-gdb-thread-buffer-command" code nil nil [124226 124492])
            ("def-gdb-thread-buffer-simple-command" code nil nil [124494 124660])
            ("def-gdb-thread-buffer-simple-command" code nil nil [124662 124831])
            ("def-gdb-thread-buffer-simple-command" code nil nil [124833 125011])
            ("def-gdb-thread-buffer-simple-command" code nil nil [125013 125197])
            ("def-gdb-thread-buffer-simple-command" code nil nil [125199 125363])
            ("def-gdb-thread-buffer-simple-command" code nil nil [125365 125532])
            ("def-gdb-thread-buffer-simple-command" code nil nil [125534 125714])
            ("def-gdb-thread-buffer-simple-command" code nil nil [125716 125902])
            ("def-gdb-thread-buffer-gud-command" function (:arguments ("name" "gud-command" "doc")) nil [125904 126426])
            ("def-gdb-thread-buffer-gud-command" code nil nil [126428 126542])
            ("declare-function" code nil nil [126588 126632])
            ("def-gdb-thread-buffer-gud-command" code nil nil [126634 126739])
            ("declare-function" code nil nil [126741 126785])
            ("def-gdb-thread-buffer-gud-command" code nil nil [126787 126884])
            ("gdb-memory-rows" variable (:default-value 8) nil [126905 127025])
            ("gdb-memory-columns" variable (:default-value 4) nil [127027 127153])
            ("gdb-memory-format" variable (:default-value "x") nil [127155 127481])
            ("gdb-memory-unit" variable (:default-value 4) nil [127483 127736])
            ("def-gdb-trigger-and-handler" code nil nil [127738 128044])
            ("gdb-set-buffer-rules" code nil nil [128046 128155])
            ("gdb-memory-column-width" function (:arguments ("size" "format")) nil [128157 128977])
            ("gdb-read-memory-custom" function nil nil [128979 130075])
            ("gdb-memory-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map t) (define-key map "q" (quote kill-this-buffer)) (define-key map "n" (quote gdb-memory-show-next-page)) (define-key map "p" (quote gdb-memory-show-previous-page)) (define-key map "a" (quote gdb-memory-set-address)) (define-key map "t" (quote gdb-memory-format-binary)) (define-key map "o" (quote gdb-memory-format-octal)) (define-key map "u" (quote gdb-memory-format-unsigned)) (define-key map "d" (quote gdb-memory-format-signed)) (define-key map "x" (quote gdb-memory-format-hexadecimal)) (define-key map "b" (quote gdb-memory-unit-byte)) (define-key map "h" (quote gdb-memory-unit-halfword)) (define-key map "w" (quote gdb-memory-unit-word)) (define-key map "g" (quote gdb-memory-unit-giant)) (define-key map "R" (quote gdb-memory-set-rows)) (define-key map "C" (quote gdb-memory-set-columns)) map)) nil [130077 130927])
            ("gdb-memory-set-address-event" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [130929 131162])
            ("gdb-memory-set-address" function (:user-visible-flag t) nil [131207 131416])
            ("def-gdb-set-positive-number" function (:arguments ("name" "variable" "echo-string" "doc")) nil [131418 131992])
            ("def-gdb-set-positive-number" code nil nil [131994 132124])
            ("def-gdb-set-positive-number" code nil nil [132126 132268])
            ("def-gdb-memory-format" function (:arguments ("name" "format" "doc")) nil [132270 132577])
            ("def-gdb-memory-format" code nil nil [132579 132671])
            ("def-gdb-memory-format" code nil nil [132673 132763])
            ("def-gdb-memory-format" code nil nil [132765 132869])
            ("def-gdb-memory-format" code nil nil [132871 132964])
            ("def-gdb-memory-format" code nil nil [132966 133068])
            ("gdb-memory-format-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line down-mouse-3] (quote gdb-memory-format-menu-1)) map)) nil [133070 133267])
            ("gdb-memory-format-menu" variable (:default-value (let ((map (make-sparse-keymap "Format"))) (define-key map [binary] (quote (menu-item "Binary" gdb-memory-format-binary :button (:radio equal gdb-memory-format "t")))) (define-key map [octal] (quote (menu-item "Octal" gdb-memory-format-octal :button (:radio equal gdb-memory-format "o")))) (define-key map [unsigned] (quote (menu-item "Unsigned Decimal" gdb-memory-format-unsigned :button (:radio equal gdb-memory-format "u")))) (define-key map [signed] (quote (menu-item "Signed Decimal" gdb-memory-format-signed :button (:radio equal gdb-memory-format "d")))) (define-key map [hexadecimal] (quote (menu-item "Hexadecimal" gdb-memory-format-hexadecimal :button (:radio equal gdb-memory-format "x")))) map)) nil [133269 134137])
            ("gdb-memory-format-menu" function (:arguments ("event")) nil [134139 134244])
            ("gdb-memory-format-menu-1" function (:arguments ("event")) nil [134246 134592])
            ("def-gdb-memory-unit" function (:arguments ("name" "unit-size" "doc")) nil [134594 134905])
            ("def-gdb-memory-unit" code nil nil [134907 135004])
            ("def-gdb-memory-unit" code nil nil [135006 135095])
            ("def-gdb-memory-unit" code nil nil [135097 135193])
            ("def-gdb-memory-unit" code nil nil [135195 135271])
            ("def-gdb-memory-show-page" function (:arguments ("name" "address-var" "doc")) nil [135273 135679])
            ("def-gdb-memory-show-page" code nil nil [135681 135760])
            ("def-gdb-memory-show-page" code nil nil [135762 135837])
            ("gdb-memory-unit-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line down-mouse-3] (quote gdb-memory-unit-menu-1)) map)) nil [135839 136031])
            ("gdb-memory-unit-menu" variable (:default-value (let ((map (make-sparse-keymap "Unit"))) (define-key map [giantwords] (quote (menu-item "Giant words" gdb-memory-unit-giant :button (:radio equal gdb-memory-unit 8)))) (define-key map [words] (quote (menu-item "Words" gdb-memory-unit-word :button (:radio equal gdb-memory-unit 4)))) (define-key map [halfwords] (quote (menu-item "Halfwords" gdb-memory-unit-halfword :button (:radio equal gdb-memory-unit 2)))) (define-key map [bytes] (quote (menu-item "Bytes" gdb-memory-unit-byte :button (:radio equal gdb-memory-unit 1)))) map)) nil [136033 136696])
            ("gdb-memory-unit-menu" function (:arguments ("event")) nil [136698 136799])
            ("gdb-memory-unit-menu-1" function (:arguments ("event")) nil [136801 137141])
            ("gdb-memory-font-lock-keywords" variable (:default-value (quote (("<\\(\\(\\sw\\|[_.]\\)+\\)\\(\\+[0-9]+\\)?>" (1 font-lock-function-name-face))))) nil [137143 137348])
            ("gdb-memory-header" variable (:default-value (quote (:eval (concat "Start address[" (propertize "-" (quote face) font-lock-warning-face (quote help-echo) "mouse-1: decrement address" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (gdb-make-header-line-mouse-map (quote mouse-1) (function gdb-memory-show-previous-page))) "|" (propertize "+" (quote face) font-lock-warning-face (quote help-echo) "mouse-1: increment address" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (gdb-make-header-line-mouse-map (quote mouse-1) (function gdb-memory-show-next-page))) "]: " (propertize gdb-memory-address (quote face) font-lock-warning-face (quote help-echo) "mouse-1: set start address" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (gdb-make-header-line-mouse-map (quote mouse-1) (function gdb-memory-set-address-event))) "  Rows: " (propertize (number-to-string gdb-memory-rows) (quote face) font-lock-warning-face (quote help-echo) "mouse-1: set number of columns" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (gdb-make-header-line-mouse-map (quote mouse-1) (function gdb-memory-set-rows))) "  Columns: " (propertize (number-to-string gdb-memory-columns) (quote face) font-lock-warning-face (quote help-echo) "mouse-1: set number of columns" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (gdb-make-header-line-mouse-map (quote mouse-1) (function gdb-memory-set-columns))) "  Display Format: " (propertize gdb-memory-format (quote face) font-lock-warning-face (quote help-echo) "mouse-3: select display format" (quote mouse-face) (quote mode-line-highlight) (quote local-map) gdb-memory-format-map) "  Unit Size: " (propertize (number-to-string gdb-memory-unit) (quote face) font-lock-warning-face (quote help-echo) "mouse-3: select unit size" (quote mouse-face) (quote mode-line-highlight) (quote local-map) gdb-memory-unit-map))))) nil [137350 139804])
            ("define-derived-mode" code nil nil [139806 140066])
            ("gdb-memory-buffer-name" function nil nil [140068 140154])
            ("gdb-display-memory-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [140156 140330])
            ("gdb-frame-memory-buffer" function (:user-visible-flag t) nil [140332 140532])
            ("gdb-disassembly-buffer-name" function nil nil [140558 140686])
            ("gdb-display-disassembly-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [140688 140880])
            ("def-gdb-preempt-display-buffer" code nil nil [140882 140986])
            ("gdb-frame-disassembly-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [140988 141233])
            ("def-gdb-auto-update-trigger" code nil nil [141235 141924])
            ("def-gdb-auto-update-handler" code nil nil [141926 142018])
            ("gdb-set-buffer-rules" code nil nil [142020 142149])
            ("gdb-disassembly-font-lock-keywords" variable (:default-value (quote (("<\\(\\(\\sw\\|[_.]\\)+\\)\\(\\+[0-9]+\\)?>" (1 font-lock-function-name-face)) ("^0x[0-9a-f]+ \\(<\\(\\(\\sw\\|[_.]\\)+\\)\\+[0-9]+>\\)?:[ 	]+\\(\\sw+\\)" (4 font-lock-keyword-face)) ("%\\sw+" . font-lock-variable-name-face) ("^\\(Dump of assembler code for function\\) \\(.+\\):" (1 font-lock-comment-face) (2 font-lock-function-name-face)) ("^\\(End of assembler dump\\.\\)" . font-lock-comment-face)))) nil [142151 142800])
            ("gdb-disassembly-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote kill-this-buffer)) map)) nil [142802 142959])
            ("define-derived-mode" code nil nil [142961 143437])
            ("gdb-disassembly-handler-custom" function nil nil [143439 145153])
            ("gdb-disassembly-place-breakpoints" function nil nil [145155 145697])
            ("gdb-breakpoints-header" variable (:default-value (list (gdb-propertize-header "Breakpoints" gdb-breakpoints-buffer nil nil mode-line) " " (gdb-propertize-header "Threads" gdb-threads-buffer "mouse-1: select" mode-line-highlight mode-line-inactive))) nil [145701 145979])
            ("define-derived-mode" code nil nil [146002 146191])
            ("gdb-toggle-breakpoint" function (:user-visible-flag t) nil [146193 146741])
            ("gdb-delete-breakpoint" function (:user-visible-flag t) nil [146743 147173])
            ("gdb-goto-breakpoint" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [147175 148544])
            ("def-gdb-trigger-and-handler" code nil nil [148623 148806])
            ("gdb-set-buffer-rules" code nil nil [148808 148915])
            ("gdb-frame-location" function (:arguments ("frame")) nil [148917 149358])
            ("gdb-stack-list-frames-custom" function nil nil [149360 150551])
            ("gdb-stack-buffer-name" function nil nil [150553 150676])
            ("gdb-display-stack-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [150678 150862])
            ("def-gdb-preempt-display-buffer" code nil nil [150864 150962])
            ("gdb-frame-stack-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [150964 151201])
            ("gdb-frames-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote kill-this-buffer)) (define-key map "" (quote gdb-select-frame)) (define-key map [mouse-2] (quote gdb-select-frame)) (define-key map [follow-link] (quote mouse-face)) map)) nil [151203 151485])
            ("gdb-frames-font-lock-keywords" variable (:default-value (quote (("in \\([^ ]+\\)" (1 font-lock-function-name-face))))) nil [151487 151633])
            ("define-derived-mode" code nil nil [151635 152021])
            ("gdb-select-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [152023 152655])
            ("def-gdb-trigger-and-handler" code nil nil [152746 152955])
            ("gdb-set-buffer-rules" code nil nil [152957 153066])
            ("gdb-locals-watch-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "" (quote gud-watch)) (define-key map [mouse-2] (quote gud-watch)) map)) nil [153068 153324])
            ("gdb-edit-locals-map-1" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "" (quote gdb-edit-locals-value)) (define-key map [mouse-2] (quote gdb-edit-locals-value)) map)) nil [153326 153593])
            ("gdb-edit-locals-value" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [153595 154084])
            ("gdb-locals-handler-custom" function nil nil [154177 155721])
            ("gdb-locals-header" variable (:default-value (list (gdb-propertize-header "Locals" gdb-locals-buffer nil nil mode-line) " " (gdb-propertize-header "Registers" gdb-registers-buffer "mouse-1: select" mode-line-highlight mode-line-inactive))) nil [155723 155990])
            ("gdb-locals-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote kill-this-buffer)) (define-key map "	" (lambda nil (interactive) (gdb-set-window-buffer (gdb-get-buffer-create (quote gdb-registers-buffer) gdb-thread-number) t))) map)) nil [155992 156416])
            ("define-derived-mode" code nil nil [156418 156582])
            ("gdb-locals-buffer-name" function nil nil [156584 156702])
            ("gdb-display-locals-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [156704 156899])
            ("def-gdb-preempt-display-buffer" code nil nil [156901 157001])
            ("gdb-frame-locals-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [157003 157255])
            ("def-gdb-trigger-and-handler" code nil nil [157281 157485])
            ("gdb-set-buffer-rules" code nil nil [157487 157608])
            ("gdb-registers-handler-custom" function nil nil [157610 158710])
            ("gdb-edit-register-value" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [158712 159200])
            ("gdb-registers-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "" (quote gdb-edit-register-value)) (define-key map [mouse-2] (quote gdb-edit-register-value)) (define-key map "q" (quote kill-this-buffer)) (define-key map "	" (lambda nil (interactive) (gdb-set-window-buffer (gdb-get-buffer-create (quote gdb-locals-buffer) gdb-thread-number) t))) map)) nil [159202 159733])
            ("gdb-registers-header" variable (:default-value (list (gdb-propertize-header "Locals" gdb-locals-buffer "mouse-1: select" mode-line-highlight mode-line-inactive) " " (gdb-propertize-header "Registers" gdb-registers-buffer nil nil mode-line))) nil [159735 160005])
            ("define-derived-mode" code nil nil [160007 160186])
            ("gdb-registers-buffer-name" function nil nil [160188 160312])
            ("gdb-display-registers-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [160314 160496])
            ("def-gdb-preempt-display-buffer" code nil nil [160498 160604])
            ("gdb-frame-registers-buffer" function
               (:user-visible-flag t
                :arguments ("thread"))
                nil [160606 160841])
            ("gdb-get-changed-registers" function nil nil [160898 161117])
            ("gdb-changed-registers-handler" function nil nil [161119 161347])
            ("gdb-register-names-handler" function nil nil [161349 161712])
            ("gdb-get-source-file-list" function nil nil [161716 162177])
            ("gdb-get-main-selected-frame" function nil nil [162179 162449])
            ("gdb-frame-handler" function nil nil [162451 163778])
            ("gdb-prompt-name-regexp" variable
               (:constant-flag t
                :default-value (concat "value=\\(" gdb--string-regexp "\\)"))
                nil [163780 163861])
            ("gdb-get-prompt" function nil nil [163863 164172])
            ("gdb-display-buffer" function (:arguments ("buf")) nil [164197 164371])
            ("gdb-preempt-existing-or-display-buffer" function (:arguments ("buf" "split-horizontal")) nil [164912 166171])
            ("let" code nil nil [166209 167030])
            ("let" code nil nil [167032 167831])
            ("let" code nil nil [167833 169710])
            ("define-key-after" code nil nil [170014 170328])
            ("define-key-after" code nil nil [170330 170649])
            ("gdb-frame-gdb-buffer" function (:user-visible-flag t) nil [170651 170788])
            ("gdb-display-gdb-buffer" function (:user-visible-flag t) nil [170790 170905])
            ("gdb-set-window-buffer" function (:arguments ("name" "ignore-dedicated" "window")) nil [170907 171326])
            ("gdb-setup-windows" function nil nil [171328 172782])
            ("define-minor-mode" code nil nil [172784 173261])
            ("gdb-restore-windows" function (:user-visible-flag t) nil [173263 173878])
            ("gdb-reset" function nil nil [173921 175395])
            ("gdb-get-source-file" function nil nil [175397 175941])
            ("gdb-put-string" function (:arguments ("putstring" "pos" "dprop" "sprops")) nil [175960 176720])
            ("gdb-remove-strings" function (:arguments ("start" "end" "buffer")) nil [176743 177151])
            ("gdb-put-breakpoint-icon" function (:arguments ("enabled" "bptno" "line")) nil [177153 180151])
            ("gdb-remove-breakpoint-icons" function (:arguments ("start" "end" "remove-margin")) nil [180153 180533])
            ("gud-gdb-fetch-lines-in-progress" variable nil nil [180575 180615])
            ("gud-gdb-fetch-lines-string" variable nil nil [180616 180651])
            ("gud-gdb-fetch-lines-break" variable nil nil [180652 180686])
            ("gud-gdb-fetched-lines" variable nil nil [180687 180717])
            ("gud-gdbmi-completions" function (:arguments ("context" "command")) nil [180719 181521])
            ("gud-gdbmi-fetch-lines-filter" function (:arguments ("string")) nil [181523 181912])
            ("gdb-mi" package nil nil [181914 181931]))          
      :file "gdb-mi.el.gz"
      :pointmax 181957
      :fsize 43914
      :lastmodtime '(22432 21609 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("unless" code nil nil [3171 3246])
            ("let" code nil nil [3270 3485])
            ("cc-require" code nil nil [3488 3509])
            ("cc-require" code nil nil [3510 3531])
            ("cc-require-when-compile" code nil nil [3532 3567])
            ("cc-require" code nil nil [3568 3591])
            ("cc-require" code nil nil [3592 3615])
            ("cc-require" code nil nil [3616 3637])
            ("cc-require" code nil nil [3638 3660])
            ("cc-require" code nil nil [3661 3683])
            ("cc-require" code nil nil [3684 3706])
            ("cc-bytecomp-defvar" code nil nil [3733 3785])
            ("cc-bytecomp-defun" code nil nil [3794 3828])
            ("cc-bytecomp-defvar" code nil nil [3920 3959])
            ("cc-external-require" code nil nil [4085 4116])
            ("cc-fonts" include nil nil [4308 4327])
            ("c-leave-cc-mode-mode" function nil nil [5341 5405])
            ("c-init-language-vars-for" function (:arguments ("mode")) nil [5407 6196])
            ("c-initialize-cc-mode" function (:arguments ("new-style-init")) nil [6213 7677])
            ("c-mode-base-map" variable nil nil [7703 7778])
            ("c-make-inherited-keymap" function nil nil [7780 8363])
            ("c-define-abbrev-table" function (:arguments ("name" "defs" "doc")) nil [8365 9171])
            ("put" code nil nil [9172 9224])
            ("c-bind-special-erase-keys" function nil nil [9226 9790])
            ("if" code nil nil [9792 16359])
            ("cc-bytecomp-defvar" code nil nil [16436 16470])
            ("c-mode-menu" function (:arguments ("modestr")) nil [16472 16836])
            ("defalias" code nil nil [17095 17269])
            ("c-unfind-enclosing-token" function (:arguments ("pos")) nil [17779 18265])
            ("c-unfind-coalesced-tokens" function (:arguments ("beg" "end")) nil [18267 19072])
            ("c-maybe-stale-found-type" variable nil nil [19846 19883])
            ("make-variable-buffer-local" code nil nil [19884 19938])
            ("c-just-done-before-change" variable nil nil [19940 19978])
            ("make-variable-buffer-local" code nil nil [19979 20034])
            ("c-basic-common-init" function (:arguments ("mode" "default-style")) nil [20372 26953])
            ("c-setup-doc-comment-style" function nil nil [27069 27357])
            ("c-new-BEG" variable nil nil [27827 27847])
            ("make-variable-buffer-local" code nil nil [27848 27887])
            ("c-new-END" variable nil nil [27888 27908])
            ("make-variable-buffer-local" code nil nil [27909 27948])
            ("c-common-init" function (:arguments ("mode")) nil [27950 29868])
            ("c-count-cfss" function (:arguments ("lv-alist")) nil [29870 30235])
            ("c-before-hack-hook" function nil nil [30237 31637])
            ("c-remove-any-local-eval-or-mode-variables" function nil nil [31639 33331])
            ("c-postprocess-file-styles" function nil nil [33333 35225])
            ("if" code nil nil [35227 35410])
            ("c-run-mode-hooks" function (:arguments ("hooks")) nil [35412 35724])
            ("c-old-BOM" variable nil nil [36014 36034])
            ("make-variable-buffer-local" code nil nil [36035 36074])
            ("c-old-EOM" variable nil nil [36075 36095])
            ("make-variable-buffer-local" code nil nil [36096 36135])
            ("c-called-from-text-property-change-p" function nil nil [36137 36711])
            ("c-extend-region-for-CPP" function (:arguments ("beg" "end")) nil [36713 37525])
            ("c-extend-font-lock-region-for-macros" function (:arguments ("begg" "endd" "old-len")) nil [37527 38653])
            ("c-neutralize-CPP-line" function (:arguments ("beg" "end")) nil [38655 39537])
            ("c-neutralize-syntax-in-and-mark-CPP" function (:arguments ("begg" "endd" "old-len")) nil [39539 43069])
            ("c-before-change" function (:arguments ("beg" "end")) nil [43071 46899])
            ("c-in-after-change-fontification" variable nil nil [46901 46945])
            ("make-variable-buffer-local" code nil nil [46946 47007])
            ("c-after-change" function (:arguments ("beg" "end" "old-len")) nil [47105 49715])
            ("c-fl-decl-start" function (:arguments ("pos")) nil [49717 51376])
            ("c-change-expand-fl-region" function (:arguments ("beg" "end" "old-len")) nil [51378 52018])
            ("c-context-expand-fl-region" function (:arguments ("beg" "end")) nil [52020 52362])
            ("c-before-context-fl-expand-region" function (:arguments ("beg" "end")) nil [52364 52885])
            ("c-font-lock-fontify-region" function (:arguments ("beg" "end" "verbose")) nil [52887 54930])
            ("c-after-font-lock-init" function nil nil [54932 55277])
            ("c-font-lock-init" function nil nil [55279 56722])
            ("c-extend-after-change-region" function (:arguments ("beg" "end" "_old-len")) nil [56747 57650])
            ("c-advise-fl-for-region" function (:arguments ("function")) nil [57677 57965])
            ("unless" code nil nil [57973 58267])
            ("c-electric-indent-mode-hook" function nil nil [58333 58764])
            ("c-electric-indent-local-mode-hook" function nil nil [58766 59056])
            ("c-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table c))) nil [59078 59201])
            ("c-define-abbrev-table" code nil nil [59203 59403])
            ("c-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [59405 59607])
            ("easy-menu-define" code nil nil [59610 59710])
            ("unless" code nil nil [61282 61351])
            ("define-derived-mode" code nil nil [61368 62371])
            ("c++-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table c++))) nil [62395 62524])
            ("c-define-abbrev-table" code nil nil [62526 62785])
            ("c++-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) (define-key map ":" (quote c-scope-operator)) (define-key map "<" (quote c-electric-lt-gt)) (define-key map ">" (quote c-electric-lt-gt)) map)) nil [62787 63144])
            ("easy-menu-define" code nil nil [63146 63256])
            ("define-derived-mode" code nil nil [63273 64303])
            ("objc-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table objc))) nil [64335 64467])
            ("c-define-abbrev-table" code nil nil [64469 64675])
            ("objc-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [64677 64894])
            ("easy-menu-define" code nil nil [64896 65011])
            ("define-derived-mode" code nil nil [65100 66147])
            ("java-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table java))) nil [66172 66304])
            ("c-define-abbrev-table" code nil nil [66306 66626])
            ("java-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) map)) nil [66628 66790])
            ("c-Java-defun-prompt-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\(\\(\\(public\\|protected\\|private\\|const\\|abstract\\|synchronized\\|final\\|static\\|threadsafe\\|transient\\|native\\|volatile\\)\\s-+\\)*\\(\\(\\([[a-zA-Z][][_$.a-zA-Z0-9]*[][_$.a-zA-Z0-9]+\\|[[a-zA-Z]\\)\\s-*\\)\\s-+\\)\\)?\\(\\([[a-zA-Z][][_$.a-zA-Z0-9]*\\s-+\\)\\s-*\\)?\\([_a-zA-Z][^][ 	:;.,{}()=]*\\|\\([_$a-zA-Z][_$.a-zA-Z0-9]*\\)\\)\\s-*\\(([^);{}]*)\\)?\\([] 	]*\\)\\(\\s-*\\<throws\\>\\s-*\\(\\([_$a-zA-Z][_$.a-zA-Z0-9]*\\)[, 	
]*\\)+\\)?\\s-*")
                nil [67047 67567])
            ("easy-menu-define" code nil nil [67569 67684])
            ("define-derived-mode" code nil nil [67776 68740])
            ("idl-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table idl))) nil [68781 68910])
            ("c-define-abbrev-table" code nil nil [68912 69011])
            ("idl-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) map)) nil [69013 69172])
            ("easy-menu-define" code nil nil [69174 69284])
            ("define-derived-mode" code nil nil [69374 70341])
            ("pike-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table pike))) nil [70366 70498])
            ("c-define-abbrev-table" code nil nil [70500 70706])
            ("pike-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [70708 70894])
            ("easy-menu-define" code nil nil [70896 71011])
            ("define-derived-mode" code nil nil [71211 72183])
            ("c-define-abbrev-table" code nil nil [72575 72779])
            ("awk-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "#" (quote self-insert-command)) (define-key map "/" (quote self-insert-command)) (define-key map "*" (quote self-insert-command)) (define-key map "" (quote undefined)) (define-key map "" (quote undefined)) (define-key map "" (quote undefined)) (define-key map "\341" (quote c-beginning-of-statement)) (define-key map "\345" (quote c-end-of-statement)) (define-key map "\201" (quote c-awk-beginning-of-defun)) (define-key map "\205" (quote c-awk-end-of-defun)) map)) nil [72781 73475])
            ("easy-menu-define" code nil nil [73477 73587])
            ("awk-mode-syntax-table" variable nil nil [73627 73657])
            ("declare-function" code nil nil [73658 73710])
            ("define-derived-mode" code nil nil [73727 74867])
            ("c-mode-help-address" variable
               (:constant-flag t
                :default-value "submit@debbugs.gnu.org")
                nil [74889 74987])
            ("c-version" function (:user-visible-flag t) nil [74989 75158])
            ("define-obsolete-variable-alias" code nil nil [75160 75256])
            ("c-prepare-bug-report-hook" variable nil nil [75257 75295])
            ("reporter-prompt-for-summary-p" variable nil nil [75336 75374])
            ("reporter-dont-compact-list" variable nil nil [75375 75410])
            ("c-mode-bug-package" variable
               (:constant-flag t
                :default-value "cc-mode")
                nil [75479 75564])
            ("declare-function" code nil nil [75615 75690])
            ("c-submit-bug-report" function (:user-visible-flag t) nil [75692 77795])
            ("cc-provide" code nil nil [77799 77820]))          
      :file "cc-mode.el.gz"
      :pointmax 77914
      :fsize 22084
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax '((close-paren 3485 . 3486) (symbol 3250 . 3267) (open-paren 3249 . 3250) (close-paren 3246 . 3247) (symbol 3152 . 3168) (open-paren 3151 . 3152)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [1297 1314])
            ("newcomment" include nil nil [1338 1359])
            ("unless" code nil nil [1546 2055])
            ("unless" code nil nil [1447 1543])
            ("unless" code nil nil [1380 1444])
            ("unless" code nil nil [2078 2269])
            ("octave" customgroup (:user-visible-flag t) nil [2272 2506])
            ("define-obsolete-function-alias" code nil nil [2508 2593])
            ("define-abbrev-table" code nil nil [2595 2745])
            ("octave-comment-char" variable (:default-value 35) nil [2747 2820])
            ("octave-comment-start" variable (:default-value (char-to-string octave-comment-char)) nil [2822 2937])
            ("octave-comment-start-skip" variable (:default-value "\\(^\\|\\S<\\)\\(?:%!\\|\\s<+\\)\\s-*") nil [2939 3067])
            ("octave-function-header-regexp" variable (:default-value (concat "^\\s-*\\_<\\(function\\)\\_>" "\\([^=;(
]*=[ 	]*\\|[ 	]*\\)\\(\\(?:\\w\\|\\s_\\)+\\)\\_>")) nil [3069 3354])
            ("octave-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\256" (quote octave-find-definition)) (define-key map "\212" (quote octave-indent-new-comment-line)) (define-key map "" (quote octave-previous-code-line)) (define-key map "" (quote octave-next-code-line)) (define-key map "" (quote octave-beginning-of-line)) (define-key map "" (quote octave-end-of-line)) (define-key map [remap down-list] (quote smie-down-list)) (define-key map "\210" (quote octave-mark-block)) (define-key map "]" (quote smie-close-block)) (define-key map "/" (quote smie-close-block)) (define-key map ";" (quote octave-update-function-file-comment)) (define-key map "d" (quote octave-help)) (define-key map "a" (quote octave-lookfor)) (define-key map "" (quote octave-source-file)) (define-key map "" (quote octave-insert-defun)) (define-key map "	l" (quote octave-send-line)) (define-key map "	b" (quote octave-send-block)) (define-key map "	f" (quote octave-send-defun)) (define-key map "	r" (quote octave-send-region)) (define-key map "	a" (quote octave-send-buffer)) (define-key map "	s" (quote octave-show-process-buffer)) (define-key map "	q" (quote octave-hide-process-buffer)) (define-key map "	k" (quote octave-kill-process)) (define-key map "	" (quote octave-send-line)) (define-key map "	" (quote octave-send-block)) (define-key map "	" (quote octave-send-defun)) (define-key map "	" (quote octave-send-region)) (define-key map "	" (quote octave-send-buffer)) (define-key map "	" (quote octave-show-process-buffer)) (define-key map "	" (quote octave-hide-process-buffer)) (define-key map "	" (quote octave-kill-process)) map)) nil [3358 5162])
            ("easy-menu-define" code nil nil [5166 7514])
            ("octave-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table))) (modify-syntax-entry 13 " " table) (modify-syntax-entry 43 "." table) (modify-syntax-entry 45 "." table) (modify-syntax-entry 61 "." table) (modify-syntax-entry 42 "." table) (modify-syntax-entry 47 "." table) (modify-syntax-entry 62 "." table) (modify-syntax-entry 60 "." table) (modify-syntax-entry 38 "." table) (modify-syntax-entry 124 "." table) (modify-syntax-entry 33 "." table) (modify-syntax-entry 92 "." table) (modify-syntax-entry 39 "." table) (modify-syntax-entry 96 "." table) (modify-syntax-entry 46 "." table) (modify-syntax-entry 34 "\"" table) (modify-syntax-entry 95 "_" table) (modify-syntax-entry 37 "< 13" table) (modify-syntax-entry 35 "< 13" table) (modify-syntax-entry 123 "(} 2c" table) (modify-syntax-entry 125 "){ 4c" table) (modify-syntax-entry 10 ">" table) table)) nil [7516 8974])
            ("octave-font-lock-texinfo-comment" variable (:default-value t) nil [8976 9117])
            ("octave-blink-matching-block" variable (:default-value t) nil [9119 9355])
            ("octave-block-offset" variable (:default-value 2) nil [9357 9479])
            ("octave-block-comment-start" variable (:default-value (concat (make-string 2 octave-comment-char) " ")) nil [9481 9636])
            ("octave-continuation-offset" variable (:default-value 4) nil [9638 9755])
            ("octave-continuation-marker-regexp" variable
               (:constant-flag t
                :default-value "\\\\\\|\\.\\.\\.")
                nil [9777 9840])
            ("octave-continuation-regexp" variable (:default-value (concat "[^#%
]*\\(" octave-continuation-marker-regexp "\\)\\s-*\\(\\s<.*\\)?$")) nil [9843 9972])
            ("octave-continuation-string" variable
               (:constant-flag t
                :default-value "...")
                nil [10036 10136])
            ("octave-mode-imenu-generic-expression" variable (:default-value (list (list nil octave-function-header-regexp 3))) nil [10138 10325])
            ("octave-mode-hook" variable nil nil [10327 10421])
            ("octave-send-show-buffer" variable (:default-value t) nil [10423 10549])
            ("octave-send-line-auto-forward" variable (:default-value t) nil [10551 10750])
            ("octave-send-echo-input" variable (:default-value t) nil [10752 10871])
            ("smie" include nil nil [10897 10912])
            ("let-when-compile" code nil nil [10914 15043])
            ("octave-smie--funcall-p" function nil nil [15209 15335])
            ("octave-smie--end-index-p" function nil nil [15337 15483])
            ("octave-smie--in-parens-p" function nil nil [15485 15618])
            ("octave-smie-backward-token" function nil nil [15620 16843])
            ("octave-smie-forward-token" function nil nil [16845 18226])
            ("octave--block-offset-keywords" variable
               (:constant-flag t
                :default-value (let* ((end-prec (nth 1 (assoc "end" octave-smie-grammar))) (end-matchers (delq nil (mapcar (lambda (x) (if (eq end-prec (nth 2 x)) (car x))) octave-smie-grammar)))) (delete "switch" end-matchers)))
                nil [18228 18720])
            ("octave-smie-rules" function (:arguments ("kind" "token")) nil [18722 19546])
            ("octave-indent-comment" function nil nil [19548 19951])
            ("octave-reserved-words" variable (:default-value (delq nil (mapcar (lambda (x) (setq x (car x)) (and (stringp x) (string-match "\\`[[:alpha:]]" x) x)) octave-smie-grammar))) nil [19955 20201])
            ("octave-font-lock-keywords" variable (:default-value (list (cons (concat "\\_<" (regexp-opt octave-reserved-words) "\\_>") (quote font-lock-keyword-face)) (list (lambda (limit) (while (re-search-forward "\\_<en\\(?:d\\|umeratio\\(n\\)\\)\\_>" limit (quote move)) (let ((beg (match-beginning 0)) (end (match-end 0))) (unless (octave-in-string-or-comment-p) (when (if (match-end 1) (octave-smie--funcall-p) (octave-smie--end-index-p)) (put-text-property beg end (quote face) nil))))) nil)) (cons octave-operator-regexp (quote font-lock-builtin-face)) (list octave-function-header-regexp (quote (1 font-lock-keyword-face)) (quote (3 font-lock-function-name-face nil t))))) nil [20203 21447])
            ("octave-syntax-propertize-function" function (:arguments ("start" "end")) nil [21449 22033])
            ("octave-syntax-propertize-sqs" function (:arguments ("end")) nil [22035 22706])
            ("electric-layout-rules" variable nil nil [22708 22738])
            ("define-derived-mode" code nil nil [22755 25771])
            ("inferior-octave-program" variable (:default-value "octave") nil [25775 25877])
            ("inferior-octave-buffer" variable (:default-value "*Inferior Octave*") nil [25879 26008])
            ("inferior-octave-prompt" variable (:default-value "\\(?:^octave\\(?:.bin\\|.exe\\)?\\(?:-[.0-9]+\\)?\\(?::[0-9]+\\)?\\|^debug\\|^\\)>+ ") nil [26010 26328])
            ("inferior-octave-prompt-read-only" variable (:default-value comint-prompt-read-only) nil [26330 26524])
            ("inferior-octave-startup-file" variable (:default-value (let ((n (file-name-nondirectory inferior-octave-program))) (locate-user-emacs-file (format "init_%s.m" n) (format ".emacs-%s" n)))) nil [26526 26893])
            ("inferior-octave-startup-args" variable (:default-value (quote ("-i" "--no-line-editing"))) nil [26895 27191])
            ("inferior-octave-mode-hook" variable nil nil [27193 27305])
            ("inferior-octave-error-regexp-alist" variable (:default-value (quote (("error:\\s-*\\(.*?\\) at line \\([0-9]+\\), column \\([0-9]+\\)" 1 2 3 2 1) ("warning:\\s-*\\([^:
]+\\):.*at line \\([0-9]+\\), column \\([0-9]+\\)" 1 2 3 1 1)))) nil [27307 27739])
            ("inferior-octave-compilation-font-lock-keywords" variable (:default-value (quote (("\\_<PASS\\_>" . compilation-info-face) ("\\_<FAIL\\_>" . compilation-error-face) ("\\_<\\(warning\\):" 1 compilation-warning-face) ("\\_<\\(error\\):" 1 compilation-error-face) ("^\\s-*!!!!!.*\\|^.*failed$" . compilation-error-face)))) nil [27741 28124])
            ("inferior-octave-process" variable nil nil [28126 28162])
            ("inferior-octave-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map comint-mode-map) (define-key map "\256" (quote octave-find-definition)) (define-key map "	" (quote completion-at-point)) (define-key map "d" (quote octave-help)) (define-key map "a" (quote octave-lookfor)) (define-key map "\277" (quote comint-dynamic-list-filename-completions)) (define-key map "" (quote inferior-octave-dynamic-list-input-ring)) (define-key map [menu-bar inout list-history] (quote ("List Input History" . inferior-octave-dynamic-list-input-ring))) map)) nil [28164 28811])
            ("inferior-octave-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table octave-mode-syntax-table))) table)) nil [28813 28987])
            ("inferior-octave-font-lock-keywords" variable (:default-value (list (cons inferior-octave-prompt (quote font-lock-type-face)))) nil [28989 29225])
            ("inferior-octave-output-list" variable nil nil [29227 29267])
            ("inferior-octave-output-string" variable nil nil [29268 29310])
            ("inferior-octave-receive-in-progress" variable nil nil [29311 29359])
            ("define-obsolete-variable-alias" code nil nil [29361 29459])
            ("inferior-octave-dynamic-complete-functions" variable (:default-value (quote (inferior-octave-completion-at-point comint-filename-completion))) nil [29461 29755])
            ("info-lookup-mode" variable nil nil [29757 29782])
            ("compilation-error-regexp-alist" variable nil nil [29783 29822])
            ("compilation-mode-font-lock-keywords" variable nil nil [29823 29867])
            ("declare-function" code nil nil [29869 29926])
            ("inferior-octave-process-live-p" function nil nil [29928 30012])
            ("define-derived-mode" code nil nil [30014 31727])
            ("inferior-octave" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31744 32566])
            ("defalias" code nil nil [32583 32622])
            ("inferior-octave-startup" function nil nil [32624 36122])
            ("inferior-octave-completion-table" function nil nil [36124 36412])
            ("inferior-octave-completion-at-point" function nil nil [36414 36990])
            ("define-obsolete-function-alias" code nil nil [36992 37080])
            ("inferior-octave-dynamic-list-input-ring" function (:user-visible-flag t) nil [37082 38210])
            ("inferior-octave-output-digest" function (:arguments ("_proc" "string")) nil [38212 38865])
            ("inferior-octave-check-process" function nil nil [38867 39059])
            ("inferior-octave-send-list-and-digest" function (:arguments ("list")) nil [39061 39857])
            ("inferior-octave-directory-tracker-resync" variable nil nil [39859 39912])
            ("make-variable-buffer-local" code nil nil [39913 39983])
            ("inferior-octave-directory-tracker" function (:arguments ("string")) nil [39985 40721])
            ("inferior-octave-resync-dirs" function
               (:user-visible-flag t
                :arguments ("noerror"))
                nil [40723 41195])
            ("inferior-octave-minimal-columns" variable (:default-value 80) nil [41197 41340])
            ("inferior-octave-last-column-width" variable nil nil [41342 41388])
            ("inferior-octave-track-window-width-change" function nil nil [41390 41849])
            ("octave-in-comment-p" function nil nil [41889 42000])
            ("octave-in-string-p" function nil nil [42002 42111])
            ("octave-in-string-or-comment-p" function nil nil [42113 42244])
            ("octave-looking-at-kw" function (:arguments ("regexp")) nil [42246 42396])
            ("octave-maybe-insert-continuation-string" function nil nil [42398 42665])
            ("octave-completing-read" function nil nil [42667 43039])
            ("octave-goto-function-definition" function (:arguments ("fn")) nil [43041 43793])
            ("octave-function-file-p" function nil nil [43795 44484])
            ("octave-skip-comment-forward" function (:arguments ("limit")) nil [44540 44813])
            ("octave-function-file-comment" function nil nil [44853 45640])
            ("octave-sync-function-file-names" function (:user-visible-flag t) nil [45642 47229])
            ("octave-update-function-file-comment" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [47231 48694])
            ("octave-function-comment-block" variable
               (:default-value (quote ((t (:inherit font-lock-doc-face))))
                :type "face")
                nil [48696 48825])
            ("texinfo" include nil nil [48846 48864])
            ("octave-font-lock-texinfo-comment" function nil nil [48867 50062])
            ("octave-indent-new-comment-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [50083 50399])
            ("octave--indent-new-comment-line" function (:arguments ("orig" "args")) nil [50401 50889])
            ("define-obsolete-function-alias" code nil nil [50891 50971])
            ("octave-next-code-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50986 51550])
            ("octave-previous-code-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51552 51887])
            ("octave-beginning-of-line" function (:user-visible-flag t) nil [51889 52777])
            ("octave-end-of-line" function (:user-visible-flag t) nil [52779 53698])
            ("octave-mark-block" function (:user-visible-flag t) nil [53700 54300])
            ("octave-beginning-of-defun" function (:arguments ("arg")) nil [54302 55058])
            ("octave-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [55060 58088])
            ("octave-completion-at-point" function nil nil [58090 58649])
            ("define-obsolete-function-alias" code nil nil [58651 58737])
            ("octave-add-log-current-defun" function nil nil [58739 59046])
            ("define-skeleton" code nil nil [59085 59973])
            ("octave-kill-process" function (:user-visible-flag t) nil [60026 60626])
            ("octave-show-process-buffer" function (:user-visible-flag t) nil [60628 60886])
            ("octave-hide-process-buffer" function (:user-visible-flag t) nil [60888 61153])
            ("octave-source-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [61155 61764])
            ("octave-send-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [61766 63053])
            ("octave-send-buffer" function (:user-visible-flag t) nil [63055 63203])
            ("octave-send-block" function (:user-visible-flag t) nil [63205 63394])
            ("octave-send-defun" function (:user-visible-flag t) nil [63396 63581])
            ("octave-send-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [63583 64108])
            ("octave-eval-print-last-sexp" function (:user-visible-flag t) nil [64110 64624])
            ("octave-eldoc-message-style" variable (:default-value (quote auto)) nil [64629 64899])
            ("octave-eldoc-cache" variable nil nil [64935 64966])
            ("octave-eldoc-function-signatures" function (:arguments ("fn")) nil [64968 65520])
            ("octave-eldoc-function" function nil nil [65522 67215])
            ("octave-help-buffer" variable (:default-value "*Octave Help*") nil [67217 67332])
            ("declare-function" code nil nil [67376 67434])
            ("define-button-type" code nil nil [67436 67563])
            ("define-button-type" code nil nil [67565 67737])
            ("octave-help-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\256" (quote octave-find-definition)) (define-key map "d" (quote octave-help)) (define-key map "a" (quote octave-lookfor)) map)) nil [67739 67953])
            ("define-derived-mode" code nil nil [67955 68307])
            ("octave-help" function
               (:user-visible-flag t
                :arguments ("fn"))
                nil [68309 70687])
            ("octave-lookfor" function
               (:user-visible-flag t
                :arguments ("str" "all"))
                nil [70689 72338])
            ("octave-source-directories" variable nil nil [72340 72545])
            ("octave-source-directories" function nil nil [72547 72856])
            ("octave-find-definition-filename-function" variable (:default-value (function octave-find-definition-default-filename)) nil [72858 72951])
            ("octave-find-definition-default-filename" function (:arguments ("name")) nil [72953 73794])
            ("find-tag-marker-ring" variable nil nil [73796 73825])
            ("octave-find-definition" function
               (:user-visible-flag t
                :arguments ("fn"))
                nil [73827 75147])
            ("octave" package nil nil [75149 75166]))          
      :file "octave.el.gz"
      :pointmax 75191
      :fsize 19498
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax '((close-paren 48864 . 48865) (symbol 48828 . 48845) (open-paren 48827 . 48828) (close-paren 9840 . 9841) (symbol 9758 . 9774) (open-paren 9757 . 9758) (close-paren 2269 . 2270) (symbol 2058 . 2075) (open-paren 2057 . 2058) (close-paren 2055 . 2056) (symbol 1361 . 1377) (open-paren 1360 . 1361)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("opascal" customgroup (:user-visible-flag t) nil [1755 1867])
            ("opascal-debug" variable (:constant-flag t) nil [1869 1924])
            ("define-obsolete-variable-alias" code nil nil [1926 2008])
            ("opascal-search-path" variable (:default-value ".") nil [2009 2301])
            ("define-obsolete-variable-alias" code nil nil [2303 2387])
            ("opascal-indent-level" variable (:default-value 3) nil [2388 2558])
            ("define-obsolete-variable-alias" code nil nil [2560 2662])
            ("opascal-compound-block-indent" variable nil nil [2663 3075])
            ("define-obsolete-variable-alias" code nil nil [3077 3171])
            ("opascal-case-label-indent" variable (:default-value opascal-indent-level) nil [3172 3625])
            ("define-obsolete-variable-alias" code nil nil [3627 3699])
            ("opascal-verbose" variable (:default-value t) nil [3700 3828])
            ("define-obsolete-variable-alias" code nil nil [3830 3926])
            ("opascal-tab-always-indents" variable (:default-value tab-always-indent) nil [3927 4136])
            ("make-obsolete-variable" code nil nil [4138 4301])
            ("opascal-directives" variable
               (:constant-flag t
                :default-value (quote (absolute abstract assembler automated cdecl default dispid dynamic export external far forward index inline message name near nodefault overload override pascal private protected public published read readonly register reintroduce resident resourcestring safecall stdcall stored virtual write writeonly)))
                nil [4303 4681])
            ("opascal-keywords" variable
               (:constant-flag t
                :default-value (append (quote (and array as asm at begin case class const constructor contains destructor dispinterface div do downto else end except exports file finalization finally for function goto if implementation implements in inherited initialization interface is label library mod nil not of object on or out package packed procedure program property raise record repeat requires result self set shl shr then threadvar to try type unit uses until var while with xor break exit)) opascal-directives))
                nil [4683 5399])
            ("opascal-previous-terminators" variable
               (:constant-flag t
                :default-value (\` (semicolon comma)))
                nil [5401 5531])
            ("opascal-comments" variable
               (:constant-flag t
                :default-value (quote (comment-single-line comment-multi-line-1 comment-multi-line-2)))
                nil [5533 5663])
            ("opascal-strings" variable
               (:constant-flag t
                :default-value (quote (string double-quoted-string)))
                nil [5665 5767])
            ("opascal-whitespace" variable
               (:constant-flag t
                :default-value (\` (space newline (\,@ opascal-comments))))
                nil [5769 5877])
            ("opascal-routine-statements" variable
               (:constant-flag t
                :default-value (quote (procedure function constructor destructor property)))
                nil [5879 6041])
            ("opascal-body-expr-statements" variable
               (:constant-flag t
                :default-value (quote (if while for on)))
                nil [6043 6213])
            ("opascal-expr-statements" variable
               (:constant-flag t
                :default-value (\` (case (\,@ opascal-body-expr-statements))))
                nil [6215 6355])
            ("opascal-body-statements" variable
               (:constant-flag t
                :default-value (\` (else (\,@ opascal-body-expr-statements))))
                nil [6357 6503])
            ("opascal-expr-delimiters" variable
               (:constant-flag t
                :default-value (quote (then do of)))
                nil [6505 6586])
            ("opascal-binary-ops" variable
               (:constant-flag t
                :default-value (quote (plus minus equals not-equals times divides div mod and or xor)))
                nil [6588 6715])
            ("opascal-visibilities" variable
               (:constant-flag t
                :default-value (quote (public private protected published automated)))
                nil [6717 6820])
            ("opascal-block-statements" variable
               (:constant-flag t
                :default-value (quote (begin try case repeat initialization finalization asm)))
                nil [6822 6968])
            ("opascal-mid-block-statements" variable
               (:constant-flag t
                :default-value (\` (except finally (\,@ opascal-visibilities))))
                nil [6970 7114])
            ("opascal-end-block-statements" variable
               (:constant-flag t
                :default-value (\` (end until)))
                nil [7116 7208])
            ("opascal-match-block-statements" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-end-block-statements) (\,@ opascal-mid-block-statements))))
                nil [7210 7381])
            ("opascal-decl-sections" variable
               (:constant-flag t
                :default-value (quote (type const var label resourcestring)))
                nil [7383 7502])
            ("opascal-interface-types" variable
               (:constant-flag t
                :default-value (quote (dispinterface interface)))
                nil [7504 7586])
            ("opascal-class-types" variable
               (:constant-flag t
                :default-value (quote (class object)))
                nil [7588 7651])
            ("opascal-composite-types" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-class-types) (\,@ opascal-interface-types) record)))
                nil [7653 7796])
            ("opascal-unit-sections" variable
               (:constant-flag t
                :default-value (quote (interface implementation program library package)))
                nil [7798 7932])
            ("opascal-use-clauses" variable
               (:constant-flag t
                :default-value (\` (uses requires exports contains)))
                nil [7934 8044])
            ("opascal-unit-statements" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-use-clauses) (\,@ opascal-unit-sections) initialization finalization)))
                nil [8046 8195])
            ("opascal-decl-delimiters" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-decl-sections) (\,@ opascal-unit-statements) (\,@ opascal-routine-statements))))
                nil [8197 8382])
            ("opascal-decl-matchers" variable
               (:constant-flag t
                :default-value (\` (begin (\,@ opascal-decl-sections))))
                nil [8384 8522])
            ("opascal-enclosing-statements" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-block-statements) (\,@ opascal-mid-block-statements) (\,@ opascal-decl-sections) (\,@ opascal-use-clauses) (\,@ opascal-routine-statements))))
                nil [8524 8742])
            ("opascal-previous-statements" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-unit-statements) (\,@ opascal-routine-statements))))
                nil [8744 8877])
            ("opascal-previous-enclosing-statements" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-block-statements) (\,@ opascal-mid-block-statements) (\,@ opascal-decl-sections))))
                nil [8879 9063])
            ("opascal-begin-enclosing-tokens" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-block-statements) (\,@ opascal-mid-block-statements))))
                nil [9065 9213])
            ("opascal-begin-previous-tokens" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-decl-sections) (\,@ opascal-routine-statements))))
                nil [9215 9398])
            ("opascal-space-chars" variable
               (:constant-flag t
                :default-value " -	- ")
                nil [9400 9448])
            ("opascal-non-space-chars" variable
               (:constant-flag t
                :default-value (concat "^" opascal-space-chars))
                nil [9465 9532])
            ("opascal-spaces-re" variable
               (:constant-flag t
                :default-value (concat "[" opascal-space-chars "]*"))
                nil [9533 9599])
            ("opascal-leading-spaces-re" variable
               (:constant-flag t
                :default-value (concat "^" opascal-spaces-re))
                nil [9600 9667])
            ("opascal-word-chars" variable
               (:constant-flag t
                :default-value "a-zA-Z0-9_")
                nil [9668 9710])
            ("opascal-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 92 "." st) (modify-syntax-entry 34 "\"" st) (modify-syntax-entry 39 "\"" st) (modify-syntax-entry 123 "<" st) (modify-syntax-entry 125 ">" st) (modify-syntax-entry 40 "()1" st) (modify-syntax-entry 41 ")(4" st) (modify-syntax-entry 42 ". 23b" st) (modify-syntax-entry 47 ". 12c" st) (modify-syntax-entry 10 "> c" st) st)) nil [9712 10222])
            ("opascal-save-excursion" function (:arguments ("forms")) nil [10224 10506])
            ("opascal-is" function (:arguments ("element" "in-set")) nil [10508 10649])
            ("opascal-string-of" function (:arguments ("start" "end")) nil [10651 10783])
            ("opascal-looking-at-string" function (:arguments ("p" "s")) nil [10785 11027])
            ("opascal-token-of" function (:arguments ("kind" "start" "end")) nil [11029 11162])
            ("opascal-token-kind" function (:arguments ("token")) nil [11164 11276])
            ("opascal-set-token-kind" function (:arguments ("token" "to-kind")) nil [11278 11400])
            ("opascal-token-start" function (:arguments ("token")) nil [11402 11523])
            ("opascal-token-end" function (:arguments ("token")) nil [11525 11642])
            ("opascal-set-token-start" function (:arguments ("token" "start")) nil [11644 11763])
            ("opascal-set-token-end" function (:arguments ("token" "end")) nil [11765 11876])
            ("opascal-token-string" function (:arguments ("token")) nil [11878 12058])
            ("opascal-in-token" function (:arguments ("p" "token")) nil [12060 12242])
            ("opascal-column-of" function (:arguments ("p")) nil [12244 12363])
            ("opascal-progress-last-reported-point" variable nil nil [12365 12465])
            ("opascal-parsing-progress-step" variable
               (:constant-flag t
                :default-value 16384)
                nil [12467 12585])
            ("opascal-scanning-progress-step" variable
               (:constant-flag t
                :default-value 2048)
                nil [12586 12705])
            ("opascal-progress-start" function nil nil [12707 12827])
            ("opascal-progress-done" function (:arguments ("msgs")) nil [12829 13055])
            ("opascal-step-progress" function (:arguments ("p" "desc" "step-size")) nil [13057 13693])
            ("opascal-next-line-start" function (:arguments ("from-point")) nil [13695 13990])
            ("opascal--literal-start-re" variable
               (:constant-flag t
                :default-value (regexp-opt (quote ("//" "{" "(*" "'" "\""))))
                nil [13992 14067])
            ("opascal-literal-kind" function (:arguments ("p")) nil [14069 14998])
            ("opascal-literal-start-pattern" function (:arguments ("literal-kind")) nil [15000 15347])
            ("opascal-literal-end-pattern" function (:arguments ("literal-kind")) nil [15349 15692])
            ("opascal-literal-stop-pattern" function (:arguments ("literal-kind")) nil [15694 16159])
            ("opascal-is-literal-end" function (:arguments ("p")) nil [16161 16364])
            ("opascal-literal-token-at" function (:arguments ("p")) nil [16366 17113])
            ("opascal-point-token-at" function (:arguments ("p" "kind")) nil [17115 17245])
            ("opascal-char-token-at" function (:arguments ("p" "char" "kind")) nil [17247 17503])
            ("opascal-charset-token-at" function (:arguments ("p" "charset" "kind")) nil [17505 17956])
            ("opascal-space-token-at" function (:arguments ("p")) nil [17958 18154])
            ("opascal-word-token-at" function (:arguments ("p")) nil [18156 18728])
            ("opascal-explicit-token-at" function (:arguments ("p" "token-string" "kind")) nil [18730 19025])
            ("opascal-token-at" function (:arguments ("p")) nil [19027 20122])
            ("opascal-current-token" function nil nil [20124 20248])
            ("opascal-next-token" function (:arguments ("token")) nil [20250 20580])
            ("opascal-previous-token" function (:arguments ("token")) nil [20582 20940])
            ("opascal-next-visible-token" function (:arguments ("token")) nil [20942 21239])
            ("opascal-group-start" function (:arguments ("from-token")) nil [21241 21797])
            ("opascal-group-end" function (:arguments ("from-token")) nil [21799 22339])
            ("opascal-indent-of" function (:arguments ("token" "offset")) nil [22341 22848])
            ("opascal-line-indent-of" function (:arguments ("from-token" "offset" "terminators")) nil [22850 23838])
            ("opascal-stmt-line-indent-of" function (:arguments ("from-token" "offset")) nil [23840 25018])
            ("opascal-open-group-indent" function (:arguments ("token" "last-token" "offset")) nil [25020 25398])
            ("opascal-composite-type-start" function (:arguments ("token" "last-token")) nil [25400 25769])
            ("opascal-is-simple-class-type" function (:arguments ("at-token" "limit-token")) nil [25771 26875])
            ("opascal-block-start" function (:arguments ("from-token" "stop-on-class")) nil [26877 28666])
            ("opascal-else-start" function (:arguments ("from-else")) nil [28668 29915])
            ("opascal-comment-content-start" function (:arguments ("comment")) nil [29917 30342])
            ("opascal-comment-block-start" function (:arguments ("comment")) nil [30344 31085])
            ("opascal-comment-block-end" function (:arguments ("comment")) nil [31087 31811])
            ("opascal-on-first-comment-line" function (:arguments ("comment")) nil [31813 32171])
            ("opascal-comment-indent-of" function (:arguments ("comment")) nil [32173 33197])
            ("opascal-is-use-clause-end" function (:arguments ("at-token" "last-token" "last-colon" "from-kind")) nil [33199 34271])
            ("opascal-is-block-after-expr-statement" function (:arguments ("token")) nil [34273 34890])
            ("opascal-previous-indent-of" function (:arguments ("from-token")) nil [34892 40185])
            ("opascal-section-indent-of" function (:arguments ("section-token")) nil [40187 43669])
            ("opascal-enclosing-indent-of" function (:arguments ("from-token")) nil [43671 53045])
            ("opascal-corrected-indentation" function nil nil [53047 55088])
            ("opascal-indent-line" function (:user-visible-flag t) nil [55090 56071])
            ("opascal-mode-abbrev-table" variable nil nil [56073 56160])
            ("define-abbrev-table" code nil nil [56161 56212])
            ("opascal-ensure-buffer" function (:arguments ("buffer-var" "buffer-name")) nil [56214 56461])
            ("opascal-log-msg" function (:arguments ("to-buffer" "the-msg")) nil [56463 56789])
            ("opascal-debug-buffer" variable nil nil [56814 56919])
            ("opascal-debug-log" function (:arguments ("format-string" "args")) nil [56921 57317])
            ("opascal-debug-token-string" function (:arguments ("token")) nil [57319 57624])
            ("opascal-debug-show-current-token" function nil nil [57626 57807])
            ("opascal-debug-goto-point" function (:arguments ("p")) nil [57809 57892])
            ("opascal-debug-goto-next-token" function nil nil [57894 58031])
            ("opascal-debug-goto-previous-token" function nil nil [58033 58181])
            ("opascal-debug-show-current-string" function (:arguments ("from" "to")) nil [58183 58316])
            ("opascal-debug-tokenize-region" function (:arguments ("from" "to")) nil [58318 58669])
            ("opascal-debug-tokenize-buffer" function nil nil [58671 58785])
            ("opascal-debug-tokenize-window" function nil nil [58787 58905])
            ("opascal-tab" function (:user-visible-flag t) nil [58908 59800])
            ("make-obsolete" code nil nil [59802 59861])
            ("opascal-is-directory" function (:arguments ("path")) nil [59863 60040])
            ("opascal-is-file" function (:arguments ("path")) nil [60042 60213])
            ("opascal-search-directory" function (:arguments ("unit" "dir" "recurse")) nil [60215 61199])
            ("opascal-find-unit-in-directory" function (:arguments ("unit" "dir")) nil [61202 61816])
            ("opascal-find-unit-file" function (:arguments ("unit")) nil [61818 62396])
            ("opascal-find-unit" function
               (:user-visible-flag t
                :arguments ("unit"))
                nil [62398 62993])
            ("opascal-find-current-def" function (:user-visible-flag t) nil [62995 63171])
            ("opascal-find-current-xdef" function (:user-visible-flag t) nil [63173 63541])
            ("opascal-find-current-body" function (:user-visible-flag t) nil [63543 63741])
            ("opascal-fill-comment" function (:user-visible-flag t) nil [63743 67174])
            ("opascal-new-comment-line" function (:user-visible-flag t) nil [67176 68012])
            ("opascal-match-token" function (:arguments ("token" "limit")) nil [68014 68403])
            ("opascal-font-lock-keywords" variable
               (:constant-flag t
                :default-value (\` (("\\_<\\(function\\|pro\\(cedure\\|gram\\)\\)[ 	]+\\([[:alpha:]][[:alnum:]_]*\\)" (1 font-lock-keyword-face) (3 font-lock-function-name-face)) (\, (concat "\\_<" (regexp-opt (mapcar (function symbol-name) opascal-keywords)) "\\_>")))))
                nil [68405 68691])
            ("opascal-font-lock-defaults" variable
               (:constant-flag t
                :default-value (quote (opascal-font-lock-keywords nil nil nil nil)))
                nil [68693 69046])
            ("opascal--syntax-propertize" variable
               (:constant-flag t
                :default-value (syntax-propertize-rules ("/\\(\\*\\)" (1 ". 3b")) ("(\\(\\/\\)" (1 (prog1 ". 1c" (forward-char -1) nil))) ("''\\|\"\"" (0 (if (save-excursion (nth 3 (syntax-ppss (match-beginning 0)))) (string-to-syntax ".") (forward-char -1) nil)))))
                nil [69048 69806])
            ("opascal-debug-mode-map" variable (:default-value (let ((kmap (make-sparse-keymap))) (dolist (binding (quote (("n" opascal-debug-goto-next-token) ("p" opascal-debug-goto-previous-token) ("t" opascal-debug-show-current-token) ("T" opascal-debug-tokenize-buffer) ("W" opascal-debug-tokenize-window) ("g" opascal-debug-goto-point) ("s" opascal-debug-show-current-string)))) (define-key kmap (car binding) (cadr binding))) kmap)) nil [69808 70409])
            ("opascal-mode-map" variable (:default-value (let ((kmap (make-sparse-keymap))) (dolist (binding (list (quote ("u" opascal-find-unit)) (quote ("\361" opascal-fill-comment)) (quote ("\352" opascal-new-comment-line)) (list "" opascal-debug-mode-map))) (define-key kmap (car binding) (cadr binding))) kmap)) nil [70411 71019])
            ("define-obsolete-variable-alias" code nil nil [71021 71097])
            ("define-obsolete-function-alias" code nil nil [71113 71179])
            ("define-derived-mode" code nil nil [71195 72850])
            ("opascal" package nil nil [72852 72870]))          
      :file "opascal.el.gz"
      :pointmax 72896
      :fsize 15940
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("let" code nil nil [1213 1428])
            ("cc-require" code nil nil [1431 1452])
            ("cc-eval-when-compile" code nil nil [1454 1516])
            ("when" code nil nil [1759 2003])
            ("c-constant-symbol" function (:arguments ("sym" "len")) nil [2074 2647])
            ("define-widget" code nil nil [2650 3268])
            ("define-widget" code nil nil [3270 3449])
            ("define-widget" code nil nil [3451 4353])
            ("c-style-variables" variable (:default-value (quote (c-basic-offset c-comment-only-line-offset c-indent-comment-alist c-indent-comments-syntactically-p c-block-comment-prefix c-comment-prefix-regexp c-doc-comment-style c-cleanup-list c-hanging-braces-alist c-hanging-colons-alist c-hanging-semi&comma-criteria c-backslash-column c-backslash-max-column c-special-indent-hook c-label-minimum-indentation c-offsets-alist))) nil [4355 4804])
            ("c-fallback-style" variable nil nil [4806 4835])
            ("c-set-stylevar-fallback" function (:arguments ("name" "val")) nil [4837 4986])
            ("defcustom-c-stylevar" function (:arguments ("name" "val" "doc" "args")) nil [4988 6808])
            ("c-valid-offset" function (:arguments ("offset")) nil [6810 7556])
            ("c-string-list-p" function (:arguments ("val")) nil [7558 7764])
            ("c-string-or-string-list-p" function (:arguments ("val")) nil [7766 7914])
            ("c-strict-syntax-p" variable (:user-visible-flag t) nil [7937 8526])
            ("c-echo-syntactic-information-p" variable (:user-visible-flag t) nil [8528 8672])
            ("c-report-syntactic-errors" variable (:user-visible-flag t) nil [8674 9169])
            ("defcustom-c-stylevar" code nil nil [9171 9386])
            ("c-tab-always-indent" variable
               (:user-visible-flag t
                :default-value t)
                nil [9456 10492])
            ("c-insert-tab-function" variable
               (:user-visible-flag t
                :default-value (quote insert-tab))
                nil [10494 10901])
            ("c-syntactic-indentation" variable
               (:user-visible-flag t
                :default-value t)
                nil [10903 11485])
            ("make-variable-buffer-local" code nil nil [11486 11539])
            ("put" code nil nil [11540 11601])
            ("c-syntactic-indentation-in-macros" variable
               (:user-visible-flag t
                :default-value t)
                nil [11603 12503])
            ("put" code nil nil [12504 12575])
            ("c-defun-tactic" variable
               (:user-visible-flag t
                :default-value (quote go-outward))
                nil [12577 13201])
            ("defcustom-c-stylevar" code nil nil [13203 14052])
            ("defcustom-c-stylevar" code nil nil [14054 16955])
            ("defcustom-c-stylevar" code nil nil [16957 17407])
            ("make-obsolete-variable" code nil nil [17409 17497])
            ("defcustom-c-stylevar" code nil nil [17831 18647])
            ("defcustom-c-stylevar" code nil nil [18649 21155])
            ("defcustom-c-stylevar" code nil nil [21157 24047])
            ("c-ignore-auto-fill" variable
               (:user-visible-flag t
                :default-value (quote (string cpp code)))
                nil [24049 24845])
            ("defcustom-c-stylevar" code nil nil [24847 29638])
            ("defcustom-c-stylevar" code nil nil [29640 32490])
            ("c-max-one-liner-length" variable (:default-value 80) nil [32492 32664])
            ("defcustom-c-stylevar" code nil nil [32666 33470])
            ("defcustom-c-stylevar" code nil nil [33472 34278])
            ("defcustom-c-stylevar" code nil nil [34280 34695])
            ("defcustom-c-stylevar" code nil nil [34768 35149])
            ("c-auto-align-backslashes" variable
               (:user-visible-flag t
                :default-value t)
                nil [35151 35567])
            ("c-backspace-function" variable
               (:user-visible-flag t
                :default-value (quote backward-delete-char-untabify))
                nil [35569 35734])
            ("c-delete-function" variable
               (:user-visible-flag t
                :default-value (quote delete-char))
                nil [35736 35884])
            ("c-require-final-newline" variable
               (:user-visible-flag t
                :default-value (quote ((c-mode . t) (c++-mode . t) (objc-mode . t))))
                nil [35886 37526])
            ("c-electric-pound-behavior" variable (:user-visible-flag t) nil [37528 37717])
            ("c-special-indent-hook" variable (:user-visible-flag t) nil [37719 37967])
            ("defcustom-c-stylevar" code nil nil [37969 38357])
            ("c-progress-interval" variable
               (:user-visible-flag t
                :default-value 5)
                nil [38359 38653])
            ("c-objc-method-arg-min-delta-to-bracket" variable
               (:user-visible-flag t
                :default-value 2)
                nil [38655 39242])
            ("c-objc-method-arg-unfinished-offset" variable
               (:user-visible-flag t
                :default-value 4)
                nil [39244 39461])
            ("c-objc-method-parameter-offset" variable
               (:user-visible-flag t
                :default-value 4)
                nil [39463 39723])
            ("c-default-style" variable
               (:user-visible-flag t
                :default-value (quote ((java-mode . "java") (awk-mode . "awk") (other . "gnu"))))
                nil [39725 41432])
            ("c-set-stylevar-fallback" code nil nil [41863 50177])
            ("c-offsets-alist" variable nil nil [50178 60232])
            ("c-inside-block-syms" variable
               (:constant-flag t
                :default-value (quote (defun-block-intro block-open block-close statement statement-cont statement-block-intro statement-case-intro statement-case-open substatement substatement-open substatement-label case-label label do-while-closure else-clause catch-clause inlambda annotation-var-cont)))
                nil [60329 60643])
            ("c-style-variables-are-local-p" variable
               (:user-visible-flag t
                :default-value t)
                nil [60645 61615])
            ("c-mode-hook" variable (:user-visible-flag t) nil [61617 61700])
            ("c++-mode-hook" variable (:user-visible-flag t) nil [61702 61789])
            ("objc-mode-hook" variable (:user-visible-flag t) nil [61791 61880])
            ("java-mode-hook" variable (:user-visible-flag t) nil [61882 61971])
            ("idl-mode-hook" variable (:user-visible-flag t) nil [61973 62060])
            ("pike-mode-hook" variable (:user-visible-flag t) nil [62062 62151])
            ("awk-mode-hook" variable (:user-visible-flag t) nil [62153 62240])
            ("c-mode-common-hook" variable (:user-visible-flag t) nil [62242 62368])
            ("c-initialization-hook" variable (:user-visible-flag t) nil [62370 62611])
            ("c-enable-xemacs-performance-kludge-p" variable (:user-visible-flag t) nil [62613 63147])
            ("c-old-style-variable-behavior" variable (:user-visible-flag t) nil [63149 63937])
            ("define-widget" code nil nil [63939 64123])
            ("c-make-font-lock-extra-types-blurb" function (:arguments ("mode1" "mode2" "example")) nil [64125 65191])
            ("c-font-lock-extra-types" variable (:default-value (quote ("\\sw+_t" "bool" "complex" "imaginary" "FILE" "lconv" "tm" "va_list" "jmp_buf" "Lisp_Object"))) nil [65510 66232])
            ("c++-font-lock-extra-types" variable (:default-value (quote ("\\sw+_t" "FILE" "lconv" "tm" "va_list" "jmp_buf" "istream" "istreambuf" "ostream" "ostreambuf" "ifstream" "ofstream" "fstream" "strstream" "strstreambuf" "istrstream" "ostrstream" "ios" "string" "rope" "list" "slist" "deque" "vector" "bit_vector" "set" "multiset" "map" "multimap" "hash" "hash_set" "hash_multiset" "hash_map" "hash_multimap" "stack" "queue" "priority_queue" "type_info" "iterator" "const_iterator" "reverse_iterator" "const_reverse_iterator" "reference" "const_reference"))) nil [66234 67347])
            ("objc-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw*"))) nil [67349 67775])
            ("java-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw"))) nil [67777 68192])
            ("idl-font-lock-extra-types" variable nil nil [68194 68336])
            ("pike-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw*"))) nil [68338 68764])
            ("put" code nil nil [68905 68970])
            ("put" code nil nil [68971 69048])
            ("c-macro-with-semi-re" variable nil nil [69050 69284])
            ("make-variable-buffer-local" code nil nil [69285 69335])
            ("c-macro-names-with-semicolon" variable (:default-value (quote ("Q_OBJECT" "Q_PROPERTY" "Q_DECLARE" "Q_ENUMS"))) nil [69337 70010])
            ("make-variable-buffer-local" code nil nil [70011 70069])
            ("put" code nil nil [70070 70159])
            ("c-make-macro-with-semi-re" function nil nil [70161 70901])
            ("c-file-style" variable nil nil [70903 71311])
            ("make-variable-buffer-local" code nil nil [71312 71354])
            ("c-file-offsets" variable nil nil [71429 71864])
            ("make-variable-buffer-local" code nil nil [71865 71909])
            ("cc-bytecomp-defvar" code nil nil [72368 72408])
            ("c-syntactic-context" variable nil nil [72409 72437])
            ("put" code nil nil [72438 73046])
            ("cc-bytecomp-defvar" code nil nil [73049 73089])
            ("c-syntactic-element" variable nil nil [73090 73118])
            ("put" code nil nil [73119 73967])
            ("c-indentation-style" variable nil nil [73969 74170])
            ("c-current-comment-prefix" variable nil nil [74172 74307])
            ("make-variable-buffer-local" code nil nil [74308 74362])
            ("c-string-par-start" variable (:default-value "\\|[ 	]*\\\\?$") nil [74551 74768])
            ("c-string-par-separate" variable (:default-value "[ 	]*\\\\?$") nil [74770 74993])
            ("c-sentence-end-with-esc-eol" variable (:default-value (concat "\\(\\(" (c-default-value-sentence-end) "\\)" "\\|" "[.?!][]\"')}]* ?\\\\\\($\\)[ 	
]*" "\\)")) nil [74995 75308])
            ("cc-provide" code nil nil [75312 75333]))          
      :file "cc-vars.el.gz"
      :pointmax 75427
      :fsize 21189
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax '((close-paren 2647 . 2648) (symbol 2055 . 2071) (open-paren 2054 . 2055) (close-paren 1428 . 1429) (symbol 1193 . 1210) (open-paren 1192 . 1193)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cc-mode" include nil nil [4192 4210])
            ("cl-lib" include nil nil [4211 4228])
            ("hide-ifdef" customgroup (:user-visible-flag t) nil [4230 4306])
            ("hide-ifdef-initially" variable nil nil [4308 4460])
            ("hide-ifdef-read-only" variable nil nil [4462 4609])
            ("hide-ifdef-lines" variable nil nil [4611 4739])
            ("hide-ifdef-shadow" variable nil nil [4741 4882])
            ("hide-ifdef-shadow" variable
               (:default-value (quote ((t (:inherit shadow))))
                :type "face")
                nil [4884 5012])
            ("hide-ifdef-exclude-define-regexp" variable nil nil [5014 5187])
            ("hide-ifdef-expand-reinclusion-protection" variable (:default-value t) nil [5189 5873])
            ("hide-ifdef-header-regexp" variable (:default-value "\\.h\\(h\\|xx\\|pp\\|\\+\\+\\)?\\'") nil [5875 6152])
            ("hide-ifdef-mode-submap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "d" (quote hide-ifdef-define)) (define-key map "u" (quote hide-ifdef-undef)) (define-key map "D" (quote hide-ifdef-set-define-alist)) (define-key map "U" (quote hide-ifdef-use-define-alist)) (define-key map "h" (quote hide-ifdefs)) (define-key map "s" (quote show-ifdefs)) (define-key map "" (quote hide-ifdef-block)) (define-key map "" (quote show-ifdef-block)) (define-key map "e" (quote hif-evaluate-macro)) (define-key map "C" (quote hif-clear-all-ifdef-defined)) (define-key map "" (quote hide-ifdef-toggle-read-only)) (define-key map "" (quote hide-ifdef-toggle-shadowing)) (substitute-key-definition (quote read-only-mode) (quote hide-ifdef-toggle-outside-read-only) map) (substitute-key-definition (quote toggle-read-only) (quote hide-ifdef-toggle-outside-read-only) map) map)) nil [6154 7186])
            ("hide-ifdef-mode-prefix-key" variable
               (:constant-flag t
                :default-value "@")
                nil [7188 7282])
            ("hide-ifdef-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map hide-ifdef-mode-prefix-key hide-ifdef-mode-submap) map)) nil [7284 7547])
            ("easy-menu-define" code nil nil [7549 8899])
            ("hide-ifdef-hiding" variable nil nil [8901 8968])
            ("or" code nil nil [8970 9126])
            ("hide-ifdef-syntax-table" variable (:default-value (let ((st (copy-syntax-table c-mode-syntax-table))) (modify-syntax-entry 95 "w" st) (modify-syntax-entry 38 "." st) (modify-syntax-entry 124 "." st) st)) nil [9190 9447])
            ("hide-ifdef-env" variable nil nil [9449 9526])
            ("hide-ifdef-env-backup" variable nil nil [9528 9736])
            ("hif-outside-read-only" variable nil nil [9738 9848])
            ("define-minor-mode" code nil nil [9865 13165])
            ("hif-clear-all-ifdef-defined" function (:user-visible-flag t) nil [13167 13507])
            ("hif-show-all" function (:user-visible-flag t) nil [13509 13646])
            ("hif-after-revert-function" function nil nil [13806 13907])
            ("add-hook" code nil nil [13908 13964])
            ("hif-end-of-line" function nil nil [13966 14084])
            ("hif-merge-ifdef-region" function (:arguments ("start" "end")) nil [14086 16185])
            ("hide-ifdef-region-internal" function (:arguments ("start" "end")) nil [16187 16475])
            ("hide-ifdef-region" function (:arguments ("start" "end")) nil [16477 16826])
            ("hif-show-ifdef-region" function (:arguments ("start" "end")) nil [16828 17066])
            ("hide-ifdef-evaluator" variable (:default-value (quote eval)) nil [17216 17394])
            ("hif-undefined-symbol" variable nil nil [17396 17474])
            ("hif-set-var" function (:arguments ("var" "value")) nil [17477 17621])
            ("declare-function" code nil nil [17623 17693])
            ("declare-function" code nil nil [17694 17764])
            ("hif-lookup" function (:arguments ("var")) nil [17766 18006])
            ("hif-defined" function (:arguments ("var")) nil [18008 18172])
            ("hif-cpp-prefix" variable
               (:constant-flag t
                :default-value "\\(^\\|\\)[ 	]*#[ 	]*")
                nil [18315 18373])
            ("hif-ifxdef-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "if\\(n\\)?def"))
                nil [18374 18444])
            ("hif-ifndef-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "ifndef"))
                nil [18445 18508])
            ("hif-ifx-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "if\\(n?def\\)?[ 	]+"))
                nil [18509 18586])
            ("hif-elif-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "elif"))
                nil [18587 18648])
            ("hif-else-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "else"))
                nil [18649 18710])
            ("hif-endif-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "endif"))
                nil [18711 18773])
            ("hif-ifx-else-endif-regexp" variable
               (:constant-flag t
                :default-value (concat hif-ifx-regexp "\\|" hif-elif-regexp "\\|" hif-else-regexp "\\|" hif-endif-regexp))
                nil [18774 18913])
            ("hif-macro-expr-prefix-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "\\(if\\(n?def\\)?\\|elif\\|define\\)[ 	]+"))
                nil [18914 19024])
            ("hif-white-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*")
                nil [19026 19065])
            ("hif-define-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "\\(define\\|undef\\)"))
                nil [19066 19143])
            ("hif-id-regexp" variable
               (:constant-flag t
                :default-value (concat "[[:alpha:]_][[:alnum:]_]*"))
                nil [19144 19211])
            ("hif-macroref-regexp" variable
               (:constant-flag t
                :default-value (concat hif-white-regexp "\\(" hif-id-regexp "\\)" hif-white-regexp "\\(" "(" hif-white-regexp "\\(" hif-id-regexp "\\)?" hif-white-regexp "\\(" "," hif-white-regexp hif-id-regexp hif-white-regexp "\\)*" "\\(\\.\\.\\.\\)?" hif-white-regexp ")" "\\)?"))
                nil [19212 19567])
            ("hif-token" variable nil nil [19659 19677])
            ("hif-token-list" variable nil nil [19678 19701])
            ("hif-token-alist" variable
               (:constant-flag t
                :default-value (quote (("||" . hif-or) ("&&" . hif-and) ("|" . hif-logior) ("^" . hif-logxor) ("&" . hif-logand) ("<<" . hif-shiftleft) (">>" . hif-shiftright) ("==" . hif-equal) ("=" . hif-assign) ("!=" . hif-notequal) ("##" . hif-token-concat) ("!" . hif-not) ("~" . hif-lognot) ("(" . hif-lparen) (")" . hif-rparen) (">" . hif-greater) ("<" . hif-less) (">=" . hif-greater-equal) ("<=" . hif-less-equal) ("+" . hif-plus) ("-" . hif-minus) ("*" . hif-multiply) ("/" . hif-divide) ("%" . hif-modulo) ("?" . hif-conditional) (":" . hif-colon) ("," . hif-comma) ("#" . hif-stringify) ("..." . hif-etc))))
                nil [19703 20662])
            ("hif-valid-token-list" variable
               (:constant-flag t
                :default-value (mapcar (quote cdr) hif-token-alist))
                nil [20664 20725])
            ("hif-token-regexp" variable
               (:constant-flag t
                :default-value (concat (regexp-opt (mapcar (quote car) hif-token-alist)) "\\|0x[0-9a-fA-F]+\\.?[0-9a-fA-F]*" "\\|[0-9]+\\.?[0-9]*" "\\|\\w+"))
                nil [20727 20924])
            ("hif-string-literal-regexp" variable
               (:constant-flag t
                :default-value "\\(\"\\(?:[^\"\\]\\|\\\\.\\)*\"\\)")
                nil [20926 21000])
            ("hif-string-to-number" function (:arguments ("string" "base")) nil [21002 21511])
            ("hif-simple-token-only" variable nil nil [21920 21950])
            ("hif-tokenize" function (:arguments ("start" "end")) nil [21952 24084])
            ("hif-nexttoken" function nil nil [25938 26079])
            ("hif-if-valid-identifier-p" function (:arguments ("id")) nil [26081 26172])
            ("hif-define-operator" function (:arguments ("tokens")) nil [26174 27079])
            ("hif-flatten" function (:arguments ("l")) nil [27081 27279])
            ("hif-expand-token-list" function (:arguments ("tokens" "macroname" "expand_list")) nil [27281 30304])
            ("hif-parse-exp" function (:arguments ("token-list" "macroname")) nil [30306 30756])
            ("hif-exprlist" function nil nil [30758 31126])
            ("hif-expr" function nil nil [31128 31602])
            ("hif-or-expr" function nil nil [31604 31840])
            ("hif-and-expr" function nil nil [31842 32097])
            ("hif-logior-expr" function nil nil [32099 32365])
            ("hif-logxor-expr" function nil nil [32367 32635])
            ("hif-logand-expr" function nil nil [32637 32889])
            ("hif-eq-expr" function nil nil [32891 33197])
            ("hif-comp-expr" function nil nil [33199 33619])
            ("hif-logshift-expr" function nil nil [33621 33946])
            ("hif-math" function nil nil [33948 34282])
            ("hif-muldiv-expr" function nil nil [34284 34636])
            ("hif-factor" function nil nil [34638 36186])
            ("hif-get-argument-list" function nil nil [36188 36939])
            ("hif-place-macro-invocation" function (:arguments ("ident")) nil [36941 37079])
            ("hif-string-concatenation" function nil nil [37081 37441])
            ("hif-define-macro" function (:arguments ("_parmlist" "_token-body")) nil [37443 37760])
            ("hif-stringify" function (:arguments ("a")) nil [37762 38004])
            ("intern-safe" function (:arguments ("str")) nil [38006 38071])
            ("hif-token-concat" function (:arguments ("a" "b")) nil [38073 39092])
            ("hif-mathify" function (:arguments ("val")) nil [39094 39225])
            ("hif-conditional" function (:arguments ("a" "b" "c")) nil [39227 39327])
            ("hif-and" function (:arguments ("a" "b")) nil [39328 39417])
            ("hif-or" function (:arguments ("a" "b")) nil [39418 39505])
            ("hif-not" function (:arguments ("a")) nil [39506 39551])
            ("hif-lognot" function (:arguments ("a")) nil [39552 39601])
            ("hif-mathify-binop" function (:arguments ("fun")) nil [39603 39762])
            ("hif-shiftleft" function (:arguments ("a" "b")) nil [39764 39890])
            ("hif-shiftright" function (:arguments ("a" "b")) nil [39892 40027])
            ("defalias" code nil nil [40030 40081])
            ("defalias" code nil nil [40082 40133])
            ("defalias" code nil nil [40134 40185])
            ("defalias" code nil nil [40186 40237])
            ("defalias" code nil nil [40238 40289])
            ("defalias" code nil nil [40290 40341])
            ("defalias" code nil nil [40342 40394])
            ("defalias" code nil nil [40395 40446])
            ("defalias" code nil nil [40447 40498])
            ("defalias" code nil nil [40499 40551])
            ("defalias" code nil nil [40552 40604])
            ("defalias" code nil nil [40605 40661])
            ("defalias" code nil nil [40662 40718])
            ("defalias" code nil nil [40719 40775])
            ("hif-comma" function (:arguments ("expr")) nil [40778 41006])
            ("hif-token-stringification" function (:arguments ("l")) nil [41008 41486])
            ("hif-token-concatenation" function (:arguments ("l")) nil [41488 42114])
            ("hif-delimit" function (:arguments ("lis" "atom")) nil [42116 42249])
            ("hif-macro-supply-arguments" function (:arguments ("macro-name" "actual-parms")) nil [42281 45019])
            ("hif-invoke" function (:arguments ("macro-name" "actual-parms")) nil [45021 45335])
            ("hif-canonicalize-tokens" function (:arguments ("regexp")) nil [45392 46102])
            ("hif-canonicalize" function (:arguments ("regexp")) nil [46104 46949])
            ("hif-find-any-ifX" function nil nil [46951 47163])
            ("hif-find-next-relevant" function nil nil [47166 47516])
            ("hif-find-previous-relevant" function nil nil [47518 47877])
            ("hif-looking-at-ifX" function nil nil [47880 47939])
            ("hif-looking-at-endif" function nil nil [47970 48033])
            ("hif-looking-at-else" function nil nil [48034 48095])
            ("hif-looking-at-elif" function nil nil [48097 48158])
            ("hif-ifdef-to-endif" function nil nil [48161 48764])
            ("hif-endif-to-ifdef" function nil nil [48767 49431])
            ("forward-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49468 49935])
            ("backward-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49938 50435])
            ("down-ifdef" function (:user-visible-flag t) nil [50438 50709])
            ("up-ifdef" function (:user-visible-flag t) nil [50712 51042])
            ("next-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51044 51438])
            ("previous-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51440 51853])
            ("hif-make-range" function (:arguments ("start" "end" "else" "elif")) nil [52214 52300])
            ("hif-range-start" function (:arguments ("range")) nil [52302 52350])
            ("hif-range-else" function (:arguments ("range")) nil [52351 52398])
            ("hif-range-end" function (:arguments ("range")) nil [52399 52445])
            ("hif-range-elif" function (:arguments ("range")) nil [52446 52493])
            ("hif-find-range" function nil nil [52715 54015])
            ("hif-hide-line" function (:arguments ("point")) nil [54035 54316])
            ("hif-recurse-level" variable nil nil [55410 55438])
            ("hif-recurse-on" function (:arguments ("start" "end" "dont-go-eol")) nil [55440 55809])
            ("hif-possibly-hide" function (:arguments ("expand-reinclusion")) nil [55811 58993])
            ("hif-evaluate-region" function (:arguments ("start" "end")) nil [58995 59447])
            ("hif-evaluate-macro" function
               (:user-visible-flag t
                :arguments ("rstart" "rend"))
                nil [59449 62028])
            ("hif-parse-macro-arglist" function (:arguments ("str")) nil [62030 62757])
            ("hif-find-define" function
               (:user-visible-flag t
                :arguments ("min" "max"))
                nil [64448 67708])
            ("hif-add-new-defines" function
               (:user-visible-flag t
                :arguments ("min" "max"))
                nil [67711 68051])
            ("hide-ifdef-guts" function nil nil [68053 68944])
            ("hide-ifdef-toggle-read-only" function (:user-visible-flag t) nil [69023 69405])
            ("hide-ifdef-toggle-outside-read-only" function (:user-visible-flag t) nil [69407 69789])
            ("hide-ifdef-toggle-shadowing" function (:user-visible-flag t) nil [69791 70360])
            ("hide-ifdef-define" function
               (:user-visible-flag t
                :arguments ("var" "val"))
                nil [70362 71174])
            ("hif-undefine-symbol" function (:arguments ("var")) nil [71176 71292])
            ("hide-ifdef-undef" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [71294 72005])
            ("hide-ifdefs" function
               (:user-visible-flag t
                :arguments ("nomsg"))
                nil [72007 72901])
            ("show-ifdefs" function (:user-visible-flag t) nil [72904 73112])
            ("hif-find-ifdef-block" function nil nil [73115 73824])
            ("hide-ifdef-block" function
               (:user-visible-flag t
                :arguments ("arg" "start" "end"))
                nil [73827 74646])
            ("show-ifdef-block" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [74648 76090])
            ("hide-ifdef-define-alist" variable nil nil [76124 76213])
            ("hif-compress-define-list" function (:arguments ("env")) nil [76215 76440])
            ("hide-ifdef-set-define-alist" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [76442 76663])
            ("hide-ifdef-use-define-alist" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [76665 77280])
            ("hideif" package nil nil [77282 77299]))          
      :file "hideif.el.gz"
      :pointmax 77325
      :fsize 20172
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("pascal" customgroup (:user-visible-flag t) nil [2338 2504])
            ("pascal-mode-abbrev-table" variable nil nil [2506 2591])
            ("define-abbrev-table" code nil nil [2592 2642])
            ("pascal-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map ";" (quote electric-pascal-semi-or-dot)) (define-key map "." (quote electric-pascal-semi-or-dot)) (define-key map ":" (quote electric-pascal-colon)) (define-key map "=" (quote electric-pascal-equal)) (define-key map "#" (quote electric-pascal-hash)) (define-key map "\211" (quote completion-at-point)) (define-key map "\277" (quote completion-help-at-point)) (define-key map "" (quote backward-delete-char-untabify)) (define-key map "\210" (quote pascal-mark-defun)) (define-key map "" (quote pascal-insert-block)) (define-key map "\252" (quote pascal-star-comment)) (define-key map "" (quote pascal-comment-area)) (define-key map "" (quote pascal-uncomment-area)) (define-key map "\201" (quote pascal-beg-of-defun)) (define-key map "\205" (quote pascal-end-of-defun)) (define-key map "" (quote pascal-goto-defun)) (define-key map "" (quote pascal-outline-mode)) map)) nil [2644 4156])
            ("pascal-imenu-generic-expression" variable (:default-value (quote ((nil "^[ 	]*\\(function\\|procedure\\)[ 	
]+\\([a-zA-Z0-9_.:]+\\)" 2)))) nil [4158 4347])
            ("pascal-keywords" variable (:default-value (quote ("and" "array" "begin" "case" "const" "div" "do" "downto" "else" "end" "file" "for" "function" "goto" "if" "in" "label" "mod" "nil" "not" "of" "or" "packed" "procedure" "program" "record" "repeat" "set" "then" "to" "type" "until" "var" "while" "with" "get" "put" "input" "output" "read" "readln" "reset" "rewrite" "write" "writeln"))) nil [4349 4795])
            ("pascal-symbol-re" variable
               (:constant-flag t
                :default-value "\\<[a-zA-Z_][a-zA-Z_0-9.]*\\>")
                nil [4860 4924])
            ("pascal-beg-block-re" variable
               (:constant-flag t
                :default-value "\\<\\(begin\\|case\\|record\\|repeat\\)\\>")
                nil [4925 5002])
            ("pascal-end-block-re" variable
               (:constant-flag t
                :default-value "\\<\\(end\\|until\\)\\>")
                nil [5003 5061])
            ("pascal-declaration-re" variable
               (:constant-flag t
                :default-value "\\<\\(const\\|label\\|type\\|var\\)\\>")
                nil [5062 5135])
            ("pascal-progbeg-re" variable
               (:constant-flag t
                :default-value "\\<\\program\\>")
                nil [5136 5186])
            ("pascal-defun-re" variable
               (:constant-flag t
                :default-value "\\<\\(function\\|procedure\\|program\\)\\>")
                nil [5187 5264])
            ("pascal-sub-block-re" variable
               (:constant-flag t
                :default-value "\\<\\(if\\|else\\|for\\|while\\|with\\)\\>")
                nil [5265 5342])
            ("pascal-noindent-re" variable
               (:constant-flag t
                :default-value "\\<\\(begin\\|end\\|until\\|else\\)\\>")
                nil [5343 5416])
            ("pascal-nosemi-re" variable
               (:constant-flag t
                :default-value "\\<\\(begin\\|repeat\\|then\\|do\\|else\\)\\>")
                nil [5417 5497])
            ("pascal-autoindent-lines-re" variable
               (:constant-flag t
                :default-value "\\<\\(label\\|var\\|type\\|const\\|until\\|end\\|begin\\|repeat\\|else\\)\\>")
                nil [5498 5616])
            ("pascal-exclude-str-start" variable
               (:constant-flag t
                :default-value "{-----\\/----- EXCLUDED -----\\/-----")
                nil [5678 5805])
            ("pascal-exclude-str-end" variable
               (:constant-flag t
                :default-value " -----/\\----- EXCLUDED -----/\\-----}")
                nil [5806 5926])
            ("pascal-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 92 "." st) (modify-syntax-entry 40 "()1" st) (modify-syntax-entry 41 ")(4" st) (modify-syntax-entry 42 ". 23" st) (modify-syntax-entry 47 ". 12c" st) (modify-syntax-entry 10 "> c" st) (modify-syntax-entry 123 "<" st) (modify-syntax-entry 125 ">" st) (modify-syntax-entry 43 "." st) (modify-syntax-entry 45 "." st) (modify-syntax-entry 61 "." st) (modify-syntax-entry 37 "." st) (modify-syntax-entry 60 "." st) (modify-syntax-entry 62 "." st) (modify-syntax-entry 38 "." st) (modify-syntax-entry 124 "." st) (modify-syntax-entry 95 "_" st) (modify-syntax-entry 39 "\"" st) st)) nil [5928 7037])
            ("pascal-font-lock-keywords" variable
               (:constant-flag t
                :default-value (\` (("\\_<\\(function\\|pro\\(cedure\\|gram\\)\\)[ 	]+\\([[:alpha:]][[:alnum:]_]*\\)" (1 font-lock-keyword-face) (3 font-lock-function-name-face)) ((\, (concat "\\_<\\(array\\|boolean\\|c\\(har\\|onst\\)\\|file\\|" "integer\\|re\\(al\\|cord\\)\\|type\\|var\\)\\_>")) . font-lock-type-face) ("\\_<\\(label\\|external\\|forward\\)\\_>" . font-lock-constant-face) ("\\_<\\([0-9]+\\)[ 	]*:" 1 font-lock-function-name-face) (\, (concat "\\_<\\(" "and\\|begin\\|case\\|do\\|e\\(lse\\|nd\\)\\|for\\|i[fn]\\|" "not\\|o[fr]\\|repeat\\|t\\(hen\\|o\\)\\|until\\|w\\(hile\\|ith\\)" "\\)\\_>")) ("\\_<\\(goto\\)\\_>[ 	]*\\([0-9]+\\)?" (1 font-lock-keyword-face) (2 font-lock-keyword-face t)))))
                nil [7041 8129])
            ("pascal--syntax-propertize" variable
               (:constant-flag t
                :default-value (syntax-propertize-rules ("/\\(\\*\\)" (1 ". 3b")) ("(\\(\\/\\)" (1 (prog1 ". 1c" (forward-char -1) nil))) ("''\\|\"\"" (0 (if (save-excursion (nth 3 (syntax-ppss (match-beginning 0)))) (string-to-syntax ".") (forward-char -1) nil)))))
                nil [8131 8888])
            ("pascal-indent-level" variable (:default-value 3) nil [8890 9028])
            ("pascal-case-indent" variable (:default-value 2) nil [9030 9133])
            ("pascal-auto-newline" variable nil nil [9135 9348])
            ("pascal-indent-nested-functions" variable (:default-value t) nil [9350 9477])
            ("pascal-tab-always-indent" variable (:default-value t) nil [9479 9728])
            ("pascal-auto-endcomments" variable (:default-value t) nil [9730 10012])
            ("pascal-auto-lineup" variable (:default-value (quote (all))) nil [10014 10650])
            ("pascal-toggle-completions" variable nil nil [10652 10896])
            ("make-obsolete-variable" code nil nil [10897 11007])
            ("pascal-type-keywords" variable (:default-value (quote ("array" "file" "packed" "char" "integer" "real" "string" "record"))) nil [11009 11402])
            ("pascal-start-keywords" variable (:default-value (quote ("begin" "end" "function" "procedure" "repeat" "until" "while" "read" "readln" "reset" "rewrite" "write" "writeln"))) nil [11404 11878])
            ("pascal-separator-keywords" variable (:default-value (quote ("downto" "else" "mod" "div" "then"))) nil [11880 12274])
            ("pascal-declaration-end" function nil nil [12298 12623])
            ("pascal-declaration-beg" function nil nil [12626 12998])
            ("pascal-within-string" function nil nil [13001 13089])
            ("define-derived-mode" code nil nil [13107 16004])
            ("electric-pascal-terminate-line" function (:user-visible-flag t) nil [16041 17146])
            ("electric-pascal-semi-or-dot" function (:user-visible-flag t) nil [17149 17422])
            ("electric-pascal-colon" function (:user-visible-flag t) nil [17424 17794])
            ("electric-pascal-equal" function (:user-visible-flag t) nil [17796 18064])
            ("electric-pascal-hash" function (:user-visible-flag t) nil [18066 18355])
            ("electric-pascal-tab" function (:user-visible-flag t) nil [18357 18973])
            ("pascal--extra-indent" variable nil nil [19012 19043])
            ("pascal-insert-block" function (:user-visible-flag t) nil [19045 19322])
            ("pascal-star-comment" function (:user-visible-flag t) nil [19324 19604])
            ("pascal-mark-defun" function (:user-visible-flag t) nil [19606 19910])
            ("pascal-comment-area" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [19912 21108])
            ("pascal-uncomment-area" function (:user-visible-flag t) nil [21110 22326])
            ("pascal-beg-of-defun" function (:user-visible-flag t) nil [22328 23426])
            ("pascal-end-of-defun" function (:user-visible-flag t) nil [23428 24379])
            ("pascal-end-of-statement" function (:user-visible-flag t) nil [24381 25455])
            ("pascal-downcase-keywords" function (:user-visible-flag t) nil [25457 25598])
            ("pascal-upcase-keywords" function (:user-visible-flag t) nil [25600 25735])
            ("pascal-capitalize-keywords" function (:user-visible-flag t) nil [25737 25884])
            ("pascal-change-keywords" function (:arguments ("change-word")) nil [25932 26216])
            ("pascal-set-auto-comments" function nil nil [26249 27716])
            ("pascal-indent-alist" variable
               (:constant-flag t
                :default-value (quote ((block + pascal--extra-indent pascal-indent-level) (case + pascal--extra-indent pascal-case-indent) (caseblock . pascal--extra-indent) (cpp . 0) (declaration + pascal--extra-indent pascal-indent-level) (paramlist pascal-indent-paramlist t) (comment pascal-indent-comment) (defun . pascal--extra-indent) (contexp . pascal--extra-indent) (unknown . pascal--extra-indent) (string . 0) (progbeg . 0))))
                nil [27745 28224])
            ("pascal-indent-command" function nil nil [28226 28920])
            ("pascal-indent-line" function nil nil [28922 29941])
            ("pascal-calculate-indent" function nil nil [29943 33546])
            ("pascal-indent-level" function nil nil [33548 33934])
            ("pascal-indent-comment" function nil nil [33936 34149])
            ("pascal-indent-case" function nil nil [34151 35214])
            ("pascal-indent-paramlist" function (:arguments ("arg")) nil [35216 36057])
            ("pascal-indent-declaration" function (:arguments ("arg" "start" "end")) nil [36059 37594])
            ("pascal-get-lineup-indent" function (:arguments ("b" "e" "str")) nil [37722 38671])
            ("pascal-string-diff" function (:arguments ("str1" "str2")) nil [38696 39037])
            ("pascal-func-completion" function (:arguments ("type" "pascal-str")) nil [39223 40349])
            ("pascal-get-completion-decl" function (:arguments ("pascal-str")) nil [40351 41247])
            ("pascal-type-completion" function (:arguments ("pascal-str")) nil [41249 41954])
            ("pascal-var-completion" function (:arguments ("prefix")) nil [41956 43491])
            ("pascal-keyword-completion" function (:arguments ("keyword-list" "pascal-str")) nil [43494 43779])
            ("pascal-completion-cache" variable nil nil [44274 44310])
            ("pascal-completion" function (:arguments ("pascal-str" "pascal-pred" "pascal-flag")) nil [44312 46679])
            ("pascal-last-word-numb" variable nil nil [46681 46713])
            ("pascal-last-word-shown" variable nil nil [46714 46749])
            ("pascal-last-completions" variable nil nil [46750 46786])
            ("pascal-completions-at-point" function nil nil [46788 47022])
            ("define-obsolete-function-alias" code nil nil [47024 47108])
            ("define-obsolete-function-alias" code nil nil [47110 47202])
            ("pascal-get-default-symbol" function nil nil [47205 47487])
            ("pascal-build-defun-re" function (:arguments ("str" "arg")) nil [47489 47844])
            ("pascal-comp-defun" function (:arguments ("pascal-str" "pascal-pred" "pascal-flag")) nil [48353 49048])
            ("pascal-goto-defun" function (:user-visible-flag t) nil [49050 50237])
            ("pascal-outline-map" variable (:default-value (let ((map (make-sparse-keymap))) (if (fboundp (quote set-keymap-name)) (set-keymap-name pascal-outline-map (quote pascal-outline-map))) (define-key map "\201" (quote pascal-outline-prev-defun)) (define-key map "\205" (quote pascal-outline-next-defun)) (define-key map "" (quote pascal-outline-goto-defun)) (define-key map "" (quote pascal-show-all)) (define-key map "" (quote pascal-hide-other-defuns)) map)) nil [50274 50771])
            ("define-obsolete-function-alias" code nil nil [50773 50849])
            ("define-minor-mode" code nil nil [50850 51901])
            ("pascal-outline-change" function (:arguments ("b" "e" "hide")) nil [51903 52286])
            ("pascal-show-all" function (:user-visible-flag t) nil [52288 52424])
            ("pascal-hide-other-defuns" function (:user-visible-flag t) nil [52426 54229])
            ("pascal-outline-next-defun" function (:user-visible-flag t) nil [54231 54392])
            ("pascal-outline-prev-defun" function (:user-visible-flag t) nil [54394 54559])
            ("pascal-outline-goto-defun" function (:user-visible-flag t) nil [54561 54725])
            ("pascal" package nil nil [54727 54744]))          
      :file "pascal.el.gz"
      :pointmax 54770
      :fsize 13835
      :lastmodtime '(22387 39328 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs!25.1!share!emacs!25.1!lisp!progmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
