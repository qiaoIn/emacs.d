;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("define-category" code nil nil [1328 1411])
            ("define-category" code nil nil [1412 1440])
            ("define-category" code nil nil [1441 1468])
            ("define-category" code nil nil [1469 1497])
            ("define-category" code nil nil [1498 1527])
            ("define-category" code nil nil [1528 1557])
            ("define-category" code nil nil [1558 1589])
            ("define-category" code nil nil [1590 1639])
            ("define-category" code nil nil [1640 1683])
            ("define-category" code nil nil [1684 1714])
            ("define-category" code nil nil [1715 1746])
            ("define-category" code nil nil [1747 1776])
            ("define-category" code nil nil [1777 1825])
            ("define-category" code nil nil [1826 1864])
            ("define-category" code nil nil [1865 1894])
            ("define-category" code nil nil [1895 1921])
            ("define-category" code nil nil [1922 1952])
            ("define-category" code nil nil [2005 2090])
            ("define-category" code nil nil [2091 2174])
            ("define-category" code nil nil [2175 2252])
            ("define-category" code nil nil [2253 2345])
            ("define-category" code nil nil [2346 2438])
            ("define-category" code nil nil [2439 2525])
            ("define-category" code nil nil [2526 2609])
            ("define-category" code nil nil [2610 2646])
            ("define-category" code nil nil [2682 2714])
            ("define-category" code nil nil [2715 2773])
            ("define-category" code nil nil [2774 2859])
            ("define-category" code nil nil [2860 2945])
            ("define-category" code nil nil [2946 3003])
            ("define-category" code nil nil [3004 3033])
            ("define-category" code nil nil [3034 3062])
            ("define-category" code nil nil [3063 3134])
            ("define-category" code nil nil [3135 3169])
            ("define-category" code nil nil [3170 3208])
            ("define-category" code nil nil [3226 3317])
            ("define-category" code nil nil [3351 3452])
            ("define-category" code nil nil [3534 3623])
            ("define-category" code nil nil [3624 3707])
            ("define-category" code nil nil [3731 3812])
            ("define-category" code nil nil [3813 3902])
            ("define-category" code nil nil [3918 4078])
            ("define-category" code nil nil [4080 4236])
            ("modify-category-entry" code nil nil [4355 4393])
            ("modify-category-entry" code nil nil [4394 4432])
            ("modify-category-entry" code nil nil [4683 4728])
            ("modify-category-entry" code nil nil [4729 4774])
            ("modify-category-entry" code nil nil [4775 4820])
            ("modify-category-entry" code nil nil [4821 4866])
            ("modify-category-entry" code nil nil [4867 4912])
            ("modify-category-entry" code nil nil [4913 4958])
            ("modify-category-entry" code nil nil [4959 5004])
            ("modify-category-entry" code nil nil [5005 5050])
            ("modify-category-entry" code nil nil [5051 5096])
            ("modify-category-entry" code nil nil [5097 5144])
            ("modify-category-entry" code nil nil [5145 5192])
            ("modify-category-entry" code nil nil [5193 5240])
            ("map-charset-chars" code nil nil [5278 5353])
            ("map-charset-chars" code nil nil [5354 5429])
            ("map-charset-chars" code nil nil [5430 5505])
            ("map-charset-chars" code nil nil [5507 5569])
            ("map-charset-chars" code nil nil [5570 5646])
            ("map-charset-chars" code nil nil [5647 5723])
            ("map-charset-chars" code nil nil [5724 5800])
            ("map-charset-chars" code nil nil [5801 5877])
            ("map-charset-chars" code nil nil [5878 5954])
            ("map-charset-chars" code nil nil [5955 6031])
            ("map-charset-chars" code nil nil [6032 6108])
            ("map-charset-chars" code nil nil [6109 6185])
            ("map-charset-chars" code nil nil [6220 6272])
            ("map-charset-chars" code nil nil [6273 6339])
            ("map-charset-chars" code nil nil [6340 6406])
            ("map-charset-chars" code nil nil [6407 6473])
            ("dolist" code nil nil [6512 6879])
            ("map-charset-chars" code nil nil [6949 7014])
            ("map-charset-chars" code nil nil [7016 7078])
            ("dolist" code nil nil [7080 7273])
            ("modify-category-entry" code nil nil [7299 7345])
            ("let" code nil nil [7387 7528])
            ("modify-category-entry" code nil nil [7548 7593])
            ("modify-category-entry" code nil nil [7594 7639])
            ("modify-category-entry" code nil nil [7640 7685])
            ("modify-category-entry" code nil nil [7686 7732])
            ("modify-category-entry" code nil nil [7733 7767])
            ("modify-category-entry" code nil nil [7787 7832])
            ("modify-category-entry" code nil nil [7833 7879])
            ("modify-category-entry" code nil nil [7880 7914])
            ("modify-category-entry" code nil nil [7915 7948])
            ("modify-category-entry" code nil nil [7949 7982])
            ("map-charset-chars" code nil nil [7997 8075])
            ("map-charset-chars" code nil nil [8076 8154])
            ("let" code nil nil [8155 8266])
            ("map-charset-chars" code nil nil [8268 8347])
            ("map-charset-chars" code nil nil [8348 8427])
            ("map-charset-chars" code nil nil [8428 8507])
            ("map-charset-chars" code nil nil [8508 8587])
            ("map-charset-chars" code nil nil [8588 8667])
            ("map-charset-chars" code nil nil [8668 8747])
            ("let" code nil nil [8748 8866])
            ("map-charset-chars" code nil nil [8881 8959])
            ("let" code nil nil [8979 9093])
            ("modify-syntax-entry" code nil nil [9095 9125])
            ("modify-syntax-entry" code nil nil [9126 9156])
            ("map-charset-chars" code nil nil [9193 9255])
            ("map-charset-chars" code nil nil [9257 9332])
            ("map-charset-chars" code nil nil [9333 9408])
            ("map-charset-chars" code nil nil [9409 9484])
            ("map-charset-chars" code nil nil [9485 9560])
            ("map-charset-chars" code nil nil [9561 9637])
            ("map-charset-chars" code nil nil [9638 9714])
            ("map-charset-chars" code nil nil [9715 9791])
            ("map-charset-chars" code nil nil [9792 9868])
            ("map-charset-chars" code nil nil [9869 9945])
            ("map-charset-chars" code nil nil [9946 10022])
            ("map-charset-chars" code nil nil [10023 10099])
            ("let" code nil nil [10140 10463])
            ("let" code nil nil [10490 10705])
            ("modify-category-entry" code nil nil [10706 10749])
            ("modify-category-entry" code nil nil [10750 10793])
            ("modify-category-entry" code nil nil [10794 10839])
            ("modify-category-entry" code nil nil [10840 10885])
            ("modify-syntax-entry" code nil nil [10927 10955])
            ("modify-category-entry" code nil nil [10984 11029])
            ("modify-category-entry" code nil nil [11030 11075])
            ("let" code nil nil [11076 11205])
            ("map-charset-chars" code nil nil [11206 11262])
            ("modify-syntax-entry" code nil nil [11302 11333])
            ("modify-syntax-entry" code nil nil [11342 11373])
            ("modify-syntax-entry" code nil nil [11382 11413])
            ("modify-syntax-entry" code nil nil [11426 11457])
            ("modify-syntax-entry" code nil nil [11467 11498])
            ("modify-category-entry" code nil nil [11589 11632])
            ("map-charset-chars" code nil nil [11633 11695])
            ("map-charset-chars" code nil nil [11696 11759])
            ("modify-category-entry" code nil nil [11783 11826])
            ("map-charset-chars" code nil nil [11827 11878])
            ("let" code nil nil [11880 12690])
            ("modify-category-entry" code nil nil [12724 12767])
            ("map-charset-chars" code nil nil [12768 12827])
            ("let" code nil nil [12829 13642])
            ("modify-category-entry" code nil nil [13670 13713])
            ("map-charset-chars" code nil nil [13714 13769])
            ("map-charset-chars" code nil nil [13770 13834])
            ("let" code nil nil [13836 14984])
            ("map-charset-chars" code nil nil [15055 15126])
            ("map-charset-chars" code nil nil [15127 15198])
            ("map-charset-chars" code nil nil [15200 15271])
            ("map-charset-chars" code nil nil [15272 15343])
            ("let" code nil nil [15345 15788])
            ("let" code nil nil [15802 16468])
            ("let" code nil nil [16563 16847])
            ("unicode-property-table-internal" code nil nil [17170 17214])
            ("unicode-property-table-internal" code nil nil [17215 17262])
            ("modify-category-entry" code nil nil [17274 17317])
            ("let" code nil nil [17319 29786])
            ("let" code nil nil [29788 31319])
            ("let" code nil nil [31492 33426])
            ("set-char-table-range" code nil nil [33540 33599])
            ("set-char-table-range" code nil nil [33600 33659])
            ("set-char-table-range" code nil nil [33660 33719])
            ("set-char-table-range" code nil nil [33720 33779])
            ("set-char-table-range" code nil nil [33780 33839])
            ("set-char-table-range" code nil nil [33840 33901])
            ("let" code nil nil [34054 36877])
            ("let" code nil nil [36928 39450])
            ("map-charset-chars" code nil nil [39695 39806])
            ("map-charset-chars" code nil nil [39807 39918])
            ("cjk-char-width-table-list" variable (:default-value (quote ((ja_JP nil (japanese-jisx0208 (8481 . 10366)) (cp932-2-byte (33088 . 34719))) (zh_CN nil (chinese-gb2312 (8481 . 10622))) (zh_HK nil (big5-hkscs (41280 . 41982) (50848 . 51454))) (zh_TW nil (big5 (41280 . 41982)) (chinese-cns11643-1 (8481 . 17022))) (ko_KR nil (korean-ksc5601 (8481 . 11390)))))) nil [40350 40735])
            ("use-cjk-char-width-table" function (:arguments ("locale-name")) nil [40867 41672])
            ("use-default-char-width-table" function nil nil [41674 41917])
            ("optimize-char-table" code nil nil [41919 41962])
            ("optimize-char-table" code nil nil [41963 42008])
            ("if" code nil nil [42042 42210])
            ("map-charset-chars" code nil nil [42212 42330])
            ("when" code nil nil [42371 42763])
            ("optimize-char-table" code nil nil [42765 42812])
            ("char-acronym-table" variable (:default-value (make-char-table (quote char-acronym-table) nil)) nil [42853 42979])
            ("let" code nil nil [42981 43326])
            ("let" code nil nil [43328 43686])
            ("aset" code nil nil [43688 43728])
            ("aset" code nil nil [43757 43797])
            ("aset" code nil nil [43826 43865])
            ("aset" code nil nil [43888 43927])
            ("aset" code nil nil [43955 43993])
            ("aset" code nil nil [44017 44055])
            ("aset" code nil nil [44080 44118])
            ("aset" code nil nil [44143 44181])
            ("aset" code nil nil [44211 44249])
            ("aset" code nil nil [44279 44317])
            ("aset" code nil nil [44350 44388])
            ("aset" code nil nil [44417 44455])
            ("aset" code nil nil [44484 44521])
            ("aset" code nil nil [44539 44577])
            ("aset" code nil nil [44610 44648])
            ("aset" code nil nil [44682 44721])
            ("aset" code nil nil [44755 44794])
            ("aset" code nil nil [44829 44868])
            ("aset" code nil nil [44896 44935])
            ("aset" code nil nil [44962 45003])
            ("aset" code nil nil [45033 45071])
            ("aset" code nil nil [45107 45145])
            ("aset" code nil nil [45185 45223])
            ("aset" code nil nil [45264 45305])
            ("aset" code nil nil [45335 45376])
            ("aset" code nil nil [45404 45446])
            ("aset" code nil nil [45474 45513])
            ("aset" code nil nil [45542 45584])
            ("aset" code nil nil [45613 45655])
            ("aset" code nil nil [45682 45724])
            ("aset" code nil nil [45755 45797])
            ("aset" code nil nil [45826 45868])
            ("aset" code nil nil [45884 45926])
            ("dotimes" code nil nil [45939 46025])
            ("aset" code nil nil [46026 46068])
            ("update-glyphless-char-display" function (:arguments ("variable" "value")) nil [46083 47833])
            ("glyphless-set-char-table-range" function (:arguments ("chartable" "from" "to" "method")) nil [47835 48114])
            ("glyphless-char-display-control" variable (:default-value (quote ((format-control . thin-space) (no-font . hex-code)))) nil [48164 51056])
            ("setq" code nil nil [51088 51174])
            ("setq" code nil nil [51176 51281]))          
      :file "characters.el.gz"
      :pointmax 51357
      :fsize 13989
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1258 1275])
            ("dos-codepage" variable nil nil [1278 1299])
            ("widget-value" function (:prototype-flag t) nil [1300 1335])
            ("mule-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "f" (quote set-buffer-file-coding-system)) (define-key map "r" (quote revert-buffer-with-coding-system)) (define-key map "F" (quote set-file-name-coding-system)) (define-key map "t" (quote set-terminal-coding-system)) (define-key map "k" (quote set-keyboard-coding-system)) (define-key map "p" (quote set-buffer-process-coding-system)) (define-key map "x" (quote set-selection-coding-system)) (define-key map "X" (quote set-next-selection-coding-system)) (define-key map "" (quote set-input-method)) (define-key map "c" (quote universal-coding-system-argument)) (define-key map "l" (quote set-language-environment)) map)) nil [1379 2114])
            ("define-key" code nil nil [2166 2207])
            ("describe-language-environment-map" variable (:default-value (let ((map (make-sparse-keymap "Describe Language Environment"))) (bindings--define-key map [Default] (quote (menu-item "Default" describe-specified-language-support))) map)) nil [2209 2434])
            ("setup-language-environment-map" variable (:default-value (let ((map (make-sparse-keymap "Set Language Environment"))) (bindings--define-key map [Default] (quote (menu-item "Default" setup-specified-language-environment))) map)) nil [2436 2654])
            ("set-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap "Set Coding System"))) (bindings--define-key map [set-buffer-process-coding-system] (quote (menu-item "For I/O with Subprocess" set-buffer-process-coding-system :visible (fboundp (quote make-process)) :enable (get-buffer-process (current-buffer)) :help "How to en/decode I/O from/to subprocess connected to this buffer"))) (bindings--define-key map [set-next-selection-coding-system] (quote (menu-item "For Next X Selection" set-next-selection-coding-system :visible (display-selections-p) :help "How to en/decode next selection/clipboard operation"))) (bindings--define-key map [set-selection-coding-system] (quote (menu-item "For X Selections/Clipboard" set-selection-coding-system :visible (display-selections-p) :help "How to en/decode data to/from selection/clipboard"))) (bindings--define-key map [separator-3] menu-bar-separator) (bindings--define-key map [set-terminal-coding-system] (quote (menu-item "For Terminal" set-terminal-coding-system :enable (null (memq initial-window-system (quote (x w32 ns)))) :help "How to encode terminal output"))) (bindings--define-key map [set-keyboard-coding-system] (quote (menu-item "For Keyboard" set-keyboard-coding-system :help "How to decode keyboard input"))) (bindings--define-key map [separator-2] menu-bar-separator) (bindings--define-key map [set-file-name-coding-system] (quote (menu-item "For File Name" set-file-name-coding-system :help "How to decode/encode file names"))) (bindings--define-key map [revert-buffer-with-coding-system] (quote (menu-item "For Reverting This File Now" revert-buffer-with-coding-system :enable buffer-file-name :help "Revisit this file immediately using specified coding system"))) (bindings--define-key map [set-buffer-file-coding-system] (quote (menu-item "For Saving This Buffer" set-buffer-file-coding-system :help "How to encode this buffer when saved"))) (bindings--define-key map [separator-1] menu-bar-separator) (bindings--define-key map [universal-coding-system-argument] (quote (menu-item "For Next Command" universal-coding-system-argument :help "Coding system to be used by next command"))) map)) nil [2656 4975])
            ("mule-menu-keymap" variable (:default-value (let ((map (make-sparse-keymap "Mule (Multilingual Environment)"))) (bindings--define-key map [mule-diag] (quote (menu-item "Show All Multilingual Settings" mule-diag :help "Display multilingual environment settings"))) (bindings--define-key map [list-character-sets] (quote (menu-item "List Character Sets" list-character-sets :help "Show table of available character sets"))) (bindings--define-key map [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system))) (bindings--define-key map [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :help "Keyboard layout for a specific input method"))) (bindings--define-key map [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map) :help "Show multilingual settings for a specific language"))) (bindings--define-key map [separator-coding-system] menu-bar-separator) (bindings--define-key map [view-hello-file] (quote (menu-item "Show Multilingual Sample Text" view-hello-file :enable (file-readable-p (expand-file-name "HELLO" data-directory)) :help "Demonstrate various character sets"))) (bindings--define-key map [set-various-coding-system] (\` (menu-item "Set Coding Systems" (\, set-coding-system-map) :enable (default-value (quote enable-multibyte-characters))))) (bindings--define-key map [separator-input-method] menu-bar-separator) (bindings--define-key map [describe-input-method] (quote (menu-item "Describe Input Method" describe-input-method))) (bindings--define-key map [set-input-method] (quote (menu-item "Select Input Method..." set-input-method))) (bindings--define-key map [toggle-input-method] (quote (menu-item "Toggle Input Method" toggle-input-method))) (bindings--define-key map [separator-mule] menu-bar-separator) (bindings--define-key map [set-language-environment] (\` (menu-item "Set Language Environment" (\, setup-language-environment-map)))) map)) nil [4977 7168])
            ("define-key" code nil nil [7550 7602])
            ("help-xref-mule-regexp-template" variable
               (:constant-flag t
                :default-value (purecopy (concat "\\(\\<\\(" "\\(coding system\\)\\|" "\\(input method\\)\\|" "\\(character set\\)\\|" "\\(charset\\)" "\\)\\s-+\\)?" "['`‘]\\(\\sw\\(\\sw\\|\\s_\\)+\\)['’]")))
                nil [7845 8152])
            ("coding-system-change-eol-conversion" function (:arguments ("coding-system" "eol-type")) nil [8154 9393])
            ("coding-system-change-text-conversion" function (:arguments ("coding-system" "coding")) nil [9395 9945])
            ("canonicalize-coding-system-name" function (:arguments ("name")) nil [10095 10868])
            ("coding-system-from-name" function (:arguments ("name")) nil [10870 11607])
            ("toggle-enable-multibyte-characters" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11609 12412])
            ("view-hello-file" function (:user-visible-flag t) nil [12414 12687])
            ("universal-coding-system-argument" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [12689 14621])
            ("set-default-coding-systems" function (:arguments ("coding-system")) nil [14623 16483])
            ("prefer-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [16485 18383])
            ("sort-coding-systems-predicate" variable nil nil [18385 18637])
            ("sort-coding-systems" function (:arguments ("codings")) nil [18639 21324])
            ("find-coding-systems-region" function (:arguments ("from" "to")) nil [21326 22012])
            ("find-coding-systems-string" function (:arguments ("string")) nil [22014 22337])
            ("find-coding-systems-for-charsets" function (:arguments ("charsets")) nil [22339 23589])
            ("find-multibyte-characters" function (:arguments ("from" "to" "maxcount" "excludes")) nil [23591 25342])
            ("search-unencodable-char" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [25344 26094])
            ("last-coding-system-specified" variable nil nil [26096 26489])
            ("select-safe-coding-system-accept-default-p" variable nil nil [26491 26779])
            ("sanitize-coding-system-list" function (:arguments ("codings")) nil [26781 27949])
            ("select-safe-coding-system-interactively" function (:arguments ("from" "to" "codings" "unsafe" "rejected" "default")) nil [27951 33171])
            ("select-safe-coding-system" function (:arguments ("from" "to" "default-coding-system" "accept-default-p" "file")) nil [33173 42860])
            ("setq" code nil nil [42862 42930])
            ("select-message-coding-system" function nil nil [42932 44026])
            ("language-info-alist" variable nil nil [44058 46373])
            ("get-language-info" function (:arguments ("lang-env" "key")) nil [46375 46815])
            ("set-language-info" function (:arguments ("lang-env" "key" "info")) nil [46817 47965])
            ("set-language-info-internal" function (:arguments ("lang-env" "key" "info")) nil [47967 48815])
            ("set-language-info-alist" function (:arguments ("lang-env" "alist" "parents")) nil [48817 51281])
            ("read-language-name" function (:arguments ("key" "prompt" "default")) nil [51283 51878])
            ("leim" customgroup (:user-visible-flag t) nil [51913 51991])
            ("leim-list-file-name" variable
               (:constant-flag t
                :default-value "leim-list.el")
                nil [51993 52242])
            ("leim-list-header" variable
               (:constant-flag t
                :default-value (format-message ";;; %s -- list of LEIM (Library of Emacs Input Method) -*-coding: utf-8;-*-
;;
;; This file is automatically generated.
;;
;; This file contains a list of LEIM (Library of Emacs Input Method)
;; methods in the same directory as this file.  Loading this file
;; registers all the input methods in Emacs.
;;
;; Each entry has the form:
;;   (register-input-method
;;    INPUT-METHOD LANGUAGE-NAME ACTIVATE-FUNC
;;    TITLE DESCRIPTION
;;    ARG ...)
;; See the function `register-input-method' for the meanings of the arguments.
;;
;; If this directory is included in `load-path', Emacs automatically
;; loads this file at startup time.

" leim-list-file-name))
                nil [52244 52997])
            ("leim-list-entry-regexp" variable
               (:constant-flag t
                :default-value "^(register-input-method")
                nil [52999 53158])
            ("update-leim-list-functions" variable (:default-value (quote (quail-update-leim-list-file))) nil [53160 53343])
            ("update-leim-list-file" function (:arguments ("dirs")) nil [53345 53509])
            ("current-input-method" variable nil nil [53511 53649])
            ("make-variable-buffer-local" code nil nil [53650 53700])
            ("put" code nil nil [53701 53747])
            ("current-input-method-title" variable nil nil [53749 53853])
            ("make-variable-buffer-local" code nil nil [53854 53910])
            ("put" code nil nil [53911 53963])
            ("define-widget" code nil nil [53965 54259])
            ("default-input-method" variable nil nil [54261 54650])
            ("put" code nil nil [54652 54699])
            ("input-method-history" variable nil nil [54701 54889])
            ("make-variable-buffer-local" code nil nil [54890 54940])
            ("put" code nil nil [54941 54987])
            ("define-obsolete-variable-alias" code nil nil [54989 55116])
            ("deactivate-current-input-method-function" variable nil nil [55117 55483])
            ("make-variable-buffer-local" code nil nil [55484 55554])
            ("put" code nil nil [55555 55621])
            ("describe-current-input-method-function" variable nil nil [55623 55778])
            ("make-variable-buffer-local" code nil nil [55779 55847])
            ("put" code nil nil [55848 55912])
            ("input-method-alist" variable nil nil [55914 56170])
            ("put" code nil nil [56186 56235])
            ("register-input-method" function (:arguments ("input-method" "lang-env" "args")) nil [56237 57959])
            ("read-input-method-name" function (:arguments ("prompt" "default" "inhibit-null")) nil [57961 59133])
            ("activate-input-method" function (:arguments ("input-method")) nil [59135 60400])
            ("deactivate-input-method" function nil nil [60402 61132])
            ("define-obsolete-function-alias" code nil nil [61134 61227])
            ("set-input-method" function
               (:user-visible-flag t
                :arguments ("input-method" "interactive"))
                nil [61229 62298])
            ("toggle-input-method-active" variable nil nil [62300 62381])
            ("toggle-input-method" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [62383 64107])
            ("help-buffer" function (:prototype-flag t) nil [64109 64144])
            ("describe-input-method" function
               (:user-visible-flag t
                :arguments ("input-method"))
                nil [64146 65264])
            ("describe-current-input-method" function nil nil [65266 65748])
            ("read-multilingual-string" function (:arguments ("prompt" "initial-input" "input-method")) nil [65750 66674])
            ("input-method-verbose-flag" variable (:default-value (quote default)) nil [66783 67712])
            ("input-method-highlight-flag" variable (:default-value t) nil [67714 68121])
            ("input-method-activate-hook" variable nil nil [68123 68336])
            ("define-obsolete-variable-alias" code nil nil [68338 68441])
            ("input-method-deactivate-hook" variable nil nil [68443 68686])
            ("input-method-after-insert-chunk-hook" variable nil nil [68688 68843])
            ("input-method-exit-on-first-char" variable nil nil [68845 69222])
            ("input-method-use-echo-area" variable nil nil [69224 69600])
            ("input-method-exit-on-invalid-key" variable nil nil [69602 69998])
            ("set-language-environment-hook" variable nil nil [70002 70363])
            ("exit-language-environment-hook" variable nil nil [70365 70729])
            ("put" code nil nil [70731 70793])
            ("setup-specified-language-environment" function (:user-visible-flag t) nil [70795 71273])
            ("current-language-environment" variable (:default-value "English") nil [71275 72165])
            ("reset-language-environment" function (:user-visible-flag t) nil [72167 74961])
            ("reset-language-environment" code nil nil [74963 74991])
            ("set-display-table-and-terminal-coding-system" function (:arguments ("language-name" "coding-system" "display")) nil [74993 75776])
            ("set-language-environment" function
               (:user-visible-flag t
                :arguments ("language-name"))
                nil [75778 78027])
            ("define-widget" code nil nil [78029 78508])
            ("language-info-custom-alist" variable nil nil [78510 80313])
            ("declare-function" code nil nil [80315 80379])
            ("declare-function" code nil nil [80380 80445])
            ("standard-display-european-internal" function nil nil [80447 81810])
            ("set-language-environment-coding-systems" function (:arguments ("language-name")) nil [81812 83294])
            ("set-language-environment-input-method" function (:arguments ("language-name")) nil [83296 83712])
            ("set-language-environment-nonascii-translation" function (:arguments ("language-name")) nil [83714 84469])
            ("set-language-environment-charset" function (:arguments ("language-name")) nil [84471 85044])
            ("set-language-environment-unibyte" function (:arguments ("language-name")) nil [85046 85240])
            ("princ-list" function (:arguments ("args")) nil [85242 85428])
            ("put" code nil nil [85430 85491])
            ("describe-specified-language-support" function (:user-visible-flag t) nil [85780 86247])
            ("describe-language-environment" function
               (:user-visible-flag t
                :arguments ("language-name"))
                nil [86249 89725])
            ("locale-translation-file-name" variable nil nil [89742 89859])
            ("locale-language-names" variable
               (:constant-flag t
                :default-value (purecopy (quote (("aa_DJ" . "Latin-1") ("aa" . "UTF-8") ("af" . "Latin-1") ("am" "Ethiopic" utf-8) ("an" . "Latin-9") ("ar" . "Arabic") ("az" . "UTF-8") ("be" "Belarusian" cp1251) ("bg" "Bulgarian" cp1251) ("bn" . "UTF-8") ("bo" . "Tibetan") ("br" . "Latin-1") ("bs" . "Latin-2") ("byn" . "UTF-8") ("ca" . "Latin-1") ("cs" "Czech" iso-8859-2) ("cy" "Welsh" iso-8859-14) ("da" . "Latin-1") ("de" "German" iso-8859-1) ("el" "Greek" iso-8859-7) ("en_IN" "English" utf-8) ("en" "English" iso-8859-1) ("eo" . "Esperanto") ("es" "Spanish" iso-8859-1) ("et" . "Latin-1") ("eu" . "Latin-1") ("fa" . "UTF-8") ("fi" . "Latin-1") ("fj" . "Latin-1") ("fo" . "Latin-1") ("fr" "French" iso-8859-1) ("fy" . "Latin-1") ("ga" . "Latin-1") ("gd" . "Latin-9") ("gez" "Ethiopic" utf-8) ("gl" . "Latin-1") ("gu" . "UTF-8") ("gv" . "Latin-1") ("he" "Hebrew" iso-8859-8) ("hi" "Devanagari" utf-8) ("hr" "Croatian" iso-8859-2) ("hu" . "Latin-2") ("id" . "Latin-1") ("is" . "Latin-1") ("it" "Italian" iso-8859-1) ("iw" "Hebrew" iso-8859-8) ("ja" "Japanese" euc-jp) ("ka" "Georgian" georgian-ps) ("kl" . "Latin-1") ("kn" "Kannada" utf-8) ("ko" "Korean" euc-kr) ("kw" . "Latin-1") ("la" . "Latin-1") ("lb" . "Latin-1") ("lg" . "Laint-6") ("lo" "Lao" utf-8) ("lt" "Lithuanian" iso-8859-13) ("lv" . "Latvian") ("mi" . "Latin-7") ("mk" "Cyrillic-ISO" iso-8859-5) ("ml" "Malayalam" utf-8) ("mn" . "UTF-8") ("mr" "Devanagari" utf-8) ("ms" . "Latin-1") ("mt" . "Latin-3") ("nb" . "Latin-1") ("ne" "Devanagari" utf-8) ("nl" "Dutch" iso-8859-1) ("no" . "Latin-1") ("oc" . "Latin-1") ("om_ET" . "UTF-8") ("om" . "Latin-1") ("pa" . "UTF-8") ("pl" . "Latin-2") ("pt" . "Latin-1") ("rm" . "Latin-1") ("ro" "Romanian" iso-8859-2) ("ru_RU" "Russian" iso-8859-5) ("ru_UA" "Russian" koi8-u) ("sa" . "Devanagari") ("se" . "UTF-8") ("sh" . "Latin-2") ("sid" . "UTF-8") ("sk" "Slovak" iso-8859-2) ("sl" "Slovenian" iso-8859-2) ("so_ET" "UTF-8") ("so" "Latin-1") ("sq" . "Latin-1") ("sr" . "Latin-2") ("st" . "Latin-1") ("sv" "Swedish" iso-8859-1) ("sw" . "Latin-1") ("ta" "Tamil" utf-8) ("te" . "UTF-8") ("tg" "Tajik" koi8-t) ("th" "Thai" tis-620) ("ti" "Ethiopic" utf-8) ("tig_ER" . "UTF-8") ("tl" . "Latin-1") ("tr" "Turkish" iso-8859-9) ("tt" . "UTF-8") ("uk" "Ukrainian" koi8-u) ("ur" . "UTF-8") ("uz_UZ@cyrillic" . "UTF-8") ("uz" . "Latin-1") ("vi" "Vietnamese" utf-8) ("wa" . "Latin-1") ("xh" . "Latin-1") ("yi" . "Windows-1255") ("zh_HK" . "Chinese-Big5") ("zh_TW" . "Chinese-Big5") ("zh_CN.GB2312" "Chinese-GB") ("zh_CN.GBK" "Chinese-GBK") ("zh_CN.GB18030" "Chinese-GB18030") ("zh_CN.UTF-8" . "Chinese-GBK") ("zh_CN" . "Chinese-GB") ("zh" . "Chinese-GB") ("zu" . "Latin-1") ("c$" . "ASCII") ("posix$" . "ASCII") ("ipa$" . "IPA") ("cz" . "Czech") ("ee" . "Latin-4") ("iw" . "Hebrew") ("sp" . "Cyrillic-ISO") ("su" . "Latin-1") ("jp" . "Japanese") ("chs" . "Chinese-GBK") ("cht" . "Chinese-BIG5") ("gbz" . "UTF-8") ("div" . "UTF-8") ("wee" . "Latin-2") ("wen" . "Latin-2")))))
                nil [90051 97628])
            ("locale-charset-language-names" variable
               (:constant-flag t
                :default-value (purecopy (quote ((".*8859[-_]?1\\>" . "Latin-1") (".*8859[-_]?2\\>" . "Latin-2") (".*8859[-_]?3\\>" . "Latin-3") (".*8859[-_]?4\\>" . "Latin-4") (".*8859[-_]?9\\>" . "Latin-5") (".*8859[-_]?14\\>" . "Latin-8") (".*8859[-_]?15\\>" . "Latin-9") (".*utf\\(?:-?8\\)?\\>" . "UTF-8") (".*@euro\\>" . "Latin-9")))))
                nil [97630 98430])
            ("locale-preferred-coding-systems" variable
               (:constant-flag t
                :default-value (purecopy (quote ((".*8859[-_]?1\\>" . iso-8859-1) (".*8859[-_]?2\\>" . iso-8859-2) (".*8859[-_]?3\\>" . iso-8859-3) (".*8859[-_]?4\\>" . iso-8859-4) (".*8859[-_]?9\\>" . iso-8859-9) (".*8859[-_]?14\\>" . iso-8859-14) (".*8859[-_]?15\\>" . iso-8859-15) (".*utf\\(?:-?8\\)?" . utf-8) (".*@euro" . iso-8859-15) ("koi8-?r" . koi8-r) ("koi8-?u" . koi8-u) ("tcvn" . tcvn) ("big5[-_]?hkscs" . big5-hkscs) ("big5" . big5) ("euc-?tw" . euc-tw) ("euc-?cn" . euc-cn) ("gb2312" . gb2312) ("gbk" . gbk) ("gb18030" . gb18030) ("ja.*[._]euc" . japanese-iso-8bit) ("ja.*[._]jis7" . iso-2022-jp) ("ja.*[._]pck" . japanese-shift-jis) ("ja.*[._]sjis" . japanese-shift-jis) ("jpn" . japanese-shift-jis)))))
                nil [98432 99708])
            ("locale-name-match" function (:arguments ("key" "alist")) nil [99710 100144])
            ("locale-charset-match-p" function (:arguments ("charset1" "charset2")) nil [100146 100597])
            ("locale-charset-alist" variable nil nil [100599 100735])
            ("locale-charset-to-coding-system" function (:arguments ("charset")) nil [100737 101525])
            ("declare-function" code nil nil [101694 101752])
            ("declare-function" code nil nil [101753 101818])
            ("locale-translate" function (:arguments ("locale")) nil [101820 102331])
            ("set-locale-environment" function
               (:user-visible-flag t
                :arguments ("locale-name" "frame"))
                nil [102333 111565])
            ("put" code nil nil [111592 111649])
            ("define-char-code-property" function (:arguments ("name" "table" "docstring")) nil [111651 113289])
            ("char-code-property-table" variable (:default-value (make-char-table (quote char-code-property-table))) nil [113291 113597])
            ("get-char-code-property" function (:arguments ("char" "propname")) nil [113599 114007])
            ("put-char-code-property" function (:arguments ("char" "propname" "value")) nil [114009 114593])
            ("char-code-property-description" function (:arguments ("prop" "value")) nil [114595 114949])
            ("iso-2022-control-alist" variable
               (:constant-flag t
                :default-value (quote ((27 . "ESC") (14 . "SO") (15 . "SI") (142 . "SS2") (143 . "SS3") (155 . "CSI"))))
                nil [115066 115218])
            ("encoded-string-description" function (:arguments ("str" "coding-system")) nil [115220 115708])
            ("encode-coding-char" function (:arguments ("char" "coding-system" "charset")) nil [115710 117175])
            ("define-minor-mode" code nil nil [117275 117394])
            ("make-obsolete" code nil nil [117462 117529])
            ("define-minor-mode" code nil nil [117531 117650])
            ("make-obsolete" code nil nil [117718 117785])
            ("nonascii-insert-offset" variable nil nil [117787 117820])
            ("make-obsolete-variable" code nil nil [117821 117893])
            ("nonascii-translation-table" variable nil nil [117894 117933])
            ("make-obsolete-variable" code nil nil [117934 118010])
            ("ucs-names" variable nil nil [118012 118085])
            ("ucs-names" function nil nil [118087 119877])
            ("mule--ucs-names-annotation" function (:arguments ("name")) nil [119879 120239])
            ("read-char-by-name" function (:arguments ("prompt")) nil [120241 121579])
            ("define-obsolete-function-alias" code nil nil [121581 121645])
            ("define-key" code nil nil [121646 121687]))          
      :file "mule-cmds.el.gz"
      :pointmax 121716
      :fsize 34047
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1275 . 1276) (symbol 1240 . 1257) (open-paren 1239 . 1240)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1272 4294])
            ("font-encoding-charset-alist" variable nil nil [4296 4332])
            ("setq" code nil nil [4334 5043])
            ("setq" code nil nil [5045 7272])
            ("otf-script-alist" variable nil nil [7274 7299])
            ("setq" code nil nil [7434 10614])
            ("declare-function" code nil nil [11526 11584])
            ("declare-function" code nil nil [11585 11680])
            ("build-default-fontset-data" function nil nil [12168 14152])
            ("setup-default-fontset" function nil nil [14156 28985])
            ("create-default-fontset" function nil nil [28987 29286])
            ("set-font-encoding" function (:arguments ("pattern" "charset")) nil [34638 34915])
            ("x-pixel-size-width-font-regexp" variable nil nil [34917 34956])
            ("vertical-centering-font-regexp" variable nil nil [34957 34996])
            ("setq" code nil nil [35054 35172])
            ("setq" code nil nil [35217 35346])
            ("put" code nil nil [35347 35443])
            ("setq" code nil nil [35505 35580])
            ("x-font-name-charset-alist" variable nil nil [35582 35697])
            ("xlfd-regexp-family-subnum" variable (:constant-flag t) nil [35806 35844])
            ("xlfd-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [35867 35905])
            ("xlfd-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [35921 35958])
            ("xlfd-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [35968 36006])
            ("xlfd-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [36024 36063])
            ("xlfd-regexp-pixelsize-subnum" variable
               (:constant-flag t
                :default-value 5)
                nil [36082 36123])
            ("xlfd-regexp-pointsize-subnum" variable
               (:constant-flag t
                :default-value 6)
                nil [36137 36178])
            ("xlfd-regexp-resx-subnum" variable
               (:constant-flag t
                :default-value 7)
                nil [36192 36228])
            ("xlfd-regexp-resy-subnum" variable
               (:constant-flag t
                :default-value 8)
                nil [36245 36281])
            ("xlfd-regexp-spacing-subnum" variable
               (:constant-flag t
                :default-value 8)
                nil [36298 36337])
            ("xlfd-regexp-avgwidth-subnum" variable
               (:constant-flag t
                :default-value 10)
                nil [36349 36390])
            ("xlfd-regexp-registry-subnum" variable
               (:constant-flag t
                :default-value 11)
                nil [36407 36448])
            ("xlfd-tight-regexp" variable
               (:constant-flag t
                :default-value "^-\\([^-]*-[^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*-[^-]*\\)$")
                nil [36668 36865])
            ("xlfd-style-regexp" variable
               (:constant-flag t
                :default-value "^-\\([^-]*-[^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-.*-\\([^-]*-[^-]*\\)$")
                nil [37112 37238])
            ("xlfd-regexp-numeric-subnums" variable
               (:constant-flag t
                :default-value (list xlfd-regexp-pixelsize-subnum xlfd-regexp-pointsize-subnum xlfd-regexp-resx-subnum xlfd-regexp-resy-subnum xlfd-regexp-avgwidth-subnum))
                nil [37299 37504])
            ("x-decompose-font-name" function (:arguments ("pattern")) nil [37506 38175])
            ("x-compose-font-name" function (:arguments ("fields" "_reduce")) nil [38177 38519])
            ("x-must-resolve-font-name" function (:arguments ("xlfd-fields")) nil [38522 39316])
            ("x-complement-fontset-spec" function (:arguments ("default-spec" "fontlist")) nil [39319 39989])
            ("fontset-name-p" function (:arguments ("fontset")) nil [39991 40334])
            ("declare-function" code nil nil [40336 40382])
            ("generate-fontset-menu" function nil nil [40384 40793])
            ("declare-function" code nil nil [40795 40867])
            ("fontset-plain-name" function (:arguments ("fontset")) nil [40869 42387])
            ("charset-script-alist" variable (:default-value (quote ((ascii . latin) (latin-iso8859-1 . latin) (latin-iso8859-2 . latin) (latin-iso8859-3 . latin) (latin-iso8859-4 . latin) (latin-iso8859-9 . latin) (latin-iso8859-10 . latin) (latin-iso8859-13 . latin) (latin-iso8859-14 . latin) (latin-iso8859-15 . latin) (latin-iso8859-16 . latin) (latin-jisx0201 . latin) (thai-tis620 . thai) (cyrillic-iso8859-5 . cyrillic) (arabic-iso8859-6 . arabic) (greek-iso8859-7 . latin) (hebrew-iso8859-8 . latin) (katakana-jisx0201 . kana) (chinese-gb2312 . han) (chinese-gbk . han) (gb18030-2-byte . han) (gb18030-4-byte-bmp . han) (gb18030-4-byte-ext-1 . han) (gb18030-4-byte-ext-2 . han) (gb18030-4-byte-smp . han) (chinese-big5-1 . han) (chinese-big5-2 . han) (chinese-cns11643-1 . han) (chinese-cns11643-2 . han) (chinese-cns11643-3 . han) (chinese-cns11643-4 . han) (chinese-cns11643-5 . han) (chinese-cns11643-6 . han) (chinese-cns11643-7 . han) (japanese-jisx0208 . han) (japanese-jisx0208-1978 . han) (japanese-jisx0212 . han) (japanese-jisx0213-1 . han) (japanese-jisx0213-2 . han) (korean-ksc5601 . hangul) (chinese-sisheng . bopomofo) (vietnamese-viscii-lower . latin) (vietnamese-viscii-upper . latin) (arabic-digit . arabic) (arabic-1-column . arabic) (arabic-2-column . arabic) (indian-is13194 . devanagari) (indian-glyph . devanagari) (indian-1-column . devanagari) (indian-2-column . devanagari) (tibetan-1-column . tibetan)))) nil [42389 44160])
            ("create-fontset-from-fontset-spec" function (:arguments ("fontset-spec" "_style-variant" "_noerror")) nil [44162 46243])
            ("create-fontset-from-ascii-font" function (:arguments ("font" "resolved-font" "fontset-name")) nil [46245 47439])
            ("standard-fontset-spec" variable (:default-value (purecopy "-*-fixed-medium-r-normal-*-16-*-*-*-*-*-fontset-standard")) nil [47668 48013])
            ("declare-function" code nil nil [48219 48313])
            ("create-fontset-from-x-resource" function nil nil [48315 48727])
            ("fontset" package nil nil [48732 48750]))          
      :file "fontset.el.gz"
      :pointmax 48777
      :fsize 13877
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 14153 . 14154) (symbol 11683 . 11700) (open-paren 11682 . 11683)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mule-version" variable
               (:constant-flag t
                :default-value "6.0 (HANACHIRUSATO)")
                nil [1315 1440])
            ("mule-version-date" variable
               (:constant-flag t
                :default-value "2003.9.1")
                nil [1442 1555])
            ("private-char-area-1-min" variable (:default-value 983040) nil [1637 1677])
            ("private-char-area-1-max" variable (:default-value 1048574) nil [1678 1718])
            ("private-char-area-2-min" variable (:default-value 1048576) nil [1719 1760])
            ("private-char-area-2-max" variable (:default-value 1114110) nil [1761 1802])
            ("emacs-mule-charset-table" variable (:default-value (make-vector 256 nil)) nil [1868 1923])
            ("aset" code nil nil [1924 1964])
            ("convert-define-charset-argument" function (:arguments ("emacs-mule-id" "info-vector")) nil [2225 3603])
            ("define-charset" function (:arguments ("name" "docstring" "props")) nil [3605 10439])
            ("load-with-code-conversion" function (:arguments ("fullname" "file" "noerror" "nomessage")) nil [10442 12941])
            ("charset-info" function (:arguments ("charset")) nil [12943 14477])
            ("charset-id" function (:arguments ("_charset")) nil [14648 14782])
            ("charset-bytes" function (:arguments ("_charset")) nil [14784 14924])
            ("get-charset-property" function (:arguments ("charset" "propname")) nil [14926 15156])
            ("put-charset-property" function (:arguments ("charset" "propname" "value")) nil [15158 15476])
            ("charset-description" function (:arguments ("charset")) nil [15478 15606])
            ("charset-dimension" function (:arguments ("charset")) nil [15608 15725])
            ("charset-chars" function (:arguments ("charset" "dimension")) nil [15727 16095])
            ("charset-iso-final-char" function (:arguments ("charset")) nil [16097 16297])
            ("charset-short-name" function (:arguments ("charset")) nil [16299 16422])
            ("charset-long-name" function (:arguments ("charset")) nil [16424 16544])
            ("charset-list" function nil nil [16546 16673])
            ("define-obsolete-function-alias" code nil nil [16691 16756])
            ("generic-char-p" function (:arguments ("_char")) nil [16758 16897])
            ("make-char-internal" function (:arguments ("charset-id" "code1" "code2")) nil [16899 17132])
            ("ascii-case-table" variable (:default-value (let ((tbl (copy-sequence (standard-case-table))) (up (char-table-extra-slot (standard-case-table) 0))) (if up (set-char-table-extra-slot tbl 0 (copy-sequence up))) (set-char-table-extra-slot tbl 1 nil) (set-char-table-extra-slot tbl 2 nil) tbl)) nil [17341 17747])
            ("coding-system-iso-2022-flags" variable
               (:constant-flag t
                :default-value (quote (long-form ascii-at-eol ascii-at-cntl 7-bit locking-shift single-shift designation revision direction init-at-bol designate-at-bol safe latin-extra composition euc-tw-shift use-roman use-oldjis 8-bit-level-4)))
                nil [17869 20839])
            ("define-coding-system" function (:arguments ("name" "docstring" "props")) nil [20841 32486])
            ("coding-system-doc-string" function (:arguments ("coding-system")) nil [32488 32652])
            ("coding-system-mnemonic" function (:arguments ("coding-system")) nil [32654 32943])
            ("coding-system-type" function (:arguments ("coding-system")) nil [32945 33227])
            ("coding-system-charset-list" function (:arguments ("coding-system")) nil [33229 33539])
            ("coding-system-category" function (:arguments ("coding-system")) nil [33541 33694])
            ("coding-system-get" function (:arguments ("coding-system" "prop")) nil [33696 34312])
            ("coding-system-eol-type-mnemonic" function (:arguments ("coding-system")) nil [34314 34721])
            ("coding-system-lessp" function (:arguments ("x" "y")) nil [34723 35106])
            ("coding-system-equal" function (:arguments ("coding-system-1" "coding-system-2")) nil [35108 35696])
            ("add-to-coding-system-list" function (:arguments ("coding-system")) nil [35698 36310])
            ("coding-system-list" function (:arguments ("base-only")) nil [36312 36960])
            ("char-coding-system-table" variable (:constant-flag t) nil [36962 37077])
            ("make-obsolete-variable" code nil nil [37078 37139])
            ("transform-make-coding-system-args" function (:arguments ("name" "type" "doc-string" "props")) nil [37141 40116])
            ("make-coding-system" function (:arguments ("coding-system" "type" "mnemonic" "doc-string" "flags" "properties" "eol-type")) nil [40118 43468])
            ("merge-coding-systems" function (:arguments ("first" "second")) nil [43470 44149])
            ("autoload-coding-system" function (:arguments ("symbol" "form")) nil [44151 44678])
            ("buffer-file-coding-system-explicit" variable nil nil [45402 45625])
            ("make-variable-buffer-local" code nil nil [45626 45690])
            ("put" code nil nil [45691 45751])
            ("read-buffer-file-coding-system" function nil nil [45753 48577])
            ("set-buffer-file-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "force" "nomodify"))
                nil [48579 50709])
            ("revert-buffer-with-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "force"))
                nil [50711 51638])
            ("set-file-name-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [51640 52230])
            ("default-terminal-coding-system" variable nil nil [52232 52445])
            ("set-terminal-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "terminal"))
                nil [52447 53535])
            ("default-keyboard-coding-system" variable nil nil [53537 53749])
            ("set-keyboard-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "terminal"))
                nil [53751 56293])
            ("keyboard-coding-system" variable nil nil [56295 57181])
            ("set-buffer-process-coding-system" function
               (:user-visible-flag t
                :arguments ("decoding" "encoding"))
                nil [57183 57901])
            ("defalias" code nil nil [57903 57971])
            ("set-selection-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [57973 58350])
            ("last-next-selection-coding-system" variable nil nil [58438 58484])
            ("set-next-selection-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [58486 59196])
            ("set-coding-priority" function (:arguments ("arg")) nil [59198 59540])
            ("ctext-non-standard-encodings-alist" variable (:default-value (mapcar (quote purecopy) (quote (("big5-0" big5 2 big5) ("ISO8859-14" iso-8859-14 1 latin-iso8859-14) ("ISO8859-15" iso-8859-15 1 latin-iso8859-15) ("gbk-0" gbk 2 chinese-gbk) ("koi8-r" koi8-r 1 koi8-r) ("microsoft-cp1251" windows-1251 1 windows-1251))))) nil [59560 60885])
            ("ctext-non-standard-encodings" variable nil nil [60887 61115])
            ("ctext-non-standard-encodings-regexp" variable (:default-value (purecopy (string-to-multibyte (concat "\\(%/[0-4][\200-\377][\200-\377]\\([^]+\\)\\)" "\\|" "\\(%G[^]*%@\\)")))) nil [61117 61371])
            ("ctext-post-read-conversion" function (:arguments ("len")) nil [61612 63256])
            ("ctext-standard-encodings" variable (:default-value (quote (ascii latin-jisx0201 katakana-jisx0201 latin-iso8859-1 latin-iso8859-2 latin-iso8859-3 latin-iso8859-4 greek-iso8859-7 arabic-iso8859-6 hebrew-iso8859-8 cyrillic-iso8859-5 latin-iso8859-9 chinese-gb2312 japanese-jisx0208 korean-ksc5601))) nil [63258 63988])
            ("ctext-non-standard-encodings-table" function nil nil [64566 65286])
            ("ctext-pre-write-conversion" function (:arguments ("from" "to")) nil [65288 67873])
            ("auto-coding-alist" variable (:default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (cdr arg))) (quote (("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . no-conversion-multibyte) ("\\.\\(exe\\|EXE\\)\\'" . no-conversion) ("\\.\\(sx[dmicw]\\|odt\\|tar\\|t[bg]z\\)\\'" . no-conversion) ("\\.\\(gz\\|Z\\|bz\\|bz2\\|xz\\|gpg\\)\\'" . no-conversion) ("\\.\\(jpe?g\\|png\\|gif\\|tiff?\\|p[bpgn]m\\)\\'" . no-conversion) ("\\.pdf\\'" . no-conversion) ("/#[^/]+#\\'" . utf-8-emacs-unix))))) nil [67969 69183])
            ("auto-coding-regexp-alist" variable (:default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (cdr arg))) (quote (("\\`BABYL OPTIONS:[ 	]*-\\*-[ 	]*rmail[ 	]*-\\*-" . no-conversion) ("\\`\376\377" . utf-16be-with-signature) ("\\`\377\376" . utf-16le-with-signature) ("\\`\357\273\277" . utf-8-with-signature) ("\\`;ELC   " . emacs-mule))))) nil [69185 70019])
            ("auto-coding-regexp-alist-lookup" function (:arguments ("from" "to")) nil [70021 70632])
            ("auto-coding-functions" variable (:default-value (quote (sgml-xml-auto-coding-function sgml-html-meta-auto-coding-function))) nil [70701 71482])
            ("set-auto-coding-for-load" variable nil nil [71484 71675])
            ("auto-coding-alist-lookup" function (:arguments ("filename")) nil [71677 72097])
            ("put" code nil nil [72099 72153])
            ("put" code nil nil [72154 72220])
            ("find-auto-coding" function (:arguments ("filename" "size")) nil [72222 78556])
            ("set-auto-coding" function (:arguments ("filename" "size")) nil [78558 78988])
            ("setq" code nil nil [78990 79038])
            ("after-insert-file-set-coding" function (:arguments ("inserted" "visit")) nil [79040 79907])
            ("find-new-buffer-file-coding-system" function (:arguments ("coding")) nil [80097 82132])
            ("modify-coding-system-alist" function (:arguments ("target-type" "regexp" "coding-system")) nil [82134 84420])
            ("decode-coding-inserted-region" function (:arguments ("from" "to" "filename" "visit" "beg" "end" "replace")) nil [84422 86419])
            ("recode-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "new-coding" "coding"))
                nil [86421 87230])
            ("make-translation-table" function (:arguments ("args")) nil [87232 88719])
            ("make-translation-table-from-vector" function (:arguments ("vec")) nil [88721 89336])
            ("make-translation-table-from-alist" function (:arguments ("alist")) nil [89338 91076])
            ("define-translation-table" function (:arguments ("symbol" "args")) nil [91078 92473])
            ("translate-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "table"))
                nil [92475 93511])
            ("with-category-table" function (:arguments ("table" "body")) nil [93513 94152])
            ("define-translation-hash-table" function (:arguments ("symbol" "table")) nil [94154 95108])
            ("put" code nil nil [95142 95193])
            ("setq" code nil nil [95194 95257])
            ("put" code nil nil [95258 95318])
            ("setq" code nil nil [95319 95406])
            ("sgml-xml-auto-coding-function" function (:arguments ("size")) nil [95445 96927])
            ("sgml-html-meta-auto-coding-function" function (:arguments ("size")) nil [96929 98128])
            ("xml-find-file-coding-system" function (:arguments ("args")) nil [98130 99460])
            ("mule" package nil nil [99466 99481]))          
      :file "mule.el.gz"
      :pointmax 99505
      :fsize 26960
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("string-to-list" function (:arguments ("string")) nil [1363 1462])
            ("string-to-vector" function (:arguments ("string")) nil [1479 1579])
            ("store-substring" function (:arguments ("string" "idx" "obj")) nil [1596 1876])
            ("truncate-string-ellipsis" variable (:default-value "...") nil [1878 2041])
            ("truncate-string-to-width" function (:arguments ("str" "end-column" "start-column" "padding" "ellipsis")) nil [2058 4755])
            ("nested-alist-p" function (:arguments ("obj")) nil [4864 5321])
            ("set-nested-alist" function (:arguments ("keyseq" "entry" "alist" "len" "branches")) nil [5338 6307])
            ("lookup-nested-alist" function (:arguments ("keyseq" "alist" "len" "start" "nil-for-too-long")) nil [6324 7504])
            ("coding-system-post-read-conversion" function (:arguments ("coding-system")) nil [7560 7749])
            ("coding-system-pre-write-conversion" function (:arguments ("coding-system")) nil [7766 7955])
            ("coding-system-translation-table-for-decode" function (:arguments ("coding-system")) nil [7972 8177])
            ("coding-system-translation-table-for-encode" function (:arguments ("coding-system")) nil [8194 8399])
            ("with-coding-priority" function (:arguments ("coding-systems" "body")) nil [8416 9003])
            ("put" code nil nil [9070 9117])
            ("detect-coding-with-priority" function (:arguments ("from" "to" "priority-list")) nil [9134 9524])
            ("detect-coding-with-language-environment" function (:arguments ("from" "to" "lang-env")) nil [9541 9963])
            ("declare-function" code nil nil [9965 10035])
            ("char-displayable-p" function (:arguments ("char")) nil [10052 11966])
            ("filepos-to-bufferpos--dos" function (:arguments ("byte" "f")) nil [11968 12888])
            ("filepos-to-bufferpos" function (:arguments ("byte" "quality" "coding-system")) nil [12905 16618])
            ("bufferpos-to-filepos" function (:arguments ("position" "quality" "coding-system")) nil [16634 19953])
            ("mule-util" package nil nil [19956 19976]))          
      :file "mule-util.el.gz"
      :pointmax 20051
      :fsize 5798
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs!25.1!share!emacs!25.1!lisp!international!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
