;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [912 931])
            ("semantic/bovine" include nil nil [932 958])
            ("semantic/db-el" include nil nil [959 984])
            ("find-func" include nil nil [985 1005])
            ("semantic/ctxt" include nil nil [1007 1031])
            ("semantic/format" include nil nil [1032 1058])
            ("thingatpt" include nil nil [1059 1079])
            ("semantic-emacs-lisp-lexer" function (:lexical-analyzer-flag t) nil [1106 1600])
            ("semantic--elisp-parse-table" variable (:default-value (\` ((bovine-toplevel (semantic-list (\, (lambda (vals start end) (let ((tag (semantic-elisp-use-read (car vals)))) (cond ((and (listp tag) (semantic-tag-p (car tag))) (nreverse tag)) ((semantic--tag-expanded-p tag) tag) (t (append tag (list start end)))))))))))) nil [1617 2449])
            ("semantic-elisp-desymbolify" function (:arguments ("arglist")) nil [2451 2874])
            ("semantic-elisp-desymbolify-args" function (:arguments ("arglist")) nil [2876 3126])
            ("semantic-elisp-clos-slot-property-string" function (:arguments ("slot" "property")) nil [3128 3483])
            ("semantic-elisp-clos-args-to-semantic" function (:arguments ("partlist")) nil [3485 4438])
            ("semantic-elisp-form-to-doc-string" function (:arguments ("form")) nil [4440 4821])
            ("semantic-elisp-store-documentation-in-tag" variable (:user-visible-flag t) nil [4823 4945])
            ("semantic-elisp-do-doc" function (:arguments ("str")) nil [4947 5139])
            ("semantic-elisp-setup-form-parser" function (:arguments ("parser" "symbols")) nil [5141 5750])
            ("put" code nil nil [5751 5814])
            ("semantic-elisp-reuse-form-parser" function (:arguments ("symbol" "symbols")) nil [5816 6345])
            ("semantic-elisp-use-read" function (:arguments ("sl")) nil [6347 7100])
            ("semantic-elisp-setup-form-parser" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [7123 7362])
            ("eval-and-compile" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [7364 7783])
            ("defun" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [7785 8363])
            ("defvar" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [8365 8895])
            ("defface" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [8897 9358])
            ("defimage" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [9361 9837])
            ("defgroup" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [9840 10189])
            ("autoload" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [10192 10548])
            ("defmethod" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [10550 11221])
            ("defadvice" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [11223 11438])
            ("defclass" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [11440 12025])
            ("defstruct" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [12027 12516])
            ("define-lex" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [12518 12780])
            ("define-mode-overload-implementation" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [12782 13211])
            ("defvar-mode-local" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [13213 13577])
            ("require" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [13579 13895])
            ("provide" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [13897 14189])
            ("semantic-dependency-tag-file" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [14210 15111])
            ("semantic-emacs-lisp-overridable-doc" function (:arguments ("tag")) nil [15132 15594])
            ("semantic-emacs-lisp-obsoleted-doc" function (:arguments ("tag")) nil [15596 16228])
            ("semantic-documentation-for-tag" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "nosnarf"))
                nil [16230 17736])
            ("semantic-tag-include-filename" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [17758 18081])
            ("semantic-insert-foreign-tag" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [18083 18397])
            ("semantic-tag-protection" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [18399 19052])
            ("semantic-tag-static-p" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [19054 19363])
            ("semantic-up-context" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point" "bounds-type"))
                nil [19504 20178])
            ("semantic-ctxt-current-function" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point" "same-as-symbol-return"))
                nil [20181 21422])
            ("semantic-get-local-variables" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [21425 23011])
            ("semantic-end-of-command" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t)
                nil [23013 23256])
            ("semantic-beginning-of-command" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t)
                nil [23258 23555])
            ("semantic-ctxt-current-symbol" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [23557 23834])
            ("semantic-ctxt-current-assignment" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [23837 25219])
            ("semantic-ctxt-current-argument" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [25221 25685])
            ("semantic-ctxt-current-class-list" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [25687 26429])
            ("semantic-format-tag-abbreviate" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [26449 26841])
            ("semantic-format-tag-prototype" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [26843 27657])
            ("semantic-format-tag-concise-prototype" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [27659 27946])
            ("semantic-format-tag-uml-prototype" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [27948 28227])
            ("semantic-ia-insert-tag" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [28248 28678])
            ("semantic-lex-analyzer" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote semantic-emacs-lisp-lexer))
                nil [28714 28800])
            ("semantic--parse-table" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value semantic--elisp-parse-table)
                nil [28802 28889])
            ("semantic-function-argument-separator" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value " ")
                nil [28891 28969])
            ("semantic-function-argument-separation-character" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value " ")
                nil [28971 29060])
            ("semantic-symbol->name-assoc-list" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote ((type . "Types") (variable . "Variables") (function . "Defuns") (include . "Requires") (package . "Provides"))))
                nil [29062 29277])
            ("imenu-create-index-function" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote semantic-create-imenu-index))
                nil [29279 29373])
            ("semantic-stickyfunc-sticky-classes" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote (function type variable)))
                nil [29375 29551])
            ("define-child-mode" code nil nil [29553 29671])
            ("semantic-default-elisp-setup" function nil nil [29688 29881])
            ("add-hook" code nil nil [29883 29945])
            ("add-hook" code nil nil [30115 30171])
            ("eval-after-load" code nil nil [30173 30236])
            ("semantic/bovine/el" package nil nil [30239 30268]))          
      :file "el.el.gz"
      :pointmax 30434
      :fsize 8153
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/lex" include nil nil [877 900])
            ("semantic/bovine" include nil nil [920 946])
            ("declare-function" code nil nil [966 1068])
            ("declare-function" code nil nil [1069 1160])
            ("declare-function" code nil nil [1161 1227])
            ("declare-function" code nil nil [1228 1337])
            ("semantic-c-by--keyword-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-keyword-table (quote (("extern" . EXTERN) ("static" . STATIC) ("const" . CONST) ("volatile" . VOLATILE) ("register" . REGISTER) ("signed" . SIGNED) ("unsigned" . UNSIGNED) ("inline" . INLINE) ("virtual" . VIRTUAL) ("mutable" . MUTABLE) ("explicit" . EXPLICIT) ("struct" . STRUCT) ("union" . UNION) ("enum" . ENUM) ("typedef" . TYPEDEF) ("class" . CLASS) ("typename" . TYPENAME) ("namespace" . NAMESPACE) ("using" . USING) ("new" . NEW) ("delete" . DELETE) ("template" . TEMPLATE) ("throw" . THROW) ("reentrant" . REENTRANT) ("try" . TRY) ("catch" . CATCH) ("operator" . OPERATOR) ("public" . PUBLIC) ("private" . PRIVATE) ("protected" . PROTECTED) ("friend" . FRIEND) ("if" . IF) ("else" . ELSE) ("do" . DO) ("while" . WHILE) ("for" . FOR) ("switch" . SWITCH) ("case" . CASE) ("default" . DEFAULT) ("return" . RETURN) ("break" . BREAK) ("continue" . CONTINUE) ("sizeof" . SIZEOF) ("void" . VOID) ("char" . CHAR) ("wchar_t" . WCHAR) ("short" . SHORT) ("int" . INT) ("long" . LONG) ("float" . FLOAT) ("double" . DOUBLE) ("bool" . BOOL) ("_P" . UNDERP) ("__P" . UNDERUNDERP))) (quote (("__P" summary "Common macro to eliminate prototype compatibility on some compilers") ("_P" summary "Common macro to eliminate prototype compatibility on some compilers") ("bool" summary "Primitive boolean type") ("double" summary "Primitive floating-point type (double-precision 64-bit IEEE 754)") ("float" summary "Primitive floating-point type (single-precision 32-bit IEEE 754)") ("long" summary "Integral primitive type (-9223372036854775808 to 9223372036854775807)") ("int" summary "Integral Primitive Type: (-2147483648 to 2147483647)") ("short" summary "Integral Primitive Type: (-32768 to 32767)") ("wchar_t" summary "Wide Character Type") ("char" summary "Integral Character Type: (0 to 256)") ("void" summary "Built in typeless type: void") ("sizeof" summary "Compile time macro: sizeof(<type or variable>) // size in bytes") ("continue" summary "Non-local continue within a loop (for, do/while): continue;") ("break" summary "Non-local exit within a loop or switch (for, do/while, switch): break;") ("return" summary "return <value>;") ("default" summary "switch (<variable>) { case <constvalue>: code; ... default: code; }") ("case" summary "switch (<variable>) { case <constvalue>: code; ... default: code; }") ("switch" summary "switch (<variable>) { case <constvalue>: code; ... default: code; }") ("for" summary "for(<init>; <condition>; <increment>) { code }") ("while" summary "do { code } while (<condition>); or while (<condition>) { code };") ("do" summary " do { code } while (<condition>);") ("else" summary "if (<condition>) { code } [ else { code } ]") ("if" summary "if (<condition>) { code } [ else { code } ]") ("friend" summary "friend class <CLASSNAME>") ("catch" summary "try { <body> } catch { <catch code> }") ("try" summary "try { <body> } catch { <catch code> }") ("reentrant" summary "<type> <methoddef> (<method args>) reentrant ...") ("throw" summary "<type> <methoddef> (<method args>) throw (<exception>) ...") ("template" summary "template <class TYPE ...> TYPE_OR_FUNCTION") ("delete" summary "delete <object>;") ("new" summary "new <classname>();") ("using" summary "using <namespace>;") ("namespace" summary "Namespace Declaration: namespace <name> { ... };") ("typename" summary "typename is used to handle a qualified name as a typename;") ("class" summary "Class Declaration: class <name>[:parents] { ... };") ("typedef" summary "Arbitrary Type Declaration: typedef <typedeclaration> <name>;") ("enum" summary "Enumeration Type Declaration: enum [name] { ... };") ("union" summary "Union Type Declaration: union [name] { ... };") ("struct" summary "Structure Type Declaration: struct [name] { ... };") ("explicit" summary "Forbids implicit type conversion: explicit <constructor>") ("mutable" summary "Member Declaration Modifier: mutable <type> <name> ...") ("virtual" summary "Method Modifier: virtual <type> <name>(...) ...") ("inline" summary "Function Modifier: inline <return  type> <name>(...) {...};") ("unsigned" summary "Numeric Type Modifier: unsigned <numeric type> <name> ...") ("signed" summary "Numeric Type Modifier: signed <numeric type> <name> ...") ("register" summary "Declaration Modifier: register <type> <name> ...") ("volatile" summary "Declaration Modifier: volatile <type> <name> ...") ("const" summary "Declaration Modifier: const <type> <name> ...") ("static" summary "Declaration Modifier: static <type> <name> ...") ("extern" summary "Declaration Modifier: extern <type> <name> ...")))))
                nil [1360 6501])
            ("semantic-c-by--token-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-type-table (quote (("semantic-list" (BRACKETS . "\\[\\]") (PARENS . "()") (VOID_BLCK . "^(void)$") (BRACE_BLCK . "^{") (PAREN_BLCK . "^(") (BRACK_BLCK . "\\[.*\\]$")) ("close-paren" (RBRACE . "}") (RPAREN . ")")) ("open-paren" (LBRACE . "{") (LPAREN . "(")) ("symbol" (RESTRICT . "\\<\\(__\\)?restrict\\>")) ("number" (ZERO . "^0$")) ("string" (CPP . "\"C\\+\\+\"") (C . "\"C\"")) ("punctuation" (OR . "\\`[|]\\'") (HAT . "\\`\\^\\'") (MOD . "\\`[%]\\'") (TILDE . "\\`[~]\\'") (COMA . "\\`[,]\\'") (GREATER . "\\`[>]\\'") (LESS . "\\`[<]\\'") (EQUAL . "\\`[=]\\'") (QUESTION . "\\`[?]\\'") (BANG . "\\`[!]\\'") (MINUS . "\\`[-]\\'") (PLUS . "\\`[+]\\'") (DIVIDE . "\\`[/]\\'") (AMPERSAND . "\\`[&]\\'") (STAR . "\\`[*]\\'") (SEMICOLON . "\\`[;]\\'") (COLON . "\\`[:]\\'") (PERIOD . "\\`[.]\\'") (HASH . "\\`[#]\\'")))) (quote nil)))
                nil [6503 7642])
            ("semantic-c-by--parse-table" variable
               (:constant-flag t
                :default-value (\` ((bovine-toplevel (declaration)) (bovine-inner-scope (codeblock)) (declaration (macro) (type) (define) (var-or-fun) (extern-c) (template) (using)) (codeblock (define) (codeblock-var-or-fun) (type) (using)) (extern-c-contents (open-paren (\, (semantic-lambda (list nil)))) (declaration) (close-paren (\, (semantic-lambda (list nil))))) (extern-c (EXTERN string "\"C\"" semantic-list (\, (semantic-lambda (semantic-tag "C" (quote extern) :members (semantic-parse-region (car (nth 2 vals)) (cdr (nth 2 vals)) (quote extern-c-contents) 1))))) (EXTERN string "\"C\\+\\+\"" semantic-list (\, (semantic-lambda (semantic-tag "C" (quote extern) :members (semantic-parse-region (car (nth 2 vals)) (cdr (nth 2 vals)) (quote extern-c-contents) 1))))) (EXTERN string "\"C\"" (\, (semantic-lambda (list nil)))) (EXTERN string "\"C\\+\\+\"" (\, (semantic-lambda (list nil))))) (macro (spp-macro-def (\, (semantic-lambda (semantic-tag-new-variable (nth 0 vals) nil nil :constant-flag t)))) (spp-system-include (\, (semantic-lambda (semantic-tag-new-include (nth 0 vals) t)))) (spp-include (\, (semantic-lambda (semantic-tag-new-include (nth 0 vals) nil))))) (define (spp-macro-def (\, (semantic-lambda (semantic-tag-new-variable (nth 0 vals) nil nil :constant-flag t)))) (spp-macro-undef (\, (semantic-lambda (list nil))))) (unionparts (semantic-list (\, (semantic-lambda (semantic-parse-region (car (nth 0 vals)) (cdr (nth 0 vals)) (quote classsubparts) 1))))) (opt-symbol (symbol) nil) (classsubparts (open-paren "{" (\, (semantic-lambda (list nil)))) (close-paren "}" (\, (semantic-lambda (list nil)))) (class-protection opt-symbol punctuation "\\`[:]\\'" (\, (semantic-lambda (semantic-tag (car (nth 0 vals)) (quote label))))) (var-or-fun) (FRIEND func-decl (\, (semantic-lambda (semantic-tag (car (nth 1 vals)) (quote friend))))) (FRIEND CLASS symbol (\, (semantic-lambda (semantic-tag (nth 2 vals) (quote friend))))) (type) (define) (template) nil) (opt-class-parents (punctuation "\\`[:]\\'" class-parents opt-template-specifier (\, (semantic-lambda (list (nth 1 vals))))) ((\, (semantic-lambda)))) (one-class-parent (opt-class-protection opt-class-declmods namespace-symbol (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) "class" nil nil :protection (car (nth 0 vals)))))) (opt-class-declmods opt-class-protection namespace-symbol (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) "class" nil nil :protection (car (nth 1 vals))))))) (class-parents (one-class-parent punctuation "\\`[,]\\'" class-parents (\, (semantic-lambda (cons (nth 0 vals) (nth 2 vals))))) (one-class-parent (\, (semantic-lambda (list (nth 0 vals)))))) (opt-class-declmods (class-declmods opt-class-declmods (\, (semantic-lambda (list nil)))) nil) (class-declmods (VIRTUAL)) (class-protection (PUBLIC) (PRIVATE) (PROTECTED)) (opt-class-protection (class-protection (\, (semantic-lambda (nth 0 vals)))) ((\, (semantic-lambda (list "unspecified"))))) (namespaceparts (semantic-list (\, (semantic-lambda (semantic-parse-region (car (nth 0 vals)) (cdr (nth 0 vals)) (quote namespacesubparts) 1))))) (namespacesubparts (open-paren "{" (\, (semantic-lambda (list nil)))) (close-paren "}" (\, (semantic-lambda (list nil)))) (type) (var-or-fun) (define) (class-protection punctuation "\\`[:]\\'" (\, (semantic-lambda (semantic-tag (car (nth 0 vals)) (quote label))))) (template) (using) (spp-include (\, (semantic-lambda (semantic-tag (nth 0 vals) (quote include) :inside-ns t)))) nil) (enumparts (semantic-list (\, (semantic-lambda (semantic-parse-region (car (nth 0 vals)) (cdr (nth 0 vals)) (quote enumsubparts) 1))))) (enumsubparts (symbol opt-assign (\, (semantic-lambda (semantic-tag-new-variable (nth 0 vals) "int" (car (nth 1 vals)) :constant-flag t)))) (open-paren "{" (\, (semantic-lambda (list nil)))) (close-paren "}" (\, (semantic-lambda (list nil)))) (punctuation "\\`[,]\\'" (\, (semantic-lambda (list nil))))) (opt-name (symbol) ((\, (semantic-lambda (list ""))))) (typesimple (struct-or-class opt-class opt-name opt-template-specifier opt-class-parents semantic-list (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) (car (nth 0 vals)) (let ((semantic-c-classname (cons (car (nth 2 vals)) (car (nth 0 vals))))) (semantic-parse-region (car (nth 5 vals)) (cdr (nth 5 vals)) (quote classsubparts) 1)) (nth 4 vals) :template-specifier (nth 3 vals) :parent (car (nth 1 vals)))))) (struct-or-class opt-class opt-name opt-template-specifier opt-class-parents (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) (car (nth 0 vals)) nil (nth 4 vals) :template-specifier (nth 3 vals) :prototype t :parent (car (nth 1 vals)))))) (UNION opt-class opt-name unionparts (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) (nth 0 vals) (nth 3 vals) nil :parent (car (nth 1 vals)))))) (ENUM opt-class opt-name enumparts (\, (semantic-lambda (semantic-tag-new-type (car (nth 2 vals)) (nth 0 vals) (nth 3 vals) nil :parent (car (nth 1 vals)))))) (TYPEDEF declmods typeformbase cv-declmods typedef-symbol-list (\, (semantic-lambda (semantic-tag-new-type (nth 4 vals) (nth 0 vals) nil (list (nth 2 vals))))))) (typedef-symbol-list (typedefname punctuation "\\`[,]\\'" typedef-symbol-list (\, (semantic-lambda (cons (nth 0 vals) (nth 2 vals))))) (typedefname (\, (semantic-lambda (list (nth 0 vals)))))) (typedefname (opt-stars symbol opt-bits opt-array (\, (semantic-lambda (list (nth 0 vals) (nth 1 vals)))))) (struct-or-class (STRUCT) (CLASS)) (type (typesimple punctuation "\\`[;]\\'" (\, (semantic-lambda (nth 0 vals)))) (NAMESPACE symbol namespaceparts (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) (nth 0 vals) (nth 2 vals) nil)))) (NAMESPACE namespaceparts (\, (semantic-lambda (semantic-tag-new-type "unnamed" (nth 0 vals) (nth 1 vals) nil)))) (NAMESPACE symbol punctuation "\\`[=]\\'" typeformbase punctuation "\\`[;]\\'" (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) (nth 0 vals) (list (semantic-tag-new-type (car (nth 3 vals)) (nth 0 vals) nil nil)) nil :kind (quote alias)))))) (using (USING usingname punctuation "\\`[;]\\'" (\, (semantic-lambda (semantic-tag (car (nth 1 vals)) (quote using) :type (nth 1 vals)))))) (usingname (typeformbase (\, (semantic-lambda (semantic-tag-new-type (car (nth 0 vals)) "class" nil nil :prototype t)))) (NAMESPACE typeformbase (\, (semantic-lambda (semantic-tag-new-type (car (nth 1 vals)) "namespace" nil nil :prototype t))))) (template (TEMPLATE template-specifier opt-friend template-definition (\, (semantic-lambda (semantic-c-reconstitute-template (nth 3 vals) (nth 1 vals)))))) (opt-friend (FRIEND) nil) (opt-template-specifier (template-specifier (\, (semantic-lambda (nth 0 vals)))) ((\, (semantic-lambda)))) (template-specifier (punctuation "\\`[<]\\'" template-specifier-types punctuation "\\`[>]\\'" (\, (semantic-lambda (nth 1 vals))))) (template-specifier-types (template-var template-specifier-type-list (\, (semantic-lambda (cons (nth 0 vals) (nth 1 vals))))) nil) (template-specifier-type-list (punctuation "\\`[,]\\'" template-specifier-types (\, (semantic-lambda (nth 1 vals)))) ((\, (semantic-lambda)))) (template-var (template-type opt-template-equal (\, (semantic-lambda (cons (car (nth 0 vals)) (cdr (nth 0 vals)))))) (string (\, (semantic-lambda (list (nth 0 vals))))) (number (\, (semantic-lambda (list (nth 0 vals))))) (opt-stars opt-ref namespace-symbol (\, (semantic-lambda (nth 2 vals)))) (semantic-list (\, (semantic-lambda (list (nth 0 vals))))) (SIZEOF semantic-list (\, (semantic-lambda (list (nth 1 vals)))))) (opt-template-equal (punctuation "\\`[=]\\'" symbol punctuation "\\`[<]\\'" template-specifier-types punctuation "\\`[>]\\'" (\, (semantic-lambda (list (nth 1 vals))))) (punctuation "\\`[=]\\'" symbol (\, (semantic-lambda (list (nth 1 vals))))) ((\, (semantic-lambda)))) (template-type (CLASS symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) "class" nil nil)))) (STRUCT symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) "struct" nil nil)))) (TYPENAME symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) "class" nil nil)))) (declmods typeformbase cv-declmods opt-stars opt-ref variablearg-opt-name (\, (semantic-lambda (semantic-tag-new-type (car (nth 1 vals)) nil nil nil :template-specifier (plist-get (nth 2 (nth 1 vals)) :template-specifier) :constant-flag (if (member "const" (append (nth 0 vals) (nth 2 vals))) t nil) :typemodifiers (delete "const" (append (nth 0 vals) (nth 2 vals))) :reference (car (nth 4 vals)) :pointer (car (nth 3 vals)) :typevar (car (nth 5 vals))))))) (template-definition (type (\, (semantic-lambda (nth 0 vals)))) (var-or-fun (\, (semantic-lambda (nth 0 vals))))) (opt-stars (punctuation "\\`[*]\\'" opt-starmod opt-stars (\, (semantic-lambda (list (1+ (car (nth 2 vals))))))) ((\, (semantic-lambda (list 0))))) (opt-starmod (STARMOD opt-starmod (\, (semantic-lambda (cons (car (nth 0 vals)) (nth 1 vals))))) ((\, (semantic-lambda)))) (STARMOD (CONST)) (declmods (DECLMOD declmods (\, (semantic-lambda (cons (car (nth 0 vals)) (nth 1 vals))))) (DECLMOD (\, (semantic-lambda (nth 0 vals)))) ((\, (semantic-lambda)))) (DECLMOD (EXTERN) (STATIC) (CVDECLMOD) (INLINE) (REGISTER) (FRIEND) (TYPENAME) (METADECLMOD) (VIRTUAL)) (metadeclmod (METADECLMOD (\, (semantic-lambda))) ((\, (semantic-lambda)))) (CVDECLMOD (CONST) (VOLATILE)) (cv-declmods (CVDECLMOD cv-declmods (\, (semantic-lambda (cons (car (nth 0 vals)) (nth 1 vals))))) (CVDECLMOD (\, (semantic-lambda (nth 0 vals)))) ((\, (semantic-lambda)))) (METADECLMOD (VIRTUAL) (MUTABLE)) (opt-ref (punctuation "\\`[&]\\'" (\, (semantic-lambda (list 1)))) ((\, (semantic-lambda (list 0))))) (typeformbase (typesimple (\, (semantic-lambda (nth 0 vals)))) (STRUCT symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) (nth 0 vals) nil nil)))) (UNION symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) (nth 0 vals) nil nil)))) (ENUM symbol (\, (semantic-lambda (semantic-tag-new-type (nth 1 vals) (nth 0 vals) nil nil)))) (builtintype (\, (semantic-lambda (nth 0 vals)))) (symbol template-specifier (\, (semantic-lambda (semantic-tag-new-type (nth 0 vals) "class" nil nil :template-specifier (nth 1 vals))))) (namespace-symbol-for-typeformbase opt-template-specifier (\, (semantic-lambda (semantic-tag-new-type (car (nth 0 vals)) "class" nil nil :template-specifier (nth 1 vals))))) (symbol (\, (semantic-lambda (list (nth 0 vals)))))) (signedmod (UNSIGNED) (SIGNED)) (builtintype-types (VOID) (CHAR) (WCHAR) (SHORT INT (\, (semantic-lambda (list (concat (nth 0 vals) " " (nth 1 vals)))))) (SHORT) (INT) (LONG INT (\, (semantic-lambda (list (concat (nth 0 vals) " " (nth 1 vals)))))) (FLOAT) (DOUBLE) (BOOL) (LONG DOUBLE (\, (semantic-lambda (list (concat (nth 0 vals) " " (nth 1 vals)))))) (LONG LONG (\, (semantic-lambda (list (concat (nth 0 vals) " " (nth 1 vals)))))) (LONG)) (builtintype (signedmod builtintype-types (\, (semantic-lambda (list (concat (car (nth 0 vals)) " " (car (nth 1 vals))))))) (builtintype-types (\, (semantic-lambda (nth 0 vals)))) (signedmod (\, (semantic-lambda (list (concat (car (nth 0 vals)) " int")))))) (codeblock-var-or-fun (declmods typeformbase declmods opt-ref var-or-func-decl (\, (semantic-lambda (semantic-c-reconstitute-token (nth 4 vals) (nth 0 vals) (nth 1 vals)))))) (var-or-fun (codeblock-var-or-fun (\, (semantic-lambda (nth 0 vals)))) (declmods var-or-func-decl (\, (semantic-lambda (semantic-c-reconstitute-token (nth 1 vals) (nth 0 vals) nil))))) (var-or-func-decl (func-decl (\, (semantic-lambda (nth 0 vals)))) (var-decl (\, (semantic-lambda (nth 0 vals))))) (func-decl (opt-stars opt-class opt-destructor functionname opt-template-specifier opt-under-p arg-list opt-post-fcn-modifiers opt-throw opt-initializers fun-or-proto-end (\, (semantic-lambda (nth 3 vals) (list (quote function) (nth 1 vals) (nth 2 vals) (nth 6 vals) (nth 8 vals) (nth 7 vals)) (nth 0 vals) (nth 10 vals) (list (nth 4 vals)) (nth 9 vals)))) (opt-stars opt-class opt-destructor functionname opt-template-specifier opt-under-p opt-post-fcn-modifiers opt-throw opt-initializers fun-try-end (\, (semantic-lambda (nth 3 vals) (list (quote function) (nth 1 vals) (nth 2 vals) nil (nth 7 vals) (nth 6 vals)) (nth 0 vals) (nth 9 vals) (list (nth 4 vals)) (nth 8 vals))))) (var-decl (varnamelist punctuation "\\`[;]\\'" (\, (semantic-lambda (list (nth 0 vals) (quote variable)))))) (opt-under-p (UNDERP (\, (semantic-lambda (list nil)))) (UNDERUNDERP (\, (semantic-lambda (list nil)))) nil) (opt-initializers (punctuation "\\`[:]\\'" namespace-symbol semantic-list opt-initializers) (punctuation "\\`[,]\\'" namespace-symbol semantic-list opt-initializers) nil) (opt-post-fcn-modifiers (post-fcn-modifiers opt-post-fcn-modifiers (\, (semantic-lambda (cons (car (nth 0 vals)) (nth 1 vals))))) ((\, (semantic-lambda (list nil))))) (post-fcn-modifiers (REENTRANT) (CONST)) (opt-throw (THROW semantic-list (\, (lambda (vals start end) (semantic-bovinate-from-nonterminal (car (nth 1 vals)) (cdr (nth 1 vals)) (quote throw-exception-list))))) nil) (throw-exception-list (namespace-symbol punctuation "\\`[,]\\'" throw-exception-list (\, (semantic-lambda (cons (car (nth 0 vals)) (nth 2 vals))))) (namespace-symbol close-paren ")" (\, (semantic-lambda (nth 0 vals)))) (symbol close-paren ")" (\, (semantic-lambda (list (nth 0 vals))))) (open-paren "(" throw-exception-list (\, (semantic-lambda (nth 1 vals)))) (close-paren ")" (\, (semantic-lambda)))) (opt-bits (punctuation "\\`[:]\\'" number (\, (semantic-lambda (list (nth 1 vals))))) ((\, (semantic-lambda (list nil))))) (opt-array (semantic-list "\\[.*\\]$" opt-array (\, (semantic-lambda (list (cons 1 (car (nth 1 vals))))))) ((\, (semantic-lambda (list nil))))) (opt-assign (punctuation "\\`[=]\\'" expression (\, (semantic-lambda (list (nth 1 vals))))) ((\, (semantic-lambda (list nil))))) (opt-restrict (symbol "\\<\\(__\\)?restrict\\>") nil) (varname (opt-stars opt-restrict namespace-symbol opt-bits opt-array (\, (semantic-lambda (nth 2 vals) (nth 0 vals) (nth 3 vals) (nth 4 vals))))) (variablearg (declmods typeformbase cv-declmods opt-ref variablearg-opt-name opt-assign (\, (semantic-lambda (semantic-tag-new-variable (list (append (nth 4 vals) (nth 5 vals))) (nth 1 vals) nil :constant-flag (if (member "const" (append (nth 0 vals) (nth 2 vals))) t nil) :typemodifiers (delete "const" (append (nth 0 vals) (nth 2 vals))) :reference (car (nth 3 vals))))))) (variablearg-opt-name (varname (\, (semantic-lambda (nth 0 vals)))) (semantic-list arg-list (\, (semantic-lambda (list (car (semantic-bovinate-from-nonterminal (car (nth 0 vals)) (cdr (nth 0 vals)) (quote function-pointer))) (nth 1 vals))))) (opt-stars (\, (semantic-lambda (list "") (nth 0 vals) (list nil nil nil))))) (varname-opt-initializer (semantic-list) (opt-assign) nil) (varnamelist (opt-ref varname varname-opt-initializer punctuation "\\`[,]\\'" varnamelist (\, (semantic-lambda (cons (append (nth 1 vals) (nth 2 vals)) (nth 4 vals))))) (opt-ref varname varname-opt-initializer (\, (semantic-lambda (list (append (nth 1 vals) (nth 2 vals))))))) (namespace-symbol (symbol opt-template-specifier punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" namespace-symbol (\, (semantic-lambda (list (concat (nth 0 vals) "::" (car (nth 4 vals))))))) (symbol opt-template-specifier (\, (semantic-lambda (list (nth 0 vals)))))) (namespace-symbol-for-typeformbase (symbol opt-template-specifier punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" namespace-symbol-for-typeformbase (\, (semantic-lambda (list (concat (nth 0 vals) "::" (car (nth 4 vals))))))) (symbol (\, (semantic-lambda (list (nth 0 vals)))))) (namespace-opt-class (symbol punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" namespace-opt-class (\, (semantic-lambda (list (concat (nth 0 vals) "::" (car (nth 3 vals))))))) (symbol opt-template-specifier punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" (\, (semantic-lambda (list (nth 0 vals)))))) (opt-class (namespace-opt-class (\, (semantic-lambda (nth 0 vals)))) ((\, (semantic-lambda (list nil))))) (opt-destructor (punctuation "\\`[~]\\'" (\, (semantic-lambda (list t)))) ((\, (semantic-lambda (list nil))))) (arg-list (semantic-list "^(" knr-arguments (\, (semantic-lambda (nth 1 vals)))) (semantic-list "^(" (\, (semantic-lambda (semantic-parse-region (car (nth 0 vals)) (cdr (nth 0 vals)) (quote arg-sub-list) 1)))) (semantic-list "^(void)$" (\, (semantic-lambda)))) (knr-varnamelist (varname punctuation "\\`[,]\\'" knr-varnamelist (\, (semantic-lambda (cons (nth 0 vals) (nth 2 vals))))) (varname (\, (semantic-lambda (list (nth 0 vals)))))) (knr-one-variable-decl (declmods typeformbase cv-declmods knr-varnamelist (\, (semantic-lambda (semantic-tag-new-variable (nreverse (nth 3 vals)) (nth 1 vals) nil :constant-flag (if (member "const" (append (nth 2 vals))) t nil) :typemodifiers (delete "const" (nth 2 vals))))))) (knr-arguments (knr-one-variable-decl punctuation "\\`[;]\\'" knr-arguments (\, (semantic-lambda (append (semantic-expand-c-tag (nth 0 vals)) (nth 2 vals))))) (knr-one-variable-decl punctuation "\\`[;]\\'" (\, (semantic-lambda (semantic-expand-c-tag (nth 0 vals)))))) (arg-sub-list (variablearg (\, (semantic-lambda (nth 0 vals)))) (punctuation "\\`[.]\\'" punctuation "\\`[.]\\'" punctuation "\\`[.]\\'" close-paren ")" (\, (semantic-lambda (semantic-tag-new-variable "..." "vararg" nil)))) (punctuation "\\`[,]\\'" (\, (semantic-lambda (list nil)))) (open-paren "(" (\, (semantic-lambda (list nil)))) (close-paren ")" (\, (semantic-lambda (list nil))))) (operatorsym (punctuation "\\`[<]\\'" punctuation "\\`[<]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "<<=")))) (punctuation "\\`[>]\\'" punctuation "\\`[>]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list ">>=")))) (punctuation "\\`[<]\\'" punctuation "\\`[<]\\'" (\, (semantic-lambda (list "<<")))) (punctuation "\\`[>]\\'" punctuation "\\`[>]\\'" (\, (semantic-lambda (list ">>")))) (punctuation "\\`[=]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "==")))) (punctuation "\\`[<]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "<=")))) (punctuation "\\`[>]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list ">=")))) (punctuation "\\`[!]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "!=")))) (punctuation "\\`[+]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "+=")))) (punctuation "\\`[-]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "-=")))) (punctuation "\\`[*]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "*=")))) (punctuation "\\`[/]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "/=")))) (punctuation "\\`[%]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "%=")))) (punctuation "\\`[&]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "&=")))) (punctuation "\\`[|]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "|=")))) (punctuation "\\`[-]\\'" punctuation "\\`[>]\\'" punctuation "\\`[*]\\'" (\, (semantic-lambda (list "->*")))) (punctuation "\\`[-]\\'" punctuation "\\`[>]\\'" (\, (semantic-lambda (list "->")))) (semantic-list "()" (\, (semantic-lambda (list "()")))) (semantic-list "\\[\\]" (\, (semantic-lambda (list "[]")))) (punctuation "\\`[<]\\'") (punctuation "\\`[>]\\'") (punctuation "\\`[*]\\'") (punctuation "\\`[+]\\'" punctuation "\\`[+]\\'" (\, (semantic-lambda (list "++")))) (punctuation "\\`[+]\\'") (punctuation "\\`[-]\\'" punctuation "\\`[-]\\'" (\, (semantic-lambda (list "--")))) (punctuation "\\`[-]\\'") (punctuation "\\`[&]\\'" punctuation "\\`[&]\\'" (\, (semantic-lambda (list "&&")))) (punctuation "\\`[&]\\'") (punctuation "\\`[|]\\'" punctuation "\\`[|]\\'" (\, (semantic-lambda (list "||")))) (punctuation "\\`[|]\\'") (punctuation "\\`[/]\\'") (punctuation "\\`[=]\\'") (punctuation "\\`[!]\\'") (punctuation "\\`[~]\\'") (punctuation "\\`[%]\\'") (punctuation "\\`[,]\\'") (punctuation "\\`\\^\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda (list "^=")))) (punctuation "\\`\\^\\'")) (functionname (OPERATOR operatorsym (\, (semantic-lambda (nth 1 vals)))) (semantic-list (\, (lambda (vals start end) (semantic-bovinate-from-nonterminal (car (nth 0 vals)) (cdr (nth 0 vals)) (quote function-pointer))))) (symbol (\, (semantic-lambda (list (nth 0 vals)))))) (function-pointer (open-paren "(" punctuation "\\`[*]\\'" opt-symbol close-paren ")" (\, (semantic-lambda (list (concat "*" (car (nth 2 vals))))))) (open-paren "(" symbol close-paren ")" (\, (semantic-lambda (list (nth 1 vals)))))) (fun-or-proto-end (punctuation "\\`[;]\\'" (\, (semantic-lambda (list t)))) (semantic-list (\, (semantic-lambda (list nil)))) (punctuation "\\`[=]\\'" number "^0$" punctuation "\\`[;]\\'" (\, (semantic-lambda (list (quote :pure-virtual-flag))))) (fun-try-end (\, (semantic-lambda (list nil))))) (fun-try-end (TRY opt-initializers semantic-list "^{" fun-try-several-catches (\, (semantic-lambda (list nil))))) (fun-try-several-catches (CATCH semantic-list "^(" semantic-list "^{" fun-try-several-catches (\, (semantic-lambda))) (CATCH semantic-list "^{" fun-try-several-catches (\, (semantic-lambda))) ((\, (semantic-lambda)))) (type-cast (semantic-list (\, (lambda (vals start end) (semantic-bovinate-from-nonterminal (car (nth 0 vals)) (cdr (nth 0 vals)) (quote type-cast-list)))))) (type-cast-list (open-paren typeformbase close-paren)) (opt-brackets-after-symbol (brackets-after-symbol) nil) (brackets-after-symbol (semantic-list "^(") (semantic-list "\\[.*\\]$")) (multi-stage-dereference (namespace-symbol opt-brackets-after-symbol punctuation "\\`[.]\\'" multi-stage-dereference) (namespace-symbol opt-brackets-after-symbol punctuation "\\`[-]\\'" punctuation "\\`[>]\\'" multi-stage-dereference) (namespace-symbol opt-brackets-after-symbol punctuation "\\`[.]\\'" namespace-symbol opt-brackets-after-symbol) (namespace-symbol opt-brackets-after-symbol punctuation "\\`[-]\\'" punctuation "\\`[>]\\'" namespace-symbol opt-brackets-after-symbol) (namespace-symbol brackets-after-symbol)) (string-seq (string string-seq (\, (semantic-lambda (list (concat (nth 0 vals) (car (nth 1 vals))))))) (string (\, (semantic-lambda (list (nth 0 vals)))))) (expr-start (punctuation "\\`[-]\\'") (punctuation "\\`[+]\\'") (punctuation "\\`[*]\\'") (punctuation "\\`[&]\\'")) (expr-binop (punctuation "\\`[-]\\'") (punctuation "\\`[+]\\'") (punctuation "\\`[*]\\'") (punctuation "\\`[/]\\'") (punctuation "\\`[&]\\'" punctuation "\\`[&]\\'") (punctuation "\\`[&]\\'") (punctuation "\\`[|]\\'" punctuation "\\`[|]\\'") (punctuation "\\`[|]\\'") (punctuation "\\`[%]\\'")) (expression (unaryexpression punctuation "\\`[?]\\'" unaryexpression punctuation "\\`[:]\\'" unaryexpression (\, (semantic-lambda (list (identity start) (identity end))))) (unaryexpression expr-binop unaryexpression (\, (semantic-lambda (list (identity start) (identity end))))) (unaryexpression (\, (semantic-lambda (list (identity start) (identity end)))))) (unaryexpression (number) (multi-stage-dereference) (NEW multi-stage-dereference) (NEW builtintype-types semantic-list) (symbol) (string-seq) (type-cast expression) (semantic-list expression) (semantic-list) (expr-start expression)))))
                nil [7644 45812])
            ("semantic-c-by--install-parser" function nil nil [45814 46258])
            ("semantic/bovine/c-by" package nil nil [46298 46329]))          
      :file "c-by.el.gz"
      :pointmax 46450
      :fsize 7014
      :lastmodtime '(22460 1408 0 0)
      :unmatched-syntax '((close-paren 946 . 947) (symbol 902 . 919) (open-paren 901 . 902)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [955 974])
            ("semantic/analyze" include nil nil [975 1002])
            ("semantic/analyze/refs" include nil nil [1003 1035])
            ("semantic/bovine" include nil nil [1036 1062])
            ("semantic/bovine/gcc" include nil nil [1063 1093])
            ("semantic/idle" include nil nil [1094 1118])
            ("semantic/lex-spp" include nil nil [1119 1146])
            ("semantic/bovine/c-by" include nil nil [1147 1178])
            ("semantic/db-find" include nil nil [1179 1206])
            ("hideif" include nil nil [1207 1224])
            ("semantic/find" include nil nil [1247 1271])
            ("declare-function" code nil nil [1274 1345])
            ("declare-function" code nil nil [1346 1407])
            ("declare-function" code nil nil [1408 1467])
            ("declare-function" code nil nil [1468 1546])
            ("declare-function" code nil nil [1547 1597])
            ("declare-function" code nil nil [1598 1646])
            ("cc-mode" include nil nil [1688 1706])
            ("if" code nil nil [1709 2288])
            ("define-child-mode" code nil nil [2300 2384])
            ("defcustom-mode-local-semantic-dependency-system-include-path" code nil nil [2409 2594])
            ("semantic-default-c-path" variable nil nil [2596 2837])
            ("semantic-dependency-include-path" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value semantic-default-c-path)
                nil [2839 2969])
            ("if" code nil nil [3089 3168])
            ("semantic-lex-c-preprocessor-symbol-map-builtin" variable (:default-value (quote (("__THROW" . "") ("__const" . "const") ("__restrict" . "") ("__attribute_pure__" . "") ("__attribute_malloc__" . "") ("__nonnull" . "") ("__wur" . "") ("__declspec" (spp-arg-list ("foo") 1 . 2)) ("__attribute__" (spp-arg-list ("foo") 1 . 2)) ("__asm" (spp-arg-list ("foo") 1 . 2))))) nil [3217 3665])
            ("semantic-c-in-reset-preprocessor-table" variable nil nil [3667 3866])
            ("semantic-lex-c-preprocessor-symbol-file" variable nil nil [3868 3916])
            ("semantic-lex-c-preprocessor-symbol-map" variable nil nil [3917 3964])
            ("semantic-c-reset-preprocessor-symbol-map" function nil nil [3966 5707])
            ("add-hook" code nil nil [5787 5861])
            ("semantic-lex-c-preprocessor-symbol-map" variable nil nil [5863 7218])
            ("semantic-lex-c-preprocessor-symbol-file" variable nil nil [7220 7795])
            ("semantic-c-member-of-autocast" variable (:default-value (quote t)) nil [7797 8208])
            ("define-lex-spp-macro-declaration-analyzer" code nil nil [8210 9678])
            ("define-lex-spp-macro-undeclaration-analyzer" code nil nil [9680 9931])
            ("semantic-c-obey-conditional-section-parsing-flag" variable
               (:user-visible-flag t
                :default-value t)
                nil [9963 10227])
            ("semantic-c-skip-conditional-section" function nil nil [10229 11556])
            ("semantic-c-convert-spp-value-to-hideif-value" function (:arguments ("symbol" "macrovalue")) nil [12032 12996])
            ("semantic-c-evaluate-symbol-for-hideif" function
               (:user-visible-flag t
                :arguments ("spp-symbol"))
                nil [12998 14315])
            ("semantic-c-hideif-lookup" function (:arguments ("var")) nil [14566 14991])
            ("semantic-c-hideif-defined" function (:arguments ("var")) nil [14993 15553])
            ("semantic-c-takeover-hideif" variable nil nil [15638 15735])
            ("define-lex-regex-analyzer" code nil nil [16404 16619])
            ("semantic-c-do-lex-if" function nil nil [16621 18290])
            ("define-lex-regex-analyzer" code nil nil [18292 18555])
            ("semantic-c-do-lex-ifdef" function nil nil [18557 19740])
            ("define-lex-regex-analyzer" code nil nil [19742 20286])
            ("define-lex-regex-analyzer" code nil nil [20288 20532])
            ("define-lex-spp-include-analyzer" code nil nil [20534 20914])
            ("define-lex-spp-include-analyzer" code nil nil [20916 21287])
            ("define-lex-regex-analyzer" code nil nil [21290 21473])
            ("define-lex-regex-analyzer" code nil nil [21475 22454])
            ("semantic-lex-c-nested-namespace-ignore-second" variable (:default-value t) nil [22456 22987])
            ("define-lex-regex-analyzer" code nil nil [22989 23624])
            ("define-lex-regex-analyzer" code nil nil [23626 23829])
            ("define-lex-regex-analyzer" code nil nil [23831 25580])
            ("define-lex-regex-analyzer" code nil nil [25582 25825])
            ("define-lex-regex-analyzer" code nil nil [25827 26231])
            ("define-lex-regex-analyzer" code nil nil [26233 26591])
            ("semantic-c-lexer" function (:lexical-analyzer-flag t) nil [26594 27775])
            ("define-lex-simple-regex-analyzer" code nil nil [27777 27900])
            ("semantic-cpp-lexer" function (:lexical-analyzer-flag t) nil [27902 28844])
            ("semantic-parse-region" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("start" "end" "&optional" "nonterminal" "depth" "returnonerror"))
                nil [28846 31037])
            ("semantic-c-parse-token-hack-depth" variable nil nil [31039 31157])
            ("semantic-c-parse-lexical-token" function (:arguments ("lexicaltoken" "nonterminal" "depth" "returnonerror")) nil [31159 33748])
            ("semantic-c-debug-mode-init-last-mode" variable nil nil [33750 33843])
            ("semantic-c-debug-mode-init" function
               (:user-visible-flag t
                :arguments ("mm"))
                nil [33845 34346])
            ("semantic-c-debug-mode-init-pch" function nil nil [34348 34916])
            ("semantic-expand-c-tag" function (:arguments ("tag")) nil [34918 36566])
            ("semantic-expand-c-extern-C" function (:arguments ("tag")) nil [36568 37120])
            ("semantic-expand-c-complex-type" function (:arguments ("tag")) nil [37122 38644])
            ("semantic-expand-c-tag-namelist" function (:arguments ("tag")) nil [38646 42438])
            ("semantic-tag-expand-function" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote semantic-expand-c-tag))
                nil [42440 42585])
            ("semantic-c-classname" variable nil nil [42587 42903])
            ("semantic-analyze-split-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("name"))
                nil [42905 43119])
            ("semantic-analyze-tag-references" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "db"))
                nil [43121 44501])
            ("semantic-c-reconstitute-token" function (:arguments ("tokenpart" "declmods" "typedecl")) nil [44503 47718])
            ("semantic-c-reconstitute-template" function (:arguments ("tag" "specifier")) nil [47720 47905])
            ("semantic-c-reconstitute-function-arglist" function (:arguments ("arglist")) nil [47907 48576])
            ("semantic-format-tag-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [48616 48998])
            ("semantic-format-tag-canonical-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [49000 49382])
            ("semantic-format-tag-type" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "color"))
                nil [49384 50426])
            ("semantic-find-tags-by-scope-protection" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("scopeprotection" "parent" "&optional" "table"))
                nil [50428 51292])
            ("semantic-tag-protection" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [51294 52867])
            ("semantic-find-tags-included" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("&optional" "table"))
                nil [52869 53435])
            ("semantic-tag-components" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [53438 53985])
            ("semantic-c-tag-template" function (:arguments ("tag")) nil [53987 54124])
            ("semantic-c-tag-template-specifier" function (:arguments ("tag")) nil [54126 54293])
            ("semantic-c-template-string-body" function (:arguments ("templatespec")) nil [54295 54652])
            ("semantic-c-template-string" function (:arguments ("token" "parent" "color")) nil [54654 55446])
            ("semantic-format-tag-concise-prototype" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("token" "&optional" "parent" "color"))
                nil [55448 55885])
            ("semantic-format-tag-uml-prototype" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("token" "&optional" "parent" "color"))
                nil [55887 56301])
            ("semantic-tag-abstract-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [56303 57386])
            ("semantic-c-dereference-typedef" function (:arguments ("type" "scope" "type-declaration")) nil [57388 58256])
            ("semantic-c--instantiate-template" function (:arguments ("tag" "def-list" "spec-list")) nil [58258 58831])
            ("semantic-c--template-name-1" function (:arguments ("spec-list")) nil [58833 59197])
            ("semantic-c--template-name" function (:arguments ("type" "spec-list")) nil [59199 59491])
            ("semantic-c-dereference-template" function (:arguments ("type" "scope" "type-declaration")) nil [59493 60409])
            ("semantic-c-dereference-member-of" function (:arguments ("type" "scope" "type-declaration")) nil [60464 61103])
            ("semantic-c-dereference-namespace" function (:arguments ("type" "scope" "type-declaration")) nil [61340 63244])
            ("semantic-c-dereference-namespace-alias" function (:arguments ("type" "namespace")) nil [63246 64497])
            ("semantic-c-check-type-namespace-using" function (:arguments ("type" "namespace")) nil [64582 66528])
            ("semantic-analyze-dereference-metatype" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("type" "scope" "&optional" "type-declaration"))
                nil [66531 67706])
            ("semantic-analyze-type-constants" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("type"))
                nil [67708 68015])
            ("semantic-analyze-unsplit-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("namelist"))
                nil [68017 68194])
            ("semantic-ctxt-scoped-types" function
               (:parent "c++-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [68196 70034])
            ("semantic-ctxt-imported-packages" function
               (:parent "c++-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [70036 70901])
            ("semanticdb-expand-nested-tag" function
               (:parent "c++-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [70903 71796])
            ("semanticdb-find-table-for-include" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("includetag" "&optional" "table"))
                nil [71798 73982])
            ("semantic-get-local-variables" function
               (:parent "c++-mode"
                :override-function-flag t)
                nil [73985 74656])
            ("semantic-idle-summary-current-symbol-info" function
               (:parent "c-mode"
                :override-function-flag t)
                nil [74658 75431])
            ("semantic--tag-similar-names-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag1" "tag2" "blankok"))
                nil [75433 75784])
            ("semantic--tag-similar-types-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag1" "tag2"))
                nil [75786 76768])
            ("semantic--tag-attribute-similar-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("attr" "value1" "value2" "ignorable-attributes"))
                nil [76771 77200])
            ("semantic-orphaned-member-metaparent-type" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value "struct")
                nil [77202 77358])
            ("semantic-symbol->name-assoc-list" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote ((type . "Types") (variable . "Variables") (function . "Functions") (include . "Includes"))))
                nil [77360 77591])
            ("semantic-symbol->name-assoc-list-for-type-parts" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote ((type . "Types") (variable . "Attributes") (function . "Methods") (label . "Labels"))))
                nil [77593 77855])
            ("imenu-create-index-function" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote semantic-create-imenu-index))
                nil [77857 77972])
            ("semantic-type-relation-separator-character" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote ("." "->" "::")))
                nil [77974 78135])
            ("semantic-command-separation-character" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value ";")
                nil [78137 78245])
            ("senator-step-at-tag-classes" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote (function variable)))
                nil [78247 78374])
            ("semantic-tag-similar-ignorable-attributes" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote (:prototype-flag :parent :typemodifiers)))
                nil [78376 78667])
            ("semantic-default-c-setup" function nil nil [78684 79222])
            ("semantic-c-add-preprocessor-symbol" function
               (:user-visible-flag t
                :arguments ("sym" "replacement"))
                nil [79239 79743])
            ("semantic-c-describe-environment" function (:user-visible-flag t) nil [79764 83181])
            ("semantic/bovine/c" package nil nil [83183 83211])
            ("semantic-c-reset-preprocessor-symbol-map" code nil nil [83213 83255]))          
      :file "c.el.gz"
      :pointmax 83419
      :fsize 23146
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 1706 . 1707) (symbol 1670 . 1687) (open-paren 1669 . 1670) (close-paren 1271 . 1272) (symbol 1227 . 1244) (open-paren 1226 . 1227)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/dep" include nil nil [999 1022])
            ("semantic-lex-c-preprocessor-symbol-file" variable nil nil [1024 1072])
            ("semantic-lex-c-preprocessor-symbol-map" variable nil nil [1073 1120])
            ("declare-function" code nil nil [1121 1200])
            ("semantic-gcc-query" function (:arguments ("gcc-cmd" "gcc-options")) nil [1213 2223])
            ("semantic-gcc-get-include-paths" function (:arguments ("lang")) nil [2305 3667])
            ("semantic-cpp-defs" function (:arguments ("str")) nil [3670 3998])
            ("semantic-gcc-fields" function (:arguments ("str")) nil [4000 5154])
            ("semantic-gcc-setup-data" variable nil nil [5156 5496])
            ("semantic-gcc-setup" function (:user-visible-flag t) nil [5513 10031])
            ("semantic/bovine/gcc" package nil nil [10033 10063]))          
      :file "gcc.el.gz"
      :pointmax 10231
      :fsize 3290
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("make-mode" include nil nil [968 988])
            ("semantic" include nil nil [990 1009])
            ("semantic/bovine" include nil nil [1010 1036])
            ("semantic/bovine/make-by" include nil nil [1037 1071])
            ("semantic/analyze" include nil nil [1072 1099])
            ("semantic/dep" include nil nil [1100 1123])
            ("declare-function" code nil nil [1125 1221])
            ("define-lex-analyzer" code nil nil [1233 1758])
            ("define-lex-regex-analyzer" code nil nil [1760 2153])
            ("define-lex-regex-analyzer" code nil nil [2155 2377])
            ("semantic-make-lexer" function (:lexical-analyzer-flag t) nil [2379 2870])
            ("semantic-make-expand-tag" function (:arguments ("tag")) nil [2872 3450])
            ("semantic-get-local-variables" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [3452 3668])
            ("semantic-ctxt-current-class-list" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [3670 4319])
            ("semantic-format-tag-abbreviate" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [4321 4759])
            ("semantic-function-argument-separator" variable
               (:parent "makefile-mode"
                :override-variable-flag t
                :default-value " ")
                nil [4761 4887])
            ("semantic-format-tag-prototype" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [4889 5458])
            ("semantic-format-tag-concise-prototype" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [5460 5731])
            ("semantic-format-tag-uml-prototype" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [5733 5996])
            ("semantic-analyze-possible-completions" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("context"))
                nil [5998 7002])
            ("defcustom-mode-local-semantic-dependency-system-include-path" code nil nil [7004 7193])
            ("semantic-default-make-setup" function nil nil [7210 8267])
            ("semantic/bovine/make" package nil nil [8269 8300]))          
      :file "make.el.gz"
      :pointmax 8470
      :fsize 2790
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [922 941])
            ("semantic/bovine" include nil nil [942 968])
            ("semantic/bovine/scm-by" include nil nil [969 1002])
            ("semantic/format" include nil nil [1003 1029])
            ("semantic/dep" include nil nil [1030 1053])
            ("defcustom-mode-local-semantic-dependency-system-include-path" code nil nil [1066 1344])
            ("semantic-format-tag-prototype" function
               (:parent "scheme-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [1346 1762])
            ("semantic-documentation-for-tag" function
               (:parent "scheme-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "nosnarf"))
                nil [1764 2062])
            ("semantic-insert-foreign-tag" function
               (:parent "scheme-mode"
                :override-function-flag t
                :arguments ("tag" "tagfile"))
                nil [2064 2393])
            ("define-lex-regex-analyzer" code nil nil [2436 2772])
            ("semantic-scheme-lexer" function (:lexical-analyzer-flag t) nil [2775 3274])
            ("semantic-default-scheme-setup" function nil nil [3291 3967])
            ("semantic/bovine/scm" package nil nil [3969 3999]))          
      :file "scm.el.gz"
      :pointmax 4167
      :fsize 1734
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/lex" include nil nil [883 906])
            ("semantic/bovine" include nil nil [926 952])
            ("semantic-make-by--keyword-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-keyword-table (quote (("if" . IF) ("ifdef" . IFDEF) ("ifndef" . IFNDEF) ("ifeq" . IFEQ) ("ifneq" . IFNEQ) ("else" . ELSE) ("endif" . ENDIF) ("include" . INCLUDE))) (quote (("include" summary "Macro: include filename1 filename2 ...") ("ifneq" summary "Conditional: ifneq (expression) ... else ... endif") ("ifeq" summary "Conditional: ifeq (expression) ... else ... endif") ("ifndef" summary "Conditional: ifndef (expression) ... else ... endif") ("ifdef" summary "Conditional: ifdef (expression) ... else ... endif") ("endif" summary "Conditional: if (expression) ... else ... endif") ("else" summary "Conditional: if (expression) ... else ... endif") ("if" summary "Conditional: if (expression) ... else ... endif")))))
                nil [994 1871])
            ("semantic-make-by--token-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-type-table (quote (("punctuation" (BACKSLASH . "\\`[\\]\\'") (DOLLAR . "\\`[$]\\'") (EQUAL . "\\`[=]\\'") (PLUS . "\\`[+]\\'") (COLON . "\\`[:]\\'")))) (quote nil)))
                nil [1873 2150])
            ("semantic-make-by--parse-table" variable
               (:constant-flag t
                :default-value (\` ((bovine-toplevel (Makefile)) (Makefile (bol newline (\, (semantic-lambda (list nil)))) (bol variable (\, (semantic-lambda (nth 1 vals)))) (bol rule (\, (semantic-lambda (nth 1 vals)))) (bol conditional (\, (semantic-lambda (nth 1 vals)))) (bol include (\, (semantic-lambda (nth 1 vals)))) (whitespace (\, (semantic-lambda (list nil)))) (newline (\, (semantic-lambda (list nil))))) (variable (symbol opt-whitespace equals opt-whitespace element-list (\, (semantic-lambda (semantic-tag-new-variable (nth 0 vals) nil (nth 4 vals)))))) (rule (targets opt-whitespace colons opt-whitespace element-list commands (\, (semantic-lambda (semantic-tag-new-function (nth 0 vals) nil (nth 4 vals)))))) (targets (target opt-whitespace targets (\, (semantic-lambda (list (car (nth 0 vals)) (car (nth 2 vals)))))) (target (\, (semantic-lambda (list (car (nth 0 vals))))))) (target (sub-target target (\, (semantic-lambda (list (concat (car (nth 0 vals)) (car (nth 2 vals))))))) (sub-target (\, (semantic-lambda (list (car (nth 0 vals))))))) (sub-target (symbol) (string) (varref)) (conditional (IF some-whitespace symbol newline (\, (semantic-lambda (list nil)))) (IFDEF some-whitespace symbol newline (\, (semantic-lambda (list nil)))) (IFNDEF some-whitespace symbol newline (\, (semantic-lambda (list nil)))) (IFEQ some-whitespace expression newline (\, (semantic-lambda (list nil)))) (IFNEQ some-whitespace expression newline (\, (semantic-lambda (list nil)))) (ELSE newline (\, (semantic-lambda (list nil)))) (ENDIF newline (\, (semantic-lambda (list nil))))) (expression (semantic-list)) (include (INCLUDE some-whitespace element-list (\, (semantic-lambda (semantic-tag-new-include (nth 2 vals) nil))))) (equals (punctuation "\\`[:]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda))) (punctuation "\\`[+]\\'" punctuation "\\`[=]\\'" (\, (semantic-lambda))) (punctuation "\\`[=]\\'" (\, (semantic-lambda)))) (colons (punctuation "\\`[:]\\'" punctuation "\\`[:]\\'" (\, (semantic-lambda))) (punctuation "\\`[:]\\'" (\, (semantic-lambda)))) (element-list (elements newline (\, (semantic-lambda (nth 0 vals))))) (elements (element some-whitespace elements (\, (semantic-lambda (nth 0 vals) (nth 2 vals)))) (element (\, (semantic-lambda (nth 0 vals)))) nil) (element (sub-element element (\, (semantic-lambda (list (concat (car (nth 0 vals)) (car (nth 1 vals))))))) nil) (sub-element (symbol) (string) (punctuation) (semantic-list (\, (semantic-lambda (list (buffer-substring-no-properties (identity start) (identity end))))))) (varref (punctuation "\\`[$]\\'" semantic-list (\, (semantic-lambda (list (buffer-substring-no-properties (identity start) (identity end))))))) (commands (bol shell-command newline commands (\, (semantic-lambda (list (nth 0 vals)) (nth 1 vals)))) ((\, (semantic-lambda)))) (opt-whitespace (some-whitespace (\, (semantic-lambda (list nil)))) nil) (some-whitespace (whitespace some-whitespace (\, (semantic-lambda (list nil)))) (whitespace (\, (semantic-lambda (list nil))))))))
                nil [2152 7286])
            ("semantic-make-by--install-parser" function nil nil [7288 7685])
            ("semantic/bovine/make-by" package nil nil [7725 7759]))          
      :file "make-by.el.gz"
      :pointmax 7883
      :fsize 1785
      :lastmodtime '(22460 1408 0 0)
      :unmatched-syntax '((close-paren 952 . 953) (symbol 908 . 925) (open-paren 907 . 908)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("semantic/lex" include nil nil [881 904])
            ("semantic/bovine" include nil nil [924 950])
            ("semantic-scm-by--keyword-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-keyword-table (quote (("define" . DEFINE) ("define-module" . DEFINE-MODULE) ("module" . MODULE) ("load" . LOAD))) (quote (("load" summary "Function: (load \"filename\")") ("define-module" summary "Function: (define-module (name arg1 ...)) ") ("define" summary "Function: (define symbol expression)")))))
                nil [992 1406])
            ("semantic-scm-by--token-table" variable
               (:constant-flag t
                :default-value (semantic-lex-make-type-table (quote (("close-paren" (CLOSEPAREN . ")")) ("open-paren" (OPENPAREN . "(")))) (quote nil)))
                nil [1408 1608])
            ("semantic-scm-by--parse-table" variable
               (:constant-flag t
                :default-value (\` ((bovine-toplevel (scheme)) (scheme (semantic-list (\, (semantic-lambda (let ((expand (semantic-bovinate-from-nonterminal (car (nth 0 vals)) (cdr (nth 0 vals)) (quote scheme-list)))) (cond ((semantic-tag-of-class-p expand (quote module)) (semantic-tag-new-type (semantic-tag-name expand) "module" (semantic-parse-region (car (nth 0 vals)) (cdr (nth 0 vals)) (quote scheme) 1) nil)) (t expand))))))) (scheme-list (open-paren "(" scheme-in-list (\, (semantic-lambda (nth 1 vals))))) (scheme-in-list (DEFINE symbol expression (\, (semantic-lambda (semantic-tag-new-variable (nth 1 vals) nil (nth 2 vals))))) (DEFINE name-args opt-doc (\, (semantic-lambda (semantic-tag-new-function (car (nth 1 vals)) nil (cdr (nth 1 vals)))))) (DEFINE-MODULE name-args (\, (semantic-lambda (semantic-tag-new-package (nth (length (nth 1 vals)) (nth 1 vals)) nil)))) (MODULE symbol (\, (semantic-lambda (semantic-tag (nth 0 vals) (quote module) :members nil)))) (LOAD string (\, (semantic-lambda (semantic-tag-new-include (file-name-nondirectory (read (nth 1 vals))) (read (nth 1 vals)))))) (symbol sequence (\, (semantic-lambda (semantic-tag-new-code (nth 0 vals) nil))))) (name-args (semantic-list (\, (lambda (vals start end) (semantic-bovinate-from-nonterminal (car (nth 0 vals)) (cdr (nth 0 vals)) (quote name-arg-list)))))) (name-arg-list (open-paren "(" name-arg-expand (\, (semantic-lambda (nth 1 vals))))) (name-arg-expand (symbol name-arg-expand (\, (semantic-lambda (cons (nth 0 vals) (nth 1 vals))))) ((\, (semantic-lambda)))) (opt-doc (string) nil) (sequence (expression sequence) (expression)) (expression (symbol) (semantic-list) (string) (number)))))
                nil [1610 4593])
            ("semantic-scm-by--install-parser" function nil nil [4595 4991])
            ("semantic/bovine/scm-by" package nil nil [5031 5064]))          
      :file "scm-by.el.gz"
      :pointmax 5187
      :fsize 1609
      :lastmodtime '(22460 1408 0 0)
      :unmatched-syntax '((close-paren 950 . 951) (symbol 906 . 923) (open-paren 905 . 906))))
  :file "!usr!local!Cellar!emacs!25.1!share!emacs!25.1!lisp!cedet!semantic!bovine!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
