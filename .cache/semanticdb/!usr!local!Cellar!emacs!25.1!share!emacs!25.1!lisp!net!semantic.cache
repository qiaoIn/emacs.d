;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("thingatpt" include nil nil [2322 2342])
            ("browse-url-url-at-point" function (:prototype-flag t) nil [2343 2391])
            ("unless" code nil nil [2436 2488])
            ("unless" code nil nil [2489 2584])
            ("unless" code nil nil [2585 2668])
            ("unless" code nil nil [2669 2770])
            ("goto-address" customgroup (:user-visible-flag t) nil [2772 2884])
            ("goto-address-fontify-p" variable (:default-value t) nil [2953 3154])
            ("goto-address-highlight-p" variable (:default-value t) nil [3156 3305])
            ("goto-address-fontify-maximum-size" variable (:default-value 30000) nil [3307 3593])
            ("goto-address-mail-regexp" variable (:default-value "[-a-zA-Z0-9=._+]+@\\([-a-zA-z0-9_]+\\.\\)+[a-zA-Z0-9]+") nil [3595 3826])
            ("goto-address-url-regexp" variable (:default-value (concat "\\<\\(" (mapconcat (quote identity) (delete "mailto:" (delete "data:" (copy-sequence thing-at-point-uri-schemes))) "\\|") "\\)" thing-at-point-url-path-regexp)) nil [3828 4540])
            ("goto-address-highlight-keymap" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m (if (featurep (quote xemacs)) (kbd "<button2>") (kbd "<mouse-2>")) (quote goto-address-at-point)) (define-key m (kbd "C-c RET") (quote goto-address-at-point)) m)) nil [4542 4857])
            ("goto-address-url-face" variable (:default-value (quote link)) nil [4859 4961])
            ("goto-address-url-mouse-face" variable (:default-value (quote highlight)) nil [4963 5102])
            ("goto-address-mail-face" variable (:default-value (quote italic)) nil [5104 5221])
            ("goto-address-mail-mouse-face" variable (:default-value (quote secondary-selection)) nil [5223 5385])
            ("goto-address-unfontify" function (:arguments ("start" "end")) nil [5387 5608])
            ("goto-address-prog-mode" variable nil nil [5610 5641])
            ("goto-address-fontify" function (:arguments ("start" "end")) nil [5643 7857])
            ("goto-address-fontify-region" function (:arguments ("start" "end")) nil [7859 8171])
            ("define-obsolete-function-alias" code nil nil [8287 8374])
            ("goto-address-at-point" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8391 9208])
            ("goto-address-find-address-at-point" function nil nil [9210 9724])
            ("goto-address" function (:user-visible-flag t) nil [9741 10226])
            ("define-minor-mode" code nil nil [10305 10819])
            ("define-minor-mode" code nil nil [10836 11194])
            ("goto-addr" package nil nil [11196 11216]))          
      :file "goto-addr.el.gz"
      :pointmax 11245
      :fsize 3707
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1385 1402])
            ("gnutls" customgroup (:user-visible-flag t) nil [1404 1521])
            ("gnutls-algorithm-priority" variable nil nil [1523 1792])
            ("gnutls-verify-error" variable nil nil [1794 2254])
            ("gnutls-trustfiles" variable (:default-value (quote ("/etc/ssl/certs/ca-certificates.crt" "/etc/pki/tls/certs/ca-bundle.crt" "/etc/ssl/ca-bundle.pem" "/usr/ssl/certs/ca-bundle.crt" "/usr/local/share/certs/ca-root-nss.crt"))) nil [2256 2968])
            ("gnutls-min-prime-bits" variable (:default-value 256) nil [2985 3644])
            ("open-gnutls-stream" function (:arguments ("name" "buffer" "host" "service")) nil [3646 5023])
            ("define-error" code nil nil [5025 5068])
            ("declare-function" code nil nil [5070 5132])
            ("declare-function" code nil nil [5133 5184])
            ("gnutls-log-level" variable nil nil [5185 5210])
            ("cl-defun" code nil nil [5237 10321])
            ("gnutls-trustfiles" function nil nil [10323 10597])
            ("declare-function" code nil nil [10599 10656])
            ("gnutls-message-maybe" function (:arguments ("doit" "format" "params")) nil [10658 11034])
            ("gnutls" package nil nil [11036 11053]))          
      :file "gnutls.el.gz"
      :pointmax 11079
      :fsize 4168
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("tls" include nil nil [1493 1507])
            ("starttls" include nil nil [1508 1527])
            ("auth-source" include nil nil [1528 1550])
            ("nsm" include nil nil [1551 1565])
            ("gnutls-negotiate" function (:prototype-flag t) nil [1567 1604])
            ("open-gnutls-stream" function (:prototype-flag t) nil [1605 1644])
            ("open-network-stream" function (:arguments ("name" "buffer" "host" "service" "parameters")) nil [1661 7109])
            ("network-stream-certificate" function (:arguments ("host" "service" "parameters")) nil [7111 7584])
            ("defalias" code nil nil [7601 7654])
            ("network-stream-open-plain" function (:arguments ("name" "buffer" "host" "service" "parameters")) nil [7656 8186])
            ("network-stream-open-starttls" function (:arguments ("name" "buffer" "host" "service" "parameters")) nil [8188 13551])
            ("network-stream-command" function (:arguments ("stream" "command" "eoc")) nil [13553 13795])
            ("network-stream-get-response" function (:arguments ("stream" "start" "end-of-command")) nil [13797 14274])
            ("network-stream-open-tls" function (:arguments ("name" "buffer" "host" "service" "parameters")) nil [14276 15424])
            ("network-stream-open-shell" function (:arguments ("name" "buffer" "host" "service" "parameters")) nil [15426 16148])
            ("network-stream" package nil nil [16150 16175]))          
      :file "network-stream.el.gz"
      :pointmax 16209
      :fsize 4997
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("gnutls" include nil nil [1540 1557])
            ("format-spec" function (:prototype-flag t) nil [1559 1596])
            ("format-spec-make" function (:prototype-flag t) nil [1597 1639])
            ("tls" customgroup (:user-visible-flag t) nil [1641 1721])
            ("tls-end-of-info" variable (:default-value (concat "\\(" "^    Verify return code: .+
---
\\|" "^- Simple Client Mode:
" "\\(
\\|" "^\\*\\*\\* Starting TLS handshake
\\)*" "\\)")) nil [1723 2667])
            ("tls-program" variable (:default-value (quote ("gnutls-cli --x509cafile %t -p %p %h" "gnutls-cli --x509cafile %t -p %p %h --protocols ssl3" "openssl s_client -connect %h:%p -no_ssl2 -ign_eof"))) nil [2669 4252])
            ("tls-process-connection-type" variable nil nil [4254 4420])
            ("tls-success" variable (:default-value "- Handshake was completed\\|SSL handshake has read ") nil [4422 4694])
            ("tls-checktrust" variable nil nil [4696 5505])
            ("tls-untrusted" variable (:default-value "- Peer's certificate is NOT trusted\\|Verify return code: \\([^0] \\|.[^ ]\\)") nil [5507 5876])
            ("tls-hostmismatch" variable (:default-value "# The hostname in the certificate does NOT match") nil [5878 6338])
            ("tls-certtool-program" variable (:default-value "certtool") nil [6340 6499])
            ("defalias" code nil nil [6501 6664])
            ("tls-certificate-information" function (:arguments ("der")) nil [6666 7471])
            ("open-tls-stream" function (:arguments ("name" "buffer" "host" "port")) nil [7473 11185])
            ("tls" package nil nil [11187 11201]))          
      :file "tls.el.gz"
      :pointmax 11224
      :fsize 4205
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("netrc" customgroup (:user-visible-flag t) nil [1104 1162])
            ("netrc-file" variable (:default-value "~/.authinfo") nil [1164 1292])
            ("netrc-services-file" variable (:default-value "/etc/services") nil [1294 1373])
            ("netrc-cache" variable nil nil [1375 1399])
            ("netrc-parse" function (:arguments ("file")) nil [1401 3618])
            ("netrc-machine" function (:arguments ("list" "machine" "port" "defaultport")) nil [3620 4655])
            ("netrc-machine-user-or-password" function (:arguments ("mode" "authinfo-file-or-list" "machines" "ports" "defaults")) nil [4657 5631])
            ("netrc-get" function (:arguments ("alist" "type")) nil [5633 5737])
            ("netrc-port-equal" function (:arguments ("port1" "port2")) nil [5739 5969])
            ("netrc-parse-services" function nil nil [5971 6490])
            ("netrc-find-service-name" function (:arguments ("number" "type")) nil [6492 6773])
            ("netrc-credentials" function (:arguments ("machine" "ports")) nil [6790 7256])
            ("netrc" package nil nil [7258 7274]))          
      :file "netrc.el.gz"
      :pointmax 7299
      :fsize 2856
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [895 912])
            ("nsm-permanent-host-settings" variable nil nil [914 954])
            ("nsm-temporary-host-settings" variable nil nil [955 995])
            ("nsm" customgroup (:user-visible-flag t) nil [997 1077])
            ("network-security-level" variable (:default-value (quote medium)) nil [1079 1881])
            ("nsm-settings-file" variable (:default-value (expand-file-name "network-security.data" user-emacs-directory)) nil [1883 2091])
            ("nsm-save-host-names" variable nil nil [2093 2341])
            ("nsm-noninteractive" variable nil nil [2343 2493])
            ("declare-function" code nil nil [2495 2550])
            ("nsm-verify-connection" function (:arguments ("process" "host" "port" "save-fingerprint" "warn-unencrypted")) nil [2552 3985])
            ("nsm-check-tls-connection" function (:arguments ("process" "host" "port" "status" "settings")) nil [3987 4352])
            ("declare-function" code nil nil [4354 4439])
            ("nsm-check-certificate" function (:arguments ("process" "host" "port" "status" "settings")) nil [4441 6355])
            ("nsm-check-protocol" function (:arguments ("process" "host" "port" "status" "settings")) nil [6357 8251])
            ("nsm-fingerprint" function (:arguments ("status")) nil [8253 8346])
            ("nsm-fingerprint-ok-p" function (:arguments ("host" "port" "status" "settings")) nil [8348 9018])
            ("nsm-new-fingerprint-ok-p" function (:arguments ("host" "port" "status")) nil [9020 9219])
            ("nsm-check-plain-connection" function (:arguments ("process" "host" "port" "settings" "warn-unencrypted")) nil [9221 10123])
            ("nsm-query" function (:arguments ("host" "port" "status" "what" "message" "args")) nil [10125 10640])
            ("nsm-query-user" function (:arguments ("message" "args" "cert")) nil [10642 12031])
            ("nsm-save-host" function (:arguments ("host" "port" "status" "what" "permanency")) nil [12033 13289])
            ("nsm-write-settings" function nil nil [13291 13524])
            ("nsm-read-settings" function nil nil [13526 13725])
            ("nsm-id" function (:arguments ("host" "port")) nil [13727 13806])
            ("nsm-host-settings" function (:arguments ("id")) nil [13808 14162])
            ("nsm-warnings-ok-p" function (:arguments ("status" "settings")) nil [14164 14386])
            ("nsm-remove-permanent-setting" function (:arguments ("id")) nil [14388 14566])
            ("nsm-remove-temporary-setting" function (:arguments ("id")) nil [14568 14746])
            ("nsm-format-certificate" function (:arguments ("status")) nil [14748 16193])
            ("nsm-certificate-part" function (:arguments ("string" "part" "full")) nil [16195 16376])
            ("nsm-parse-subject" function (:arguments ("string")) nil [16378 16966])
            ("nsm-level" function (:arguments ("symbol")) nil [16968 17151])
            ("nsm" package nil nil [17153 17167]))          
      :file "nsm.el.gz"
      :pointmax 17190
      :fsize 5156
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("derived" include nil nil [1253 1271])
            ("xml" include nil nil [1272 1286])
            ("url-parse" include nil nil [1287 1307])
            ("w3-mode-map" variable nil nil [1329 1349])
            ("w3m-minor-mode-map" variable nil nil [1350 1377])
            ("newsticker--retrieval-timer-list" variable nil nil [1380 1530])
            ("newsticker--sentinel-callback" variable nil nil [1532 1628])
            ("newsticker-running-p" function nil nil [1645 1900])
            ("newsticker" customgroup (:user-visible-flag t) nil [2068 2155])
            ("newsticker--raw-url-list-defaults" variable
               (:constant-flag t
                :default-value (quote (("CNET News.com" "http://export.cnet.com/export/feeds/news/rss/1,11176,,00.xml") ("Debian Security Advisories" "http://www.debian.org/security/dsa.en.rdf") ("Debian Security Advisories - Long format" "http://www.debian.org/security/dsa-long.en.rdf") ("Emacs Wiki" "http://www.emacswiki.org/cgi-bin/wiki.pl?action=rss" nil 3600) ("Freshmeat.net" "http://freshmeat.net/index.atom") ("Kuro5hin.org" "http://www.kuro5hin.org/backend.rdf") ("LWN (Linux Weekly News)" "http://lwn.net/headlines/rss") ("NY Times: Technology" "http://partners.userland.com/nytRss/technology.xml") ("NY Times" "http://partners.userland.com/nytRss/nytHomepage.xml") ("Quote of the day" "http://www.quotationspage.com/data/qotd.rss" "07:00" 86400) ("The Register" "http://www.theregister.co.uk/tonys/slashdot.rdf") ("slashdot" "http://slashdot.org/index.rss" nil 3600) ("Wired News" "http://www.wired.com/news_drop/netcenter/netcenter.rdf") ("Heise News (german)" "http://www.heise.de/newsticker/heise.rdf") ("Tagesschau (german)" "http://www.tagesschau.de/newsticker.rdf" nil 1800) ("Telepolis (german)" "http://www.heise.de/tp/news.rdf"))))
                nil [2157 3631])
            ("newsticker--splicer" function (:arguments ("item")) nil [3633 3977])
            ("newsticker--set-customvar-retrieval" function (:arguments ("symbol" "value")) nil [3979 5683])
            ("newsticker-retrieval" customgroup (:user-visible-flag t) nil [5772 5861])
            ("newsticker-url-list-defaults" variable (:default-value (quote (("Emacs Wiki" "http://www.emacswiki.org/cgi-bin/wiki.pl?action=rss" nil 3600)))) nil [5863 6400])
            ("newsticker-url-list" variable nil nil [6402 8918])
            ("newsticker-retrieval-method" variable (:default-value (quote intern)) nil [8920 9378])
            ("newsticker-wget-name" variable (:default-value "wget") nil [9380 9671])
            ("newsticker-wget-arguments" variable (:default-value (quote ("-q" "-O" "-"))) nil [9673 9944])
            ("newsticker-retrieval-interval" variable (:default-value 3600) nil [9946 10605])
            ("newsticker-desc-comp-max" variable (:default-value 100) nil [10607 10878])
            ("newsticker-headline-processing" customgroup (:user-visible-flag t) nil [10977 11099])
            ("newsticker-automatically-mark-items-as-old" variable (:default-value t) nil [11101 11500])
            ("newsticker-automatically-mark-visited-items-as-old" variable (:default-value t) nil [11502 11822])
            ("newsticker-keep-obsolete-items" variable (:default-value t) nil [11824 12108])
            ("newsticker-obsolete-item-max-age" variable (:default-value (* 60 60 24)) nil [12110 12369])
            ("newsticker-auto-mark-filter-list" variable nil nil [12371 14357])
            ("newsticker-hooks" customgroup (:user-visible-flag t) nil [14442 14529])
            ("newsticker-start-hook" variable nil nil [14531 14744])
            ("newsticker-stop-hook" variable nil nil [14746 14934])
            ("newsticker-new-item-functions" variable nil nil [14936 15575])
            ("newsticker-miscellaneous" customgroup (:user-visible-flag t) nil [15668 15767])
            ("newsticker-cache-filename" variable (:default-value "~/.newsticker-cache") nil [15769 15920])
            ("make-obsolete-variable" code nil nil [15921 15995])
            ("newsticker-dir" variable (:default-value (locate-user-emacs-file "newsticker/" ".newsticker/")) nil [15997 16176])
            ("newsticker-debug" variable nil nil [16191 16466])
            ("unless" code nil nil [16779 17009])
            ("unless" code nil nil [17011 17112])
            ("when" code nil nil [17114 17331])
            ("unless" code nil nil [17356 17756])
            ("unless" code nil nil [17781 18065])
            ("newsticker--buffer-uptodate-p" variable nil nil [18238 18335])
            ("newsticker--latest-update-time" variable (:default-value (current-time)) nil [18336 18437])
            ("newsticker--process-ids" variable nil nil [18438 18523])
            ("newsticker--cache" variable nil nil [18525 19486])
            ("newsticker--auto-narrow-to-feed" variable nil nil [19488 19643])
            ("newsticker--auto-narrow-to-item" variable nil nil [19645 19785])
            ("newsticker--error-headline" variable
               (:constant-flag t
                :default-value "[COULD NOT DOWNLOAD HEADLINES!]")
                nil [19787 19936])
            ("newsticker--title" function (:arguments ("item")) nil [20100 20176])
            ("newsticker--desc" function (:arguments ("item")) nil [20177 20258])
            ("newsticker--link" function (:arguments ("item")) nil [20259 20333])
            ("newsticker--time" function (:arguments ("item")) nil [20334 20408])
            ("newsticker--age" function (:arguments ("item")) nil [20409 20481])
            ("newsticker--pos" function (:arguments ("item")) nil [20482 20565])
            ("newsticker--preformatted-contents" function (:arguments ("item")) nil [20566 20671])
            ("newsticker--preformatted-title" function (:arguments ("item")) nil [20672 20775])
            ("newsticker--extra" function (:arguments ("item")) nil [20776 20863])
            ("newsticker--guid-to-string" function (:arguments ("guid")) nil [20864 21018])
            ("newsticker--guid" function (:arguments ("item")) nil [21019 21148])
            ("newsticker--enclosure" function (:arguments ("item")) nil [21149 21384])
            ("newsticker--real-feed-name" function (:arguments ("feed")) nil [21385 21678])
            ("newsticker--start-feed" function (:arguments ("feed" "do-not-complain-if-running")) nil [21843 23216])
            ("newsticker-start" function
               (:user-visible-flag t
                :arguments ("do-not-complain-if-running"))
                nil [23233 24012])
            ("newsticker--stop-feed" function (:arguments ("feed-name")) nil [24014 24431])
            ("newsticker-stop" function (:user-visible-flag t) nil [24433 25049])
            ("newsticker-get-all-news" function (:user-visible-flag t) nil [25051 25374])
            ("newsticker-save-item" function
               (:user-visible-flag t
                :arguments ("feed" "item"))
                nil [25376 25828])
            ("newsticker-add-url" function
               (:user-visible-flag t
                :arguments ("url" "name"))
                nil [25830 26862])
            ("newsticker-customize" function (:user-visible-flag t) nil [26864 27014])
            ("newsticker--get-news-by-funcall" function (:arguments ("feed-name" "function")) nil [27180 27647])
            ("newsticker--get-news-by-url" function (:arguments ("feed-name" "url")) nil [27649 28126])
            ("newsticker--get-news-by-url-callback" function (:arguments ("status" "feed-name")) nil [28128 29474])
            ("newsticker--get-news-by-wget" function (:arguments ("feed-name" "url" "wget-arguments")) nil [29476 30533])
            ("newsticker-get-news" function (:arguments ("feed-name")) nil [30535 31587])
            ("newsticker--sentinel" function (:arguments ("process" "event")) nil [31749 32420])
            ("newsticker--sentinel-work" function (:arguments ("event" "status-ok" "feed-name" "command" "buffer")) nil [32422 42531])
            ("newsticker--do-xml-workarounds" function nil nil [42533 44729])
            ("newsticker--get-logo-url-atom-1.0" function (:arguments ("node")) nil [44732 44900])
            ("newsticker--get-icon-url-atom-1.0" function (:arguments ("node")) nil [44902 45070])
            ("newsticker--get-logo-url-atom-0.3" function (:arguments ("node")) nil [45072 45271])
            ("newsticker--get-logo-url-rss-2.0" function (:arguments ("node")) nil [45273 45538])
            ("newsticker--get-logo-url-rss-1.0" function (:arguments ("node")) nil [45540 45737])
            ("newsticker--get-logo-url-rss-0.92" function (:arguments ("node")) nil [45739 45938])
            ("newsticker--get-logo-url-rss-0.91" function (:arguments ("node")) nil [45940 46139])
            ("newsticker--parse-atom-0.3" function (:arguments ("name" "time" "topnode")) nil [46141 48358])
            ("newsticker--unxml" function (:arguments ("node")) nil [48360 48588])
            ("newsticker--unxml-node" function (:arguments ("node")) nil [48590 48987])
            ("newsticker--unxml-attribute" function (:arguments ("attribute")) nil [48989 49214])
            ("newsticker--parse-atom-1.0" function (:arguments ("name" "time" "topnode")) nil [49216 52338])
            ("newsticker--parse-rss-0.91" function (:arguments ("name" "time" "topnode")) nil [52340 54978])
            ("newsticker--parse-rss-0.92" function (:arguments ("name" "time" "topnode")) nil [54980 57551])
            ("newsticker--parse-rss-1.0" function (:arguments ("name" "time" "topnode")) nil [57553 60542])
            ("newsticker--parse-rss-2.0" function (:arguments ("name" "time" "topnode")) nil [60544 63895])
            ("newsticker--parse-generic-feed" function (:arguments ("name" "time" "title" "desc" "link" "extra-elements")) nil [63897 65338])
            ("newsticker--parse-generic-items" function (:arguments ("name" "time" "itemlist" "title-fn" "desc-fn" "link-fn" "time-fn" "guid-fn" "extra-fn")) nil [65340 69992])
            ("newsticker--remove-whitespace" function (:arguments ("string")) nil [70152 70494])
            ("newsticker--do-forget-preformatted" function (:arguments ("item")) nil [70496 70752])
            ("newsticker--forget-preformatted" function nil nil [70754 71114])
            ("newsticker--debug-msg" function (:arguments ("string" "args")) nil [71116 71434])
            ("newsticker--decode-iso8601-date" function (:arguments ("iso8601-string")) nil [71436 73733])
            ("newsticker--decode-rfc822-date" function (:arguments ("rfc822-string")) nil [73735 76747])
            ("newsticker--lists-intersect-p" function (:arguments ("list1" "list2")) nil [76749 76990])
            ("newsticker--update-process-ids" function nil nil [76992 77491])
            ("newsticker--images-dir" function nil nil [77652 77772])
            ("newsticker--icons-dir" function nil nil [77774 77891])
            ("newsticker--image-get" function (:arguments ("feed-name" "filename" "directory" "url")) nil [77893 78936])
            ("newsticker--image-download-by-wget" function (:arguments ("feed-name" "filename" "directory" "url")) nil [78938 80457])
            ("newsticker--image-sentinel" function (:arguments ("process" "event")) nil [80459 81347])
            ("newsticker--image-save" function (:arguments ("buffer" "directory" "file-name")) nil [81349 82039])
            ("newsticker--image-remove" function (:arguments ("directory" "file-name")) nil [82041 82250])
            ("newsticker--image-download-by-url" function (:arguments ("feed-name" "filename" "directory" "url")) nil [82252 82792])
            ("newsticker--image-download-by-url-callback" function (:arguments ("status" "feed-name" "directory" "filename")) nil [82794 84018])
            ("newsticker--insert-image" function (:arguments ("img" "string")) nil [84020 84130])
            ("newsticker-htmlr-render" function (:arguments ("pos1" "pos2")) nil [84299 84936])
            ("newsticker--cache-set-preformatted-contents" function (:arguments ("item" "contents")) nil [85118 85344])
            ("newsticker--cache-set-preformatted-title" function (:arguments ("item" "title")) nil [85346 85547])
            ("newsticker--cache-replace-age" function (:arguments ("data" "feed" "old-age" "new-age")) nil [85549 86297])
            ("newsticker--cache-mark-expired" function (:arguments ("data" "feed" "old-age" "new-age" "time")) nil [86299 87385])
            ("newsticker--cache-contains" function (:arguments ("data" "feed" "title" "desc" "link" "age" "guid")) nil [87387 90583])
            ("newsticker--cache-add" function (:arguments ("data" "feed-name-symbol" "title" "desc" "link" "time" "age" "position" "extra-elements" "updated-time" "updated-age" "preformatted-contents" "preformatted-title")) nil [90585 92983])
            ("newsticker--cache-remove" function (:arguments ("data" "feed-symbol" "age")) nil [92985 94685])
            ("newsticker--cache-item-compare-by-time" function (:arguments ("item1" "item2")) nil [94847 95789])
            ("newsticker--cache-item-compare-by-title" function (:arguments ("item1" "item2")) nil [95791 96256])
            ("newsticker--cache-item-compare-by-position" function (:arguments ("item1" "item2")) nil [96258 96742])
            ("newsticker--cache-save-version1" function (:user-visible-flag t) nil [96744 96876])
            ("newsticker--cache-update" function (:arguments ("save")) nil [96878 97487])
            ("newsticker--cache-get-feed" function (:arguments ("feed")) nil [97489 97627])
            ("newsticker--cache-dir" function nil nil [97629 97740])
            ("newsticker--cache-save" function nil nil [97742 97965])
            ("newsticker--cache-save-feed" function (:arguments ("feed")) nil [97967 98363])
            ("newsticker--cache-read-version1" function nil nil [98365 98860])
            ("newsticker--cache-read" function nil nil [98862 99391])
            ("newsticker--cache-read-feed" function (:arguments ("feed-name")) nil [99393 100069])
            ("newsticker--stat-num-items" function (:arguments ("feed" "ages")) nil [100234 100771])
            ("newsticker--stat-num-items-total" function (:arguments ("age")) nil [100773 101251])
            ("newsticker-opml-export" function (:user-visible-flag t) nil [101410 102746])
            ("newsticker--opml-import-outlines" function (:arguments ("outlines")) nil [102748 103397])
            ("newsticker-opml-import" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [103399 103852])
            ("newsticker--run-auto-mark-filter" function (:arguments ("feed" "item")) nil [104019 104550])
            ("newsticker--do-run-auto-mark-filter" function (:arguments ("item" "list")) nil [104552 105334])
            ("newsticker--process-auto-mark-filter-match" function (:arguments ("item" "pattern")) nil [105336 105917])
            ("newsticker-new-item-functions-sample" function (:arguments ("feed" "item")) nil [106084 106431])
            ("newsticker-download-images" function (:arguments ("feed" "item")) nil [106433 107414])
            ("newsticker-download-enclosures" function (:arguments ("feed" "item")) nil [107416 108384])
            ("newsticker-retrieve-random-message" function (:arguments ("feed-name")) nil [108555 109175])
            ("newst-backend" package nil nil [109177 109201]))          
      :file "newst-backend.el.gz"
      :pointmax 109234
      :fsize 23090
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("newst-reader" include nil nil [1343 1366])
            ("widget" include nil nil [1367 1384])
            ("tree-widget" include nil nil [1385 1407])
            ("wid-edit" include nil nil [1408 1427])
            ("newsticker-treeview" customgroup (:user-visible-flag t) nil [1595 1696])
            ("newsticker-treeview-face" variable
               (:default-value (quote ((((class color) (background dark)) :foreground "white") (((class color) (background light)) :foreground "black")))
                :type "face")
                nil [1698 1915])
            ("newsticker-treeview-new-face" variable
               (:default-value (quote ((t :inherit newsticker-treeview-face :weight bold)))
                :type "face")
                nil [1917 2071])
            ("newsticker-treeview-old-face" variable
               (:default-value (quote ((t :inherit newsticker-treeview-face)))
                :type "face")
                nil [2073 2214])
            ("newsticker-treeview-immortal-face" variable
               (:default-value (quote ((default :inherit newsticker-treeview-face :slant italic) (((class color) (background dark)) :foreground "orange") (((class color) (background light)) :foreground "blue")))
                :type "face")
                nil [2216 2504])
            ("newsticker-treeview-obsolete-face" variable
               (:default-value (quote ((t :inherit newsticker-treeview-face :strike-through t)))
                :type "face")
                nil [2506 2670])
            ("newsticker-treeview-selection-face" variable
               (:default-value (quote ((((class color) (background dark)) :background "#4444aa") (((class color) (background light)) :background "#bbbbff")))
                :type "face")
                nil [2672 2908])
            ("newsticker-treeview-date-format" variable (:default-value "%d.%m.%y, %H:%M") nil [2910 3154])
            ("newsticker-treeview-own-frame" variable nil nil [3156 3322])
            ("newsticker-treeview-treewindow-width" variable (:default-value 30) nil [3324 3519])
            ("newsticker-treeview-listwindow-height" variable (:default-value 10) nil [3521 3717])
            ("newsticker-treeview-automatically-mark-displayed-items-as-old" variable (:default-value t) nil [3719 4001])
            ("newsticker-groups" variable (:default-value (quote ("Feeds"))) nil [4003 4468])
            ("newsticker-groups-filename" variable nil nil [4470 4701])
            ("make-obsolete-variable" code nil nil [4702 4777])
            ("newsticker--treeview-windows" variable nil nil [4950 4991])
            ("newsticker--treeview-buffers" variable nil nil [4992 5033])
            ("newsticker--treeview-current-feed" variable nil nil [5034 5119])
            ("newsticker--treeview-current-vfeed" variable nil nil [5120 5167])
            ("newsticker--treeview-list-show-feed" variable nil nil [5168 5216])
            ("newsticker--saved-window-config" variable nil nil [5217 5261])
            ("newsticker--selection-overlay" variable nil nil [5262 5342])
            ("newsticker--tree-selection-overlay" variable nil nil [5343 5428])
            ("newsticker--frame" variable nil nil [5429 5499])
            ("newsticker--treeview-list-sort-order" variable (:default-value (quote sort-by-time)) nil [5500 5559])
            ("newsticker--treeview-current-node-id" variable nil nil [5560 5609])
            ("newsticker--treeview-current-tree" variable nil nil [5610 5656])
            ("newsticker--treeview-feed-tree" variable nil nil [5657 5700])
            ("newsticker--treeview-vfeed-tree" variable nil nil [5701 5745])
            ("newsticker--treeview-url-keymap" variable (:default-value (let ((map (make-sparse-keymap (quote newsticker--treeview-url-keymap)))) (define-key map [mouse-1] (quote newsticker-treeview-mouse-browse-url)) (define-key map [mouse-2] (quote newsticker-treeview-mouse-browse-url)) (define-key map "
" (quote newsticker-treeview-browse-url)) (define-key map "" (quote newsticker-treeview-browse-url)) (define-key map [(control return)] (quote newsticker-handle-url)) map)) nil [5782 6291])
            ("newsticker--treeview-tree-buffer" function nil nil [6457 6597])
            ("newsticker--treeview-list-buffer" function nil nil [6598 6738])
            ("newsticker--treeview-item-buffer" function nil nil [6739 6879])
            ("newsticker--treeview-tree-window" function nil nil [6880 7020])
            ("newsticker--treeview-list-window" function nil nil [7021 7161])
            ("newsticker--treeview-item-window" function nil nil [7162 7302])
            ("newsticker--treeview-get-id" function (:arguments ("parent" "i")) nil [7474 7767])
            ("newsticker--treeview-ids-eq" function (:arguments ("id1" "id2")) nil [7769 7943])
            ("newsticker--treeview-nodes-eq" function (:arguments ("node1" "node2")) nil [7945 8522])
            ("newsticker--treeview-do-get-node-of-feed" function (:arguments ("feed-name" "startnode")) nil [8524 9042])
            ("newsticker--treeview-get-node-of-feed" function (:arguments ("feed-name")) nil [9044 9451])
            ("newsticker--treeview-do-get-node-by-id" function (:arguments ("id" "startnode")) nil [9453 9820])
            ("newsticker--treeview-get-node-by-id" function (:arguments ("id")) nil [9822 10099])
            ("newsticker--treeview-get-current-node" function nil nil [10101 10279])
            ("unless" code nil nil [10356 10430])
            ("declare-function" code nil nil [10431 10511])
            ("w3m-fill-column" variable nil nil [10512 10536])
            ("w3-maximum-line-length" variable nil nil [10537 10568])
            ("newsticker--treeview-render-text" function (:arguments ("start" "end")) nil [10570 12479])
            ("newsticker--treeview-list-add-item" function (:arguments ("item" "feed" "show-feed")) nil [12645 14719])
            ("newsticker--treeview-list-clear" function nil nil [14721 14981])
            ("newsticker--treeview-list-items-with-age-callback" function (:arguments ("widget" "_changed-widget" "ages")) nil [14983 15621])
            ("newsticker--treeview-list-items-with-age" function (:arguments ("ages")) nil [15623 16328])
            ("newsticker--treeview-list-new-items" function (:arguments ("widget" "changed-widget" "_event")) nil [16330 17000])
            ("newsticker--treeview-list-immortal-items" function (:arguments ("widget" "changed-widget" "_event")) nil [17002 17703])
            ("newsticker--treeview-list-obsolete-items" function (:arguments ("widget" "changed-widget" "_event")) nil [17705 18406])
            ("newsticker--treeview-list-all-items" function (:arguments ("widget" "changed-widget" "event")) nil [18408 19158])
            ("newsticker--treeview-list-items-v" function (:arguments ("vfeed-name")) nil [19160 19668])
            ("newsticker--treeview-list-items" function (:arguments ("feed-name")) nil [19670 20335])
            ("newsticker--treeview-list-feed-items" function (:arguments ("widget" "_changed-widget" "_event")) nil [20337 21004])
            ("newsticker--treeview-list-compare-item-by-age" function (:arguments ("item1" "item2")) nil [21006 21768])
            ("newsticker--treeview-list-compare-item-by-age-reverse" function (:arguments ("item1" "item2")) nil [21770 21976])
            ("newsticker--treeview-list-compare-item-by-time" function (:arguments ("item1" "item2")) nil [21978 22161])
            ("newsticker--treeview-list-compare-item-by-time-reverse" function (:arguments ("item1" "item2")) nil [22163 22371])
            ("newsticker--treeview-list-compare-item-by-title" function (:arguments ("item1" "item2")) nil [22373 22552])
            ("newsticker--treeview-list-compare-item-by-title-reverse" function (:arguments ("item1" "item2")) nil [22554 22758])
            ("newsticker--treeview-list-sort-items" function (:arguments ("items")) nil [22760 24022])
            ("newsticker--treeview-list-update-faces" function nil nil [24024 25622])
            ("newsticker--treeview-list-clear-highlight" function nil nil [25624 25934])
            ("newsticker--treeview-list-update-highlight" function nil nil [25936 26298])
            ("newsticker--treeview-list-highlight-start" function nil nil [26300 26577])
            ("newsticker--treeview-list-update" function (:arguments ("clear-buffer")) nil [26579 27213])
            ("newsticker-treeview-list-sort-button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line mouse-1] (quote newsticker--treeview-list-sort-by-column)) (define-key map [header-line mouse-2] (quote newsticker--treeview-list-sort-by-column)) map)) nil [27215 27558])
            ("newsticker--treeview-list-sort-by-column" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [27560 28765])
            ("newsticker-treeview-list-make-sort-button" function (:arguments ("name" "sort-order")) nil [28767 29443])
            ("newsticker--treeview-list-select" function (:arguments ("item")) nil [29445 30157])
            ("newsticker--treeview-item-show-text" function (:arguments ("title" "description")) nil [30323 31019])
            ("newsticker--treeview-item-show" function (:arguments ("item" "feed-name-symbol")) nil [31021 35633])
            ("newsticker--treeview-item-update" function nil nil [35635 36073])
            ("newsticker--treeview-tree-expand" function (:arguments ("tree")) nil [36239 37622])
            ("newsticker--tree-widget-icon-create" function (:arguments ("icon")) nil [37624 38279])
            ("newsticker--treeview-tree-expand-status" function (:arguments ("tree" "_changed-widget" "_event")) nil [38281 39564])
            ("newsticker--treeview-virtual-feed-p" function (:arguments ("feed-name")) nil [39566 39710])
            ("define-widget" code nil nil [39712 39928])
            ("newsticker--treeview-tree-update" function nil nil [39930 41625])
            ("newsticker--treeview-propertize-tag" function (:arguments ("tag" "num-new" "nt-id" "feed" "vfeed")) nil [41627 42596])
            ("newsticker--treeview-tree-get-tag" function (:arguments ("feed-name" "vfeed-name" "nt-id")) nil [42598 44170])
            ("newsticker--stat-num-items-for-group" function (:arguments ("feed-name-symbol" "ages")) nil [44172 44794])
            ("newsticker--treeview-count-node-items" function (:arguments ("feed" "isvirtual")) nil [44796 45685])
            ("newsticker--treeview-tree-update-tag" function (:arguments ("w" "recursive" "_ignore")) nil [45687 47047])
            ("newsticker--treeview-tree-do-update-tags" function (:arguments ("widget")) nil [47049 47360])
            ("newsticker--treeview-tree-update-tags" function (:arguments ("_ignore")) nil [47362 47804])
            ("newsticker--treeview-tree-update-highlight" function nil nil [47806 48656])
            ("newsticker-treeview-tool-bar-map" variable (:default-value (if (featurep (quote xemacs)) nil (if (boundp (quote tool-bar-map)) (let ((tool-bar-map (make-sparse-keymap))) (tool-bar-add-item "newsticker/prev-feed" (quote newsticker-treeview-prev-feed) (quote newsticker-treeview-prev-feed) :help "Go to previous feed") (tool-bar-add-item "newsticker/prev-item" (quote newsticker-treeview-prev-item) (quote newsticker-treeview-prev-item) :help "Go to previous item") (tool-bar-add-item "newsticker/next-item" (quote newsticker-treeview-next-item) (quote newsticker-treeview-next-item) :visible t :help "Go to next item") (tool-bar-add-item "newsticker/next-feed" (quote newsticker-treeview-next-feed) (quote newsticker-treeview-next-feed) :help "Go to next feed") (tool-bar-add-item "newsticker/mark-immortal" (quote newsticker-treeview-toggle-item-immortal) (quote newsticker-treeview-toggle-item-immortal) :help "Toggle current item as immortal") (tool-bar-add-item "newsticker/mark-read" (quote newsticker-treeview-mark-item-old) (quote newsticker-treeview-mark-item-old) :help "Mark current item as read") (tool-bar-add-item "newsticker/get-all" (quote newsticker-get-all-news) (quote newsticker-get-all-news) :help "Get news for all feeds") (tool-bar-add-item "newsticker/update" (quote newsticker-treeview-update) (quote newsticker-treeview-update) :help "Update newsticker buffer") (tool-bar-add-item "newsticker/browse-url" (quote newsticker-browse-url) (quote newsticker-browse-url) :help "Browse URL for item at point") (define-key tool-bar-map [newsticker-sep-1] (list (quote menu-item) "--double-line")) (tool-bar-add-item "close" (quote newsticker-treeview-quit) (quote newsticker-treeview-quit) :help "Close newsticker") (tool-bar-add-item "preferences" (quote newsticker-customize) (quote newsticker-customize) :help "Customize newsticker") tool-bar-map)))) nil [48818 52345])
            ("newsticker-treeview-mouse-browse-url" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [52508 53012])
            ("newsticker-treeview-browse-url" function (:user-visible-flag t) nil [53014 53396])
            ("newsticker--treeview-buffer-init" function nil nil [53398 54730])
            ("newsticker-treeview-update" function (:user-visible-flag t) nil [54732 55731])
            ("newsticker-treeview-quit" function (:user-visible-flag t) nil [55733 56196])
            ("newsticker-treeview-save" function (:user-visible-flag t) nil [56198 56642])
            ("newsticker--treeview-load" function nil nil [56644 58205])
            ("newsticker-treeview-scroll-item" function (:user-visible-flag t) nil [58208 58391])
            ("newsticker-treeview-show-item" function (:user-visible-flag t) nil [58393 58934])
            ("newsticker-treeview-next-item" function (:user-visible-flag t) nil [58936 59285])
            ("newsticker-treeview-prev-item" function (:user-visible-flag t) nil [59287 59542])
            ("newsticker-treeview-next-new-or-immortal-item" function
               (:user-visible-flag t
                :arguments ("current-item-counts" "dont-wrap-trees"))
                nil [59544 61036])
            ("newsticker-treeview-prev-new-or-immortal-item" function (:user-visible-flag t) nil [61038 62026])
            ("newsticker--treeview-get-selected-item" function nil nil [62028 62260])
            ("newsticker-treeview-mark-item-old" function
               (:user-visible-flag t
                :arguments ("dont-proceed"))
                nil [62262 62664])
            ("newsticker-treeview-toggle-item-immortal" function (:user-visible-flag t) nil [62666 63037])
            ("newsticker--treeview-mark-item" function (:arguments ("item" "new-age")) nil [63039 63389])
            ("newsticker-treeview-mark-list-items-old" function (:user-visible-flag t) nil [63391 64058])
            ("newsticker-treeview-save-item" function (:user-visible-flag t) nil [64060 64331])
            ("newsticker-treeview-browse-url-item" function (:user-visible-flag t) nil [64333 64671])
            ("newsticker--treeview-set-current-node" function (:arguments ("node")) nil [64673 65094])
            ("newsticker--treeview-get-first-child" function (:arguments ("node")) nil [65096 65276])
            ("newsticker--treeview-get-second-child" function (:arguments ("node")) nil [65278 65465])
            ("newsticker--treeview-get-last-child" function (:arguments ("node")) nil [65467 65733])
            ("newsticker--treeview-get-feed-vfeed" function (:arguments ("node")) nil [65735 65879])
            ("newsticker--treeview-get-next-sibling" function (:arguments ("node")) nil [65881 66265])
            ("newsticker--treeview-get-prev-sibling" function (:arguments ("node")) nil [66267 66749])
            ("newsticker--treeview-get-next-uncle" function (:arguments ("node")) nil [66751 67208])
            ("newsticker--treeview-get-prev-uncle" function (:arguments ("node")) nil [67210 67719])
            ("newsticker--treeview-get-other-tree" function nil nil [67721 67986])
            ("newsticker--treeview-activate-node" function (:arguments ("node" "backward")) nil [67988 68762])
            ("newsticker--treeview-first-feed" function nil nil [68764 68970])
            ("newsticker-treeview-next-feed" function
               (:user-visible-flag t
                :arguments ("stay-in-tree"))
                nil [68972 69850])
            ("newsticker-treeview-prev-feed" function
               (:user-visible-flag t
                :arguments ("stay-in-tree"))
                nil [69852 70825])
            ("newsticker-treeview-next-page" function (:user-visible-flag t) nil [70827 71083])
            ("newsticker--treeview-unfold-node" function (:arguments ("feed-name")) nil [71086 71737])
            ("newsticker-treeview-jump" function
               (:user-visible-flag t
                :arguments ("feed-name"))
                nil [71739 72211])
            ("newsticker--group-do-find-group" function (:arguments ("feed-or-group-name" "parent-node" "node")) nil [72372 73087])
            ("newsticker--group-find-parent-group" function (:arguments ("feed-or-group-name")) nil [73089 73451])
            ("newsticker--group-do-get-group" function (:arguments ("name" "node")) nil [73453 73739])
            ("newsticker--group-get-group" function (:arguments ("name")) nil [73741 73969])
            ("newsticker--group-get-subgroups" function (:arguments ("group" "recursive")) nil [73971 74478])
            ("newsticker--group-all-groups" function nil nil [74480 74613])
            ("newsticker--group-get-feeds" function (:arguments ("group" "recursive")) nil [74615 75158])
            ("newsticker-group-add-group" function
               (:user-visible-flag t
                :arguments ("name" "parent"))
                nil [75160 75913])
            ("newsticker-group-delete-group" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [75915 76862])
            ("newsticker--group-do-rename-group" function (:arguments ("old-name" "new-name")) nil [76864 77369])
            ("newsticker-group-rename-group" function
               (:user-visible-flag t
                :arguments ("old-name" "new-name"))
                nil [77371 78072])
            ("newsticker--get-group-names" function (:arguments ("lst")) nil [78074 78542])
            ("newsticker--group-names" function nil nil [78544 78668])
            ("newsticker-group-move-feed" function
               (:user-visible-flag t
                :arguments ("name" "group-name" "no-update"))
                nil [78670 80092])
            ("newsticker-group-shift-feed-down" function (:user-visible-flag t) nil [80094 80225])
            ("newsticker-group-shift-feed-up" function (:user-visible-flag t) nil [80227 80357])
            ("newsticker-group-shift-group-down" function (:user-visible-flag t) nil [80359 80494])
            ("newsticker-group-shift-group-up" function (:user-visible-flag t) nil [80496 80630])
            ("newsticker--group-shift" function (:arguments ("delta" "move-group")) nil [80632 82149])
            ("newsticker--count-groups" function (:arguments ("group")) nil [82151 82418])
            ("newsticker--count-grouped-feeds" function (:arguments ("group")) nil [82420 82755])
            ("newsticker--group-remove-obsolete-feeds" function (:arguments ("group")) nil [82757 83385])
            ("newsticker--group-manage-orphan-feeds" function nil nil [83387 84199])
            ("newsticker--treeview-tree-open-menu" function (:arguments ("event")) nil [84359 85103])
            ("newsticker-treeview-list-menu" variable (:default-value (let ((menu (make-sparse-keymap "Newsticker List"))) (define-key menu [newsticker-treeview-mark-list-items-old] (list (quote menu-item) "Mark all items old" (quote newsticker-treeview-mark-list-items-old))) (define-key menu [newsticker-treeview-mark-item-old] (list (quote menu-item) "Mark current item old" (quote newsticker-treeview-mark-item-old))) (define-key menu [newsticker-treeview-toggle-item-immortal] (list (quote menu-item) "Mark current item immortal (toggle)" (quote newsticker-treeview-toggle-item-immortal))) (define-key menu [newsticker-treeview-get-news] (list (quote menu-item) "Get news for current feed" (quote newsticker-treeview-get-news))) menu)) nil [85105 85885])
            ("newsticker-treeview-item-menu" variable (:default-value (let ((menu (make-sparse-keymap "Newsticker Item"))) (define-key menu [newsticker-treeview-mark-item-old] (list (quote menu-item) "Mark current item old" (quote newsticker-treeview-mark-item-old))) (define-key menu [newsticker-treeview-toggle-item-immortal] (list (quote menu-item) "Mark current item immortal (toggle)" (quote newsticker-treeview-toggle-item-immortal))) (define-key menu [newsticker-treeview-get-news] (list (quote menu-item) "Get news for current feed" (quote newsticker-treeview-get-news))) menu)) nil [85887 86505])
            ("newsticker-treeview-mode-map" variable (:default-value (let ((map (make-sparse-keymap (quote newsticker-treeview-mode-map)))) (define-key map " " (quote newsticker-treeview-next-page)) (define-key map "a" (quote newsticker-add-url)) (define-key map "b" (quote newsticker-treeview-browse-url-item)) (define-key map "F" (quote newsticker-treeview-prev-feed)) (define-key map "f" (quote newsticker-treeview-next-feed)) (define-key map "g" (quote newsticker-treeview-get-news)) (define-key map "G" (quote newsticker-get-all-news)) (define-key map "i" (quote newsticker-treeview-toggle-item-immortal)) (define-key map "j" (quote newsticker-treeview-jump)) (define-key map "n" (quote newsticker-treeview-next-item)) (define-key map "N" (quote newsticker-treeview-next-new-or-immortal-item)) (define-key map "O" (quote newsticker-treeview-mark-list-items-old)) (define-key map "o" (quote newsticker-treeview-mark-item-old)) (define-key map "p" (quote newsticker-treeview-prev-item)) (define-key map "P" (quote newsticker-treeview-prev-new-or-immortal-item)) (define-key map "q" (quote newsticker-treeview-quit)) (define-key map "S" (quote newsticker-treeview-save-item)) (define-key map "s" (quote newsticker-treeview-save)) (define-key map "u" (quote newsticker-treeview-update)) (define-key map "v" (quote newsticker-treeview-browse-url)) (define-key map "\355" (quote newsticker-group-move-feed)) (define-key map "\341" (quote newsticker-group-add-group)) (define-key map "\344" (quote newsticker-group-delete-group)) (define-key map "\362" (quote newsticker-group-rename-group)) (define-key map [M-down] (quote newsticker-group-shift-feed-down)) (define-key map [M-up] (quote newsticker-group-shift-feed-up)) (define-key map [M-S-down] (quote newsticker-group-shift-group-down)) (define-key map [M-S-up] (quote newsticker-group-shift-group-up)) map)) nil [86507 88413])
            ("define-derived-mode" code nil nil [88415 88742])
            ("define-derived-mode" code nil nil [88744 89877])
            ("define-derived-mode" code nil nil [89879 90062])
            ("newsticker-treeview-tree-click" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [90064 90393])
            ("newsticker-treeview-tree-do-click" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [90395 91409])
            ("newsticker--treeview-restore-layout" function nil nil [91411 91876])
            ("newsticker--treeview-frame-init" function nil nil [91878 92218])
            ("newsticker--treeview-window-init" function nil nil [92220 92853])
            ("newsticker-treeview" function (:user-visible-flag t) nil [92870 93487])
            ("newsticker-treeview-get-news" function (:user-visible-flag t) nil [93489 93678])
            ("newst-treeview" package nil nil [93680 93705]))          
      :file "newst-treeview.el.gz"
      :pointmax 93739
      :fsize 16445
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("net-utils--executable-find-sbin" function (:arguments ("command")) nil [1691 1900])
            ("net-utils" customgroup (:user-visible-flag t) nil [2052 2163])
            ("traceroute-program" variable (:default-value (if (eq system-type (quote windows-nt)) "tracert" "traceroute")) nil [2165 2353])
            ("traceroute-program-options" variable nil nil [2355 2483])
            ("ping-program" variable (:default-value "ping") nil [2485 2605])
            ("ping-program-options" variable (:default-value (and (memq system-type (quote (gnu/linux irix))) (list "-c" "4"))) nil [2719 2969])
            ("define-obsolete-variable-alias" code nil nil [2971 3046])
            ("ifconfig-program" variable (:default-value (cond ((eq system-type (quote windows-nt)) "ipconfig") ((executable-find "ifconfig") "ifconfig") ((net-utils--executable-find-sbin "ifconfig")) ((net-utils--executable-find-sbin "ip")) (t "ip"))) nil [3048 3440])
            ("define-obsolete-variable-alias" code nil nil [3442 3535])
            ("ifconfig-program-options" variable (:default-value (cond ((string-match "ipconfig\\'" ifconfig-program) (quote ("/all"))) ((string-match "ifconfig\\'" ifconfig-program) (quote ("-a"))) ((string-match "ip\\'" ifconfig-program) (quote ("addr"))))) nil [3537 3899])
            ("iwconfig-program" variable (:default-value "iwconfig") nil [3901 4059])
            ("iwconfig-program-options" variable nil nil [4061 4198])
            ("netstat-program" variable (:default-value "netstat") nil [4200 4315])
            ("netstat-program-options" variable (:default-value (list "-a")) nil [4317 4449])
            ("arp-program" variable (:default-value (or (net-utils--executable-find-sbin "arp") "arp")) nil [4451 4617])
            ("arp-program-options" variable (:default-value (list "-a")) nil [4619 4743])
            ("route-program" variable (:default-value (if (eq system-type (quote windows-nt)) "route" "netstat")) nil [4745 4908])
            ("route-program-options" variable (:default-value (if (eq system-type (quote windows-nt)) (list "print") (list "-r"))) nil [4910 5097])
            ("nslookup-program" variable (:default-value "nslookup") nil [5099 5227])
            ("nslookup-program-options" variable nil nil [5229 5353])
            ("nslookup-prompt-regexp" variable (:default-value "^> ") nil [5355 5556])
            ("dig-program" variable (:default-value "dig") nil [5558 5662])
            ("ftp-program" variable (:default-value "ftp") nil [5664 5770])
            ("ftp-program-options" variable nil nil [5772 5886])
            ("ftp-prompt-regexp" variable (:default-value "^ftp>") nil [5888 6096])
            ("smbclient-program" variable (:default-value "smbclient") nil [6098 6199])
            ("smbclient-program-options" variable nil nil [6201 6327])
            ("smbclient-prompt-regexp" variable (:default-value "^smb: >") nil [6329 6551])
            ("dns-lookup-program" variable (:default-value "host") nil [6553 6679])
            ("dns-lookup-program-options" variable nil nil [6681 6809])
            ("network-connection-service" variable nil nil [6833 6872])
            ("network-connection-host" variable nil nil [6873 6912])
            ("nslookup-font-lock-keywords" variable (:default-value (list (list "^[A-Za-z0-9 _]+:" 0 (quote font-lock-type-face)) (list "\\<\\(SOA\\|NS\\|MX\\|A\\|CNAME\\)\\>" 1 (quote font-lock-keyword-face)) (list (mapconcat (quote identity) (make-list 4 "[0-9]+") "\\.") 0 (quote font-lock-variable-name-face)) (list (let ((host-expression "[-A-Za-z0-9]+")) (concat (mapconcat (quote identity) (make-list 2 host-expression) "\\.") "\\(\\." host-expression "\\)*")) 0 (quote font-lock-variable-name-face)))) nil [7057 7696])
            ("net-utils-font-lock-keywords" variable (:default-value (list (list (mapconcat (quote identity) (make-list 4 "[0-9]+") "\\.") 0 (quote font-lock-variable-name-face)) (list (concat "\\( \\([[:xdigit:]]+\\(:\\|::\\)\\)+[[:xdigit:]]+\\)" "\\|" "\\(::[[:xdigit:]]+\\)") 0 (quote font-lock-variable-name-face)) (list (let ((host-expression "[-A-Za-z0-9]+")) (concat (mapconcat (quote identity) (make-list 2 host-expression) "\\.") "\\(\\." host-expression "\\)*")) 0 (quote font-lock-variable-name-face)))) nil [7855 8489])
            ("define-derived-mode" code nil nil [8491 8777])
            ("net-utils-machine-at-point" function nil nil [9041 9333])
            ("net-utils-url-at-point" function nil nil [9335 9688])
            ("net-utils-remove-ctrl-m-filter" function (:arguments ("process" "output-string")) nil [9690 10261])
            ("declare-function" code nil nil [10263 10328])
            ("net-utils-run-program" function (:arguments ("name" "header" "program" "args")) nil [10330 11037])
            ("net-utils--revert-cmd" variable nil nil [11253 11287])
            ("net-utils-run-simple" function (:arguments ("buffer" "program-name" "args" "nodisplay")) nil [11289 12446])
            ("net-utils--revert-function" function (:arguments ("ignore-auto" "noconfirm")) nil [12448 12885])
            ("ifconfig" function (:user-visible-flag t) nil [12902 13094])
            ("defalias" code nil nil [13096 13126])
            ("iwconfig" function (:user-visible-flag t) nil [13143 13335])
            ("netstat" function (:user-visible-flag t) nil [13352 13539])
            ("arp" function (:user-visible-flag t) nil [13556 13723])
            ("route" function (:user-visible-flag t) nil [13740 13917])
            ("traceroute" function
               (:user-visible-flag t
                :arguments ("target"))
                nil [14099 14423])
            ("ping" function
               (:user-visible-flag t
                :arguments ("host"))
                nil [14440 14915])
            ("nslookup-host" function
               (:user-visible-flag t
                :arguments ("host"))
                nil [15196 15657])
            ("nslookup" function (:user-visible-flag t) nil [15674 15816])
            ("comint-prompt-regexp" variable nil nil [15818 15847])
            ("comint-input-autoexpand" variable nil nil [15848 15880])
            ("comint-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15882 15920])
            ("nslookup-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote completion-at-point)) map)) nil [15922 16040])
            ("define-derived-mode" code nil nil [16096 16389])
            ("dns-lookup-host" function
               (:user-visible-flag t
                :arguments ("host"))
                nil [16406 16922])
            ("ffap-string-at-point" function (:prototype-flag t) nil [16924 16963])
            ("run-dig" function
               (:user-visible-flag t
                :arguments ("host"))
                nil [16980 17320])
            ("comint-exec" function (:prototype-flag t) nil [17322 17354])
            ("ftp" function
               (:user-visible-flag t
                :arguments ("host"))
                nil [17426 17844])
            ("ftp-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote completion-at-point)) map)) nil [17846 17986])
            ("define-derived-mode" code nil nil [17988 18727])
            ("smbclient" function
               (:user-visible-flag t
                :arguments ("host" "service"))
                nil [18729 19349])
            ("smbclient-list-shares" function
               (:user-visible-flag t
                :arguments ("host"))
                nil [19351 19746])
            ("define-derived-mode" code nil nil [19748 20511])
            ("network-connection-service-alist" variable (:default-value (list (cons (quote echo) 7) (cons (quote active-users) 11) (cons (quote daytime) 13) (cons (quote chargen) 19) (cons (quote ftp) 21) (cons (quote telnet) 23) (cons (quote smtp) 25) (cons (quote time) 37) (cons (quote whois) 43) (cons (quote gopher) 70) (cons (quote finger) 79) (cons (quote www) 80) (cons (quote pop2) 109) (cons (quote pop3) 110) (cons (quote sun-rpc) 111) (cons (quote nntp) 119) (cons (quote ntp) 123) (cons (quote netbios-name) 137) (cons (quote netbios-data) 139) (cons (quote irc) 194) (cons (quote https) 443) (cons (quote rlogin) 513))) nil [20738 21413])
            ("run-network-program" function (:arguments ("process-name" "host" "port" "initial-string")) nil [21436 22053])
            ("finger-X.500-host-regexps" variable nil nil [22198 22551])
            ("finger" function
               (:user-visible-flag t
                :arguments ("user" "host"))
                nil [22587 23674])
            ("whois-server-name" variable (:default-value "rs.internic.net") nil [23676 23805])
            ("whois-server-list" variable (:default-value (quote (("whois.arin.net") ("rs.internic.net") ("whois.publicinterestregistry.net") ("whois.abuse.net") ("whois.apnic.net") ("nic.ddn.mil") ("whois.nic.mil") ("whois.nic.gov") ("whois.ripe.net")))) nil [23807 24235])
            ("whois-server-tld" variable (:default-value (quote (("rs.internic.net" . "com") ("whois.publicinterestregistry.net" . "org") ("whois.ripe.net" . "be") ("whois.ripe.net" . "de") ("whois.ripe.net" . "dk") ("whois.ripe.net" . "it") ("whois.ripe.net" . "fi") ("whois.ripe.net" . "fr") ("whois.ripe.net" . "uk") ("whois.apnic.net" . "au") ("whois.apnic.net" . "ch") ("whois.apnic.net" . "hk") ("whois.apnic.net" . "jp") ("whois.nic.gov" . "gov") ("whois.nic.mil" . "mil")))) nil [24412 25028])
            ("whois-guess-server" variable (:default-value t) nil [25030 25296])
            ("whois-get-tld" function (:arguments ("host")) nil [25298 25614])
            ("whois" function
               (:user-visible-flag t
                :arguments ("arg" "search-string"))
                nil [25649 26410])
            ("whois-reverse-lookup-server" variable (:default-value "whois.arin.net") nil [26412 26552])
            ("whois-reverse-lookup" function nil nil [26569 26706])
            ("define-derived-mode" code nil nil [26916 27064])
            ("network-connection-mode-setup" function (:arguments ("host" "service")) nil [27066 27301])
            ("network-connection-to-service" function
               (:user-visible-flag t
                :arguments ("host" "service"))
                nil [27318 27778])
            ("network-connection" function
               (:user-visible-flag t
                :arguments ("host" "port"))
                nil [27795 27975])
            ("network-service-connection" function (:arguments ("host" "service")) nil [27977 28485])
            ("comint-input-ring" variable nil nil [28487 28513])
            ("network-connection-reconnect" function (:user-visible-flag t) nil [28515 29218])
            ("net-utils" package nil nil [29220 29240]))          
      :file "net-utils.el.gz"
      :pointmax 29269
      :fsize 7466
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("newst-backend" include nil nil [1249 1273])
            ("newsticker--item-list" variable nil nil [1275 1339])
            ("newsticker--item-position" variable nil nil [1340 1425])
            ("newsticker--prev-message" variable (:default-value "There was no previous message yet!") nil [1426 1544])
            ("newsticker--scrollable-text" variable nil nil [1545 1642])
            ("newsticker--ticker-timer" variable nil nil [1643 1713])
            ("newsticker-ticker-running-p" function nil nil [1730 1990])
            ("newsticker-ticker" customgroup (:user-visible-flag t) nil [2022 2113])
            ("newsticker--set-customvar-ticker" function (:arguments ("symbol" "value")) nil [2115 2649])
            ("newsticker-ticker-interval" variable (:default-value 0.3) nil [2651 3068])
            ("newsticker-scroll-smoothly" variable (:default-value t) nil [3070 3596])
            ("newsticker-hide-immortal-items-in-echo-area" variable (:default-value t) nil [3598 3920])
            ("newsticker-hide-old-items-in-echo-area" variable (:default-value t) nil [3922 4248])
            ("newsticker-hide-obsolete-items-in-echo-area" variable (:default-value t) nil [4250 4560])
            ("newsticker--display-tick" function nil nil [4562 4828])
            ("newsticker--echo-area-clean-p" function nil nil [4830 5166])
            ("newsticker--display-jump" function nil nil [5168 5826])
            ("newsticker--display-scroll" function nil nil [5828 7700])
            ("newsticker-start-ticker" function (:user-visible-flag t) nil [7717 8186])
            ("newsticker-stop-ticker" function (:user-visible-flag t) nil [8188 8414])
            ("newsticker--ticker-text-setup" function nil nil [8596 11394])
            ("newsticker--ticker-text-remove" function (:arguments ("feed" "title")) nil [11396 12317])
            ("newst-ticker" package nil nil [12319 12342]))          
      :file "newst-ticker.el.gz"
      :pointmax 12374
      :fsize 3342
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("newst-ticker" include nil nil [1229 1252])
            ("newst-reader" include nil nil [1253 1276])
            ("derived" include nil nil [1277 1295])
            ("xml" include nil nil [1296 1310])
            ("w3-mode-map" variable nil nil [1332 1352])
            ("w3m-minor-mode-map" variable nil nil [1353 1380])
            ("newsticker-plainview" customgroup (:user-visible-flag t) nil [1548 1697])
            ("newsticker--set-customvar-buffer" function (:arguments ("symbol" "value")) nil [1700 2091])
            ("newsticker--set-customvar-sorting" function (:arguments ("symbol" "value")) nil [2093 2703])
            ("newsticker-sort-method" variable (:default-value (quote sort-by-original-order)) nil [2705 3506])
            ("newsticker-heading-format" variable (:default-value "%l
%t %d %s") nil [3508 4215])
            ("newsticker-item-format" variable (:default-value "%t %d") nil [4217 4839])
            ("newsticker-desc-format" variable (:default-value "%d %c") nil [4841 5203])
            ("newsticker-statistics-format" variable (:default-value "[%n + %i + %o + %O = %a]") nil [5205 5681])
            ("newsticker-new-item-face" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [5768 5878])
            ("newsticker-old-item-face" variable
               (:default-value (quote ((default :weight bold) (((class color) (background dark)) :foreground "orange3") (((class color) (background light)) :foreground "red4")))
                :type "face")
                nil [5880 6121])
            ("newsticker-immortal-item-face" variable
               (:default-value (quote ((default :weight bold :slant italic) (((class color) (background dark)) :foreground "orange") (((class color) (background light)) :foreground "blue")))
                :type "face")
                nil [6123 6387])
            ("newsticker-obsolete-item-face" variable
               (:default-value (quote ((t :weight bold :strike-through t)))
                :type "face")
                nil [6389 6524])
            ("newsticker-date-face" variable
               (:default-value (quote ((t :slant italic :height 0.8)))
                :type "face")
                nil [6526 6647])
            ("newsticker-statistics-face" variable
               (:default-value (quote ((t :slant italic :height 0.8)))
                :type "face")
                nil [6649 6776])
            ("newsticker-default-face" variable
               (:default-value (quote ((t)))
                :type "face")
                nil [6778 6889])
            ("newsticker-hide-old-items-in-newsticker-buffer" variable nil nil [6891 7285])
            ("newsticker-show-descriptions-of-new-items" variable (:default-value t) nil [7287 7631])
            ("newsticker-show-all-news-elements" variable nil nil [7633 7796])
            ("newsticker-plainview-hooks" customgroup (:user-visible-flag t) nil [7881 8014])
            ("newsticker-select-item-hook" variable (:default-value (quote newsticker--buffer-make-item-completely-visible)) nil [8016 8575])
            ("newsticker-select-feed-hook" variable (:default-value (quote newsticker--buffer-make-item-completely-visible)) nil [8577 9069])
            ("newsticker-buffer-change-hook" variable (:default-value (quote newsticker-w3m-show-inline-images)) nil [9071 9422])
            ("newsticker-narrow-hook" variable (:default-value (quote newsticker-w3m-show-inline-images)) nil [9424 9828])
            ("newsticker--plainview-tool-bar-map" variable (:default-value (if (featurep (quote xemacs)) nil (if (boundp (quote tool-bar-map)) (let ((tool-bar-map (make-sparse-keymap))) (tool-bar-add-item "newsticker/prev-feed" (quote newsticker-previous-feed) (quote newsticker-previous-feed) :help "Go to previous feed" :enable (quote (newsticker-previous-feed-available-p))) (tool-bar-add-item "newsticker/prev-item" (quote newsticker-previous-item) (quote newsticker-previous-item) :help "Go to previous item" :enable (quote (newsticker-previous-item-available-p))) (tool-bar-add-item "newsticker/next-item" (quote newsticker-next-item) (quote newsticker-next-item) :help "Go to next item" :enable (quote (newsticker-next-item-available-p))) (tool-bar-add-item "newsticker/next-feed" (quote newsticker-next-feed) (quote newsticker-next-feed) :help "Go to next feed" :enable (quote (newsticker-next-feed-available-p))) (tool-bar-add-item "newsticker/narrow" (quote newsticker-toggle-auto-narrow-to-feed) (quote newsticker-toggle-auto-narrow-to-feed) :help "Toggle visibility of other feeds") (tool-bar-add-item "newsticker/mark-immortal" (quote newsticker-mark-item-at-point-as-immortal) (quote newsticker-mark-item-at-point-as-immortal) :help "Mark current item as immortal" :enable (quote (newsticker-item-not-immortal-p))) (tool-bar-add-item "newsticker/mark-read" (quote newsticker-mark-item-at-point-as-read) (quote newsticker-mark-item-at-point-as-read) :help "Mark current item as read" :enable (quote (newsticker-item-not-old-p))) (tool-bar-add-item "newsticker/get-all-news" (quote newsticker-get-all-news) (quote newsticker-get-all-news) :help "Get news for all feeds") (tool-bar-add-item "newsticker/update" (quote newsticker-buffer-force-update) (quote newsticker-buffer-force-update) :help "Update newsticker buffer" :enable (quote (not newsticker--buffer-uptodate-p))) (tool-bar-add-item "newsticker/browse-url" (quote newsticker-browse-url) (quote newsticker-browse-url) :help "Browse URL for item at point") (define-key tool-bar-map [newsticker-sep-1] (list (quote menu-item) "--double-line")) (tool-bar-add-item "close" (quote newsticker-close-buffer) (quote newsticker-close-buffer) :help "Close newsticker buffer") (tool-bar-add-item "preferences" (quote newsticker-customize) (quote newsticker-customize) :help "Customize newsticker") tool-bar-map)))) nil [9991 13552])
            ("newsticker-menu" variable (:default-value (let ((map (make-sparse-keymap "Newsticker"))) (define-key map [newsticker-browse-url] (quote ("Browse URL for item at point" . newsticker-browse-url))) (define-key map [newsticker-separator-1] (quote ("--"))) (define-key map [newsticker-buffer-update] (quote ("Update buffer" . newsticker-buffer-update))) (define-key map [newsticker-separator-2] (quote ("--"))) (define-key map [newsticker-get-all-news] (quote ("Get news from all feeds" . newsticker-get-all-news))) (define-key map [newsticker-get-news-at-point] (quote ("Get news from feed at point" . newsticker-get-news-at-point))) (define-key map [newsticker-separator-3] (quote ("--"))) (define-key map [newsticker-mark-all-items-as-read] (quote ("Mark all items as read" . newsticker-mark-all-items-as-read))) (define-key map [newsticker-mark-all-items-at-point-as-read] (quote ("Mark all items in feed at point as read" . newsticker-mark-all-items-at-point-as-read))) (define-key map [newsticker-mark-item-at-point-as-read] (quote ("Mark item at point as read" . newsticker-mark-item-at-point-as-read))) (define-key map [newsticker-mark-item-at-point-as-immortal] (quote ("Toggle immortality for item at point" . newsticker-mark-item-at-point-as-immortal))) (define-key map [newsticker-separator-4] (quote ("--"))) (define-key map [newsticker-toggle-auto-narrow-to-item] (quote ("Narrow to single item" . newsticker-toggle-auto-narrow-to-item))) (define-key map [newsticker-toggle-auto-narrow-to-feed] (quote ("Narrow to single news feed" . newsticker-toggle-auto-narrow-to-feed))) (define-key map [newsticker-hide-old-items] (quote ("Hide old items" . newsticker-hide-old-items))) (define-key map [newsticker-show-old-items] (quote ("Show old items" . newsticker-show-old-items))) (define-key map [newsticker-next-item] (quote ("Go to next item" . newsticker-next-item))) (define-key map [newsticker-previous-item] (quote ("Go to previous item" . newsticker-previous-item))) map)) nil [13743 15793])
            ("newsticker-mode-map" variable (:default-value (let ((map (make-keymap))) (define-key map "sO" (quote newsticker-show-old-items)) (define-key map "hO" (quote newsticker-hide-old-items)) (define-key map "sa" (quote newsticker-show-all-desc)) (define-key map "ha" (quote newsticker-hide-all-desc)) (define-key map "sf" (quote newsticker-show-feed-desc)) (define-key map "hf" (quote newsticker-hide-feed-desc)) (define-key map "so" (quote newsticker-show-old-item-desc)) (define-key map "ho" (quote newsticker-hide-old-item-desc)) (define-key map "sn" (quote newsticker-show-new-item-desc)) (define-key map "hn" (quote newsticker-hide-new-item-desc)) (define-key map "se" (quote newsticker-show-entry)) (define-key map "he" (quote newsticker-hide-entry)) (define-key map "sx" (quote newsticker-show-extra)) (define-key map "hx" (quote newsticker-hide-extra)) (define-key map [33554464] (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote newsticker-close-buffer)) (define-key map "p" (quote newsticker-previous-item)) (define-key map "P" (quote newsticker-previous-new-item)) (define-key map "F" (quote newsticker-previous-feed)) (define-key map "	" (quote newsticker-next-item)) (define-key map "n" (quote newsticker-next-item)) (define-key map "N" (quote newsticker-next-new-item)) (define-key map "f" (quote newsticker-next-feed)) (define-key map "M" (quote newsticker-mark-all-items-as-read)) (define-key map "m" (quote newsticker-mark-all-items-at-point-as-read-and-redraw)) (define-key map "o" (quote newsticker-mark-item-at-point-as-read)) (define-key map "O" (quote newsticker-mark-all-items-at-point-as-read)) (define-key map "G" (quote newsticker-get-all-news)) (define-key map "g" (quote newsticker-get-news-at-point)) (define-key map "u" (quote newsticker-buffer-update)) (define-key map "U" (quote newsticker-buffer-force-update)) (define-key map "a" (quote newsticker-add-url)) (define-key map "i" (quote newsticker-mark-item-at-point-as-immortal)) (define-key map "xf" (quote newsticker-toggle-auto-narrow-to-feed)) (define-key map "xi" (quote newsticker-toggle-auto-narrow-to-item)) (define-key map [down-mouse-3] newsticker-menu) (define-key map [menu-bar Newsticker] (cons "Newsticker" newsticker-menu)) map)) nil [15795 18073])
            ("define-derived-mode" code nil nil [18075 19514])
            ("newsticker--url-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-1] (quote newsticker-mouse-browse-url)) (define-key map [mouse-2] (quote newsticker-mouse-browse-url)) (define-key map "
" (quote newsticker-browse-url)) (define-key map "" (quote newsticker-browse-url)) (define-key map [(control return)] (quote newsticker-handle-url)) map)) nil [19551 19972])
            ("newsticker-plainview" function (:user-visible-flag t) nil [20151 20297])
            ("newsticker-buffer-force-update" function (:user-visible-flag t) nil [20299 20444])
            ("newsticker-buffer-update" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [20446 22073])
            ("newsticker-get-news-at-point" function (:user-visible-flag t) nil [22075 22448])
            ("unless" code nil nil [22450 22524])
            ("declare-function" code nil nil [22525 22604])
            ("newsticker-w3m-show-inline-images" function (:user-visible-flag t) nil [22606 23816])
            ("newsticker-close-buffer" function (:user-visible-flag t) nil [23983 24113])
            ("newsticker-next-new-item" function
               (:user-visible-flag t
                :arguments ("do-not-wrap-at-eob"))
                nil [24115 24872])
            ("newsticker-previous-new-item" function
               (:user-visible-flag t
                :arguments ("do-not-wrap-at-bob"))
                nil [24874 25544])
            ("newsticker-next-item" function
               (:user-visible-flag t
                :arguments ("do-not-wrap-at-eob"))
                nil [25546 26361])
            ("newsticker-next-item-same-feed" function (:user-visible-flag t) nil [26363 27182])
            ("newsticker-previous-item" function
               (:user-visible-flag t
                :arguments ("do-not-wrap-at-bob"))
                nil [27184 28076])
            ("newsticker-next-feed" function (:user-visible-flag t) nil [28078 28305])
            ("newsticker-previous-feed" function (:user-visible-flag t) nil [28307 28548])
            ("newsticker-mark-all-items-at-point-as-read-and-redraw" function (:user-visible-flag t) nil [28550 28909])
            ("newsticker-mark-all-items-of-feed-as-read" function (:arguments ("feed")) nil [28911 29606])
            ("newsticker-mark-all-items-at-point-as-read" function (:user-visible-flag t) nil [29608 30045])
            ("newsticker-mark-item-at-point-as-read" function
               (:user-visible-flag t
                :arguments ("respect-immortality"))
                nil [30047 30540])
            ("newsticker--do-mark-item-at-point-as-read" function (:arguments ("respect-immortality")) nil [30542 32507])
            ("newsticker-mark-item-at-point-as-immortal" function (:user-visible-flag t) nil [32509 34747])
            ("newsticker-mark-all-items-as-read" function (:user-visible-flag t) nil [34749 35210])
            ("newsticker-hide-extra" function (:user-visible-flag t) nil [35212 35371])
            ("newsticker-show-extra" function (:user-visible-flag t) nil [35373 35530])
            ("newsticker-hide-old-item-desc" function (:user-visible-flag t) nil [35532 35703])
            ("newsticker-show-old-item-desc" function (:user-visible-flag t) nil [35705 35918])
            ("newsticker-hide-new-item-desc" function (:user-visible-flag t) nil [35920 36193])
            ("newsticker-show-new-item-desc" function (:user-visible-flag t) nil [36195 36462])
            ("newsticker-hide-feed-desc" function (:user-visible-flag t) nil [36464 36628])
            ("newsticker-show-feed-desc" function (:user-visible-flag t) nil [36630 36796])
            ("newsticker-hide-all-desc" function (:user-visible-flag t) nil [36798 37172])
            ("newsticker-show-all-desc" function (:user-visible-flag t) nil [37174 37540])
            ("newsticker-hide-old-items" function (:user-visible-flag t) nil [37542 37736])
            ("newsticker-show-old-items" function (:user-visible-flag t) nil [37738 37884])
            ("newsticker-hide-entry" function (:user-visible-flag t) nil [37886 39005])
            ("newsticker-show-entry" function (:user-visible-flag t) nil [39007 40046])
            ("newsticker-toggle-auto-narrow-to-feed" function (:user-visible-flag t) nil [40048 40312])
            ("newsticker-set-auto-narrow-to-feed" function
               (:user-visible-flag t
                :arguments ("value"))
                nil [40314 40697])
            ("newsticker-toggle-auto-narrow-to-item" function (:user-visible-flag t) nil [40699 40961])
            ("newsticker-set-auto-narrow-to-item" function
               (:user-visible-flag t
                :arguments ("value"))
                nil [40963 41346])
            ("newsticker-next-feed-available-p" function nil nil [41348 41561])
            ("newsticker-previous-feed-available-p" function nil nil [41563 41787])
            ("newsticker-next-item-available-p" function nil nil [41789 42226])
            ("newsticker-previous-item-available-p" function nil nil [42228 42676])
            ("newsticker-item-not-old-p" function nil nil [42678 43017])
            ("newsticker-item-not-immortal-p" function nil nil [43019 43363])
            ("newsticker--imenu-create-index" function nil nil [43529 44492])
            ("newsticker--imenu-goto" function (:arguments ("name" "pos" "args")) nil [44494 45138])
            ("newsticker--buffer-set-uptodate" function (:arguments ("value")) nil [45305 45769])
            ("newsticker--buffer-redraw" function nil nil [45771 46002])
            ("newsticker--buffer-insert-all-items" function nil nil [46004 47652])
            ("newsticker--buffer-insert-item" function (:arguments ("item" "feed-name-symbol")) nil [47654 48245])
            ("newsticker--buffer-do-insert-text" function (:arguments ("item" "type" "feed-name-symbol")) nil [48247 60237])
            ("newsticker--buffer-statistics" function (:arguments ("feed-name-symbol")) nil [60239 61062])
            ("newsticker--buffer-set-faces" function (:arguments ("start" "end")) nil [61064 62043])
            ("newsticker--buffer-set-invisibility" function (:arguments ("start" "end")) nil [62045 64122])
            ("newsticker--set-face-properties" function (:arguments ("pos1" "pos2" "nt-face" "age")) nil [64124 65280])
            ("newsticker--buffer-make-item-completely-visible" function nil nil [65479 66475])
            ("newsticker--buffer-get-feed-title-at-point" function nil nil [66477 66634])
            ("newsticker--buffer-get-item-title-at-point" function nil nil [66636 66797])
            ("newsticker--buffer-goto" function (:arguments ("types" "age" "backwards")) nil [66799 67687])
            ("newsticker--buffer-hideshow" function (:arguments ("mark-age" "onoff")) nil [67689 67941])
            ("newsticker--buffer-beginning-of-item" function nil nil [67943 68389])
            ("newsticker--buffer-beginning-of-feed" function nil nil [68391 68827])
            ("newsticker--buffer-end-of-item" function nil nil [68829 69037])
            ("newsticker--buffer-end-of-feed" function nil nil [69039 69281])
            ("newsticker-mouse-browse-url" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [69441 70024])
            ("newsticker-browse-url" function (:user-visible-flag t) nil [70026 70336])
            ("newsticker-open-url-history" variable (:default-value (quote ("wget" "xmms" "realplay"))) nil [70338 70412])
            ("newsticker-handle-url" function (:user-visible-flag t) nil [70414 70924])
            ("newsticker--cache-sort" function nil nil [71085 71732])
            ("newst-plainview" package nil nil [71734 71760]))          
      :file "newst-plainview.el.gz"
      :pointmax 71795
      :fsize 12765
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("newst-backend" include nil nil [1214 1238])
            ("newsticker--set-customvar-formatting" function (:arguments ("symbol" "value")) nil [1406 1853])
            ("newsticker-reader" customgroup (:user-visible-flag t) nil [1939 2026])
            ("newsticker-frontend" variable (:default-value (quote newsticker-treeview)) nil [2028 2421])
            ("newsticker-download-logos" variable (:default-value t) nil [2447 2620])
            ("newsticker-enable-logo-manipulations" variable (:default-value t) nil [2622 2898])
            ("newsticker-justification" variable (:default-value (quote left)) nil [2900 3532])
            ("newsticker-use-full-width" variable (:default-value t) nil [3534 3854])
            ("newsticker-html-renderer" variable (:default-value (if (fboundp (quote libxml-parse-html-region)) (function shr-render-region))) nil [3856 4665])
            ("newsticker-date-format" variable (:default-value "(%A, %H:%M)") nil [4667 4916])
            ("newsticker-faces" customgroup (:user-visible-flag t) nil [4918 5024])
            ("newsticker-feed-face" variable
               (:default-value (quote ((default :weight bold :height 1.2) (((class color) (background dark)) :foreground "white") (((class color) (background light)) :foreground "black")))
                :type "face")
                nil [5026 5270])
            ("newsticker-extra-face" variable
               (:default-value (quote ((default :slant italic :height 0.8) (((class color) (background dark)) :foreground "gray50") (((class color) (background light)) :foreground "gray50")))
                :type "face")
                nil [5272 5526])
            ("newsticker-enclosure-face" variable
               (:default-value (quote ((default :weight bold) (((class color) (background dark)) :background "orange") (((class color) (background light)) :background "orange")))
                :type "face")
                nil [5528 5774])
            ("newsticker--insert-enclosure" function (:arguments ("item" "keymap")) nil [5946 7400])
            ("newsticker--print-extra-elements" function (:arguments ("item" "keymap" "htmlish")) nil [7402 9072])
            ("newsticker--do-print-extra-element" function (:arguments ("extra-element" "width" "keymap" "htmlish")) nil [9074 10462])
            ("newsticker--image-read" function (:arguments ("feed-name-symbol" "disabled" "max-height")) nil [10464 11586])
            ("newsticker--icon-read" function (:arguments ("feed-name-symbol")) nil [11588 12558])
            ("newsticker-show-news" function (:user-visible-flag t) nil [12626 13164])
            ("newsticker-browse-url-item" function
               (:user-visible-flag t
                :arguments ("feed" "item"))
                nil [13327 14436])
            ("newst-reader" package nil nil [14438 14461]))          
      :file "newst-reader.el.gz"
      :pointmax 14493
      :fsize 4049
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs!25.1!share!emacs!25.1!lisp!net!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
