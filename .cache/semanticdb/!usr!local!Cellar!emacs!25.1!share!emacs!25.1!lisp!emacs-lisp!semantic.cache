;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [1120 1570])
            ("function-put" code nil nil [1571 1613])
            ("function-put" code nil nil [1614 1662])
            ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1783 2115])
            ("defalias" code nil nil [2117 3259])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (list (quote make-obsolete) (list (quote quote) f) (list (quote quote) new-name) (list (quote quote) when))))) (list (quote interactive-only) (function (lambda (f _args instead) (list (quote function-put) (list (quote quote) f) (quote (quote interactive-only)) (list (quote quote) instead))))) (list (quote pure) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote pure)) (list (quote quote) val)))) "If non-nil, the compiler can replace calls with their return value.
This may shift errors from run-time to compile-time.") (list (quote side-effect-free) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote side-effect-free)) (list (quote quote) val)))) "If non-nil, calls can be ignored if their value is unused.
If `error-free', drop calls even if `byte-compile-delete-errors' is nil.") (list (quote compiler-macro) (function (lambda (f args compiler-function) (if (not (eq (car-safe compiler-function) (quote lambda))) (\` (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, compiler-function))))) (let ((cfname (intern (concat (symbol-name f) "--anon-cmacro")))) (\` (progn (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, cfname)))) :autoload-end (eval-and-compile (defun (\, cfname) ((\,@ (cadr compiler-function)) (\,@ args)) (\,@ (cddr compiler-function))))))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote function-put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [3515 6459])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) (cons (list (quote no-font-lock-keyword) (function (lambda (name _args val) (list (quote function-put) (list (quote quote) name) (quote (quote no-font-lock-keyword)) (list (quote quote) val))))) defun-declarations-alist))) nil [6461 7236])
            ("defalias" code nil nil [7238 9491])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [9540 11919])
            ("fset" code nil nil [12026 12047])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [13058 13529])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [13531 13609])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [13611 13981])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [13983 14876])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [14878 15845])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [15847 16678])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [16681 18522])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [18852 19288])
            ("dont-compile" function (:arguments ("body")) nil [19290 19599])
            ("eval-when-compile" function (:arguments ("body")) nil [19842 20335])
            ("eval-and-compile" function (:arguments ("body")) nil [20337 20908])
            ("with-no-warnings" function (:arguments ("body")) nil [20910 21118])
            ("make-obsolete-variable" code nil nil [22413 22522])
            ("make-obsolete" code nil nil [22523 22614]))          
      :file "byte-run.el.gz"
      :pointmax 22642
      :fsize 6648
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eldoc" customgroup (:user-visible-flag t) nil [2005 2123])
            ("eldoc-idle-delay" variable (:default-value 0.5) nil [2125 2426])
            ("eldoc-print-after-edit" variable nil nil [2428 2604])
            ("eldoc-minor-mode-string" variable (:default-value (purecopy " ElDoc")) nil [2621 2818])
            ("eldoc-argument-case" variable (:default-value (function identity)) nil [2820 3299])
            ("make-obsolete-variable" code nil nil [3300 3356])
            ("eldoc-echo-area-use-multiline-p" variable (:default-value (quote truncate-sym-name-if-fit)) nil [3358 4457])
            ("eldoc-highlight-function-argument" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [4459 4713])
            ("eldoc-message-commands-table-size" variable (:default-value 31) nil [4748 5125])
            ("eldoc-message-commands" variable (:default-value (make-vector eldoc-message-commands-table-size 0)) nil [5127 5773])
            ("eldoc-last-data" variable (:default-value (make-vector 3 nil)) nil [5794 6200])
            ("make-obsolete-variable" code nil nil [6201 6272])
            ("eldoc-last-message" variable nil nil [6274 6305])
            ("eldoc-timer" variable nil nil [6307 6355])
            ("eldoc-current-idle-delay" variable (:default-value eldoc-idle-delay) nil [6357 6526])
            ("eldoc-message-function" variable (:default-value (function eldoc-minibuffer-message)) nil [6528 6699])
            ("eldoc-edit-message-commands" function nil nil [6701 6996])
            ("define-minor-mode" code nil nil [7015 8293])
            ("define-minor-mode" code nil nil [8310 9195])
            ("define-obsolete-function-alias" code nil nil [9212 9283])
            ("eldoc-schedule-timer" function nil nil [9287 10014])
            ("eldoc-mode-line-string" variable nil nil [10016 10051])
            ("put" code nil nil [10052 10105])
            ("eldoc-minibuffer-message" function (:arguments ("format-string" "args")) nil [10107 11075])
            ("eldoc-message" function (:arguments ("args")) nil [11077 11902])
            ("eldoc--message-command-p" function (:arguments ("command")) nil [11904 12038])
            ("eldoc-pre-command-refresh-echo-area" function nil nil [12461 12940])
            ("eldoc-display-message-p" function nil nil [13001 13384])
            ("eldoc-display-message-no-interference-p" function nil nil [13523 13639])
            ("eldoc-documentation-function" variable (:default-value (function ignore)) nil [13658 14627])
            ("eldoc-print-current-symbol-info" function nil nil [14629 15098])
            ("eldoc-docstring-format-sym-doc" function (:arguments ("prefix" "doc" "face")) nil [15263 16372])
            ("eldoc-add-command" function (:arguments ("cmds")) nil [16707 16882])
            ("eldoc-add-command-completions" function (:arguments ("names")) nil [16884 17032])
            ("eldoc-remove-command" function (:arguments ("cmds")) nil [17034 17206])
            ("eldoc-remove-command-completions" function (:arguments ("names")) nil [17208 17378])
            ("eldoc-add-command-completions" code nil nil [17409 17882])
            ("eldoc" package nil nil [17884 17900]))          
      :file "eldoc.el.gz"
      :pointmax 17925
      :fsize 6131
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("macroexp" include nil nil [3158 3177])
            ("define-error" code nil nil [3419 3488])
            ("gv-get" function (:arguments ("place" "do")) nil [3505 5368])
            ("gv-setter" function (:arguments ("name")) nil [5370 5806])
            ("gv-letplace" function (:arguments ("vars" "place" "body")) nil [5823 6474])
            ("gv-define-expander" function (:arguments ("name" "handler")) nil [6544 7234])
            ("gv--defun-declaration" function (:arguments ("symbol" "name" "args" "handler" "fix")) nil [7251 8083])
            ("or" code nil nil [8100 8331])
            ("or" code nil nil [8347 8500])
            ("gv--defsetter" function (:arguments ("name" "setter" "do" "args" "vars")) nil [9021 9704])
            ("gv-define-setter" function (:arguments ("name" "arglist" "body")) nil [9721 10556])
            ("gv-define-simple-setter" function (:arguments ("name" "setter" "fix-return")) nil [10573 11537])
            ("setf" function (:arguments ("args")) nil [11604 12406])
            ("put" code nil nil [13628 13680])
            ("put" code nil nil [13786 13985])
            ("gv-define-simple-setter" code nil nil [14026 14061])
            ("gv-define-simple-setter" code nil nil [14062 14098])
            ("gv-define-simple-setter" code nil nil [14099 14135])
            ("gv-define-setter" code nil nil [14186 14241])
            ("gv-define-setter" code nil nil [14242 14297])
            ("gv-define-setter" code nil nil [14298 14353])
            ("gv-define-setter" code nil nil [14354 14409])
            ("gv-define-setter" code nil nil [14410 14527])
            ("gv-define-simple-setter" code nil nil [14528 14561])
            ("gv-define-setter" code nil nil [14562 14633])
            ("put" code nil nil [14708 14870])
            ("gv-define-simple-setter" code nil nil [14871 14917])
            ("gv-define-simple-setter" code nil nil [14918 14965])
            ("gv-define-simple-setter" code nil nil [14966 15008])
            ("put" code nil nil [15010 15328])
            ("gv-define-simple-setter" code nil nil [15373 15424])
            ("gv-define-simple-setter" code nil nil [15425 15491])
            ("gv-define-simple-setter" code nil nil [15492 15559])
            ("gv-define-simple-setter" code nil nil [15560 15617])
            ("gv-define-simple-setter" code nil nil [15618 15674])
            ("gv-define-simple-setter" code nil nil [15675 15724])
            ("gv-define-setter" code nil nil [15725 15830])
            ("gv-define-setter" code nil nil [15831 15936])
            ("gv-define-simple-setter" code nil nil [15937 15996])
            ("gv-define-simple-setter" code nil nil [15997 16056])
            ("gv-define-simple-setter" code nil nil [16057 16120])
            ("gv-define-simple-setter" code nil nil [16121 16170])
            ("gv-define-simple-setter" code nil nil [16171 16234])
            ("gv-define-setter" code nil nil [16235 16351])
            ("gv-define-setter" code nil nil [16352 16482])
            ("gv-define-setter" code nil nil [16483 16570])
            ("gv-define-setter" code nil nil [16571 16648])
            ("gv-define-setter" code nil nil [16649 16722])
            ("gv-define-setter" code nil nil [16723 16796])
            ("gv-define-setter" code nil nil [16798 16945])
            ("gv-define-expander" code nil nil [16947 18266])
            ("put" code nil nil [18498 18716])
            ("let" code nil nil [18718 19050])
            ("put" code nil nil [19052 20093])
            ("put" code nil nil [20095 21773])
            ("gv-synthetic-place" function (:arguments ("getter" "setter")) nil [21775 22144])
            ("gv-delay-error" function (:arguments ("place")) nil [22146 22752])
            ("put" code nil nil [22791 23152])
            ("put" code nil nil [23154 23601])
            ("gv-ref" function (:arguments ("place")) nil [23634 24542])
            ("gv-deref" function (:arguments ("ref")) nil [24544 24747])
            ("gv-define-setter" code nil nil [24991 25051])
            ("gv" package nil nil [25413 25426]))          
      :file "gv.el.gz"
      :pointmax 25447
      :fsize 7643
      :lastmodtime '(22490 22723 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("pcase" include nil nil [3549 3565])
            ("define-obsolete-variable-alias" code nil nil [3713 3810])
            ("generic-font-lock-keywords" variable nil nil [3811 3907])
            ("make-variable-buffer-local" code nil nil [3908 3964])
            ("generic-mode-list" variable nil nil [3981 4145])
            ("define-generic-mode" function (:arguments ("mode" "comment-list" "keyword-list" "font-lock-list" "auto-mode-list" "function-list" "docstring")) nil [4298 6771])
            ("generic-mode-internal" function (:arguments ("mode" "comment-list" "keyword-list" "font-lock-list" "function-list")) nil [6788 7716])
            ("generic-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [7733 8214])
            ("generic--normalize-comments" function (:arguments ("comment-list")) nil [8243 8698])
            ("generic-set-comment-syntax" function (:arguments ("st" "comment-list")) nil [8700 10462])
            ("generic-set-comment-vars" function (:arguments ("comment-list")) nil [10464 10962])
            ("generic-mode-set-comments" function (:arguments ("comment-list")) nil [10964 11283])
            ("generic-bracket-support" function nil nil [11285 11506])
            ("generic-make-keywords-list" function (:arguments ("keyword-list" "face" "prefix" "suffix")) nil [11523 12245])
            ("generic" package nil nil [12247 12265]))          
      :file "generic.el.gz"
      :pointmax 12292
      :fsize 4243
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 3565 . 3566) (symbol 3531 . 3548) (open-paren 3530 . 3531)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio-core" include nil nil [1921 1942])
            ("cl-generic" include nil nil [1943 1964])
            ("put" code nil nil [1966 2046])
            ("eieio--defalias" function (:arguments ("name" "body")) nil [2099 2617])
            ("defgeneric" function (:arguments ("method" "args" "doc-string")) nil [2634 3341])
            ("defmethod" function (:arguments ("method" "args")) nil [3358 5451])
            ("eieio--generic-static-symbol-specializers" function (:arguments ("tag" "_")) nil [5453 5848])
            ("cl-generic-define-generalizer" code nil nil [5850 6179])
            ("cl-generic-define-generalizer" code nil nil [6180 6887])
            ("cl-defmethod" code nil nil [6889 7064])
            ("eieio--defgeneric-init-form" function (:arguments ("method" "doc-string")) nil [7081 7402])
            ("eieio--defmethod" function (:arguments ("method" "kind" "argclass" "code")) nil [7419 10169])
            ("push" code nil nil [10250 10327])
            ("generic-p" function (:arguments ("fname")) nil [10329 10387])
            ("no-next-method" function (:arguments ("args")) nil [10389 10520])
            ("no-applicable-method" function (:arguments ("object" "method" "args")) nil [10522 10686])
            ("define-obsolete-function-alias" code nil nil [10688 10766])
            ("next-method-p" function nil nil [10767 11004])
            ("eieio-defmethod" function (:arguments ("method" "args")) nil [11021 11214])
            ("eieio-defgeneric" function (:arguments ("method" "doc-string")) nil [11231 11488])
            ("eieio-defclass" function (:arguments ("cname" "superclasses" "slots" "options")) nil [11505 11675])
            ("eieio-compat" package nil nil [11751 11774]))          
      :file "eieio-compat.el.gz"
      :pointmax 11806
      :fsize 3897
      :lastmodtime '(22421 48073 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1047 1064])
            ("macroexp" include nil nil [1065 1084])
            ("gv" include nil nil [1085 1098])
            ("cl-unload-function" function nil nil [3594 3752])
            ("dolist" code nil nil [3789 4502])
            ("dolist" code nil nil [4504 9695])
            ("cl--wrap-in-nil-block" function (:arguments ("fun" "args")) nil [9697 9779])
            ("advice-add" code nil nil [9780 9832])
            ("advice-add" code nil nil [9833 9886])
            ("cl--pass-args-to-cl-declare" function (:arguments ("specs")) nil [9888 9976])
            ("advice-add" code nil nil [9977 10035])
            ("cl-closure-vars" variable nil nil [10195 10223])
            ("cl--function-convert-cache" variable nil nil [10224 10263])
            ("cl--function-convert" function (:arguments ("f")) nil [10265 12377])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [12379 14390])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [14392 14922])
            ("flet" function (:arguments ("bindings" "body")) nil [15001 16755])
            ("labels" function (:arguments ("bindings" "body")) nil [16757 17701])
            ("cl--gv-adapt" function (:arguments ("cl-gv" "do")) nil [17897 18787])
            ("define-setf-expander" function (:arguments ("name" "arglist" "body")) nil [18789 19692])
            ("defsetf" function (:arguments ("name" "arg1" "args")) nil [19694 21312])
            ("make-obsolete" code nil nil [23226 23278])
            ("declare-function" code nil nil [23280 23332])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [23334 24156])
            ("define-obsolete-function-alias" code nil nil [24258 24326])
            ("define-obsolete-variable-alias" code nil nil [24327 24419])
            ("define-obsolete-function-alias" code nil nil [24420 24496])
            ("cl-not-hash-table" function (:arguments ("x" "y" "_z")) nil [24634 24783])
            ("cl-builtin-gethash" variable (:default-value (symbol-function (quote gethash))) nil [24785 24839])
            ("make-obsolete-variable" code nil nil [24840 24895])
            ("cl-builtin-remhash" variable (:default-value (symbol-function (quote remhash))) nil [24896 24950])
            ("make-obsolete-variable" code nil nil [24951 25006])
            ("cl-builtin-clrhash" variable (:default-value (symbol-function (quote clrhash))) nil [25007 25061])
            ("make-obsolete-variable" code nil nil [25062 25117])
            ("cl-builtin-maphash" variable (:default-value (symbol-function (quote maphash))) nil [25118 25172])
            ("make-obsolete-variable" code nil nil [25174 25229])
            ("define-obsolete-function-alias" code nil nil [25230 25296])
            ("define-obsolete-function-alias" code nil nil [25297 25361])
            ("define-obsolete-function-alias" code nil nil [25362 25422])
            ("define-obsolete-function-alias" code nil nil [25423 25483])
            ("define-obsolete-function-alias" code nil nil [25484 25544])
            ("define-obsolete-function-alias" code nil nil [25545 25605])
            ("define-obsolete-function-alias" code nil nil [25606 25666])
            ("define-obsolete-function-alias" code nil nil [25667 25743])
            ("define-obsolete-function-alias" code nil nil [25744 25814])
            ("define-obsolete-function-alias" code nil nil [25815 25893])
            ("define-obsolete-function-alias" code nil nil [25895 25991])
            ("define-obsolete-function-alias" code nil nil [25992 26068])
            ("define-obsolete-function-alias" code nil nil [26069 26142])
            ("define-obsolete-function-alias" code nil nil [26143 26209])
            ("cl-maclisp-member" function (:arguments ("item" "list")) nil [26211 26366])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [26417 27351])
            ("cl" package nil nil [27353 27366])
            ("run-hooks" code nil nil [27368 27393]))          
      :file "cl.el.gz"
      :pointmax 27415
      :fsize 7979
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio-version" variable (:default-value "1.4") nil [1797 1855])
            ("eieio-version" function (:user-visible-flag t) nil [1857 1965])
            ("eieio-core" include nil nil [1967 1988])
            ("defclass" function (:arguments ("name" "superclasses" "slots" "options-and-doc")) nil [2020 11652])
            ("oref" function (:arguments ("obj" "slot")) nil [11690 11948])
            ("defalias" code nil nil [11950 11984])
            ("defalias" code nil nil [11985 12023])
            ("make-obsolete" code nil nil [12024 12102])
            ("oref-default" function (:arguments ("obj" "slot")) nil [12104 12444])
            ("with-slots" function (:arguments ("spec-list" "object" "body")) nil [12471 13690])
            ("eieio-pcase-slot-index-table" function (:arguments ("obj")) nil [13803 13998])
            ("eieio-pcase-slot-index-from-index-table" function (:arguments ("index-table" "slot")) nil [14000 14291])
            ("pcase-defmacro" code nil nil [14293 15582])
            ("define-obsolete-function-alias" code nil nil [15691 15772])
            ("cl-defgeneric" code nil nil [15774 15903])
            ("eieio-object-name" function (:arguments ("obj" "extra")) nil [15905 16207])
            ("define-obsolete-function-alias" code nil nil [16208 16280])
            ("eieio--object-names" variable
               (:constant-flag t
                :default-value (make-hash-table :test (function eq) :weakness (quote key)))
                nil [16282 16356])
            ("cl-defmethod" code nil nil [16608 16739])
            ("define-obsolete-function-alias" code nil nil [16740 16828])
            ("cl-defmethod" code nil nil [16830 17044])
            ("define-obsolete-function-alias" code nil nil [17045 17140])
            ("eieio-object-class" function (:arguments ("obj")) nil [17142 17371])
            ("define-obsolete-function-alias" code nil nil [17372 17446])
            ("define-obsolete-function-alias" code nil nil [17468 17538])
            ("eieio-object-class-name" function (:arguments ("obj")) nil [17540 17711])
            ("define-obsolete-function-alias" code nil nil [17712 17797])
            ("eieio-class-parents" function (:arguments ("class")) nil [17799 18024])
            ("define-obsolete-function-alias" code nil nil [18026 18102])
            ("eieio-class-children" function (:arguments ("class")) nil [18104 18327])
            ("define-obsolete-function-alias" code nil nil [18328 18408])
            ("define-obsolete-function-alias" code nil nil [18438 18528])
            ("define-obsolete-function-alias" code nil nil [18529 18618])
            ("eieio-class-parent" function (:arguments ("class")) nil [18620 18760])
            ("define-obsolete-function-alias" code nil nil [18761 18834])
            ("same-class-p" function (:arguments ("obj" "class")) nil [18836 19066])
            ("object-of-class-p" function (:arguments ("obj" "class")) nil [19068 19307])
            ("defalias" code nil nil [19335 19380])
            ("child-of-class-p" function (:arguments ("child" "class")) nil [19382 19994])
            ("eieio-slot-descriptor-name" function (:arguments ("slot")) nil [19996 20071])
            ("eieio-class-slots" function (:arguments ("class")) nil [20073 20384])
            ("object-slots" function (:arguments ("obj")) nil [20386 20630])
            ("eieio--class-slot-initarg" function (:arguments ("class" "slot")) nil [20632 20937])
            ("oset" function (:arguments ("obj" "slot" "value")) nil [20964 21253])
            ("oset-default" function (:arguments ("class" "slot" "value")) nil [21255 21606])
            ("slot-boundp" function (:arguments ("object" "slot")) nil [21651 22236])
            ("slot-makeunbound" function (:arguments ("object" "slot")) nil [22238 22351])
            ("slot-exists-p" function (:arguments ("object-or-class" "slot")) nil [22353 23037])
            ("find-class" function (:arguments ("symbol" "errorp")) nil [23039 23397])
            ("object-assoc" function (:arguments ("key" "slot" "list")) nil [23458 23996])
            ("object-assoc-list" function (:arguments ("slot" "list")) nil [23998 24456])
            ("object-assoc-list-safe" function (:arguments ("slot" "list")) nil [24458 24997])
            ("object-add-to-list" function (:arguments ("object" "slot" "item" "append")) nil [24999 25804])
            ("object-remove-from-list" function (:arguments ("object" "slot" "item")) nil [25806 26156])
            ("gv-define-simple-setter" code nil nil [26436 26483])
            ("eieio-default-superclass" type (:type "class") nil [26868 27135])
            ("setq" code nil nil [27137 27211])
            ("defalias" code nil nil [27213 27265])
            ("cl-defgeneric" code nil nil [27267 27562])
            ("define-obsolete-function-alias" code nil nil [27564 27632])
            ("cl-defmethod" code nil nil [27634 28626])
            ("cl-defgeneric" code nil nil [28674 28825])
            ("cl-defmethod" code nil nil [28827 29314])
            ("cl-defgeneric" code nil nil [29362 29470])
            ("cl-defmethod" code nil nil [29472 31028])
            ("cl-defgeneric" code nil nil [31030 31176])
            ("cl-defmethod" code nil nil [31178 31708])
            ("cl-defgeneric" code nil nil [31710 31842])
            ("cl-defmethod" code nil nil [31844 32650])
            ("cl-defgeneric" code nil nil [32652 32915])
            ("cl-defmethod" code nil nil [32917 33292])
            ("cl-defgeneric" code nil nil [33294 33404])
            ("cl-defmethod" code nil nil [33406 33659])
            ("cl-defgeneric" code nil nil [33661 33961])
            ("cl-defmethod" code nil nil [33963 34581])
            ("eieio-print-depth" variable nil nil [34583 34675])
            ("cl-defgeneric" code nil nil [34677 34846])
            ("cl-defmethod" code nil nil [34848 37173])
            ("eieio-override-prin1" function (:arguments ("thing")) nil [37175 37468])
            ("eieio-list-prin1" function (:arguments ("list")) nil [37470 37987])
            ("change-class" function (:arguments ("_obj" "_class")) nil [38032 38239])
            ("add-hook" code nil nil [38459 38531])
            ("eieio-edebug-prin1-to-string" function (:arguments ("print-function" "object" "noescape")) nil [38564 39269])
            ("advice-add" code nil nil [39271 39358])
            ("customize-object" function (:prototype-flag t) nil [39549 39727])
            ("eieio-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [39866 40097])
            ("define-obsolete-function-alias" code nil nil [40099 40176])
            ("eieio-help-constructor" function (:prototype-flag t) nil [40178 40290])
            ("eieio" package nil nil [40348 40364]))          
      :file "eieio.el.gz"
      :pointmax 40386
      :fsize 12343
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1199 1216])
            ("pcase" include nil nil [1217 1233])
            ("declare-function" code nil nil [1328 1367])
            ("declare-function" code nil nil [1368 1407])
            ("declare-function" code nil nil [1408 1451])
            ("declare-function" code nil nil [1452 1491])
            ("declare-function" code nil nil [1492 1536])
            ("eieio-hook" variable nil nil [1573 1668])
            ("eieio-error-unsupported-class-tags" variable nil nil [1670 1904])
            ("eieio-skip-typecheck" variable nil nil [1906 2165])
            ("eieio-optimize-primary-methods-flag" variable (:default-value t) nil [2167 2283])
            ("eieio-backward-compatibility" variable (:default-value t) nil [2285 2590])
            ("eieio-unbound" variable
               (:constant-flag t
                :default-value (if (and (boundp (quote eieio-unbound)) (symbolp eieio-unbound)) eieio-unbound (make-symbol "unbound")))
                nil [2592 2790])
            ("eieio-default-superclass" variable nil nil [2897 2934])
            ("progn" code nil nil [2936 3971])
            ("cl-defstruct" code nil nil [3974 4355])
            ("eieio--object-num-slots" variable
               (:constant-flag t
                :default-value (length (cl-struct-slot-info (quote eieio--object))))
                nil [4378 4462])
            ("eieio--object-class" function (:arguments ("obj")) nil [4465 4548])
            ("cl-macs" include nil nil [4600 4618])
            ("eieio--class-object" function (:arguments ("class")) nil [4642 4853])
            ("class-p" function (:arguments ("x")) nil [4855 5007])
            ("eieio--class-print-name" function (:arguments ("class")) nil [5009 5144])
            ("eieio-class-name" function (:arguments ("class")) nil [5146 5332])
            ("define-obsolete-function-alias" code nil nil [5333 5403])
            ("defalias" code nil nil [5405 5513])
            ("eieio--class-option-assoc" function (:arguments ("list" "option")) nil [5515 5673])
            ("eieio--class-option" function (:arguments ("class" "option")) nil [5675 5874])
            ("eieio-object-p" function (:arguments ("obj")) nil [5876 6227])
            ("define-obsolete-function-alias" code nil nil [6229 6294])
            ("class-abstract-p" function (:arguments ("class")) nil [6296 6467])
            ("eieio--class-method-invocation-order" function (:arguments ("class")) nil [6469 6688])
            ("eieio-defclass-autoload-map" variable (:default-value (make-hash-table)) nil [6716 6823])
            ("eieio-defclass-autoload" function (:arguments ("cname" "_superclasses" "filename" "doc")) nil [6898 8814])
            ("eieio-class-un-autoload" function (:arguments ("cname")) nil [8816 8962])
            ("cl-deftype" code nil nil [8972 9166])
            ("eieio-make-class-predicate" function (:arguments ("class")) nil [9169 9410])
            ("eieio-make-child-predicate" function (:arguments ("class")) nil [9412 9658])
            ("eieio--known-slot-names" variable nil nil [9660 9696])
            ("eieio-defclass-internal" function (:arguments ("cname" "superclasses" "slots" "options")) nil [9698 20681])
            ("eieio-eval-default-p" function (:arguments ("val")) nil [20683 20843])
            ("eieio--perform-slot-validation-for-default" function (:arguments ("slot" "skipnil")) nil [20845 21439])
            ("eieio--slot-override" function (:arguments ("old" "new" "skipnil")) nil [21441 23805])
            ("eieio--add-new-slot" function (:arguments ("newc" "slot" "init" "alloc" "defaultoverride" "skipnil")) nil [23807 26602])
            ("eieio-copy-parents-into-subclass" function (:arguments ("newc")) nil [26604 27679])
            ("eieio--perform-slot-validation" function (:arguments ("spec" "value")) nil [27890 28113])
            ("eieio--validate-slot-value" function (:arguments ("class" "slot-idx" "value" "slot")) nil [28115 28819])
            ("eieio--validate-class-slot-value" function (:arguments ("class" "slot-idx" "value" "slot")) nil [28821 29397])
            ("eieio-barf-if-slot-unbound" function (:arguments ("value" "instance" "slotname" "fn")) nil [29399 29837])
            ("eieio-oref" function (:arguments ("obj" "slot")) nil [29874 31470])
            ("eieio-oref-default" function (:arguments ("obj" "slot")) nil [31473 32546])
            ("eieio-default-eval-maybe" function (:arguments ("val")) nil [32548 33039])
            ("eieio-oset" function (:arguments ("obj" "slot" "value")) nil [33041 33884])
            ("eieio-oset-default" function (:arguments ("class" "slot" "value")) nil [33886 35846])
            ("eieio--slot-name-index" function (:arguments ("class" "slot")) nil [35889 36714])
            ("eieio--class-slot-name-index" function (:arguments ("class" "slot")) nil [36716 37303])
            ("eieio-set-defaults" function (:arguments ("obj" "set-all")) nil [37419 37949])
            ("eieio--initarg-to-attribute" function (:arguments ("class" "initarg")) nil [37951 38276])
            ("eieio--c3-candidate" function (:arguments ("class" "remaining-inputs")) nil [38313 38755])
            ("eieio--c3-merge-lists" function (:arguments ("reversed-partial-result" "remaining-inputs")) nil [38757 40091])
            ("eieio--class/struct-parents" function (:arguments ("class")) nil [40093 40210])
            ("eieio--class-precedence-c3" function (:arguments ("class")) nil [40212 40534])
            ("eieio--class-precedence-dfs" function (:arguments ("class")) nil [40580 41115])
            ("eieio--class-precedence-bfs" function (:arguments ("class")) nil [41163 41592])
            ("eieio--class-precedence-list" function (:arguments ("class")) nil [41626 42269])
            ("define-obsolete-function-alias" code nil nil [42270 42364])
            ("define-error" code nil nil [42413 42466])
            ("define-error" code nil nil [42467 42520])
            ("define-error" code nil nil [42521 42564])
            ("define-error" code nil nil [42565 42640])
            ("cl-generic" include nil nil [42672 42693])
            ("cl-generic-define-generalizer" code nil nil [42764 43215])
            ("cl-defmethod" code nil nil [43217 43610])
            ("eieio--generic-subclass-specializers" function (:arguments ("tag" "_")) nil [44004 44222])
            ("cl-generic-define-generalizer" code nil nil [44224 44407])
            ("cl-defmethod" code nil nil [44409 44525])
            ("eieio--defalias" function (:prototype-flag t) nil [44666 44899])
            ("defgeneric" function (:prototype-flag t) nil [44901 45388])
            ("function-put" code nil nil [45390 45435])
            ("make-obsolete" code nil nil [45437 45487])
            ("defmethod" function (:prototype-flag t) nil [45489 46591])
            ("function-put" code nil nil [46593 46637])
            ("make-obsolete" code nil nil [46639 46687])
            ("eieio--defgeneric-init-form" function (:prototype-flag t) nil [46689 46781])
            ("eieio--defmethod" function (:prototype-flag t) nil [46783 46872])
            ("eieio-defmethod" function (:prototype-flag t) nil [46874 47010])
            ("make-obsolete" code nil nil [47012 47066])
            ("eieio-defgeneric" function (:prototype-flag t) nil [47068 47212])
            ("make-obsolete" code nil nil [47214 47270])
            ("eieio-defclass" function (:prototype-flag t) nil [47272 47366])
            ("make-obsolete" code nil nil [47368 47432])
            ("eieio-core" package nil nil [47444 47465]))          
      :file "eieio-core.el.gz"
      :pointmax 47495
      :fsize 13836
      :lastmodtime '(22421 48076 0 0)
      :unmatched-syntax '((close-paren 4462 . 4463) (symbol 4358 . 4375) (open-paren 4357 . 4358)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("backquote" include nil nil [5171 5191])
            ("macroexp" include nil nil [5192 5211])
            ("cconv" include nil nil [5212 5228])
            ("cl-extra" include nil nil [5422 5441])
            ("or" code nil nil [5443 5536])
            ("bytecomp" customgroup (:user-visible-flag t) nil [5669 5737])
            ("emacs-lisp-file-regexp" variable (:default-value "\\.el\\'") nil [5739 5946])
            ("byte-compile-dest-file-function" variable nil nil [5948 6250])
            ("byte-compiler-base-file-name" function (:arguments ("filename")) nil [6403 6630])
            ("or" code nil nil [6632 7600])
            ("byte-compile-inline-expand" function (:prototype-flag t) nil [7659 7708])
            ("byte-optimize-form" function (:prototype-flag t) nil [7769 7810])
            ("byte-optimize-lapcode" function (:prototype-flag t) nil [7870 7914])
            ("byte-compile-unfold-lambda" function (:prototype-flag t) nil [7915 7964])
            ("byte-decompile-bytecode" function (:prototype-flag t) nil [8188 8234])
            ("byte-compile-verbose" variable (:default-value (and (not noninteractive) (> baud-rate search-slow-speed))) nil [8236 8436])
            ("byte-optimize" variable (:default-value t) nil [8438 8837])
            ("byte-compile-delete-errors" variable nil nil [8839 9062])
            ("byte-compile-dynamic" variable nil nil [9064 9562])
            ("byte-compile-disable-print-circle" variable nil nil [9637 9756])
            ("make-obsolete-variable" code nil nil [9757 9827])
            ("byte-compile-dynamic-docstrings" variable (:default-value t) nil [9915 10630])
            ("byte-compile-log-buffer" variable
               (:constant-flag t
                :default-value "*Compile-Log*")
                nil [10716 10810])
            ("byte-optimize-log" variable nil nil [10812 11262])
            ("byte-compile-error-on-warn" variable nil nil [11264 11404])
            ("byte-compile-warning-types" variable
               (:constant-flag t
                :default-value (quote (redefine callargs free-vars unresolved obsolete noruntime cl-functions interactive-only make-local mapcar constants suspicious lexical)))
                nil [11406 11665])
            ("byte-compile-warnings" variable (:default-value t) nil [11666 13222])
            ("put" code nil nil [13239 13401])
            ("byte-compile-warning-enabled-p" function (:arguments ("warning")) nil [13403 13714])
            ("byte-compile-disable-warning" function (:arguments ("warning")) nil [13731 14474])
            ("byte-compile-enable-warning" function (:arguments ("warning")) nil [14491 15192])
            ("byte-compile-interactive-only-functions" variable nil nil [15194 15310])
            ("make-obsolete-variable" code nil nil [15311 15443])
            ("byte-compile-not-obsolete-vars" variable nil nil [15445 15550])
            ("byte-compile-global-not-obsolete-vars" variable nil nil [15551 15670])
            ("byte-compile-not-obsolete-funcs" variable nil nil [15672 15778])
            ("byte-compile-generate-call-tree" variable nil nil [15780 16582])
            ("byte-compile-call-tree" variable nil nil [16584 16863])
            ("byte-compile-call-tree-sort" variable (:default-value (quote name)) nil [16865 17155])
            ("byte-compile-debug" variable nil nil [17157 17188])
            ("byte-compile-constants" variable nil nil [17189 17295])
            ("byte-compile-variables" variable nil nil [17296 17402])
            ("byte-compile-bound-variables" variable nil nil [17403 17553])
            ("byte-compile-lexical-variables" variable nil nil [17554 17721])
            ("byte-compile-const-variables" variable nil nil [17722 17840])
            ("byte-compile-free-references" variable nil nil [17841 17878])
            ("byte-compile-free-assignments" variable nil nil [17879 17917])
            ("byte-compiler-error-flag" variable nil nil [17919 17952])
            ("byte-compile-recurse-toplevel" function (:arguments ("form" "non-toplevel-case")) nil [17954 18736])
            ("byte-compile-initial-macro-environment" variable
               (:constant-flag t
                :default-value (\` ((declare-function . byte-compile-macroexpand-declare-function) (eval-when-compile \, (lambda (&rest body) (let ((result nil)) (byte-compile-recurse-toplevel (macroexp-progn body) (lambda (form) (let ((byte-compile-unresolved-functions byte-compile-unresolved-functions) (byte-compile-new-defuns byte-compile-new-defuns)) (setf result (byte-compile-eval (byte-compile-top-level (byte-compile-preprocess form))))))) (list (quote quote) result)))) (eval-and-compile \, (lambda (&rest body) (byte-compile-recurse-toplevel (macroexp-progn body) (lambda (form) (let ((expanded (macroexpand-all form macroexpand-all-environment))) (eval expanded lexical-binding) expanded))))))))
                nil [18738 21129])
            ("byte-compile-macro-environment" variable (:default-value byte-compile-initial-macro-environment) nil [21131 21382])
            ("byte-compile-function-environment" variable nil nil [21384 21835])
            ("byte-compile-unresolved-functions" variable nil nil [21837 22122])
            ("byte-compile-noruntime-functions" variable nil nil [22124 22399])
            ("byte-compile-new-defuns" variable nil nil [22401 22641])
            ("byte-compile--lexical-environment" variable nil nil [22676 22759])
            ("byte-compile-tag-number" variable nil nil [22761 22795])
            ("byte-compile-output" variable nil nil [22796 22918])
            ("byte-compile-depth" variable nil nil [22919 22984])
            ("byte-compile-maxdepth" variable nil nil [22985 23053])
            ("byte-code-vector" variable nil nil [23123 23221])
            ("byte-stack+-info" variable nil nil [23223 23311])
            ("byte-defop" function (:arguments ("opcode" "stack-adjust" "opname" "docstring")) nil [23313 24340])
            ("byte-extrude-byte-code-vectors" function nil nil [24342 24674])
            ("byte-defop" code nil nil [24767 24823])
            ("byte-defop" code nil nil [24824 24880])
            ("byte-defop" code nil nil [24881 24937])
            ("byte-defop" code nil nil [24938 24995])
            ("byte-defop" code nil nil [24996 25050])
            ("byte-defop" code nil nil [25051 25115])
            ("byte-defop" code nil nil [25297 25332])
            ("byte-defop" code nil nil [25333 25367])
            ("byte-defop" code nil nil [25368 25410])
            ("byte-defop" code nil nil [25430 25458])
            ("byte-defop" code nil nil [25459 25491])
            ("byte-defop" code nil nil [25492 25522])
            ("byte-defop" code nil nil [25523 25555])
            ("byte-defop" code nil nil [25556 25586])
            ("byte-defop" code nil nil [25587 25614])
            ("byte-defop" code nil nil [25615 25644])
            ("byte-defop" code nil nil [25645 25673])
            ("byte-defop" code nil nil [25674 25702])
            ("byte-defop" code nil nil [25703 25731])
            ("byte-defop" code nil nil [25732 25761])
            ("byte-defop" code nil nil [25762 25792])
            ("byte-defop" code nil nil [25793 25823])
            ("byte-defop" code nil nil [25824 25854])
            ("byte-defop" code nil nil [25855 25885])
            ("byte-defop" code nil nil [25886 25917])
            ("byte-defop" code nil nil [25918 25947])
            ("byte-defop" code nil nil [25948 25977])
            ("byte-defop" code nil nil [25978 26015])
            ("byte-defop" code nil nil [26016 26056])
            ("byte-defop" code nil nil [26082 26110])
            ("byte-defop" code nil nil [26111 26140])
            ("byte-defop" code nil nil [26166 26194])
            ("byte-defop" code nil nil [26195 26229])
            ("byte-defop" code nil nil [26230 26262])
            ("byte-defop" code nil nil [26263 26295])
            ("byte-defop" code nil nil [26296 26328])
            ("byte-defop" code nil nil [26329 26358])
            ("byte-defop" code nil nil [26359 26388])
            ("byte-defop" code nil nil [26389 26421])
            ("byte-defop" code nil nil [26422 26450])
            ("byte-defop" code nil nil [26451 26479])
            ("byte-defop" code nil nil [26480 26508])
            ("byte-defop" code nil nil [26509 26537])
            ("byte-defop" code nil nil [26538 26567])
            ("byte-defop" code nil nil [26568 26599])
            ("byte-defop" code nil nil [26600 26629])
            ("byte-defop" code nil nil [26630 26658])
            ("byte-defop" code nil nil [26659 26687])
            ("byte-defop" code nil nil [26688 26717])
            ("byte-defop" code nil nil [26729 26759])
            ("byte-defop" code nil nil [26760 26794])
            ("byte-defop" code nil nil [26795 26826])
            ("byte-defop" code nil nil [26827 26861])
            ("byte-defop" code nil nil [26862 26896])
            ("byte-defop" code nil nil [26897 26932])
            ("byte-defop" code nil nil [26933 26972])
            ("byte-defop" code nil nil [26973 27012])
            ("byte-defop" code nil nil [27013 27052])
            ("byte-defop" code nil nil [27053 27087])
            ("byte-defop" code nil nil [27088 27133])
            ("byte-defop" code nil nil [27166 27195])
            ("byte-defop" code nil nil [27196 27225])
            ("byte-defop" code nil nil [27226 27255])
            ("byte-defop" code nil nil [27256 27285])
            ("byte-defop" code nil nil [27286 27325])
            ("byte-defop" code nil nil [27326 27361])
            ("byte-defop" code nil nil [27362 27457])
            ("byte-defop" code nil nil [27458 27500])
            ("byte-defop" code nil nil [27501 27548])
            ("byte-defop" code nil nil [27578 27615])
            ("byte-defop" code nil nil [27616 27653])
            ("byte-defop" code nil nil [27654 27697])
            ("byte-defop" code nil nil [27698 27742])
            ("byte-defop" code nil nil [27743 27780])
            ("byte-defop" code nil nil [27781 27817])
            ("byte-defop" code nil nil [27818 27859])
            ("byte-defop" code nil nil [27860 27898])
            ("byte-defop" code nil nil [27899 27940])
            ("byte-defop" code nil nil [27941 27971])
            ("byte-defop" code nil nil [27972 28008])
            ("byte-defop" code nil nil [28078 28186])
            ("byte-defop" code nil nil [28187 28241])
            ("byte-defop" code nil nil [28242 28314])
            ("byte-defop" code nil nil [28315 28395])
            ("byte-defop" code nil nil [28396 28522])
            ("byte-defop" code nil nil [28523 28657])
            ("byte-defop" code nil nil [28659 28738])
            ("byte-defop" code nil nil [28739 28805])
            ("byte-defop" code nil nil [28806 28874])
            ("byte-defop" code nil nil [28876 28974])
            ("byte-defop" code nil nil [28975 29090])
            ("byte-defop" code nil nil [29091 29205])
            ("byte-defop" code nil nil [29206 29308])
            ("byte-defop" code nil nil [29309 29426])
            ("byte-defop" code nil nil [29545 29584])
            ("byte-defop" code nil nil [29586 29644])
            ("byte-defop" code nil nil [29645 29702])
            ("byte-defop" code nil nil [29851 29886])
            ("byte-defop" code nil nil [29916 29951])
            ("byte-defop" code nil nil [29952 29992])
            ("byte-defop" code nil nil [29993 30027])
            ("byte-defop" code nil nil [30028 30059])
            ("byte-defop" code nil nil [30060 30093])
            ("byte-defop" code nil nil [30094 30126])
            ("byte-defop" code nil nil [30127 30159])
            ("byte-defop" code nil nil [30160 30190])
            ("byte-defop" code nil nil [30191 30222])
            ("byte-defop" code nil nil [30223 30251])
            ("byte-defop" code nil nil [30252 30283])
            ("byte-defop" code nil nil [30284 30313])
            ("byte-defop" code nil nil [30314 30347])
            ("byte-defop" code nil nil [30348 30379])
            ("byte-defop" code nil nil [30380 30411])
            ("byte-defop" code nil nil [30412 30445])
            ("byte-defop" code nil nil [30446 30479])
            ("byte-defop" code nil nil [30480 30510])
            ("byte-defop" code nil nil [30511 30539])
            ("byte-defop" code nil nil [30540 30568])
            ("byte-defop" code nil nil [30569 30601])
            ("byte-defop" code nil nil [30602 30635])
            ("byte-defop" code nil nil [30656 30687])
            ("byte-defop" code nil nil [30688 30721])
            ("byte-defop" code nil nil [30722 30755])
            ("byte-defop" code nil nil [30757 30791])
            ("byte-defop" code nil nil [30830 30865])
            ("byte-defop" code nil nil [31146 31180])
            ("byte-discardN-preserve-tos" variable
               (:constant-flag t
                :default-value byte-discardN)
                nil [31338 31389])
            ("byte-defop" code nil nil [31411 31474])
            ("byte-constant-limit" variable
               (:constant-flag t
                :default-value 64)
                nil [31523 31622])
            ("byte-goto-ops" variable
               (:constant-flag t
                :default-value (quote (byte-goto byte-goto-if-nil byte-goto-if-not-nil byte-goto-if-nil-else-pop byte-goto-if-not-nil-else-pop byte-pushcatch byte-pushconditioncase)))
                nil [31624 31874])
            ("byte-goto-always-pop-ops" variable
               (:constant-flag t
                :default-value (quote (byte-goto-if-nil byte-goto-if-not-nil)))
                nil [31876 31952])
            ("byte-extrude-byte-code-vectors" code nil nil [31954 31986])
            ("byte-compile-push-bytecodes" function (:arguments ("args")) nil [33565 34233])
            ("byte-compile-push-bytecode-const2" function (:arguments ("opcode" "const2" "bytes" "pc")) nil [34235 34516])
            ("byte-compile-lapcode" function (:arguments ("lap")) nil [34518 38913])
            ("byte-compile-cl-file-p" function (:arguments ("file")) nil [38946 39120])
            ("byte-compile-eval" function (:arguments ("form")) nil [39122 41079])
            ("byte-compile-eval-before-compile" function (:arguments ("form")) nil [41081 41637])
            ("byte-compile-current-form" variable nil nil [41668 41706])
            ("byte-compile-dest-file" variable nil nil [41707 41742])
            ("byte-compile-current-file" variable nil nil [41743 41781])
            ("byte-compile-current-group" variable nil nil [41782 41821])
            ("byte-compile-current-buffer" variable nil nil [41822 41862])
            ("byte-compile-log" function (:arguments ("format-string" "args")) nil [41903 42252])
            ("byte-compile-log-1" function (:arguments ("string")) nil [42293 42590])
            ("byte-compile-read-position" variable nil nil [42592 42685])
            ("byte-compile-last-position" variable nil nil [42686 42773])
            ("byte-compile-delete-first" function (:arguments ("elt" "list")) nil [42803 43068])
            ("byte-compile-set-symbol-position" function (:arguments ("sym" "allow-previous")) nil [44080 44690])
            ("byte-compile-last-warned-form" variable nil nil [44692 44734])
            ("byte-compile-last-logged-file" variable nil nil [44735 44777])
            ("byte-compile-root-dir" variable nil nil [44778 44886])
            ("byte-compile-abbreviate-file" function (:arguments ("file" "dir")) nil [45012 45198])
            ("byte-compile-warning-prefix" function (:arguments ("level" "entry")) nil [45309 47010])
            ("byte-compile-warning-series" function (:arguments ("_ignore")) nil [47164 47221])
            ("declare-function" code nil nil [47271 47328])
            ("byte-compile-log-file" function nil nil [47508 48973])
            ("byte-compile-log-warning" function (:arguments ("string" "fill" "level")) nil [49092 49354])
            ("byte-compile-warn" function (:arguments ("format" "args")) nil [49356 49688])
            ("byte-compile-warn-obsolete" function (:arguments ("symbol")) nil [49690 50186])
            ("byte-compile-report-error" function (:arguments ("error-info")) nil [50188 50515])
            ("byte-compile-fdefinition" function (:arguments ("name" "macro-p")) nil [50548 51928])
            ("byte-compile-arglist-signature" function (:arguments ("arglist")) nil [51930 52830])
            ("byte-compile-arglist-signatures-congruent-p" function (:arguments ("old" "new")) nil [52833 53131])
            ("byte-compile-arglist-signature-string" function (:arguments ("signature")) nil [53133 53382])
            ("byte-compile-function-warn" function (:arguments ("f" "nargs" "def")) nil [53384 54202])
            ("byte-compile-callargs-warn" function (:arguments ("form")) nil [54282 55497])
            ("byte-compile-format-warn" function (:arguments ("form")) nil [55499 56334])
            ("dolist" code nil nil [56336 56414])
            ("byte-compile-nogroup-warn" function (:arguments ("form")) nil [56472 57606])
            ("byte-compile-arglist-warn" function (:arguments ("name" "arglist" "macrop")) nil [57701 60422])
            ("byte-compile-cl-functions" variable nil nil [60424 60499])
            ("byte-compile-find-cl-functions" function nil nil [60622 60964])
            ("byte-compile-cl-warn" function (:arguments ("form")) nil [60966 61927])
            ("byte-compile-print-syms" function (:arguments ("str1" "strn" "syms")) nil [61929 62565])
            ("byte-compile-warn-about-unresolved-functions" function nil nil [62752 63701])
            ("byte-compile--outbuffer" variable nil nil [63796 63828])
            ("byte-compile-close-variables" function (:arguments ("body")) nil [63830 65087])
            ("displaying-byte-compile-warnings" function (:arguments ("body")) nil [65089 66488])
            ("byte-force-recompile" function
               (:user-visible-flag t
                :arguments ("directory"))
                nil [66506 66778])
            ("byte-recompile-directory" function
               (:user-visible-flag t
                :arguments ("directory" "arg" "force"))
                nil [66795 70173])
            ("no-byte-compile" variable nil nil [70175 70391])
            ("byte-recompile-file" function
               (:user-visible-flag t
                :arguments ("filename" "force" "arg" "load"))
                nil [70490 72509])
            ("byte-compile-level" variable nil nil [72511 72596])
            ("byte-compile-file" function
               (:user-visible-flag t
                :arguments ("filename" "load"))
                nil [72613 79309])
            ("compile-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79358 80411])
            ("byte-compile-from-buffer" function (:arguments ("inbuffer")) nil [80413 83637])
            ("byte-compile-fix-header" function (:arguments ("_filename")) nil [83639 85295])
            ("byte-compile-insert-header" function (:arguments ("_filename" "outbuffer")) nil [85297 87320])
            ("byte-compile-output-file-form" function (:arguments ("form")) nil [87322 88534])
            ("byte-compile--for-effect" variable nil nil [88536 88569])
            ("byte-compile-output-docform" function (:arguments ("preface" "name" "info" "form" "specindex" "quoted")) nil [88571 93126])
            ("byte-compile-keep-pending" function (:arguments ("form" "handler")) nil [93128 93668])
            ("byte-compile-flush-pending" function nil nil [93670 94104])
            ("byte-compile-force-lexical-warnings" variable nil nil [94106 94154])
            ("byte-compile-preprocess" function (:arguments ("form" "_for-effect")) nil [94156 94754])
            ("byte-compile-toplevel-file-form" function (:arguments ("top-level-form")) nil [94796 95065])
            ("byte-compile-file-form" function (:arguments ("form")) nil [95104 95447])
            ("put" code nil nil [95610 95677])
            ("byte-compile-file-form-autoload" function (:arguments ("form")) nil [95678 97442])
            ("put" code nil nil [97444 97509])
            ("put" code nil nil [97510 97575])
            ("byte-compile--declare-var" function (:arguments ("sym")) nil [97577 98114])
            ("byte-compile-file-form-defvar" function (:arguments ("form")) nil [98116 98624])
            ("put" code nil nil [98626 98716])
            ("put" code nil nil [98717 98794])
            ("byte-compile-file-form-defvar-function" function (:arguments ("form")) nil [98796 98990])
            ("put" code nil nil [98992 99094])
            ("byte-compile-file-form-custom-declare-variable" function (:arguments ("form")) nil [99095 99293])
            ("put" code nil nil [99295 99360])
            ("byte-compile-file-form-require" function (:arguments ("form")) nil [99361 100699])
            ("put" code nil nil [100701 100762])
            ("put" code nil nil [100763 100824])
            ("put" code nil nil [100825 100886])
            ("byte-compile-file-form-progn" function (:arguments ("form")) nil [100887 101031])
            ("put" code nil nil [101033 101121])
            ("byte-compile-file-form-with-no-warnings" function (:arguments ("form")) nil [101122 101300])
            ("put" code nil nil [101409 101468])
            ("byte-compile-file-form-eval" function (:arguments ("form")) nil [101469 101618])
            ("byte-compile-file-form-defmumble" function (:arguments ("name" "macro" "arglist" "body" "rest")) nil [101620 107328])
            ("byte-compile-output-as-comment" function (:arguments ("exp" "quoted")) nil [107330 108808])
            ("byte-compile--reify-function" function (:arguments ("fun")) nil [108810 109764])
            ("byte-compile" function (:arguments ("form")) nil [109782 111171])
            ("byte-compile-sexp" function (:arguments ("sexp")) nil [111173 111365])
            ("byte-compile-check-lambda-list" function (:arguments ("list")) nil [111367 112144])
            ("byte-compile-arglist-vars" function (:arguments ("arglist")) nil [112147 112304])
            ("byte-compile-make-lambda-lexenv" function (:arguments ("args")) nil [112306 112657])
            ("byte-compile-make-args-desc" function (:arguments ("arglist")) nil [112659 113358])
            ("byte-compile-lambda" function (:arguments ("fun" "add-lambda" "reserved-csts")) nil [113361 117393])
            ("byte-compile-reserved-constants" variable nil nil [117395 117437])
            ("byte-compile-constants-vector" function nil nil [117439 119004])
            ("byte-compile-top-level" function (:arguments ("form" "for-effect" "output-type" "lexenv" "reserved-csts")) nil [119131 120634])
            ("byte-compile-out-toplevel" function (:arguments ("for-effect" "output-type")) nil [120636 125013])
            ("byte-compile-top-level-body" function (:arguments ("body" "for-effect")) nil [125064 125273])
            ("byte-compile-macroexpand-declare-function" function (:arguments ("fn" "file" "args")) nil [125331 126225])
            ("byte-compile-form" function (:arguments ("form" "for-effect")) nil [126953 130265])
            ("byte-compile-normal-call" function (:arguments ("form")) nil [130267 131119])
            ("byte-compile-inline-lapcode" function (:arguments ("lap" "end-depth")) nil [131391 132343])
            ("byte-compile-unfold-bcf" function (:arguments ("form")) nil [132345 134416])
            ("byte-compile-check-variable" function (:arguments ("var" "access-type")) nil [134418 135359])
            ("byte-compile-dynamic-variable-op" function (:arguments ("base-op" "var")) nil [135361 135588])
            ("byte-compile-dynamic-variable-bind" function (:arguments ("var")) nil [135590 135859])
            ("byte-compile-variable-ref" function (:arguments ("var")) nil [135861 136552])
            ("byte-compile-variable-set" function (:arguments ("var")) nil [136554 137248])
            ("byte-compile-get-constant" function (:arguments ("const")) nil [137250 137674])
            ("byte-compile-constant" function (:arguments ("const")) nil [137768 138025])
            ("byte-compile-push-constant" function (:arguments ("const")) nil [138142 138268])
            ("byte-defop-compiler" function (:arguments ("function" "compile-handler")) nil [138367 139841])
            ("byte-defop-compiler-1" function (:arguments ("function" "compile-handler")) nil [139843 139978])
            ("put" code nil nil [139982 140027])
            ("put" code nil nil [140028 140071])
            ("put" code nil nil [140072 140115])
            ("put" code nil nil [140116 140159])
            ("put" code nil nil [140160 140203])
            ("put" code nil nil [140204 140247])
            ("put" code nil nil [140248 140295])
            ("put" code nil nil [140296 140343])
            ("put" code nil nil [140344 140391])
            ("put" code nil nil [140392 140439])
            ("put" code nil nil [140440 140487])
            ("byte-defop-compiler" code nil nil [140489 140519])
            ("byte-defop-compiler" code nil nil [140564 140598])
            ("byte-defop-compiler" code nil nil [140599 140633])
            ("byte-defop-compiler" code nil nil [140634 140672])
            ("byte-defop-compiler" code nil nil [140673 140711])
            ("byte-defop-compiler" code nil nil [140712 140750])
            ("byte-defop-compiler" code nil nil [140751 140780])
            ("byte-defop-compiler" code nil nil [140781 140810])
            ("byte-defop-compiler" code nil nil [140811 140840])
            ("byte-defop-compiler" code nil nil [140841 140870])
            ("byte-defop-compiler" code nil nil [140871 140909])
            ("byte-defop-compiler" code nil nil [141012 141042])
            ("byte-defop-compiler" code nil nil [141043 141083])
            ("byte-defop-compiler" code nil nil [141084 141124])
            ("byte-defop-compiler" code nil nil [141125 141165])
            ("byte-defop-compiler" code nil nil [141166 141198])
            ("byte-defop-compiler" code nil nil [141199 141229])
            ("byte-defop-compiler" code nil nil [141230 141262])
            ("byte-defop-compiler" code nil nil [141263 141293])
            ("byte-defop-compiler" code nil nil [141294 141322])
            ("byte-defop-compiler" code nil nil [141323 141362])
            ("byte-defop-compiler" code nil nil [141363 141391])
            ("byte-defop-compiler" code nil nil [141392 141420])
            ("byte-defop-compiler" code nil nil [141421 141452])
            ("byte-defop-compiler" code nil nil [141453 141489])
            ("byte-defop-compiler" code nil nil [141490 141529])
            ("byte-defop-compiler" code nil nil [141530 141568])
            ("byte-defop-compiler" code nil nil [141569 141607])
            ("byte-defop-compiler" code nil nil [141608 141642])
            ("byte-defop-compiler" code nil nil [141643 141680])
            ("byte-defop-compiler" code nil nil [141681 141716])
            ("byte-defop-compiler" code nil nil [141765 141803])
            ("byte-defop-compiler" code nil nil [141804 141839])
            ("byte-defop-compiler" code nil nil [141840 141873])
            ("byte-defop-compiler" code nil nil [141874 141907])
            ("byte-defop-compiler" code nil nil [141908 141941])
            ("byte-defop-compiler" code nil nil [141942 141974])
            ("byte-defop-compiler" code nil nil [141975 142008])
            ("byte-defop-compiler" code nil nil [142009 142057])
            ("byte-defop-compiler" code nil nil [142058 142106])
            ("byte-defop-compiler" code nil nil [142107 142136])
            ("byte-defop-compiler" code nil nil [142137 142166])
            ("byte-defop-compiler" code nil nil [142167 142196])
            ("byte-defop-compiler" code nil nil [142197 142226])
            ("byte-defop-compiler" code nil nil [142227 142255])
            ("byte-defop-compiler" code nil nil [142256 142300])
            ("byte-defop-compiler" code nil nil [142301 142341])
            ("byte-defop-compiler" code nil nil [142342 142382])
            ("byte-defop-compiler" code nil nil [142383 142424])
            ("byte-defop-compiler" code nil nil [142425 142466])
            ("byte-defop-compiler" code nil nil [142467 142495])
            ("byte-defop-compiler" code nil nil [142496 142524])
            ("byte-defop-compiler" code nil nil [142525 142561])
            ("byte-defop-compiler" code nil nil [142562 142617])
            ("byte-defop-compiler" code nil nil [142618 142654])
            ("byte-defop-compiler" code nil nil [142655 142694])
            ("byte-defop-compiler" code nil nil [142695 142728])
            ("byte-defop-compiler" code nil nil [142729 142760])
            ("byte-defop-compiler" code nil nil [142761 142794])
            ("byte-defop-compiler" code nil nil [142795 142827])
            ("byte-defop-compiler" code nil nil [142828 142860])
            ("byte-defop-compiler" code nil nil [142861 142912])
            ("byte-defop-compiler" code nil nil [142913 142964])
            ("byte-defop-compiler" code nil nil [142965 142995])
            ("byte-defop-compiler" code nil nil [142996 143027])
            ("byte-defop-compiler" code nil nil [143028 143056])
            ("byte-defop-compiler" code nil nil [143057 143088])
            ("byte-defop-compiler" code nil nil [143089 143118])
            ("byte-defop-compiler" code nil nil [143119 143163])
            ("byte-defop-compiler" code nil nil [143164 143208])
            ("byte-defop-compiler" code nil nil [143209 143240])
            ("byte-defop-compiler" code nil nil [143241 143272])
            ("byte-defop-compiler" code nil nil [143273 143313])
            ("byte-defop-compiler" code nil nil [143314 143351])
            ("byte-defop-compiler" code nil nil [143352 143392])
            ("byte-defop-compiler" code nil nil [143393 143429])
            ("byte-defop-compiler" code nil nil [143430 143459])
            ("byte-defop-compiler" code nil nil [143461 143512])
            ("byte-defop-compiler" code nil nil [143513 143564])
            ("byte-defop-compiler" code nil nil [143565 143625])
            ("byte-defop-compiler" code nil nil [143626 143686])
            ("byte-defop-compiler-1" code nil nil [143733 143786])
            ("byte-compile-subr-wrong-args" function (:arguments ("form" "n")) nil [143790 144115])
            ("byte-compile-no-args" function (:arguments ("form")) nil [144117 144289])
            ("byte-compile-one-arg" function (:arguments ("form")) nil [144291 144521])
            ("byte-compile-two-args" function (:arguments ("form")) nil [144523 144792])
            ("byte-compile-and-folded" function (:arguments ("form")) nil [144794 145293])
            ("byte-compile-three-args" function (:arguments ("form")) nil [145295 145603])
            ("byte-compile-zero-or-one-arg" function (:arguments ("form")) nil [145605 145837])
            ("byte-compile-one-or-two-args" function (:arguments ("form")) nil [145839 146073])
            ("byte-compile-two-or-three-args" function (:arguments ("form")) nil [146075 146315])
            ("byte-compile-noop" function (:arguments ("_form")) nil [146317 146380])
            ("byte-compile-discard" function (:arguments ("num" "preserve-tos")) nil [146382 147309])
            ("byte-compile-stack-ref" function (:arguments ("stack-pos")) nil [147311 147636])
            ("byte-compile-stack-set" function (:arguments ("stack-pos")) nil [147638 147829])
            ("byte-defop-compiler-1" code nil nil [147831 147902])
            ("byte-defop-compiler-1" code nil nil [147903 147978])
            ("byte-compile-make-closure" function (:arguments ("form")) nil [147980 149017])
            ("byte-compile-get-closed-var" function (:arguments ("form")) nil [149019 149241])
            ("byte-compile-associative" function (:arguments ("form")) nil [149561 150237])
            ("byte-defop-compiler" code nil nil [150278 150311])
            ("byte-defop-compiler" code nil nil [150312 150347])
            ("byte-defop-compiler" code nil nil [150348 150383])
            ("byte-defop-compiler" code nil nil [150384 150410])
            ("byte-defop-compiler" code nil nil [150411 150439])
            ("byte-defop-compiler" code nil nil [150440 150466])
            ("byte-defop-compiler" code nil nil [150467 150545])
            ("byte-defop-compiler" code nil nil [150546 150577])
            ("byte-defop-compiler" code nil nil [150578 150606])
            ("byte-defop-compiler-1" code nil nil [150607 150666])
            ("byte-defop-compiler-1" code nil nil [150667 150711])
            ("byte-defop-compiler" code nil nil [150712 150763])
            ("byte-defop-compiler" code nil nil [150764 150791])
            ("byte-compile-char-before" function (:arguments ("form")) nil [150857 151244])
            ("byte-compile-backward-char" function (:arguments ("form")) nil [151369 151740])
            ("byte-compile-backward-word" function (:arguments ("form")) nil [151742 152113])
            ("byte-compile-list" function (:arguments ("form")) nil [152115 152534])
            ("byte-compile-concat" function (:arguments ("form")) nil [152536 153034])
            ("byte-compile-minus" function (:arguments ("form")) nil [153036 153543])
            ("byte-compile-quo" function (:arguments ("form")) nil [153545 153891])
            ("byte-compile-nconc" function (:arguments ("form")) nil [153893 154300])
            ("byte-compile-fset" function (:arguments ("form")) nil [154302 155068])
            ("byte-compile-function-form" function (:arguments ("form")) nil [155263 155636])
            ("byte-compile-indent-to" function (:arguments ("form")) nil [155638 155947])
            ("byte-compile-insert" function (:arguments ("form")) nil [155949 156541])
            ("byte-defop-compiler-1" code nil nil [156545 156573])
            ("byte-defop-compiler-1" code nil nil [156574 156610])
            ("byte-defop-compiler-1" code nil nil [156611 156640])
            ("byte-compile-setq" function (:arguments ("form")) nil [156642 157483])
            ("byte-compile-setq-default" function (:arguments ("form")) nil [157485 158210])
            ("byte-defop-compiler-1" code nil nil [158212 158247])
            ("byte-compile-set-default" function (:arguments ("form")) nil [158248 158654])
            ("byte-compile-quote" function (:arguments ("form")) nil [158656 158732])
            ("byte-compile-body" function (:arguments ("body" "for-effect")) nil [158759 158941])
            ("byte-compile-body-do-effect" function (:arguments ("body")) nil [158943 159078])
            ("byte-compile-form-do-effect" function (:arguments ("form")) nil [159080 159215])
            ("byte-defop-compiler-1" code nil nil [159217 159266])
            ("byte-defop-compiler-1" code nil nil [159267 159296])
            ("byte-defop-compiler-1" code nil nil [159297 159326])
            ("byte-defop-compiler-1" code nil nil [159327 159356])
            ("byte-defop-compiler-1" code nil nil [159357 159383])
            ("byte-defop-compiler-1" code nil nil [159384 159412])
            ("byte-defop-compiler-1" code nil nil [159413 159440])
            ("byte-defop-compiler-1" code nil nil [159441 159467])
            ("byte-defop-compiler-1" code nil nil [159468 159497])
            ("byte-defop-compiler-1" code nil nil [159498 159529])
            ("byte-defop-compiler-1" code nil nil [159530 159557])
            ("byte-defop-compiler-1" code nil nil [159558 159603])
            ("byte-compile-progn" function (:arguments ("form")) nil [159605 159681])
            ("byte-compile-prog1" function (:arguments ("form")) nil [159683 159806])
            ("byte-compile-prog2" function (:arguments ("form")) nil [159808 159970])
            ("byte-compile-goto-if" function (:arguments ("cond" "discard" "tag")) nil [159972 160202])
            ("byte-compile-find-bound-condition" function (:arguments ("condition-param" "pred-list" "only-if-not-present")) nil [160331 161110])
            ("byte-compile-maybe-guarded" function (:arguments ("condition" "body")) nil [161112 162994])
            ("byte-compile-if" function (:arguments ("form")) nil [162996 163982])
            ("byte-compile-cond" function (:arguments ("clauses")) nil [163984 165193])
            ("byte-compile-and" function (:arguments ("form")) nil [165195 165391])
            ("byte-compile-and-recursion" function (:arguments ("rest" "failtag")) nil [165510 165856])
            ("byte-compile-or" function (:arguments ("form")) nil [165858 166052])
            ("byte-compile-or-recursion" function (:arguments ("rest" "wintag")) nil [166170 166520])
            ("byte-compile-while" function (:arguments ("form")) nil [166522 166932])
            ("byte-compile-funcall" function (:arguments ("form")) nil [166934 167333])
            ("byte-compile-push-binding-init" function (:arguments ("clause")) nil [167353 167845])
            ("byte-compile-not-lexical-var-p" function (:arguments ("var")) nil [167847 168042])
            ("byte-compile-bind" function (:arguments ("var" "init-lexenv")) nil [168044 169783])
            ("byte-compile-unbind" function (:arguments ("clauses" "init-lexenv" "preserve-body-value")) nil [169785 170928])
            ("byte-compile-let" function (:arguments ("form")) nil [170930 172398])
            ("byte-defop-compiler-1" code nil nil [172403 172450])
            ("byte-defop-compiler-1" code nil nil [172451 172500])
            ("byte-defop-compiler-1" code nil nil [172501 172552])
            ("put" code nil nil [172554 172591])
            ("put" code nil nil [172592 172635])
            ("put" code nil nil [172636 172681])
            ("byte-compile-negated" function (:arguments ("form")) nil [172683 172789])
            ("byte-compile-negation-optimizer" function (:arguments ("form")) nil [172859 173225])
            ("byte-defop-compiler-1" code nil nil [173271 173300])
            ("byte-defop-compiler-1" code nil nil [173301 173339])
            ("byte-defop-compiler-1" code nil nil [173340 173378])
            ("byte-defop-compiler-1" code nil nil [173379 173417])
            ("byte-defop-compiler-1" code nil nil [173418 173461])
            ("byte-defop-compiler-1" code nil nil [173462 173502])
            ("byte-compile--use-old-handlers" variable nil nil [173660 173760])
            ("byte-compile-catch" function (:arguments ("form")) nil [173762 174360])
            ("byte-compile-unwind-protect" function (:arguments ("form")) nil [174362 174871])
            ("byte-compile-condition-case" function (:arguments ("form")) nil [174873 175043])
            ("byte-compile-condition-case--old" function (:arguments ("form")) nil [175045 177414])
            ("byte-compile-condition-case--new" function (:arguments ("form")) nil [177416 179777])
            ("byte-compile-save-excursion" function (:arguments ("form")) nil [179779 180162])
            ("byte-compile-save-restriction" function (:arguments ("form")) nil [180164 180333])
            ("byte-compile-save-current-buffer" function (:arguments ("form")) nil [180335 180510])
            ("byte-defop-compiler-1" code nil nil [180544 180574])
            ("byte-defop-compiler-1" code nil nil [180575 180627])
            ("byte-defop-compiler-1" code nil nil [180628 180660])
            ("byte-defop-compiler-1" code nil nil [180661 180716])
            ("byte-defop-compiler-1" code nil nil [181064 181110])
            ("byte-compile-make-obsolete-variable" function (:arguments ("form")) nil [181111 181310])
            ("byte-compile-tmp-var" variable
               (:constant-flag t
                :default-value (make-symbol "def-tmp-var"))
                nil [181312 181371])
            ("byte-compile-defvar" function (:arguments ("form")) nil [181373 182953])
            ("byte-compile-autoload" function (:arguments ("form")) nil [182955 183429])
            ("byte-compile-lambda-form" function (:arguments ("_form")) nil [183540 183679])
            ("put" code nil nil [183757 183824])
            ("byte-compile-file-form-defalias" function (:arguments ("form")) nil [183862 186745])
            ("byte-defop-compiler-1" code nil nil [186747 186812])
            ("byte-compile-no-warnings" function (:arguments ("form")) nil [186813 186933])
            ("byte-defop-compiler-1" code nil nil [186988 187101])
            ("byte-compile-make-variable-buffer-local" function (:arguments ("form")) nil [187102 187396])
            ("put" code nil nil [187397 187500])
            ("byte-compile-form-make-variable-buffer-local" function (:arguments ("form")) nil [187501 187621])
            ("byte-compile-make-tag" function nil nil [187808 187914])
            ("byte-compile-out-tag" function (:arguments ("tag")) nil [187917 188322])
            ("byte-compile-goto" function (:arguments ("opcode" "tag")) nil [188324 188619])
            ("byte-compile-stack-adjustment" function (:arguments ("op" "operand")) nil [188621 189303])
            ("byte-compile-out" function (:arguments ("op" "operand")) nil [189305 189837])
            ("byte-compile-annotate-call-tree" function (:arguments ("form")) nil [189861 190656])
            ("display-call-tree" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [190781 195620])
            ("batch-byte-compile-if-not-done" function nil nil [195639 195865])
            ("batch-byte-compile" function (:arguments ("noforce")) nil [195945 197745])
            ("batch-byte-compile-file" function (:arguments ("file")) nil [197747 198729])
            ("byte-compile-refresh-preloaded" function nil nil [198731 200112])
            ("batch-byte-recompile-directory" function (:arguments ("arg")) nil [200129 201043])
            ("put" code nil nil [201072 201366])
            ("byte-compile" package nil nil [201368 201391])
            ("bytecomp" package nil nil [201392 201411])
            ("byte-code-meter" variable nil nil [201466 201490])
            ("byte-compile-report-ops" function nil nil [201491 202323])
            ("or" code nil nil [202505 203095])
            ("run-hooks" code nil nil [203104 203135]))          
      :file "bytecomp.el.gz"
      :pointmax 203163
      :fsize 52699
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax '((close-paren 203101 . 203102) (symbol 203098 . 203101) (symbol 202485 . 202502) (open-paren 202484 . 202485)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defun-prompt-regexp" variable nil nil [1097 1346])
            ("make-variable-buffer-local" code nil nil [1347 1396])
            ("parens-require-spaces" variable (:default-value t) nil [1398 1587])
            ("forward-sexp-function" variable nil nil [1589 2090])
            ("forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2092 2822])
            ("backward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2824 3182])
            ("mark-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [3184 4009])
            ("forward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4011 4477])
            ("backward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4479 4908])
            ("down-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4910 5456])
            ("backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg" "escape-strings" "no-syntax-crossing"))
                nil [5458 6199])
            ("up-list" function
               (:user-visible-flag t
                :arguments ("arg" "escape-strings" "no-syntax-crossing"))
                nil [6201 9554])
            ("kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9556 9907])
            ("backward-kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9909 10208])
            ("kill-backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10226 10724])
            ("beginning-of-defun-function" variable nil nil [10727 11296])
            ("beginning-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11298 12624])
            ("beginning-of-defun-raw" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12626 15979])
            ("end-of-defun-function" variable (:default-value (lambda nil (forward-sexp 1))) nil [15981 16349])
            ("buffer-end" function (:arguments ("arg")) nil [16351 16582])
            ("end-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16584 18890])
            ("mark-defun" function
               (:user-visible-flag t
                :arguments ("allow-extend"))
                nil [18892 20215])
            ("narrow-to-defun-include-comments" variable nil nil [20217 20341])
            ("narrow-to-defun" function
               (:user-visible-flag t
                :arguments ("include-comments"))
                nil [20343 22435])
            ("insert-pair-alist" variable (:default-value (quote ((40 41) (91 93) (123 125) (60 62) (34 34) (39 39) (96 39)))) nil [22437 22982])
            ("insert-pair" function
               (:user-visible-flag t
                :arguments ("arg" "open" "close"))
                nil [22984 25253])
            ("insert-parentheses" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25255 25819])
            ("delete-pair" function (:user-visible-flag t) nil [25821 26001])
            ("raise-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [26003 26459])
            ("move-past-close-and-reindent" function (:user-visible-flag t) nil [26461 27458])
            ("check-parens" function (:user-visible-flag t) nil [27460 28373])
            ("field-complete" function (:arguments ("table" "predicate")) nil [28376 28920])
            ("lisp-complete-symbol" function (:arguments ("_predicate")) nil [28922 29909]))          
      :file "lisp.el.gz"
      :pointmax 29933
      :fsize 8391
      :lastmodtime '(22387 39327 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subr-x" include nil nil [6315 6332])
            ("cl-lib" include nil nil [6353 6370])
            ("epg" include nil nil [6391 6405])
            ("seq" include nil nil [6433 6447])
            ("tabulated-list" include nil nil [6449 6474])
            ("macroexp" include nil nil [6475 6494])
            ("package" customgroup (:user-visible-flag t) nil [6496 6596])
            ("package-enable-at-startup" variable (:default-value t) nil [6641 7066])
            ("package-load-list" variable (:default-value (quote (all))) nil [7068 8164])
            ("package-archives" variable (:default-value (quote (("gnu" . "http://elpa.gnu.org/packages/")))) nil [8166 8899])
            ("package-menu-hide-low-priority" variable (:default-value (quote archive)) nil [8901 9883])
            ("package-archive-priorities" variable nil nil [9885 10505])
            ("package-pinned-packages" variable nil nil [10507 11618])
            ("package-user-dir" variable (:default-value (locate-user-emacs-file "elpa")) nil [11620 11922])
            ("package-directory-list" variable (:default-value (let (result) (dolist (f load-path) (and (stringp f) (equal (file-name-nondirectory f) "site-lisp") (push (expand-file-name "elpa" f) result))) (nreverse result))) nil [11924 12515])
            ("declare-function" code nil nil [12517 12616])
            ("package-check-signature" variable (:default-value (if (and (require (quote epg-config)) (epg-find-configuration (quote OpenPGP))) (quote allow-unsigned))) nil [12618 13175])
            ("package-unsigned-archives" variable nil nil [13177 13361])
            ("package-selected-packages" variable nil nil [13363 13920])
            ("package-menu-async" variable (:default-value t) nil [13922 14196])
            ("package--default-summary" variable (:default-value "No description available.") nil [14591 14652])
            ("cl-defstruct" code nil nil [14654 17422])
            ("package--from-builtin" function (:arguments ("bi-desc")) nil [17424 17678])
            ("package-version-join" function (:arguments ("vlist")) nil [17698 18830])
            ("package-desc-full-name" function (:arguments ("pkg-desc")) nil [18832 18996])
            ("package-desc-suffix" function (:arguments ("pkg-desc")) nil [18998 19178])
            ("package-desc--keywords" function (:arguments ("pkg-desc")) nil [19180 19378])
            ("package-desc-priority" function (:arguments ("p")) nil [19380 19532])
            ("cl-defstruct" code nil nil [19608 19767])
            ("package--builtins" variable nil nil [20085 20431])
            ("put" code nil nil [20432 20480])
            ("package-alist" variable nil nil [20482 20915])
            ("put" code nil nil [20916 20960])
            ("package-activated-list" variable nil nil [20962 21117])
            ("put" code nil nil [21118 21171])
            ("package-process-define-package" function (:arguments ("exp")) nil [21368 22231])
            ("package-load-descriptor" function (:arguments ("pkg-dir")) nil [22233 22994])
            ("package-load-all-descriptors" function nil nil [22996 23749])
            ("define-package" function (:arguments ("_name-string" "_version-string" "_docstring" "_requirements" "_extra-properties")) nil [23751 24399])
            ("package-disabled-p" function (:arguments ("pkg-name" "version")) nil [24490 25219])
            ("package-built-in-p" function (:arguments ("package" "min-version")) nil [25221 25825])
            ("package--autoloads-file-name" function (:arguments ("pkg-desc")) nil [25827 26087])
            ("package--activate-autoloads-and-load-path" function (:arguments ("pkg-desc")) nil [26089 26779])
            ("Info-directory-list" variable nil nil [26781 26809])
            ("declare-function" code nil nil [26810 26854])
            ("package--load-files-for-activation" function (:arguments ("pkg-desc" "reload")) nil [26856 28063])
            ("package-activate-1" function (:arguments ("pkg-desc" "reload" "deps")) nil [28065 29426])
            ("declare-function" code nil nil [29428 29486])
            ("package--list-loaded-files" function (:arguments ("dir")) nil [29488 31238])
            ("package-activate" function (:arguments ("package" "force")) nil [31434 32442])
            ("tar-parse-info" variable nil nil [32713 32736])
            ("declare-function" code nil nil [32737 32786])
            ("declare-function" code nil nil [32787 32847])
            ("declare-function" code nil nil [32848 32913])
            ("package-untar-buffer" function (:arguments ("dir")) nil [32915 33797])
            ("package--alist-to-plist-args" function (:arguments ("alist")) nil [33799 33973])
            ("package-unpack" function (:arguments ("pkg-desc")) nil [33974 36484])
            ("package-generate-description-file" function (:arguments ("pkg-desc" "pkg-file")) nil [36486 37553])
            ("package-autoload-ensure-default-file" function (:arguments ("file")) nil [37624 38426])
            ("generated-autoload-file" variable nil nil [38428 38460])
            ("version-control" variable nil nil [38461 38485])
            ("package-generate-autoloads" function (:arguments ("name" "pkg-dir")) nil [38487 39096])
            ("package--make-autoloads-and-stuff" function (:arguments ("pkg-desc" "pkg-dir")) nil [39098 39590])
            ("warning-minimum-level" variable nil nil [39609 39639])
            ("package--compile" function (:arguments ("pkg-desc")) nil [39640 39977])
            ("package-read-from-string" function (:arguments ("str")) nil [40022 40563])
            ("package--prepare-dependencies" function (:arguments ("deps")) nil [40565 41257])
            ("declare-function" code nil nil [41259 41307])
            ("declare-function" code nil nil [41308 41366])
            ("declare-function" code nil nil [41367 41427])
            ("declare-function" code nil nil [41428 41485])
            ("package-buffer-info" function nil nil [41487 43162])
            ("package--read-pkg-desc" function (:arguments ("kind")) nil [43164 43683])
            ("declare-function" code nil nil [43685 43745])
            ("declare-function" code nil nil [43746 43801])
            ("package-tar-file-info" function nil nil [43803 44522])
            ("package-dir-info" function nil nil [44524 45398])
            ("package--write-file-no-coding" function (:arguments ("file-name")) nil [45523 45690])
            ("declare-function" code nil nil [45692 45750])
            ("package--archive-file-exists-p" function (:arguments ("location" "file")) nil [45752 46033])
            ("declare-function" code nil nil [46035 46284])
            ("declare-function" code nil nil [46285 46420])
            ("declare-function" code nil nil [46421 46483])
            ("declare-function" code nil nil [46484 46543])
            ("declare-function" code nil nil [46544 46604])
            ("package--display-verify-error" function (:arguments ("context" "sig-file")) nil [46606 47251])
            ("package--with-work-buffer" function (:arguments ("location" "file" "body")) nil [47253 48203])
            ("cl-defmacro" code nil nil [48205 51669])
            ("define-error" code nil nil [51671 51729])
            ("package--check-signature-content" function (:arguments ("content" "string" "sig-file")) nil [51731 53169])
            ("package--check-signature" function (:arguments ("location" "file" "string" "async" "callback" "unwind")) nil [53171 55022])
            ("package-archive-version" variable
               (:constant-flag t
                :default-value 1)
                nil [55414 55586])
            ("package-archive-contents" variable nil nil [55651 55847])
            ("put" code nil nil [55848 55903])
            ("package--compatibility-table" variable nil nil [55905 56456])
            ("package--build-compatibility-table" function nil nil [56458 56782])
            ("package--add-to-compatibility-table" function (:arguments ("pkg")) nil [56784 57396])
            ("cl-defstruct" code nil nil [57560 57773])
            ("package--append-to-alist" function (:arguments ("pkg-desc" "alist")) nil [57775 58729])
            ("package--add-to-archive-contents" function (:arguments ("package" "archive")) nil [58731 59925])
            ("package--read-archive-file" function (:arguments ("file")) nil [59927 60610])
            ("package-read-archive-contents" function (:arguments ("archive")) nil [60612 61151])
            ("package--old-archive-priorities" variable nil nil [61153 61451])
            ("package-read-all-archive-contents" function nil nil [61453 61784])
            ("package--initialized" variable nil nil [61968 62001])
            ("package--init-file-ensured" variable nil nil [62003 62100])
            ("package-initialize" function
               (:user-visible-flag t
                :arguments ("no-activate"))
                nil [62117 63459])
            ("package--downloads-in-progress" variable nil nil [63636 63727])
            ("declare-function" code nil nil [63729 63794])
            ("package-import-keyring" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [63811 64347])
            ("package--post-download-archives-hook" variable nil nil [64349 64559])
            ("put" code nil nil [64560 64627])
            ("package--update-downloads-in-progress" function (:arguments ("entry")) nil [64629 65291])
            ("package--download-one-archive" function (:arguments ("archive" "file" "async")) nil [65293 67059])
            ("package--download-and-read-archives" function (:arguments ("async")) nil [67061 67760])
            ("package-refresh-contents" function
               (:user-visible-flag t
                :arguments ("async"))
                nil [67777 68685])
            ("package-compute-transaction" function (:arguments ("packages" "requirements" "seen")) nil [68944 73155])
            ("package--find-non-dependencies" function nil nil [73157 73719])
            ("package--save-selected-packages" function (:arguments ("value")) nil [73721 74113])
            ("package--user-selected-p" function (:arguments ("pkg")) nil [74115 74484])
            ("package--get-deps" function (:arguments ("pkg" "only")) nil [74486 75223])
            ("package--removable-packages" function nil nil [75225 75785])
            ("package--used-elsewhere-p" function (:arguments ("pkg-desc" "pkg-list" "all")) nil [75787 76661])
            ("package--sort-deps-in-alist" function (:arguments ("package" "only")) nil [76663 77319])
            ("package--sort-by-dependence" function (:arguments ("package-list")) nil [77321 78171])
            ("package-archive-base" function (:arguments ("desc")) nil [78565 78713])
            ("package-install-from-archive" function (:arguments ("pkg-desc")) nil [78715 80932])
            ("package-installed-p" function (:arguments ("package" "min-version")) nil [80934 81714])
            ("package-download-transaction" function (:arguments ("packages")) nil [81716 82057])
            ("package--ensure-init-file" function nil nil [82059 84719])
            ("package-install" function
               (:user-visible-flag t
                :arguments ("pkg" "dont-select"))
                nil [84736 86560])
            ("package-strip-rcs-id" function (:arguments ("str")) nil [86562 86911])
            ("declare-function" code nil nil [86913 86971])
            ("package-install-from-buffer" function (:user-visible-flag t) nil [86988 88487])
            ("package-install-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [88504 88951])
            ("package-install-selected-packages" function (:user-visible-flag t) nil [88968 90244])
            ("package--newest-p" function (:arguments ("pkg")) nil [90269 90432])
            ("package-delete" function
               (:user-visible-flag t
                :arguments ("pkg-desc" "force" "nosave"))
                nil [90434 93657])
            ("package-reinstall" function
               (:user-visible-flag t
                :arguments ("pkg"))
                nil [93674 94168])
            ("package-autoremove" function (:user-visible-flag t) nil [94185 95188])
            ("describe-package" function
               (:user-visible-flag t
                :arguments ("package"))
                nil [95241 96680])
            ("package-help-section-name" variable
               (:default-value (quote ((t :inherit (bold font-lock-function-name-face))))
                :type "face")
                nil [96682 96852])
            ("package--print-help-section" function (:arguments ("name" "strings")) nil [96854 97301])
            ("declare-function" code nil nil [97303 97363])
            ("describe-package-1" function (:arguments ("pkg")) nil [97365 106375])
            ("package-install-button-action" function (:arguments ("button")) nil [106377 106707])
            ("package-delete-button-action" function (:arguments ("button")) nil [106709 107032])
            ("package-keyword-button-action" function (:arguments ("button")) nil [107034 107194])
            ("package-make-button" function (:arguments ("text" "props")) nil [107196 107665])
            ("package-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map "" (quote package-menu-describe-package)) (define-key map "u" (quote package-menu-mark-unmark)) (define-key map "" (quote package-menu-backup-unmark)) (define-key map "d" (quote package-menu-mark-delete)) (define-key map "i" (quote package-menu-mark-install)) (define-key map "U" (quote package-menu-mark-upgrades)) (define-key map "r" (quote package-menu-refresh)) (define-key map "f" (quote package-menu-filter)) (define-key map "~" (quote package-menu-mark-obsolete-for-deletion)) (define-key map "x" (quote package-menu-execute)) (define-key map "h" (quote package-menu-quick-help)) (define-key map "H" (function package-menu-hide-package)) (define-key map "?" (quote package-menu-describe-package)) (define-key map "(" (function package-menu-toggle-hiding)) map)) nil [107694 108612])
            ("easy-menu-define" code nil nil [108614 110426])
            ("package-menu--new-package-list" variable nil nil [110428 110547])
            ("package-menu--transaction-status" variable nil nil [110549 110647])
            ("define-derived-mode" code nil nil [110649 111581])
            ("package--push" function (:arguments ("pkg-desc" "status" "listname")) nil [111583 111951])
            ("package-list-unversioned" variable nil nil [111953 112067])
            ("package-list-unsigned" variable nil nil [112069 112184])
            ("package--emacs-version-list" variable (:default-value (version-to-list emacs-version)) nil [112186 112286])
            ("package--incompatible-p" function (:arguments ("pkg" "shallow")) nil [112288 113456])
            ("package-desc-status" function (:arguments ("pkg-desc")) nil [113458 115120])
            ("package-menu--hide-packages" variable (:default-value t) nil [115122 115346])
            ("package-menu-toggle-hiding" function (:user-visible-flag t) nil [115348 115837])
            ("package--remove-hidden" function (:arguments ("pkg-list")) nil [115839 117813])
            ("package-hidden-regexps" variable nil nil [117815 118243])
            ("package-menu--refresh" function (:arguments ("packages" "keywords")) nil [118245 120407])
            ("package-all-keywords" function nil nil [120409 120672])
            ("package--mapc" function (:arguments ("function" "packages")) nil [120674 121933])
            ("package--has-keyword-p" function (:arguments ("desc" "keywords")) nil [121935 122525])
            ("package-menu--generate" function (:arguments ("remember-pos" "packages" "keywords")) nil [122527 123327])
            ("package-menu--print-info" function (:arguments ("pkg")) nil [123329 123562])
            ("make-obsolete" code nil nil [123563 123659])
            ("package-name" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [123686 123801])
            ("package-description" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [123803 123944])
            ("package-status-built-in" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [124022 124176])
            ("package-status-external" variable
               (:default-value (quote ((t :inherit package-status-built-in)))
                :type "face")
                nil [124178 124333])
            ("package-status-available" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [124335 124476])
            ("package-status-new" variable
               (:default-value (quote ((t :inherit (bold package-status-available))))
                :type "face")
                nil [124478 124631])
            ("package-status-held" variable
               (:default-value (quote ((t :inherit font-lock-constant-face)))
                :type "face")
                nil [124633 124780])
            ("package-status-disabled" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [124782 124936])
            ("package-status-installed" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [124938 125094])
            ("package-status-dependency" variable
               (:default-value (quote ((t :inherit package-status-installed)))
                :type "face")
                nil [125096 125256])
            ("package-status-unsigned" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [125258 125412])
            ("package-status-incompat" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [125414 125568])
            ("package-status-avail-obso" variable
               (:default-value (quote ((t :inherit package-status-incompat)))
                :type "face")
                nil [125570 125729])
            ("package-menu--print-info-simple" function (:arguments ("pkg")) nil [125759 127455])
            ("package-menu--old-archive-contents" variable nil nil [127457 127562])
            ("package-menu-refresh" function (:user-visible-flag t) nil [127564 128036])
            ("package-menu-hide-package" function (:user-visible-flag t) nil [128038 129200])
            ("package-menu-describe-package" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [129202 129578])
            ("package-menu-mark-delete" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [129606 129896])
            ("package-menu-mark-install" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [129898 130176])
            ("package-menu-mark-unmark" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [130178 130340])
            ("package-menu-backup-unmark" function (:user-visible-flag t) nil [130342 130504])
            ("package-menu-mark-obsolete-for-deletion" function (:user-visible-flag t) nil [130506 130811])
            ("package--quick-help-keys" variable (:default-value (quote (("install," "delete," "unmark," ("execute" . 1)) ("next," "previous") ("Hide-package," "(-toggle-hidden") ("refresh-contents," "g-redisplay," "filter," "help")))) nil [130813 131023])
            ("package--prettify-quick-help-key" function (:arguments ("desc")) nil [131025 131526])
            ("package-menu-quick-help" function (:user-visible-flag t) nil [131528 131806])
            ("define-obsolete-function-alias" code nil nil [131808 131910])
            ("package-menu-get-status" function nil nil [131912 132100])
            ("package-archive-priority" function (:arguments ("archive")) nil [132102 132363])
            ("package-desc-priority-version" function (:arguments ("pkg-desc")) nil [132365 132703])
            ("package-menu--find-upgrades" function nil nil [132705 133706])
            ("package-menu--mark-upgrades-pending" variable nil nil [133708 133818])
            ("package-menu--mark-upgrades-1" function nil nil [133820 134818])
            ("package-menu-mark-upgrades" function (:user-visible-flag t) nil [134820 135472])
            ("package-menu--list-to-prompt" function (:arguments ("packages")) nil [135474 136056])
            ("package-menu--prompt-transaction-p" function (:arguments ("delete" "install" "upgrade")) nil [136058 136648])
            ("package-menu--partition-transaction" function (:arguments ("install" "delete")) nil [136650 137353])
            ("package-menu--perform-transaction" function (:arguments ("install-list" "delete-list")) nil [137355 138455])
            ("package--update-selected-packages" function (:arguments ("add" "remove")) nil [138457 139125])
            ("package-menu-execute" function
               (:user-visible-flag t
                :arguments ("noquery"))
                nil [139127 141471])
            ("package-menu--version-predicate" function (:arguments ("A" "B")) nil [141473 141707])
            ("package-menu--status-predicate" function (:arguments ("A" "B")) nil [141709 142808])
            ("package-menu--description-predicate" function (:arguments ("A" "B")) nil [142810 143013])
            ("package-menu--name-predicate" function (:arguments ("A" "B")) nil [143015 143164])
            ("package-menu--archive-predicate" function (:arguments ("A" "B")) nil [143166 143312])
            ("package-menu--populate-new-package-list" function nil nil [143314 143778])
            ("package-menu--find-and-notify-upgrades" function nil nil [143780 144189])
            ("package-menu--post-refresh" function nil nil [144191 144919])
            ("package-menu--mark-or-notify-upgrades" function nil nil [144921 145542])
            ("list-packages" function
               (:user-visible-flag t
                :arguments ("no-fetch"))
                nil [145559 146741])
            ("defalias" code nil nil [146758 146806])
            ("package-show-package-list" function
               (:user-visible-flag t
                :arguments ("packages" "keywords"))
                nil [146829 147500])
            ("package-menu-filter" function
               (:user-visible-flag t
                :arguments ("keyword"))
                nil [147615 148241])
            ("package-list-packages-no-fetch" function (:user-visible-flag t) nil [148243 148469])
            ("package" package nil nil [148471 148489]))          
      :file "package.el.gz"
      :pointmax 148516
      :fsize 37935
      :lastmodtime '(22421 48078 0 0)
      :unmatched-syntax '((close-paren 6405 . 6406) (symbol 6373 . 6390) (open-paren 6372 . 6373) (close-paren 6370 . 6371) (symbol 6335 . 6352) (open-paren 6334 . 6335) (close-paren 6332 . 6333) (symbol 6297 . 6314) (open-paren 6296 . 6297))))
  :file "!usr!local!Cellar!emacs!25.1!share!emacs!25.1!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
