;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2373 2390])
            ("newcomment" include nil nil [2391 2412])
            ("pcase" include nil nil [2413 2429])
            ("unless" code nil nil [2496 2965])
            ("company" customgroup (:user-visible-flag t) nil [2968 3096])
            ("company-tooltip" variable
               (:default-value (quote ((default :foreground "black") (((class color) (min-colors 88) (background light)) (:background "cornsilk")) (((class color) (min-colors 88) (background dark)) (:background "yellow"))))
                :type "face")
                nil [3098 3360])
            ("company-tooltip-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "light blue")) (((class color) (min-colors 88) (background dark)) (:background "orange1")) (t (:background "green"))))
                :type "face")
                nil [3362 3650])
            ("company-tooltip-search" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [3652 3770])
            ("company-tooltip-search-selection" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [3772 3921])
            ("company-tooltip-mouse" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [3923 4040])
            ("company-tooltip-common" variable
               (:default-value (quote ((((background light)) :foreground "darkred") (((background dark)) :foreground "red")))
                :type "face")
                nil [4042 4234])
            ("company-tooltip-common-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-common)))
                :type "face")
                nil [4236 4390])
            ("company-tooltip-annotation" variable
               (:default-value (quote ((((background light)) :foreground "firebrick4") (((background dark)) :foreground "red4")))
                :type "face")
                nil [4392 4596])
            ("company-tooltip-annotation-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-annotation)))
                :type "face")
                nil [4598 4764])
            ("company-scrollbar-fg" variable
               (:default-value (quote ((((background light)) :background "darkred") (((background dark)) :background "red")))
                :type "face")
                nil [4766 4947])
            ("company-scrollbar-bg" variable
               (:default-value (quote ((((background light)) :background "wheat") (((background dark)) :background "gold")))
                :type "face")
                nil [4949 5134])
            ("company-preview" variable
               (:default-value (quote ((((background light)) :inherit (company-tooltip-selection company-tooltip)) (((background dark)) :background "blue4" :foreground "wheat")))
                :type "face")
                nil [5136 5365])
            ("company-preview-common" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :foreground "red")))
                :type "face")
                nil [5367 5614])
            ("company-preview-search" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :background "blue1")))
                :type "face")
                nil [5616 5867])
            ("company-echo" variable (:type "face") nil [5869 5943])
            ("company-echo-common" variable
               (:default-value (quote ((((background dark)) (:foreground "firebrick1")) (((background light)) (:background "firebrick4"))))
                :type "face")
                nil [5945 6149])
            ("company-frontends-set" function (:arguments ("variable" "value")) nil [6151 7684])
            ("company-frontends" variable (:default-value (quote (company-pseudo-tooltip-unless-just-one-frontend company-preview-if-just-one-frontend company-echo-metadata-frontend))) nil [7686 9701])
            ("company-tooltip-limit" variable (:default-value 10) nil [9703 9809])
            ("company-tooltip-minimum" variable (:default-value 6) nil [9811 9979])
            ("company-tooltip-minimum-width" variable nil nil [9981 10185])
            ("company-tooltip-margin" variable (:default-value 1) nil [10187 10295])
            ("company-tooltip-offset-display" variable (:default-value (quote scrollbar)) nil [10297 10651])
            ("company-tooltip-align-annotations" variable nil nil [10653 10824])
            ("company-tooltip-flip-when-above" variable nil nil [10826 10996])
            ("company-safe-backends" variable (:default-value (quote ((company-abbrev . "Abbrev") (company-bbdb . "BBDB") (company-capf . "completion-at-point-functions") (company-clang . "Clang") (company-cmake . "CMake") (company-css . "CSS") (company-dabbrev . "dabbrev for plain text") (company-dabbrev-code . "dabbrev for code") (company-eclim . "Eclim (an Eclipse interface)") (company-elisp . "Emacs Lisp") (company-etags . "etags") (company-files . "Files") (company-gtags . "GNU Global") (company-ispell . "Ispell") (company-keywords . "Programming language keywords") (company-nxml . "nxml") (company-oddmuse . "Oddmuse") (company-semantic . "Semantic") (company-tempo . "Tempo templates") (company-xcode . "Xcode")))) nil [10998 11765])
            ("put" code nil nil [11766 11818])
            ("company-safe-backends-p" function (:arguments ("backends")) nil [11820 12126])
            ("company-backends" variable (:default-value (\` ((\,@ (unless (version< "24.3.51" emacs-version) (list (quote company-elisp)))) company-bbdb company-nxml company-css company-eclim company-semantic company-clang company-xcode company-cmake company-capf company-files (company-dabbrev-code company-gtags company-etags company-keywords) company-oddmuse company-dabbrev))) nil [12128 19023])
            ("put" code nil nil [19025 19094])
            ("company-transformers" variable nil nil [19096 19753])
            ("company-completion-started-hook" variable nil nil [19755 19954])
            ("company-completion-cancelled-hook" variable nil nil [19956 20158])
            ("company-completion-finished-hook" variable nil nil [20160 20466])
            ("company-minimum-prefix-length" variable (:default-value 3) nil [20468 20602])
            ("company-abort-manual-when-too-short" variable nil nil [20604 20886])
            ("company-require-match" variable (:default-value (quote company-explicit-action-p)) nil [20888 21448])
            ("company-auto-complete" variable nil nil [21450 21930])
            ("company-auto-complete-chars" variable (:default-value (quote (32 41 46))) nil [21932 23421])
            ("company-idle-delay" variable (:default-value 0.5) nil [23423 23792])
            ("company-tooltip-idle-delay" variable (:default-value 0.5) nil [23794 24099])
            ("company-begin-commands" variable (:default-value (quote (self-insert-command org-self-insert-command orgtbl-self-insert-command c-scope-operator c-electric-colon c-electric-lt-gt c-electric-slash))) nil [24101 24996])
            ("company-continue-commands" variable (:default-value (quote (not save-buffer save-some-buffers save-buffers-kill-terminal save-buffers-kill-emacs))) nil [24998 25850])
            ("company-show-numbers" variable nil nil [25852 26038])
            ("company-selection-wrap-around" variable nil nil [26040 26235])
            ("company-async-wait" variable (:default-value 0.03) nil [26237 26377])
            ("company-async-timeout" variable (:default-value 2) nil [26379 26481])
            ("company-mode-map" variable (:default-value (make-sparse-keymap)) nil [26565 26646])
            ("company-active-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap "" (quote company-abort)) (define-key keymap "" (quote company-abort)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap [remap scroll-up-command] (quote company-next-page)) (define-key keymap [remap scroll-down-command] (quote company-previous-page)) (define-key keymap [down-mouse-1] (quote ignore)) (define-key keymap [down-mouse-3] (quote ignore)) (define-key keymap [mouse-1] (quote company-complete-mouse)) (define-key keymap [mouse-3] (quote company-select-mouse)) (define-key keymap [up-mouse-1] (quote ignore)) (define-key keymap [up-mouse-3] (quote ignore)) (define-key keymap [return] (quote company-complete-selection)) (define-key keymap (kbd "RET") (quote company-complete-selection)) (define-key keymap [tab] (quote company-complete-common)) (define-key keymap (kbd "TAB") (quote company-complete-common)) (define-key keymap (kbd "<f1>") (quote company-show-doc-buffer)) (define-key keymap (kbd "C-h") (quote company-show-doc-buffer)) (define-key keymap "" (quote company-show-location)) (define-key keymap "" (quote company-search-candidates)) (define-key keymap "\223" (quote company-filter-candidates)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [26648 28221])
            ("company--disabled-backends" variable nil nil [28223 28262])
            ("company-init-backend" function (:arguments ("backend")) nil [28264 29038])
            ("company--maybe-init-backend" function (:arguments ("backend")) nil [29040 29239])
            ("company-lighter-base" variable (:default-value "company") nil [29241 29395])
            ("company-lighter" variable (:default-value (quote (" " (company-candidates (:eval (if (consp company-backend) (company--group-lighter (nth company-selection company-candidates) company-lighter-base) (symbol-name company-backend))) company-lighter-base)))) nil [29397 30026])
            ("put" code nil nil [30028 30074])
            ("define-minor-mode" code nil nil [30091 31636])
            ("company-global-modes" variable (:default-value t) nil [31638 32497])
            ("define-globalized-minor-mode" code nil nil [32514 32593])
            ("company-mode-on" function nil nil [32595 32983])
            ("company-assert-enabled" function nil nil [32985 33112])
            ("defvar-local" code nil nil [33196 33232])
            ("company-emulation-alist" variable (:default-value (quote ((t)))) nil [33234 33279])
            ("company-enable-overriding-keymap" function (:arguments ("keymap")) nil [33281 33393])
            ("company-ensure-emulation-alist" function nil nil [33395 33662])
            ("company-install-map" function nil nil [33664 33840])
            ("company-uninstall-map" function nil nil [33842 33918])
            ("company-ignore" function nil nil [34144 34220])
            ("global-set-key" code nil nil [34222 34277])
            ("company-input-noop" function nil nil [34279 34360])
            ("company--posn-col-row" function (:arguments ("posn")) nil [34362 34927])
            ("company--col-row" function (:arguments ("pos")) nil [34929 35015])
            ("company--row" function (:arguments ("pos")) nil [35017 35084])
            ("defvar-local" code nil nil [35168 35202])
            ("company-grab" function (:arguments ("regexp" "expression" "limit")) nil [35204 35356])
            ("company-grab-line" function (:arguments ("regexp" "expression")) nil [35358 35721])
            ("company-grab-symbol" function nil nil [35723 36117])
            ("company-grab-word" function nil nil [36119 36499])
            ("company-grab-symbol-cons" function (:arguments ("idle-begin-after-re" "max-len")) nil [36501 37131])
            ("company-in-string-or-comment" function nil nil [37133 37363])
            ("company-call-backend" function (:arguments ("args")) nil [37365 37478])
            ("company--force-sync" function (:arguments ("fun" "args" "backend")) nil [37480 38028])
            ("company-call-backend-raw" function (:arguments ("args")) nil [38030 38537])
            ("company--multi-backend-adapter" function (:arguments ("backends" "command" "args")) nil [38539 39711])
            ("company--multi-backend-adapter-candidates" function (:arguments ("backends" "prefix" "separate")) nil [39713 40620])
            ("company--multi-candidates-mapper" function (:arguments ("backend" "separate" "tag")) nil [40622 41037])
            ("company--merge-async" function (:arguments ("pairs" "merger")) nil [41039 42356])
            ("company--prefix-str" function (:arguments ("prefix")) nil [42358 42426])
            ("defvar-local" code nil nil [42510 42543])
            ("defvar-local" code nil nil [42545 42582])
            ("defvar-local" code nil nil [42584 42628])
            ("defvar-local" code nil nil [42630 42673])
            ("defvar-local" code nil nil [42675 42722])
            ("defvar-local" code nil nil [42724 42757])
            ("defvar-local" code nil nil [42759 42793])
            ("defvar-local" code nil nil [42795 42839])
            ("defvar-local" code nil nil [42841 42928])
            ("defvar-local" code nil nil [42930 42971])
            ("company--auto-completion" variable nil nil [42973 43117])
            ("defvar-local" code nil nil [43119 43156])
            ("defvar-local" code nil nil [43158 43190])
            ("company-timer" variable nil nil [43192 43218])
            ("company-tooltip-timer" variable nil nil [43219 43253])
            ("company-strip-prefix" function (:arguments ("str")) nil [43255 43334])
            ("company--insert-candidate" function (:arguments ("candidate")) nil [43336 43789])
            ("company-with-candidate-inserted" function (:arguments ("candidate" "body")) nil [43791 44338])
            ("company-explicit-action-p" function nil nil [44340 44507])
            ("company-reformat" function (:arguments ("candidate")) nil [44509 44896])
            ("company--should-complete" function nil nil [44898 45305])
            ("company--should-continue" function nil nil [45307 45769])
            ("company-call-frontends" function (:arguments ("command")) nil [45771 46060])
            ("company-set-selection" function (:arguments ("selection" "force-update")) nil [46062 46490])
            ("company--group-lighter" function (:arguments ("candidate" "base")) nil [46492 46949])
            ("company-update-candidates" function (:arguments ("candidates")) nil [46951 48538])
            ("company-calculate-candidates" function (:arguments ("prefix")) nil [48540 49846])
            ("company--fetch-candidates" function (:arguments ("prefix")) nil [49848 51267])
            ("company--preprocess-candidates" function (:arguments ("candidates")) nil [51269 51557])
            ("company--postprocess-candidates" function (:arguments ("candidates")) nil [51559 51888])
            ("company--strip-duplicates" function (:arguments ("candidates")) nil [51890 52806])
            ("company--transform-candidates" function (:arguments ("candidates")) nil [52808 52958])
            ("company-occurrence-weight-function" variable (:default-value (function company-occurrence-prefer-closest-above)) nil [52960 53452])
            ("company-occurrence-prefer-closest-above" function (:arguments ("pos" "match-beg" "match-end")) nil [53454 53679])
            ("company-occurrence-prefer-any-closest" function (:arguments ("pos" "_match-beg" "match-end")) nil [53681 53834])
            ("company-sort-by-occurrence" function (:arguments ("candidates")) nil [53836 55221])
            ("company--occurrence-predicate" function nil nil [55223 55728])
            ("company-sort-by-backend-importance" function (:arguments ("candidates")) nil [55730 56552])
            ("company-sort-prefer-same-case-prefix" function (:arguments ("candidates")) nil [56554 57030])
            ("company-idle-begin" function (:arguments ("buf" "win" "tick" "pos")) nil [57032 57366])
            ("company-auto-begin" function nil nil [57368 57869])
            ("company-manual-begin" function nil nil [57886 58198])
            ("company-other-backend" function (:arguments ("backward")) nil [58200 58869])
            ("company-require-match-p" function nil nil [58871 59190])
            ("company-auto-complete-p" function (:arguments ("input")) nil [59192 59790])
            ("company--incremental-p" function nil nil [59792 60114])
            ("company--continue-failed" function (:arguments ("new-prefix")) nil [60116 61205])
            ("company--good-prefix-p" function (:arguments ("prefix")) nil [61207 61774])
            ("company--continue" function nil nil [61776 62853])
            ("company--begin-new" function nil nil [62855 64262])
            ("company--perform" function nil nil [64264 64674])
            ("company-cancel" function (:arguments ("result")) nil [64676 65964])
            ("company-abort" function nil nil [65966 66032])
            ("company-finish" function (:arguments ("result")) nil [66034 66128])
            ("company-keep" function (:arguments ("command")) nil [66130 66217])
            ("company-pre-command" function nil nil [66219 66823])
            ("company-post-command" function nil nil [66825 68251])
            ("company--idle-delay" function nil nil [68253 68362])
            ("company--begin-inhibit-commands" variable (:default-value (quote (company-abort company-complete-mouse company-complete company-complete-common company-complete-selection company-complete-number))) nil [68364 68851])
            ("company--should-begin" function nil nil [68853 69111])
            ("company-search-regexp-function" variable (:default-value (function regexp-quote)) nil [69195 69895])
            ("defvar-local" code nil nil [69897 69936])
            ("company-search-lighter" variable (:default-value (quote (" " (company-search-filtering "Filter" "Search") ": \"" company-search-string "\""))) nil [69938 70187])
            ("defvar-local" code nil nil [70189 70301])
            ("defvar-local" code nil nil [70303 70349])
            ("defvar-local" code nil nil [70351 70397])
            ("company-search-words-regexp" function (:arguments ("input")) nil [70399 70558])
            ("company-search-words-in-any-order-regexp" function (:arguments ("input")) nil [70560 70939])
            ("company-search-flex-regexp" function (:arguments ("input")) nil [70941 71271])
            ("company--permutations" function (:arguments ("lst")) nil [71273 71493])
            ("company--search" function (:arguments ("text" "lines")) nil [71495 71737])
            ("company-search-keypad" function nil nil [71739 71934])
            ("company-search-printing-char" function nil nil [71936 72219])
            ("company--search-update-predicate" function (:arguments ("ss")) nil [72221 72643])
            ("company--search-update-string" function (:arguments ("new")) nil [72645 72905])
            ("company--search-assert-input" function nil nil [72907 73064])
            ("company-search-repeat-forward" function (:user-visible-flag t) nil [73066 73499])
            ("company-search-repeat-backward" function (:user-visible-flag t) nil [73501 74007])
            ("company-search-toggle-filtering" function (:user-visible-flag t) nil [74009 74324])
            ("company-search-abort" function (:user-visible-flag t) nil [74326 74602])
            ("company-search-other-char" function nil nil [74604 74748])
            ("company-search-delete-char" function nil nil [74750 75074])
            ("company-search-map" variable (:default-value (let ((i 0) (keymap (make-keymap))) (if (fboundp (quote max-char)) (set-char-table-range (nth 1 keymap) (cons 256 (max-char)) (quote company-search-printing-char)) (with-no-warnings (let ((l (generic-character-list)) (table (nth 1 keymap))) (while l (set-char-table-default table (car l) (quote company-search-printing-char)) (setq l (cdr l)))))) (define-key keymap [t] (quote company-search-other-char)) (while (< i 32) (define-key keymap (make-string 1 i) (quote company-search-other-char)) (cl-incf i)) (while (< i 256) (define-key keymap (vector i) (quote company-search-printing-char)) (cl-incf i)) (dotimes (i 10) (define-key keymap (read (format "[kp-%s]" i)) (quote company-search-keypad))) (let ((meta-map (make-sparse-keymap))) (define-key keymap (char-to-string meta-prefix-char) meta-map) (define-key keymap [escape] meta-map)) (define-key keymap (vector meta-prefix-char t) (quote company-search-other-char)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap "" (quote company-search-other-char)) (define-key keymap [escape escape escape] (quote company-search-other-char)) (define-key keymap (kbd "DEL") (quote company-search-delete-char)) (define-key keymap [backspace] (quote company-search-delete-char)) (define-key keymap "" (quote company-search-abort)) (define-key keymap "" (quote company-search-repeat-forward)) (define-key keymap "" (quote company-search-repeat-backward)) (define-key keymap "" (quote company-search-toggle-filtering)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [75076 77136])
            ("define-minor-mode" code nil nil [77138 78093])
            ("company--search-assert-enabled" function nil nil [78095 78268])
            ("company-search-candidates" function (:user-visible-flag t) nil [78270 79033])
            ("company-filter-map" variable (:default-value (let ((keymap (make-keymap))) (define-key keymap [remap company-search-printing-char] (quote company-filter-printing-char)) (set-keymap-parent keymap company-search-map) keymap)) nil [79035 79324])
            ("company-filter-candidates" function (:user-visible-flag t) nil [79326 79615])
            ("company-select-next" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79699 79937])
            ("company-select-previous" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79939 80136])
            ("company-select-next-or-abort" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [80138 80463])
            ("company-select-previous-or-abort" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [80465 80802])
            ("company-next-page" function (:user-visible-flag t) nil [80804 81222])
            ("company-previous-page" function (:user-visible-flag t) nil [81224 81648])
            ("company-pseudo-tooltip-overlay" variable nil nil [81650 81689])
            ("company-tooltip-offset" variable nil nil [81691 81722])
            ("company--inside-tooltip-p" function (:arguments ("event-col-row" "row" "height")) nil [81724 82266])
            ("company--event-col-row" function (:arguments ("event")) nil [82268 82352])
            ("company-select-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [82354 83532])
            ("company-complete-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [83534 83709])
            ("company-complete-selection" function (:user-visible-flag t) nil [83711 83925])
            ("company-complete-common" function (:user-visible-flag t) nil [83927 84248])
            ("company-complete-common-or-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [84250 84760])
            ("company-indent-or-complete-common" function (:user-visible-flag t) nil [84762 85388])
            ("company-select-next-if-tooltip-visible-or-complete-selection" function (:user-visible-flag t) nil [85390 85822])
            ("company-complete" function (:user-visible-flag t) nil [85839 86393])
            ("company-complete-number" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [86395 87406])
            ("company-space-strings-limit" variable
               (:constant-flag t
                :default-value 100)
                nil [87490 87532])
            ("company-space-strings" variable
               (:constant-flag t
                :default-value (let (lst) (dotimes (i company-space-strings-limit) (push (make-string (- company-space-strings-limit 1 i) 32) lst)) (apply (quote vector) lst)))
                nil [87534 87722])
            ("company-space-string" function (:arguments ("len")) nil [87724 87866])
            ("company-safe-substring" function (:arguments ("str" "from" "to")) nil [87868 88399])
            ("defvar-local" code nil nil [88483 88523])
            ("company-fetch-metadata" function nil nil [88525 88810])
            ("company-doc-buffer" function (:arguments ("string")) nil [88812 89032])
            ("company--electric-saved-window-configuration" variable nil nil [89034 89091])
            ("company--electric-commands" variable (:default-value (quote (scroll-other-window scroll-other-window-down mwheel-scroll))) nil [89093 89256])
            ("company--electric-restore-window-configuration" function nil nil [89258 89637])
            ("company--electric-do" function (:arguments ("body")) nil [89639 90143])
            ("company--unread-last-input" function nil nil [90145 90297])
            ("company-show-doc-buffer" function (:user-visible-flag t) nil [90299 91010])
            ("put" code nil nil [91011 91057])
            ("company-show-location" function (:user-visible-flag t) nil [91059 91953])
            ("put" code nil nil [91954 91998])
            ("defvar-local" code nil nil [92082 92117])
            ("company-remove-callback" function (:arguments ("ignored")) nil [92119 92394])
            ("company-begin-backend" function
               (:user-visible-flag t
                :arguments ("backend" "callback"))
                nil [92396 93167])
            ("company-begin-with" function (:arguments ("candidates" "prefix-length" "require-match" "callback")) nil [93169 94077])
            ("declare-function" code nil nil [94079 94127])
            ("declare-function" code nil nil [94128 94168])
            ("company-version" function
               (:user-visible-flag t
                :arguments ("show-version"))
                nil [94170 94567])
            ("company-diag" function (:user-visible-flag t) nil [94569 96097])
            ("defvar-local" code nil nil [96181 96230])
            ("defvar-local" code nil nil [96232 96271])
            ("company-tooltip--lines-update-offset" function (:arguments ("selection" "num-lines" "limit")) nil [96273 96857])
            ("company-tooltip--simple-update-offset" function (:arguments ("selection" "_num-lines" "limit")) nil [96859 97114])
            ("company-round-tab" function (:arguments ("arg")) nil [97132 97214])
            ("company-plainify" function (:arguments ("str")) nil [97216 97743])
            ("company-fill-propertize" function (:arguments ("value" "annotation" "width" "selected" "left" "right")) nil [97745 101292])
            ("company--search-chunks" function nil nil [101294 101562])
            ("company--pre-render" function (:arguments ("str" "annotation-p")) nil [101564 102064])
            ("company--clean-string" function (:arguments ("str")) nil [102066 102603])
            ("company-buffer-lines" function (:arguments ("beg" "end")) nil [102618 103617])
            ("company-modify-line" function (:arguments ("old" "new" "offset")) nil [103619 103789])
            ("company--length-limit" function (:arguments ("lst" "limit")) nil [103791 103890])
            ("company--window-height" function nil nil [103892 104027])
            ("company--window-width" function nil nil [104029 104868])
            ("company--replacement-string" function (:arguments ("lines" "old" "column" "nl" "align-top")) nil [104870 106222])
            ("company--offset-line" function (:arguments ("line" "offset")) nil [106224 106330])
            ("company--create-lines" function (:arguments ("selection" "limit")) nil [106332 109966])
            ("company--scrollbar-bounds" function (:arguments ("offset" "limit" "length")) nil [109968 110231])
            ("company--scrollbar" function (:arguments ("i" "bounds")) nil [110233 110438])
            ("company--scrollpos-line" function (:arguments ("text" "width")) nil [110440 110719])
            ("company--pseudo-tooltip-height" function nil nil [110730 111191])
            ("company-pseudo-tooltip-show" function (:arguments ("row" "column" "selection")) nil [111193 112335])
            ("company-pseudo-tooltip-show-at-point" function (:arguments ("pos" "column-offset")) nil [112337 112601])
            ("company-pseudo-tooltip-edit" function (:arguments ("selection")) nil [112603 113186])
            ("company-pseudo-tooltip-hide" function nil nil [113188 113364])
            ("company-pseudo-tooltip-hide-temporarily" function nil nil [113366 113726])
            ("company-pseudo-tooltip-unhide" function nil nil [113728 114456])
            ("company-pseudo-tooltip-guard" function nil nil [114458 114899])
            ("company-pseudo-tooltip-frontend" function (:arguments ("command")) nil [114901 116082])
            ("company-pseudo-tooltip-unless-just-one-frontend" function (:arguments ("command")) nil [116084 116355])
            ("company-pseudo-tooltip-unless-just-one-frontend-with-delay" function (:arguments ("command")) nil [116357 117448])
            ("defvar-local" code nil nil [117532 117574])
            ("company-preview-show-at-point" function (:arguments ("pos" "completion")) nil [117576 119419])
            ("company-preview-hide" function nil nil [119421 119569])
            ("company-preview-frontend" function (:arguments ("command")) nil [119571 119939])
            ("company-preview-if-just-one-frontend" function (:arguments ("command")) nil [119941 120188])
            ("company--show-inline-p" function nil nil [120190 120409])
            ("company-tooltip-visible-p" function nil nil [120411 120608])
            ("company-preview-common--show-p" function nil nil [120610 120862])
            ("company-preview-common-frontend" function (:arguments ("command")) nil [120864 121250])
            ("defvar-local" code nil nil [121334 121374])
            ("company-echo-timer" variable nil nil [121376 121407])
            ("company-echo-delay" variable (:default-value 0.01) nil [121409 121440])
            ("company-echo-show" function (:arguments ("getter")) nil [121442 121679])
            ("company-echo-show-soon" function (:arguments ("getter")) nil [121681 121831])
            ("company-echo-cancel" function (:arguments ("unset")) nil [121833 121993])
            ("company-echo-show-when-idle" function (:arguments ("getter")) nil [121995 122180])
            ("company-echo-format" function nil nil [122182 123250])
            ("company-echo-strip-common-format" function nil nil [123252 124089])
            ("company-echo-hide" function nil nil [124091 124223])
            ("company-echo-frontend" function (:arguments ("command")) nil [124225 124449])
            ("company-echo-strip-common-frontend" function (:arguments ("command")) nil [124451 124701])
            ("company-echo-metadata-frontend" function (:arguments ("command")) nil [124703 124947])
            ("company" package nil nil [124949 124967]))          
      :file "company.el"
      :pointmax 124993
      :fsize 124992
      :lastmodtime '(22659 32863 0 0)
      :unmatched-syntax '((close-paren 2965 . 2966) (symbol 2450 . 2466) (open-paren 2449 . 2450))))
  :file "!Users!bing!.emacs.d!elpa!company-20170112.2005!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
